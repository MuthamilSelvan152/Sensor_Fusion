
Complementary_Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  0800af98  0800af98  0001af98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7d4  0800b7d4  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7d4  0800b7d4  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7d4  0800b7d4  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7d4  0800b7d4  0001b7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7d8  0800b7d8  0001b7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800b7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020354  2**0
                  CONTENTS
 10 .bss          0000030c  20000354  20000354  00020354  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000660  20000660  00020354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8e6  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd7  00000000  00000000  0003ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  0003e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  0003fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f2d  00000000  00000000  00040980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001892a  00000000  00000000  000618ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9635  00000000  00000000  0007a1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013380c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055c8  00000000  00000000  00133860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af7c 	.word	0x0800af7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800af7c 	.word	0x0800af7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000c56:	f001 fa6f 	bl	8002138 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 faab 	bl	80021c4 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000c78:	f107 030f 	add.w	r3, r7, #15
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2123      	movs	r1, #35	; 0x23
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fa9f 	bl	80021c4 <GYRO_IO_Write>
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ca2:	f001 fa49 	bl	8002138 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	210f      	movs	r1, #15
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fabb 	bl	8002228 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2124      	movs	r1, #36	; 0x24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 faad 	bl	8002228 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2124      	movs	r1, #36	; 0x24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fa70 	bl	80021c4 <GYRO_IO_Write>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000d00:	f107 030f 	add.w	r3, r7, #15
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fa5b 	bl	80021c4 <GYRO_IO_Write>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000d28:	f107 030f 	add.w	r3, r7, #15
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2130      	movs	r1, #48	; 0x30
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fa79 	bl	8002228 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d36:	f107 030e 	add.w	r3, r7, #14
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2122      	movs	r1, #34	; 0x22
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fa72 	bl	8002228 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	121b      	asrs	r3, r3, #8
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000d62:	7bbb      	ldrb	r3, [r7, #14]
 8000d64:	f023 0320 	bic.w	r3, r3, #32
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000d78:	f107 030f 	add.w	r3, r7, #15
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2130      	movs	r1, #48	; 0x30
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 fa1f 	bl	80021c4 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d86:	f107 030e 	add.w	r3, r7, #14
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2122      	movs	r1, #34	; 0x22
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fa18 	bl	80021c4 <GYRO_IO_Write>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000da6:	f107 030f 	add.w	r3, r7, #15
 8000daa:	2201      	movs	r2, #1
 8000dac:	2122      	movs	r1, #34	; 0x22
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fa3a 	bl	8002228 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10a      	bne.n	8000dd0 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e00c      	b.n	8000dea <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d109      	bne.n	8000dea <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	f023 0308 	bic.w	r3, r3, #8
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000dea:	f107 030f 	add.w	r3, r7, #15
 8000dee:	2201      	movs	r2, #1
 8000df0:	2122      	movs	r1, #34	; 0x22
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 f9e6 	bl	80021c4 <GYRO_IO_Write>
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000e0a:	f107 030f 	add.w	r3, r7, #15
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2122      	movs	r1, #34	; 0x22
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fa08 	bl	8002228 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d107      	bne.n	8000e2e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e009      	b.n	8000e42 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	f023 0308 	bic.w	r3, r3, #8
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000e42:	f107 030f 	add.w	r3, r7, #15
 8000e46:	2201      	movs	r2, #1
 8000e48:	2122      	movs	r1, #34	; 0x22
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 f9ba 	bl	80021c4 <GYRO_IO_Write>
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000e62:	f107 030f 	add.w	r3, r7, #15
 8000e66:	2201      	movs	r2, #1
 8000e68:	2121      	movs	r1, #33	; 0x21
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f9dc 	bl	8002228 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000e84:	f107 030f 	add.w	r3, r7, #15
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2121      	movs	r1, #33	; 0x21
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 f999 	bl	80021c4 <GYRO_IO_Write>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000ea4:	f107 030f 	add.w	r3, r7, #15
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2124      	movs	r1, #36	; 0x24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 f9bb 	bl	8002228 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f023 0310 	bic.w	r3, r3, #16
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000ec6:	f107 030f 	add.w	r3, r7, #15
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2124      	movs	r1, #36	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 f978 	bl	80021c4 <GYRO_IO_Write>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000f04:	f107 030f 	add.w	r3, r7, #15
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2123      	movs	r1, #35	; 0x23
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 f98b 	bl	8002228 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	2206      	movs	r2, #6
 8000f18:	2128      	movs	r1, #40	; 0x28
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f984 	bl	8002228 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d126      	bne.n	8000f78 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
 8000f2e:	e01f      	b.n	8000f70 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	3301      	adds	r3, #1
 8000f36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f4e:	440b      	add	r3, r1
 8000f50:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f64:	440b      	add	r3, r1
 8000f66:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	dddc      	ble.n	8000f30 <I3G4250D_ReadXYZAngRate+0x54>
 8000f76:	e025      	b.n	8000fc4 <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
 8000f7c:	e01f      	b.n	8000fbe <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f86:	4413      	add	r3, r2
 8000f88:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	3301      	adds	r3, #1
 8000f98:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	dddc      	ble.n	8000f7e <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fca:	2b20      	cmp	r3, #32
 8000fcc:	d00c      	beq.n	8000fe8 <I3G4250D_ReadXYZAngRate+0x10c>
 8000fce:	2b20      	cmp	r3, #32
 8000fd0:	dc0d      	bgt.n	8000fee <I3G4250D_ReadXYZAngRate+0x112>
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <I3G4250D_ReadXYZAngRate+0x100>
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d003      	beq.n	8000fe2 <I3G4250D_ReadXYZAngRate+0x106>
 8000fda:	e008      	b.n	8000fee <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <I3G4250D_ReadXYZAngRate+0x158>)
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000fe0:	e005      	b.n	8000fee <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <I3G4250D_ReadXYZAngRate+0x15c>)
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000fe6:	e002      	b.n	8000fee <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <I3G4250D_ReadXYZAngRate+0x160>)
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000fec:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
 8000ff2:	e017      	b.n	8001024 <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	3301      	adds	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	2b02      	cmp	r3, #2
 8001028:	dde4      	ble.n	8000ff4 <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	410c0000 	.word	0x410c0000
 8001038:	418c0000 	.word	0x418c0000
 800103c:	428c0000 	.word	0x428c0000

08001040 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800104e:	f001 f873 	bl	8002138 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001058:	f107 030f 	add.w	r3, r7, #15
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f8af 	bl	80021c4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001070:	f107 030f 	add.w	r3, r7, #15
 8001074:	2201      	movs	r2, #1
 8001076:	2123      	movs	r1, #35	; 0x23
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f8a3 	bl	80021c4 <GYRO_IO_Write>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800109a:	f001 f84d 	bl	8002138 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	2201      	movs	r2, #1
 80010a2:	210f      	movs	r1, #15
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 f8bf 	bl	8002228 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	2201      	movs	r2, #1
 80010be:	2124      	movs	r1, #36	; 0x24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f8b1 	bl	8002228 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	2201      	movs	r2, #1
 80010d4:	2124      	movs	r1, #36	; 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f874 	bl	80021c4 <GYRO_IO_Write>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80010f8:	f107 030f 	add.w	r3, r7, #15
 80010fc:	2201      	movs	r2, #1
 80010fe:	2120      	movs	r1, #32
 8001100:	4618      	mov	r0, r3
 8001102:	f001 f85f 	bl	80021c4 <GYRO_IO_Write>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001120:	f107 030f 	add.w	r3, r7, #15
 8001124:	2201      	movs	r2, #1
 8001126:	2130      	movs	r1, #48	; 0x30
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f87d 	bl	8002228 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800112e:	f107 030e 	add.w	r3, r7, #14
 8001132:	2201      	movs	r2, #1
 8001134:	2122      	movs	r1, #34	; 0x22
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f876 	bl	8002228 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	121b      	asrs	r3, r3, #8
 800114c:	b25a      	sxtb	r2, r3
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	b25b      	sxtb	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b25b      	sxtb	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	f023 0320 	bic.w	r3, r3, #32
 8001160:	b2db      	uxtb	r3, r3
 8001162:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	4313      	orrs	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	2201      	movs	r2, #1
 8001176:	2130      	movs	r1, #48	; 0x30
 8001178:	4618      	mov	r0, r3
 800117a:	f001 f823 	bl	80021c4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800117e:	f107 030e 	add.w	r3, r7, #14
 8001182:	2201      	movs	r2, #1
 8001184:	2122      	movs	r1, #34	; 0x22
 8001186:	4618      	mov	r0, r3
 8001188:	f001 f81c 	bl	80021c4 <GYRO_IO_Write>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	2201      	movs	r2, #1
 80011a4:	2122      	movs	r1, #34	; 0x22
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f83e 	bl	8002228 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10a      	bne.n	80011c8 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e00c      	b.n	80011e2 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d109      	bne.n	80011e2 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f023 0308 	bic.w	r3, r3, #8
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80011e2:	f107 030f 	add.w	r3, r7, #15
 80011e6:	2201      	movs	r2, #1
 80011e8:	2122      	movs	r1, #34	; 0x22
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 ffea 	bl	80021c4 <GYRO_IO_Write>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001202:	f107 030f 	add.w	r3, r7, #15
 8001206:	2201      	movs	r2, #1
 8001208:	2122      	movs	r1, #34	; 0x22
 800120a:	4618      	mov	r0, r3
 800120c:	f001 f80c 	bl	8002228 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d107      	bne.n	8001226 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800121c:	b2db      	uxtb	r3, r3
 800121e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e009      	b.n	800123a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d106      	bne.n	800123a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f023 0308 	bic.w	r3, r3, #8
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800123a:	f107 030f 	add.w	r3, r7, #15
 800123e:	2201      	movs	r2, #1
 8001240:	2122      	movs	r1, #34	; 0x22
 8001242:	4618      	mov	r0, r3
 8001244:	f000 ffbe 	bl	80021c4 <GYRO_IO_Write>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800125a:	f107 030f 	add.w	r3, r7, #15
 800125e:	2201      	movs	r2, #1
 8001260:	2121      	movs	r1, #33	; 0x21
 8001262:	4618      	mov	r0, r3
 8001264:	f000 ffe0 	bl	8002228 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126e:	b2db      	uxtb	r3, r3
 8001270:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4313      	orrs	r3, r2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800127c:	f107 030f 	add.w	r3, r7, #15
 8001280:	2201      	movs	r2, #1
 8001282:	2121      	movs	r1, #33	; 0x21
 8001284:	4618      	mov	r0, r3
 8001286:	f000 ff9d 	bl	80021c4 <GYRO_IO_Write>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800129c:	f107 030f 	add.w	r3, r7, #15
 80012a0:	2201      	movs	r2, #1
 80012a2:	2124      	movs	r1, #36	; 0x24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 ffbf 	bl	8002228 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	f023 0310 	bic.w	r3, r3, #16
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80012be:	f107 030f 	add.w	r3, r7, #15
 80012c2:	2201      	movs	r2, #1
 80012c4:	2124      	movs	r1, #36	; 0x24
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 ff7c 	bl	80021c4 <GYRO_IO_Write>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	2300      	movs	r3, #0
 80012e2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80012fc:	f107 030f 	add.w	r3, r7, #15
 8001300:	2201      	movs	r2, #1
 8001302:	2123      	movs	r1, #35	; 0x23
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ff8f 	bl	8002228 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2206      	movs	r2, #6
 8001310:	2128      	movs	r1, #40	; 0x28
 8001312:	4618      	mov	r0, r3
 8001314:	f000 ff88 	bl	8002228 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d126      	bne.n	8001370 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
 8001326:	e01f      	b.n	8001368 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	3301      	adds	r3, #1
 800132e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001332:	4413      	add	r3, r2
 8001334:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001338:	b29b      	uxth	r3, r3
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b29a      	uxth	r2, r3
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001346:	440b      	add	r3, r1
 8001348:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b29b      	uxth	r3, r3
 8001352:	b21a      	sxth	r2, r3
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800135c:	440b      	add	r3, r1
 800135e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	3301      	adds	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	2b02      	cmp	r3, #2
 800136c:	dddc      	ble.n	8001328 <L3GD20_ReadXYZAngRate+0x54>
 800136e:	e025      	b.n	80013bc <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	e01f      	b.n	80013b6 <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800137e:	4413      	add	r3, r2
 8001380:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001384:	b29b      	uxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b29a      	uxth	r2, r3
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	3301      	adds	r3, #1
 8001390:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001394:	440b      	add	r3, r1
 8001396:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013aa:	440b      	add	r3, r1
 80013ac:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	3301      	adds	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	dddc      	ble.n	8001376 <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d00c      	beq.n	80013e0 <L3GD20_ReadXYZAngRate+0x10c>
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	dc0d      	bgt.n	80013e6 <L3GD20_ReadXYZAngRate+0x112>
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <L3GD20_ReadXYZAngRate+0x100>
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d003      	beq.n	80013da <L3GD20_ReadXYZAngRate+0x106>
 80013d2:	e008      	b.n	80013e6 <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <L3GD20_ReadXYZAngRate+0x158>)
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80013d8:	e005      	b.n	80013e6 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <L3GD20_ReadXYZAngRate+0x15c>)
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80013de:	e002      	b.n	80013e6 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <L3GD20_ReadXYZAngRate+0x160>)
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80013e4:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	e017      	b.n	800141c <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013f4:	4413      	add	r3, r2
 80013f6:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001412:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	3301      	adds	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	2b02      	cmp	r3, #2
 8001420:	dde4      	ble.n	80013ec <L3GD20_ReadXYZAngRate+0x118>
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	410c0000 	.word	0x410c0000
 8001430:	418c0000 	.word	0x418c0000
 8001434:	428c0000 	.word	0x428c0000

08001438 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001446:	f000 ff29 	bl	800229c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	461a      	mov	r2, r3
 8001452:	2120      	movs	r1, #32
 8001454:	2032      	movs	r0, #50	; 0x32
 8001456:	f000 ff99 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	461a      	mov	r2, r3
 8001462:	2123      	movs	r1, #35	; 0x23
 8001464:	2032      	movs	r0, #50	; 0x32
 8001466:	f000 ff91 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800148a:	f000 ff07 	bl	800229c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800148e:	210f      	movs	r1, #15
 8001490:	2032      	movs	r0, #50	; 0x32
 8001492:	f000 ff8e 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800149a:	79fb      	ldrb	r3, [r7, #7]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80014aa:	2124      	movs	r1, #36	; 0x24
 80014ac:	2032      	movs	r0, #50	; 0x32
 80014ae:	f000 ff80 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014bc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	461a      	mov	r2, r3
 80014c2:	2124      	movs	r1, #36	; 0x24
 80014c4:	2032      	movs	r0, #50	; 0x32
 80014c6:	f000 ff61 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80014dc:	2121      	movs	r1, #33	; 0x21
 80014de:	2032      	movs	r0, #50	; 0x32
 80014e0:	f000 ff67 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	461a      	mov	r2, r3
 80014fc:	2121      	movs	r1, #33	; 0x21
 80014fe:	2032      	movs	r0, #50	; 0x32
 8001500:	f000 ff44 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001516:	2121      	movs	r1, #33	; 0x21
 8001518:	2032      	movs	r0, #50	; 0x32
 800151a:	f000 ff4a 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	f023 0308 	bic.w	r3, r3, #8
 8001528:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4313      	orrs	r3, r2
 8001530:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	461a      	mov	r2, r3
 8001536:	2121      	movs	r1, #33	; 0x21
 8001538:	2032      	movs	r0, #50	; 0x32
 800153a:	f000 ff27 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b088      	sub	sp, #32
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800154e:	2300      	movs	r3, #0
 8001550:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001556:	2301      	movs	r3, #1
 8001558:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800155a:	2123      	movs	r1, #35	; 0x23
 800155c:	2032      	movs	r0, #50	; 0x32
 800155e:	f000 ff28 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001562:	4603      	mov	r3, r0
 8001564:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001566:	2124      	movs	r1, #36	; 0x24
 8001568:	2032      	movs	r0, #50	; 0x32
 800156a:	f000 ff22 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 800156e:	4603      	mov	r3, r0
 8001570:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8001572:	2128      	movs	r1, #40	; 0x28
 8001574:	2032      	movs	r0, #50	; 0x32
 8001576:	f000 ff1c 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 800157a:	4603      	mov	r3, r0
 800157c:	b25b      	sxtb	r3, r3
 800157e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001580:	2129      	movs	r1, #41	; 0x29
 8001582:	2032      	movs	r0, #50	; 0x32
 8001584:	f000 ff15 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	b25b      	sxtb	r3, r3
 800158c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800158e:	212a      	movs	r1, #42	; 0x2a
 8001590:	2032      	movs	r0, #50	; 0x32
 8001592:	f000 ff0e 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001596:	4603      	mov	r3, r0
 8001598:	b25b      	sxtb	r3, r3
 800159a:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800159c:	212b      	movs	r1, #43	; 0x2b
 800159e:	2032      	movs	r0, #50	; 0x32
 80015a0:	f000 ff07 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	2032      	movs	r0, #50	; 0x32
 80015ae:	f000 ff00 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 80015b8:	212d      	movs	r1, #45	; 0x2d
 80015ba:	2032      	movs	r0, #50	; 0x32
 80015bc:	f000 fef9 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 80015c6:	7d3b      	ldrb	r3, [r7, #20]
 80015c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d126      	bne.n	800161e <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
 80015d4:	e01f      	b.n	8001616 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	3301      	adds	r3, #1
 80015dc:	f107 0220 	add.w	r2, r7, #32
 80015e0:	4413      	add	r3, r2
 80015e2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	f107 0120 	add.w	r1, r7, #32
 80015f4:	440b      	add	r3, r1
 80015f6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	7ffb      	ldrb	r3, [r7, #31]
 8001602:	b212      	sxth	r2, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	f107 0120 	add.w	r1, r7, #32
 800160a:	440b      	add	r3, r1
 800160c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001610:	7ffb      	ldrb	r3, [r7, #31]
 8001612:	3301      	adds	r3, #1
 8001614:	77fb      	strb	r3, [r7, #31]
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d9dc      	bls.n	80015d6 <LSM303AGR_AccReadXYZ+0x90>
 800161c:	e025      	b.n	800166a <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800161e:	2300      	movs	r3, #0
 8001620:	77fb      	strb	r3, [r7, #31]
 8001622:	e01f      	b.n	8001664 <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001624:	7ffb      	ldrb	r3, [r7, #31]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	f107 0220 	add.w	r2, r7, #32
 800162c:	4413      	add	r3, r2
 800162e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001632:	b29b      	uxth	r3, r3
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b29a      	uxth	r2, r3
 8001638:	7ffb      	ldrb	r3, [r7, #31]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	3301      	adds	r3, #1
 800163e:	f107 0120 	add.w	r1, r7, #32
 8001642:	440b      	add	r3, r1
 8001644:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4413      	add	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	7ffb      	ldrb	r3, [r7, #31]
 8001650:	b212      	sxth	r2, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	f107 0120 	add.w	r1, r7, #32
 8001658:	440b      	add	r3, r1
 800165a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800165e:	7ffb      	ldrb	r3, [r7, #31]
 8001660:	3301      	adds	r3, #1
 8001662:	77fb      	strb	r3, [r7, #31]
 8001664:	7ffb      	ldrb	r3, [r7, #31]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d9dc      	bls.n	8001624 <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800166a:	7d3b      	ldrb	r3, [r7, #20]
 800166c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001670:	2b30      	cmp	r3, #48	; 0x30
 8001672:	d013      	beq.n	800169c <LSM303AGR_AccReadXYZ+0x156>
 8001674:	2b30      	cmp	r3, #48	; 0x30
 8001676:	dc14      	bgt.n	80016a2 <LSM303AGR_AccReadXYZ+0x15c>
 8001678:	2b20      	cmp	r3, #32
 800167a:	d00c      	beq.n	8001696 <LSM303AGR_AccReadXYZ+0x150>
 800167c:	2b20      	cmp	r3, #32
 800167e:	dc10      	bgt.n	80016a2 <LSM303AGR_AccReadXYZ+0x15c>
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <LSM303AGR_AccReadXYZ+0x144>
 8001684:	2b10      	cmp	r3, #16
 8001686:	d003      	beq.n	8001690 <LSM303AGR_AccReadXYZ+0x14a>
 8001688:	e00b      	b.n	80016a2 <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800168a:	2301      	movs	r3, #1
 800168c:	77bb      	strb	r3, [r7, #30]
    break;
 800168e:	e008      	b.n	80016a2 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001690:	2302      	movs	r3, #2
 8001692:	77bb      	strb	r3, [r7, #30]
    break;
 8001694:	e005      	b.n	80016a2 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8001696:	2304      	movs	r3, #4
 8001698:	77bb      	strb	r3, [r7, #30]
    break;
 800169a:	e002      	b.n	80016a2 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800169c:	230c      	movs	r3, #12
 800169e:	77bb      	strb	r3, [r7, #30]
    break;
 80016a0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	77fb      	strb	r3, [r7, #31]
 80016a6:	e015      	b.n	80016d4 <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	f107 0220 	add.w	r2, r7, #32
 80016b0:	4413      	add	r3, r2
 80016b2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	7fbb      	ldrb	r3, [r7, #30]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	fb12 f303 	smulbb	r3, r2, r3
 80016c0:	b299      	uxth	r1, r3
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	b20a      	sxth	r2, r1
 80016cc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	3301      	adds	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9e6      	bls.n	80016a8 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80016f2:	2121      	movs	r1, #33	; 0x21
 80016f4:	2032      	movs	r0, #50	; 0x32
 80016f6:	f000 fe5c 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4313      	orrs	r3, r2
 800170c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	461a      	mov	r2, r3
 8001712:	2121      	movs	r1, #33	; 0x21
 8001714:	2032      	movs	r0, #50	; 0x32
 8001716:	f000 fe39 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001730:	2122      	movs	r1, #34	; 0x22
 8001732:	2032      	movs	r0, #50	; 0x32
 8001734:	f000 fe3d 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4313      	orrs	r3, r2
 8001742:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	461a      	mov	r2, r3
 8001748:	2122      	movs	r1, #34	; 0x22
 800174a:	2032      	movs	r0, #50	; 0x32
 800174c:	f000 fe1e 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001766:	2138      	movs	r1, #56	; 0x38
 8001768:	2032      	movs	r0, #50	; 0x32
 800176a:	f000 fe22 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	4313      	orrs	r3, r2
 8001778:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	461a      	mov	r2, r3
 800177e:	2138      	movs	r1, #56	; 0x38
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f000 fe03 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001786:	230a      	movs	r3, #10
 8001788:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	461a      	mov	r2, r3
 800178e:	213a      	movs	r1, #58	; 0x3a
 8001790:	2032      	movs	r0, #50	; 0x32
 8001792:	f000 fdfb 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001796:	2305      	movs	r3, #5
 8001798:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	461a      	mov	r2, r3
 800179e:	213b      	movs	r1, #59	; 0x3b
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f000 fdf3 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	461a      	mov	r2, r3
 80017aa:	213c      	movs	r1, #60	; 0x3c
 80017ac:	2032      	movs	r0, #50	; 0x32
 80017ae:	f000 fded 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80017b2:	2332      	movs	r3, #50	; 0x32
 80017b4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	461a      	mov	r2, r3
 80017ba:	213d      	movs	r1, #61	; 0x3d
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f000 fde5 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80017ce:	f000 fdaf 	bl	8002330 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 80017d2:	2080      	movs	r0, #128	; 0x80
 80017d4:	f7ff ffa5 	bl	8001722 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 80017d8:	2004      	movs	r0, #4
 80017da:	f7ff ff83 	bl	80016e4 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 80017de:	2010      	movs	r0, #16
 80017e0:	f7ff ffba 	bl	8001758 <LSM303AGR_AccClickITEnable>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80017f6:	f000 fd51 	bl	800229c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	461a      	mov	r2, r3
 8001802:	2120      	movs	r1, #32
 8001804:	2032      	movs	r0, #50	; 0x32
 8001806:	f000 fdc1 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	461a      	mov	r2, r3
 8001812:	2123      	movs	r1, #35	; 0x23
 8001814:	2032      	movs	r0, #50	; 0x32
 8001816:	f000 fdb9 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001836:	2300      	movs	r3, #0
 8001838:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800183a:	f000 fd2f 	bl	800229c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800183e:	210f      	movs	r1, #15
 8001840:	2032      	movs	r0, #50	; 0x32
 8001842:	f000 fdb6 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800184a:	79fb      	ldrb	r3, [r7, #7]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800185a:	2124      	movs	r1, #36	; 0x24
 800185c:	2032      	movs	r0, #50	; 0x32
 800185e:	f000 fda8 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800186c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	461a      	mov	r2, r3
 8001872:	2124      	movs	r1, #36	; 0x24
 8001874:	2032      	movs	r0, #50	; 0x32
 8001876:	f000 fd89 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800188c:	2121      	movs	r1, #33	; 0x21
 800188e:	2032      	movs	r0, #50	; 0x32
 8001890:	f000 fd8f 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	461a      	mov	r2, r3
 80018ac:	2121      	movs	r1, #33	; 0x21
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f000 fd6c 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80018c6:	2121      	movs	r1, #33	; 0x21
 80018c8:	2032      	movs	r0, #50	; 0x32
 80018ca:	f000 fd72 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f023 0308 	bic.w	r3, r3, #8
 80018d8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4313      	orrs	r3, r2
 80018e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	461a      	mov	r2, r3
 80018e6:	2121      	movs	r1, #33	; 0x21
 80018e8:	2032      	movs	r0, #50	; 0x32
 80018ea:	f000 fd4f 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b088      	sub	sp, #32
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80018fe:	2300      	movs	r3, #0
 8001900:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001906:	2301      	movs	r3, #1
 8001908:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800190a:	2123      	movs	r1, #35	; 0x23
 800190c:	2032      	movs	r0, #50	; 0x32
 800190e:	f000 fd50 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001912:	4603      	mov	r3, r0
 8001914:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001916:	2124      	movs	r1, #36	; 0x24
 8001918:	2032      	movs	r0, #50	; 0x32
 800191a:	f000 fd4a 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 800191e:	4603      	mov	r3, r0
 8001920:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001922:	2128      	movs	r1, #40	; 0x28
 8001924:	2032      	movs	r0, #50	; 0x32
 8001926:	f000 fd44 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 800192a:	4603      	mov	r3, r0
 800192c:	b25b      	sxtb	r3, r3
 800192e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001930:	2129      	movs	r1, #41	; 0x29
 8001932:	2032      	movs	r0, #50	; 0x32
 8001934:	f000 fd3d 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001938:	4603      	mov	r3, r0
 800193a:	b25b      	sxtb	r3, r3
 800193c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800193e:	212a      	movs	r1, #42	; 0x2a
 8001940:	2032      	movs	r0, #50	; 0x32
 8001942:	f000 fd36 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001946:	4603      	mov	r3, r0
 8001948:	b25b      	sxtb	r3, r3
 800194a:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800194c:	212b      	movs	r1, #43	; 0x2b
 800194e:	2032      	movs	r0, #50	; 0x32
 8001950:	f000 fd2f 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001954:	4603      	mov	r3, r0
 8001956:	b25b      	sxtb	r3, r3
 8001958:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	2032      	movs	r0, #50	; 0x32
 800195e:	f000 fd28 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001962:	4603      	mov	r3, r0
 8001964:	b25b      	sxtb	r3, r3
 8001966:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001968:	212d      	movs	r1, #45	; 0x2d
 800196a:	2032      	movs	r0, #50	; 0x32
 800196c:	f000 fd21 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001970:	4603      	mov	r3, r0
 8001972:	b25b      	sxtb	r3, r3
 8001974:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001976:	7d3b      	ldrb	r3, [r7, #20]
 8001978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d126      	bne.n	80019ce <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
 8001984:	e01f      	b.n	80019c6 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	3301      	adds	r3, #1
 800198c:	f107 0220 	add.w	r2, r7, #32
 8001990:	4413      	add	r3, r2
 8001992:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001996:	b29b      	uxth	r3, r3
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	b29a      	uxth	r2, r3
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	f107 0120 	add.w	r1, r7, #32
 80019a4:	440b      	add	r3, r1
 80019a6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	b212      	sxth	r2, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	f107 0120 	add.w	r1, r7, #32
 80019ba:	440b      	add	r3, r1
 80019bc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80019c0:	7ffb      	ldrb	r3, [r7, #31]
 80019c2:	3301      	adds	r3, #1
 80019c4:	77fb      	strb	r3, [r7, #31]
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d9dc      	bls.n	8001986 <LSM303DLHC_AccReadXYZ+0x90>
 80019cc:	e025      	b.n	8001a1a <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	77fb      	strb	r3, [r7, #31]
 80019d2:	e01f      	b.n	8001a14 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80019d4:	7ffb      	ldrb	r3, [r7, #31]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	f107 0220 	add.w	r2, r7, #32
 80019dc:	4413      	add	r3, r2
 80019de:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	7ffb      	ldrb	r3, [r7, #31]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	3301      	adds	r3, #1
 80019ee:	f107 0120 	add.w	r1, r7, #32
 80019f2:	440b      	add	r3, r1
 80019f4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	7ffb      	ldrb	r3, [r7, #31]
 8001a00:	b212      	sxth	r2, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	f107 0120 	add.w	r1, r7, #32
 8001a08:	440b      	add	r3, r1
 8001a0a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	3301      	adds	r3, #1
 8001a12:	77fb      	strb	r3, [r7, #31]
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d9dc      	bls.n	80019d4 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001a1a:	7d3b      	ldrb	r3, [r7, #20]
 8001a1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a20:	2b30      	cmp	r3, #48	; 0x30
 8001a22:	d013      	beq.n	8001a4c <LSM303DLHC_AccReadXYZ+0x156>
 8001a24:	2b30      	cmp	r3, #48	; 0x30
 8001a26:	dc14      	bgt.n	8001a52 <LSM303DLHC_AccReadXYZ+0x15c>
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d00c      	beq.n	8001a46 <LSM303DLHC_AccReadXYZ+0x150>
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	dc10      	bgt.n	8001a52 <LSM303DLHC_AccReadXYZ+0x15c>
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <LSM303DLHC_AccReadXYZ+0x144>
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d003      	beq.n	8001a40 <LSM303DLHC_AccReadXYZ+0x14a>
 8001a38:	e00b      	b.n	8001a52 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	77bb      	strb	r3, [r7, #30]
    break;
 8001a3e:	e008      	b.n	8001a52 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001a40:	2302      	movs	r3, #2
 8001a42:	77bb      	strb	r3, [r7, #30]
    break;
 8001a44:	e005      	b.n	8001a52 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001a46:	2304      	movs	r3, #4
 8001a48:	77bb      	strb	r3, [r7, #30]
    break;
 8001a4a:	e002      	b.n	8001a52 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	77bb      	strb	r3, [r7, #30]
    break;
 8001a50:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	77fb      	strb	r3, [r7, #31]
 8001a56:	e015      	b.n	8001a84 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001a58:	7ffb      	ldrb	r3, [r7, #31]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	f107 0220 	add.w	r2, r7, #32
 8001a60:	4413      	add	r3, r2
 8001a62:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	7fbb      	ldrb	r3, [r7, #30]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	fb12 f303 	smulbb	r3, r2, r3
 8001a70:	b299      	uxth	r1, r3
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	b20a      	sxth	r2, r1
 8001a7c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	3301      	adds	r3, #1
 8001a82:	77fb      	strb	r3, [r7, #31]
 8001a84:	7ffb      	ldrb	r3, [r7, #31]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d9e6      	bls.n	8001a58 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001aa2:	2121      	movs	r1, #33	; 0x21
 8001aa4:	2032      	movs	r0, #50	; 0x32
 8001aa6:	f000 fc84 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2121      	movs	r1, #33	; 0x21
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f000 fc61 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001ae0:	2122      	movs	r1, #34	; 0x22
 8001ae2:	2032      	movs	r0, #50	; 0x32
 8001ae4:	f000 fc65 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	461a      	mov	r2, r3
 8001af8:	2122      	movs	r1, #34	; 0x22
 8001afa:	2032      	movs	r0, #50	; 0x32
 8001afc:	f000 fc46 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001b16:	2138      	movs	r1, #56	; 0x38
 8001b18:	2032      	movs	r0, #50	; 0x32
 8001b1a:	f000 fc4a 	bl	80023b2 <COMPASSACCELERO_IO_Read>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2138      	movs	r1, #56	; 0x38
 8001b30:	2032      	movs	r0, #50	; 0x32
 8001b32:	f000 fc2b 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001b36:	230a      	movs	r3, #10
 8001b38:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	213a      	movs	r1, #58	; 0x3a
 8001b40:	2032      	movs	r0, #50	; 0x32
 8001b42:	f000 fc23 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001b46:	2305      	movs	r3, #5
 8001b48:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	213b      	movs	r1, #59	; 0x3b
 8001b50:	2032      	movs	r0, #50	; 0x32
 8001b52:	f000 fc1b 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	213c      	movs	r1, #60	; 0x3c
 8001b5c:	2032      	movs	r0, #50	; 0x32
 8001b5e:	f000 fc15 	bl	800238c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001b62:	2332      	movs	r3, #50	; 0x32
 8001b64:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	213d      	movs	r1, #61	; 0x3d
 8001b6c:	2032      	movs	r0, #50	; 0x32
 8001b6e:	f000 fc0d 	bl	800238c <COMPASSACCELERO_IO_Write>
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001b7e:	f000 fbd7 	bl	8002330 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001b82:	2080      	movs	r0, #128	; 0x80
 8001b84:	f7ff ffa5 	bl	8001ad2 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001b88:	2004      	movs	r0, #4
 8001b8a:	f7ff ff83 	bl	8001a94 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001b8e:	2010      	movs	r0, #16
 8001b90:	f7ff ffba 	bl	8001b08 <LSM303DLHC_AccClickITEnable>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b090      	sub	sp, #64	; 0x40
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10c      	bne.n	8001bc2 <BSP_LED_Init+0x2a>
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <BSP_LED_Init+0x154>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	; (8001cec <BSP_LED_Init+0x154>)
 8001bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb2:	6153      	str	r3, [r2, #20]
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <BSP_LED_Init+0x154>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc0:	e06e      	b.n	8001ca0 <BSP_LED_Init+0x108>
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d10c      	bne.n	8001be2 <BSP_LED_Init+0x4a>
 8001bc8:	4b48      	ldr	r3, [pc, #288]	; (8001cec <BSP_LED_Init+0x154>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	4a47      	ldr	r2, [pc, #284]	; (8001cec <BSP_LED_Init+0x154>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6153      	str	r3, [r2, #20]
 8001bd4:	4b45      	ldr	r3, [pc, #276]	; (8001cec <BSP_LED_Init+0x154>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	e05e      	b.n	8001ca0 <BSP_LED_Init+0x108>
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d10c      	bne.n	8001c02 <BSP_LED_Init+0x6a>
 8001be8:	4b40      	ldr	r3, [pc, #256]	; (8001cec <BSP_LED_Init+0x154>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <BSP_LED_Init+0x154>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6153      	str	r3, [r2, #20]
 8001bf4:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <BSP_LED_Init+0x154>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	e04e      	b.n	8001ca0 <BSP_LED_Init+0x108>
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d10c      	bne.n	8001c22 <BSP_LED_Init+0x8a>
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <BSP_LED_Init+0x154>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	4a37      	ldr	r2, [pc, #220]	; (8001cec <BSP_LED_Init+0x154>)
 8001c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c12:	6153      	str	r3, [r2, #20]
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <BSP_LED_Init+0x154>)
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	e03e      	b.n	8001ca0 <BSP_LED_Init+0x108>
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d10c      	bne.n	8001c42 <BSP_LED_Init+0xaa>
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <BSP_LED_Init+0x154>)
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <BSP_LED_Init+0x154>)
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c32:	6153      	str	r3, [r2, #20]
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <BSP_LED_Init+0x154>)
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	e02e      	b.n	8001ca0 <BSP_LED_Init+0x108>
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <BSP_LED_Init+0xca>
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <BSP_LED_Init+0x154>)
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <BSP_LED_Init+0x154>)
 8001c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c52:	6153      	str	r3, [r2, #20]
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <BSP_LED_Init+0x154>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	e01e      	b.n	8001ca0 <BSP_LED_Init+0x108>
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d10c      	bne.n	8001c82 <BSP_LED_Init+0xea>
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <BSP_LED_Init+0x154>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <BSP_LED_Init+0x154>)
 8001c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c72:	6153      	str	r3, [r2, #20]
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <BSP_LED_Init+0x154>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	e00e      	b.n	8001ca0 <BSP_LED_Init+0x108>
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d10b      	bne.n	8001ca0 <BSP_LED_Init+0x108>
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <BSP_LED_Init+0x154>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <BSP_LED_Init+0x154>)
 8001c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c92:	6153      	str	r3, [r2, #20]
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <BSP_LED_Init+0x154>)
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <BSP_LED_Init+0x158>)
 8001ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <BSP_LED_Init+0x15c>)
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f001 ff6f 	bl	8003ba8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <BSP_LED_Init+0x15c>)
 8001cce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <BSP_LED_Init+0x158>)
 8001cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f002 f9d1 	bl	8004084 <HAL_GPIO_WritePin>
}
 8001ce2:	bf00      	nop
 8001ce4:	3740      	adds	r7, #64	; 0x40
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	0800afb8 	.word	0x0800afb8
 8001cf4:	200000d0 	.word	0x200000d0

08001cf8 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <BSP_LED_On+0x2c>)
 8001d06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <BSP_LED_On+0x30>)
 8001d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4619      	mov	r1, r3
 8001d16:	f002 f9b5 	bl	8004084 <HAL_GPIO_WritePin>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200000d0 	.word	0x200000d0
 8001d28:	0800afb8 	.word	0x0800afb8

08001d2c <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <BSP_LED_Off+0x2c>)
 8001d3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <BSP_LED_Off+0x30>)
 8001d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d46:	2200      	movs	r2, #0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f002 f99b 	bl	8004084 <HAL_GPIO_WritePin>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200000d0 	.word	0x200000d0
 8001d5c:	0800afb8 	.word	0x0800afb8

08001d60 <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <BSP_LED_Toggle+0x2c>)
 8001d6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	4906      	ldr	r1, [pc, #24]	; (8001d90 <BSP_LED_Toggle+0x30>)
 8001d76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f002 f999 	bl	80040b4 <HAL_GPIO_TogglePin>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200000d0 	.word	0x200000d0
 8001d90:	0800afb8 	.word	0x0800afb8

08001d94 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <BSP_PB_Init+0x2e>
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <BSP_PB_Init+0xbc>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4a28      	ldr	r2, [pc, #160]	; (8001e50 <BSP_PB_Init+0xbc>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	6153      	str	r3, [r2, #20]
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <BSP_PB_Init+0xbc>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <BSP_PB_Init+0xbc>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <BSP_PB_Init+0xbc>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6193      	str	r3, [r2, #24]
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <BSP_PB_Init+0xbc>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d111      	bne.n	8001e04 <BSP_PB_Init+0x70>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001de0:	2301      	movs	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <BSP_PB_Init+0xc0>)
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	f107 0214 	add.w	r2, r7, #20
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fed2 	bl	8003ba8 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001e04:	79bb      	ldrb	r3, [r7, #6]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11e      	bne.n	8001e48 <BSP_PB_Init+0xb4>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001e16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <BSP_PB_Init+0xc0>)
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	f107 0214 	add.w	r2, r7, #20
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 febc 	bl	8003ba8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001e30:	2306      	movs	r3, #6
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	2200      	movs	r2, #0
 8001e36:	210f      	movs	r1, #15
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fe7e 	bl	8003b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001e3e:	2306      	movs	r3, #6
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 fe95 	bl	8003b72 <HAL_NVIC_EnableIRQ>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	200000f0 	.word	0x200000f0

08001e58 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <BSP_PB_GetState+0x28>)
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 f8f0 	bl	8004054 <HAL_GPIO_ReadPin>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200000f0 	.word	0x200000f0

08001e84 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <I2Cx_MspInit+0x60>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <I2Cx_MspInit+0x60>)
 8001e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e96:	6153      	str	r3, [r2, #20]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <I2Cx_MspInit+0x60>)
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8001ea4:	23c0      	movs	r3, #192	; 0xc0
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <I2Cx_MspInit+0x64>)
 8001ec0:	f001 fe72 	bl	8003ba8 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <I2Cx_MspInit+0x60>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <I2Cx_MspInit+0x60>)
 8001eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ece:	61d3      	str	r3, [r2, #28]
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <I2Cx_MspInit+0x60>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000400 	.word	0x48000400

08001eec <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001ef0:	4811      	ldr	r0, [pc, #68]	; (8001f38 <I2Cx_Init+0x4c>)
 8001ef2:	f002 fbfd 	bl	80046f0 <HAL_I2C_GetState>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11a      	bne.n	8001f32 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <I2Cx_Init+0x4c>)
 8001efe:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <I2Cx_Init+0x50>)
 8001f00:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f04:	2232      	movs	r2, #50	; 0x32
 8001f06:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001f26:	4804      	ldr	r0, [pc, #16]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f28:	f7ff ffac 	bl	8001e84 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <I2Cx_Init+0x4c>)
 8001f2e:	f002 f8f3 	bl	8004118 <HAL_I2C_Init>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200003d4 	.word	0x200003d4
 8001f3c:	40005400 	.word	0x40005400

08001f40 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af04      	add	r7, sp, #16
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	717b      	strb	r3, [r7, #5]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001f56:	797b      	ldrb	r3, [r7, #5]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <I2Cx_WriteData+0x48>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	88f9      	ldrh	r1, [r7, #6]
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	2301      	movs	r3, #1
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <I2Cx_WriteData+0x4c>)
 8001f6e:	f002 f991 	bl	8004294 <HAL_I2C_Mem_Write>
 8001f72:	4603      	mov	r3, r0
 8001f74:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001f7c:	f000 f834 	bl	8001fe8 <I2Cx_Error>
  }
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200000f8 	.word	0x200000f8
 8001f8c:	200003d4 	.word	0x200003d4

08001f90 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af04      	add	r7, sp, #16
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	80fb      	strh	r3, [r7, #6]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001fa8:	797b      	ldrb	r3, [r7, #5]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <I2Cx_ReadData+0x50>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	88f9      	ldrh	r1, [r7, #6]
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	f107 030e 	add.w	r3, r7, #14
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <I2Cx_ReadData+0x54>)
 8001fc2:	f002 fa7b 	bl	80044bc <HAL_I2C_Mem_Read>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001fd0:	f000 f80a 	bl	8001fe8 <I2Cx_Error>
  
  }
  return value;
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200000f8 	.word	0x200000f8
 8001fe4:	200003d4 	.word	0x200003d4

08001fe8 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <I2Cx_Error+0x14>)
 8001fee:	f002 f922 	bl	8004236 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001ff2:	f7ff ff7b 	bl	8001eec <I2Cx_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003d4 	.word	0x200003d4

08002000 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002004:	481a      	ldr	r0, [pc, #104]	; (8002070 <SPIx_Init+0x70>)
 8002006:	f004 fc19 	bl	800683c <HAL_SPI_GetState>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12c      	bne.n	800206a <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <SPIx_Init+0x70>)
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <SPIx_Init+0x74>)
 8002014:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <SPIx_Init+0x70>)
 8002018:	2218      	movs	r2, #24
 800201a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <SPIx_Init+0x70>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <SPIx_Init+0x70>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <SPIx_Init+0x70>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <SPIx_Init+0x70>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <SPIx_Init+0x70>)
 8002036:	2207      	movs	r2, #7
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <SPIx_Init+0x70>)
 800203c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002040:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <SPIx_Init+0x70>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <SPIx_Init+0x70>)
 800204a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204e:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <SPIx_Init+0x70>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <SPIx_Init+0x70>)
 8002058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800205c:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <SPIx_Init+0x70>)
 8002060:	f000 f836 	bl	80020d0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <SPIx_Init+0x70>)
 8002066:	f004 f903 	bl	8006270 <HAL_SPI_Init>
  }
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000370 	.word	0x20000370
 8002074:	40013000 	.word	0x40013000

08002078 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af02      	add	r7, sp, #8
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <SPIx_WriteRead+0x38>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f107 020f 	add.w	r2, r7, #15
 800208e:	1df9      	adds	r1, r7, #7
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <SPIx_WriteRead+0x3c>)
 8002096:	f004 f9be 	bl	8006416 <HAL_SPI_TransmitReceive>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80020a0:	f000 f80a 	bl	80020b8 <SPIx_Error>
  }
  
  return receivedbyte;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200000f4 	.word	0x200000f4
 80020b4:	20000370 	.word	0x20000370

080020b8 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <SPIx_Error+0x14>)
 80020be:	f004 f982 	bl	80063c6 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 80020c2:	f7ff ff9d 	bl	8002000 <SPIx_Init>
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000370 	.word	0x20000370

080020d0 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <SPIx_MspInit+0x64>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <SPIx_MspInit+0x64>)
 80020de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <SPIx_MspInit+0x64>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <SPIx_MspInit+0x64>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <SPIx_MspInit+0x64>)
 80020f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fa:	6153      	str	r3, [r2, #20]
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <SPIx_MspInit+0x64>)
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002108:	23e0      	movs	r3, #224	; 0xe0
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002118:	2305      	movs	r3, #5
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f001 fd3f 	bl	8003ba8 <HAL_GPIO_Init>
}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000

08002138 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <GYRO_IO_Init+0x84>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <GYRO_IO_Init+0x84>)
 8002144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002148:	6153      	str	r3, [r2, #20]
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <GYRO_IO_Init+0x84>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002156:	2308      	movs	r3, #8
 8002158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	4619      	mov	r1, r3
 800216c:	4814      	ldr	r0, [pc, #80]	; (80021c0 <GYRO_IO_Init+0x88>)
 800216e:	f001 fd1b 	bl	8003ba8 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8002172:	2201      	movs	r2, #1
 8002174:	2108      	movs	r1, #8
 8002176:	4812      	ldr	r0, [pc, #72]	; (80021c0 <GYRO_IO_Init+0x88>)
 8002178:	f001 ff84 	bl	8004084 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <GYRO_IO_Init+0x84>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <GYRO_IO_Init+0x84>)
 8002182:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002186:	6153      	str	r3, [r2, #20]
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <GYRO_IO_Init+0x84>)
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002194:	2303      	movs	r3, #3
 8002196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	4619      	mov	r1, r3
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <GYRO_IO_Init+0x88>)
 80021ac:	f001 fcfc 	bl	8003ba8 <HAL_GPIO_Init>
  
  SPIx_Init();
 80021b0:	f7ff ff26 	bl	8002000 <SPIx_Init>
}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	48001000 	.word	0x48001000

080021c4 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
 80021d0:	4613      	mov	r3, r2
 80021d2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80021d4:	883b      	ldrh	r3, [r7, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d903      	bls.n	80021e2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80021e2:	2200      	movs	r2, #0
 80021e4:	2108      	movs	r1, #8
 80021e6:	480f      	ldr	r0, [pc, #60]	; (8002224 <GYRO_IO_Write+0x60>)
 80021e8:	f001 ff4c 	bl	8004084 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff42 	bl	8002078 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80021f4:	e00a      	b.n	800220c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff3c 	bl	8002078 <SPIx_WriteRead>
    NumByteToWrite--;
 8002200:	883b      	ldrh	r3, [r7, #0]
 8002202:	3b01      	subs	r3, #1
 8002204:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3301      	adds	r3, #1
 800220a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800220c:	883b      	ldrh	r3, [r7, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f1      	bne.n	80021f6 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002212:	2201      	movs	r2, #1
 8002214:	2108      	movs	r1, #8
 8002216:	4803      	ldr	r0, [pc, #12]	; (8002224 <GYRO_IO_Write+0x60>)
 8002218:	f001 ff34 	bl	8004084 <HAL_GPIO_WritePin>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	48001000 	.word	0x48001000

08002228 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
 8002234:	4613      	mov	r3, r2
 8002236:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002238:	883b      	ldrh	r3, [r7, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d904      	bls.n	8002248 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002244:	70fb      	strb	r3, [r7, #3]
 8002246:	e003      	b.n	8002250 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800224e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002250:	2200      	movs	r2, #0
 8002252:	2108      	movs	r1, #8
 8002254:	4810      	ldr	r0, [pc, #64]	; (8002298 <GYRO_IO_Read+0x70>)
 8002256:	f001 ff15 	bl	8004084 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff0b 	bl	8002078 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002262:	e00c      	b.n	800227e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff ff07 	bl	8002078 <SPIx_WriteRead>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002272:	883b      	ldrh	r3, [r7, #0]
 8002274:	3b01      	subs	r3, #1
 8002276:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3301      	adds	r3, #1
 800227c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800227e:	883b      	ldrh	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ef      	bne.n	8002264 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002284:	2201      	movs	r2, #1
 8002286:	2108      	movs	r1, #8
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <GYRO_IO_Read+0x70>)
 800228a:	f001 fefb 	bl	8004084 <HAL_GPIO_WritePin>
}  
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	48001000 	.word	0x48001000

0800229c <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <COMPASSACCELERO_IO_Init+0x8c>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	4a20      	ldr	r2, [pc, #128]	; (8002328 <COMPASSACCELERO_IO_Init+0x8c>)
 80022a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ac:	6153      	str	r3, [r2, #20]
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <COMPASSACCELERO_IO_Init+0x8c>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <COMPASSACCELERO_IO_Init+0x8c>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <COMPASSACCELERO_IO_Init+0x8c>)
 80022c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c4:	6153      	str	r3, [r2, #20]
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <COMPASSACCELERO_IO_Init+0x8c>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80022d2:	2304      	movs	r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4619      	mov	r1, r3
 80022e8:	4810      	ldr	r0, [pc, #64]	; (800232c <COMPASSACCELERO_IO_Init+0x90>)
 80022ea:	f001 fc5d 	bl	8003ba8 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 80022ee:	2200      	movs	r2, #0
 80022f0:	210f      	movs	r1, #15
 80022f2:	2008      	movs	r0, #8
 80022f4:	f001 fc21 	bl	8003b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 80022f8:	2008      	movs	r0, #8
 80022fa:	f001 fc3a 	bl	8003b72 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80022fe:	2330      	movs	r3, #48	; 0x30
 8002300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <COMPASSACCELERO_IO_Init+0x90>)
 8002316:	f001 fc47 	bl	8003ba8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800231a:	f7ff fde7 	bl	8001eec <I2Cx_Init>
}
 800231e:	bf00      	nop
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	48001000 	.word	0x48001000

08002330 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800233c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002340:	6153      	str	r3, [r2, #20]
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800234e:	2330      	movs	r3, #48	; 0x30
 8002350:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002352:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	4619      	mov	r1, r3
 8002364:	4808      	ldr	r0, [pc, #32]	; (8002388 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002366:	f001 fc1f 	bl	8003ba8 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800236a:	2200      	movs	r2, #0
 800236c:	210f      	movs	r1, #15
 800236e:	200a      	movs	r0, #10
 8002370:	f001 fbe3 	bl	8003b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002374:	200a      	movs	r0, #10
 8002376:	f001 fbfc 	bl	8003b72 <HAL_NVIC_EnableIRQ>
  
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	48001000 	.word	0x48001000

0800238c <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
 8002396:	460b      	mov	r3, r1
 8002398:	717b      	strb	r3, [r7, #5]
 800239a:	4613      	mov	r3, r2
 800239c:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800239e:	793a      	ldrb	r2, [r7, #4]
 80023a0:	7979      	ldrb	r1, [r7, #5]
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fdcb 	bl	8001f40 <I2Cx_WriteData>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	460a      	mov	r2, r1
 80023bc:	80fb      	strh	r3, [r7, #6]
 80023be:	4613      	mov	r3, r2
 80023c0:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80023c2:	797a      	ldrb	r2, [r7, #5]
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fde1 	bl	8001f90 <I2Cx_ReadData>
 80023ce:	4603      	mov	r3, r0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80023e2:	2300      	movs	r3, #0
 80023e4:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <BSP_ACCELERO_Init+0x178>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4798      	blx	r3
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b33      	cmp	r3, #51	; 0x33
 80023f8:	d14f      	bne.n	800249a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80023fa:	4b56      	ldr	r3, [pc, #344]	; (8002554 <BSP_ACCELERO_Init+0x17c>)
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <BSP_ACCELERO_Init+0x178>)
 80023fe:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002400:	2300      	movs	r3, #0
 8002402:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002404:	2340      	movs	r3, #64	; 0x40
 8002406:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002408:	2307      	movs	r3, #7
 800240a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 800240c:	2300      	movs	r3, #0
 800240e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002410:	2300      	movs	r3, #0
 8002412:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002414:	2300      	movs	r3, #0
 8002416:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002418:	2308      	movs	r3, #8
 800241a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800241c:	7b3a      	ldrb	r2, [r7, #12]
 800241e:	7b7b      	ldrb	r3, [r7, #13]
 8002420:	4313      	orrs	r3, r2
 8002422:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002424:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002426:	4313      	orrs	r3, r2
 8002428:	b2db      	uxtb	r3, r3
 800242a:	b29a      	uxth	r2, r3
 800242c:	8abb      	ldrh	r3, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002432:	7c3a      	ldrb	r2, [r7, #16]
 8002434:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002436:	4313      	orrs	r3, r2
 8002438:	b2da      	uxtb	r2, r3
 800243a:	7cbb      	ldrb	r3, [r7, #18]
 800243c:	4313      	orrs	r3, r2
 800243e:	b2da      	uxtb	r2, r3
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	4313      	orrs	r3, r2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002448:	b21a      	sxth	r2, r3
 800244a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	b21b      	sxth	r3, r3
 8002452:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <BSP_ACCELERO_Init+0x17c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	8aba      	ldrh	r2, [r7, #20]
 800245c:	4610      	mov	r0, r2
 800245e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002464:	2310      	movs	r3, #16
 8002466:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002470:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002472:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002474:	4313      	orrs	r3, r2
 8002476:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002478:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800247a:	4313      	orrs	r3, r2
 800247c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800247e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002480:	4313      	orrs	r3, r2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <BSP_ACCELERO_Init+0x17c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	8aba      	ldrh	r2, [r7, #20]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4610      	mov	r0, r2
 8002492:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	e054      	b.n	8002544 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <BSP_ACCELERO_Init+0x180>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4798      	blx	r3
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b33      	cmp	r3, #51	; 0x33
 80024a4:	d14e      	bne.n	8002544 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <BSP_ACCELERO_Init+0x17c>)
 80024a8:	4a2b      	ldr	r2, [pc, #172]	; (8002558 <BSP_ACCELERO_Init+0x180>)
 80024aa:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 80024b0:	2340      	movs	r3, #64	; 0x40
 80024b2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 80024b4:	2307      	movs	r3, #7
 80024b6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 80024b8:	2300      	movs	r3, #0
 80024ba:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 80024bc:	2300      	movs	r3, #0
 80024be:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 80024c0:	2300      	movs	r3, #0
 80024c2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 80024c4:	2308      	movs	r3, #8
 80024c6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80024c8:	7b3a      	ldrb	r2, [r7, #12]
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80024d2:	4313      	orrs	r3, r2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	8abb      	ldrh	r3, [r7, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80024de:	7c3a      	ldrb	r2, [r7, #16]
 80024e0:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	7cbb      	ldrb	r3, [r7, #18]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <BSP_ACCELERO_Init+0x17c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	8aba      	ldrh	r2, [r7, #20]
 8002508:	4610      	mov	r0, r2
 800250a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002510:	2310      	movs	r3, #16
 8002512:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800251c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800251e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002520:	4313      	orrs	r3, r2
 8002522:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002524:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002526:	4313      	orrs	r3, r2
 8002528:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800252a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800252c:	4313      	orrs	r3, r2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <BSP_ACCELERO_Init+0x17c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	8aba      	ldrh	r2, [r7, #20]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	4610      	mov	r0, r2
 800253e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002544:	7dfb      	ldrb	r3, [r7, #23]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000009c 	.word	0x2000009c
 8002554:	20000420 	.word	0x20000420
 8002558:	20000068 	.word	0x20000068

0800255c <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <BSP_ACCELERO_GetXYZ+0x24>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <BSP_ACCELERO_GetXYZ+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000420 	.word	0x20000420

08002584 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800258e:	2300      	movs	r3, #0
 8002590:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002592:	2300      	movs	r3, #0
 8002594:	703b      	strb	r3, [r7, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800259a:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <BSP_GYRO_Init+0x160>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4798      	blx	r3
 80025a0:	4603      	mov	r3, r0
 80025a2:	2bd4      	cmp	r3, #212	; 0xd4
 80025a4:	d005      	beq.n	80025b2 <BSP_GYRO_Init+0x2e>
 80025a6:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <BSP_GYRO_Init+0x160>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4798      	blx	r3
 80025ac:	4603      	mov	r3, r0
 80025ae:	2bd5      	cmp	r3, #213	; 0xd5
 80025b0:	d146      	bne.n	8002640 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80025b2:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <BSP_GYRO_Init+0x164>)
 80025b4:	4a4b      	ldr	r2, [pc, #300]	; (80026e4 <BSP_GYRO_Init+0x160>)
 80025b6:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80025b8:	2308      	movs	r3, #8
 80025ba:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80025bc:	2300      	movs	r3, #0
 80025be:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80025c0:	2307      	movs	r3, #7
 80025c2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80025c4:	2330      	movs	r3, #48	; 0x30
 80025c6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80025c8:	2300      	movs	r3, #0
 80025ca:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80025cc:	2300      	movs	r3, #0
 80025ce:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_250;
 80025d0:	2300      	movs	r3, #0
 80025d2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025d4:	793a      	ldrb	r2, [r7, #4]
 80025d6:	797b      	ldrb	r3, [r7, #5]
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025dc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025de:	4313      	orrs	r3, r2
 80025e0:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025e2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025ea:	7a3a      	ldrb	r2, [r7, #8]
 80025ec:	7a7b      	ldrb	r3, [r7, #9]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80025f2:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	89bb      	ldrh	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002604:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <BSP_GYRO_Init+0x164>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	89ba      	ldrh	r2, [r7, #12]
 800260c:	4610      	mov	r0, r2
 800260e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE;
 8002610:	2320      	movs	r3, #32
 8002612:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_9;
 8002614:	2309      	movs	r3, #9
 8002616:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002618:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800261a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800261c:	4313      	orrs	r3, r2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002622:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <BSP_GYRO_Init+0x164>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	89ba      	ldrh	r2, [r7, #12]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	4610      	mov	r0, r2
 800262e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <BSP_GYRO_Init+0x164>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	2010      	movs	r0, #16
 8002638:	4798      	blx	r3

    ret = GYRO_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e04b      	b.n	80026d8 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <BSP_GYRO_Init+0x168>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4798      	blx	r3
 8002646:	4603      	mov	r3, r0
 8002648:	2bd3      	cmp	r3, #211	; 0xd3
 800264a:	d145      	bne.n	80026d8 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <BSP_GYRO_Init+0x164>)
 800264e:	4a27      	ldr	r2, [pc, #156]	; (80026ec <BSP_GYRO_Init+0x168>)
 8002650:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8002652:	2308      	movs	r3, #8
 8002654:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8002656:	2300      	movs	r3, #0
 8002658:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 800265a:	2307      	movs	r3, #7
 800265c:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 800265e:	2330      	movs	r3, #48	; 0x30
 8002660:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8002662:	2300      	movs	r3, #0
 8002664:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8002666:	2300      	movs	r3, #0
 8002668:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 800266a:	2310      	movs	r3, #16
 800266c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800266e:	793a      	ldrb	r2, [r7, #4]
 8002670:	797b      	ldrb	r3, [r7, #5]
 8002672:	4313      	orrs	r3, r2
 8002674:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002676:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002678:	4313      	orrs	r3, r2
 800267a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800267c:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800267e:	4313      	orrs	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002684:	7a3a      	ldrb	r2, [r7, #8]
 8002686:	7a7b      	ldrb	r3, [r7, #9]
 8002688:	4313      	orrs	r3, r2
 800268a:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800268c:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800268e:	4313      	orrs	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	b29b      	uxth	r3, r3
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	b29a      	uxth	r2, r3
 8002698:	89bb      	ldrh	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <BSP_GYRO_Init+0x164>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	89ba      	ldrh	r2, [r7, #12]
 80026a6:	4610      	mov	r0, r2
 80026a8:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 80026aa:	2300      	movs	r3, #0
 80026ac:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80026b2:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80026b4:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <BSP_GYRO_Init+0x164>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	89ba      	ldrh	r2, [r7, #12]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	4610      	mov	r0, r2
 80026c8:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <BSP_GYRO_Init+0x164>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	2010      	movs	r0, #16
 80026d2:	4798      	blx	r3

    ret = GYRO_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000034 	.word	0x20000034
 80026e8:	20000424 	.word	0x20000424
 80026ec:	20000000 	.word	0x20000000

080026f0 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <BSP_GYRO_GetXYZ+0x24>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <BSP_GYRO_GetXYZ+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000424 	.word	0x20000424

08002718 <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f, -0.0052635f, -0.0068811f, 0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.00688114, -0.0052635f};

void FIRFilter_Init(FIRFilter * fir)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	/* Clear the buffer */
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e009      	b.n	800273a <FIRFilter_Init+0x22>
	{
		fir->buf[n] = 0.0f;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	3301      	adds	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d9f2      	bls.n	8002726 <FIRFilter_Init+0xe>
	}

	/* Reset Buffer index */
	fir->bufIndex = 0;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	/* Clear the output */
	fir->out = 0.0f;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <FirstOrderIIR_Init>:
 *      Author: 123
 */
#include "FirstOrderIIRFilter.h"

void FirstOrderIIR_Init(FirstOrderIIR * filt, float alpha)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	ed87 0a00 	vstr	s0, [r7]
	if(alpha < 0.0f)
 8002768:	edd7 7a00 	vldr	s15, [r7]
 800276c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d504      	bpl.n	8002780 <FirstOrderIIR_Init+0x24>
	{
		filt->alpha = 0.0f;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e010      	b.n	80027a2 <FirstOrderIIR_Init+0x46>
	}
	else if(alpha > 1.0f)
 8002780:	edd7 7a00 	vldr	s15, [r7]
 8002784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	dd04      	ble.n	800279c <FirstOrderIIR_Init+0x40>
	{
		filt->alpha = 1.0f;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e002      	b.n	80027a2 <FirstOrderIIR_Init+0x46>
	}
	else
	{
		filt->alpha = alpha;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	601a      	str	r2, [r3, #0]
	}

	filt->out = 0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <FirstOrderIIR_Update>:


float FirstOrderIIR_Update(FirstOrderIIR * filt, float in)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	ed87 0a00 	vstr	s0, [r7]
	/* Update the output */
	return filt->out = (1.0f - filt->alpha) * in + filt->alpha * filt->out;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027d0:	edd7 7a00 	vldr	s15, [r7]
 80027d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	edd3 6a00 	vldr	s13, [r3]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80027e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	edc3 7a01 	vstr	s15, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	ee07 3a90 	vmov	s15, r3
}
 80027fa:	eeb0 0a67 	vmov.f32	s0, s15
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <IIRFilter_Init>:
 */

#include "IIRFilter.h"

void IIRFilter_Init(IIRFilter * filt, float alpha, float beta)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	ed87 0a02 	vstr	s0, [r7, #8]
 8002814:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->alpha = alpha;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	601a      	str	r2, [r3, #0]
	filt->beta = beta;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	605a      	str	r2, [r3, #4]
	filt->out = 0;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <IIRFilter_Update>:

float IIRFilter_Update(IIRFilter * filt, float input)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	ed87 0a00 	vstr	s0, [r7]
	/* y[n] = alpha*x[n] - beta*y[n-1] */
	return filt->out = filt->alpha*input - filt->beta * filt->out;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	edd7 7a00 	vldr	s15, [r7]
 800284e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edd3 6a01 	vldr	s13, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7a02 	vldr	s15, [r3, #8]
 800285e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edc3 7a02 	vstr	s15, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	ee07 3a90 	vmov	s15, r3
}
 8002874:	eeb0 0a67 	vmov.f32	s0, s15
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <RCFilter_Init>:
 *      Author: 123
 */
#include "RCFilter.h"

void RCFilter_Init(RCFilter * Filt,float cutoff_Freq, float sampleTime)
{
 8002882:	b480      	push	{r7}
 8002884:	b087      	sub	sp, #28
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	ed87 0a02 	vstr	s0, [r7, #8]
 800288e:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute RC for cutOff_Freq */
	float RC = 1.0f / (2*PI*cutoff_Freq);
 8002892:	edd7 7a02 	vldr	s15, [r7, #8]
 8002896:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800289a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800289e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a6:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Compute first order LPF coefficients */
	Filt->coeff[0] = sampleTime / (sampleTime + RC);
 80028aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80028ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80028b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80028ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	edc3 7a00 	vstr	s15, [r3]
	Filt->coeff[1] = RC / (sampleTime + RC);
 80028c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80028c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80028d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	Filt->out[0] = 0.0f;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
	Filt->out[1] = 0.0f;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800291c:	6153      	str	r3, [r2, #20]
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <MX_GPIO_Init+0x118>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4a39      	ldr	r2, [pc, #228]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002934:	6153      	str	r3, [r2, #20]
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294c:	6153      	str	r3, [r2, #20]
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <MX_GPIO_Init+0x118>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	6153      	str	r3, [r2, #20]
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297c:	6153      	str	r3, [r2, #20]
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <MX_GPIO_Init+0x118>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800298a:	2200      	movs	r2, #0
 800298c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002990:	4821      	ldr	r0, [pc, #132]	; (8002a18 <MX_GPIO_Init+0x11c>)
 8002992:	f001 fb77 	bl	8004084 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002996:	2337      	movs	r3, #55	; 0x37
 8002998:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800299a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800299e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4619      	mov	r1, r3
 80029aa:	481b      	ldr	r0, [pc, #108]	; (8002a18 <MX_GPIO_Init+0x11c>)
 80029ac:	f001 f8fc 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80029b0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80029b4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4813      	ldr	r0, [pc, #76]	; (8002a18 <MX_GPIO_Init+0x11c>)
 80029ca:	f001 f8ed 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029ce:	2301      	movs	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e4:	f001 f8e0 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80029e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80029fa:	230e      	movs	r3, #14
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a08:	f001 f8ce 	bl	8003ba8 <HAL_GPIO_Init>

}
 8002a0c:	bf00      	nop
 8002a0e:	3728      	adds	r7, #40	; 0x28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	48001000 	.word	0x48001000

08002a1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <MX_I2C1_Init+0x78>)
 8002a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a28:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <MX_I2C1_Init+0x7c>)
 8002a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a56:	480e      	ldr	r0, [pc, #56]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a58:	f001 fb5e 	bl	8004118 <HAL_I2C_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a62:	f000 fa39 	bl	8002ed8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a66:	2100      	movs	r1, #0
 8002a68:	4809      	ldr	r0, [pc, #36]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a6a:	f002 f87b 	bl	8004b64 <HAL_I2CEx_ConfigAnalogFilter>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a74:	f000 fa30 	bl	8002ed8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4805      	ldr	r0, [pc, #20]	; (8002a90 <MX_I2C1_Init+0x74>)
 8002a7c:	f002 f8bd 	bl	8004bfa <HAL_I2CEx_ConfigDigitalFilter>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a86:	f000 fa27 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000460 	.word	0x20000460
 8002a94:	40005400 	.word	0x40005400
 8002a98:	2000090e 	.word	0x2000090e

08002a9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_I2C_MspInit+0x7c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d127      	bne.n	8002b0e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_I2C_MspInit+0x80>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_I2C_MspInit+0x80>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac8:	6153      	str	r3, [r2, #20]
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_I2C_MspInit+0x80>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	480b      	ldr	r0, [pc, #44]	; (8002b20 <HAL_I2C_MspInit+0x84>)
 8002af2:	f001 f859 	bl	8003ba8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_I2C_MspInit+0x80>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_I2C_MspInit+0x80>)
 8002afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b00:	61d3      	str	r3, [r2, #28]
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_I2C_MspInit+0x80>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40005400 	.word	0x40005400
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	48000400 	.word	0x48000400

08002b24 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_I2C_MspDeInit+0x38>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10d      	bne.n	8002b52 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_I2C_MspDeInit+0x3c>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_I2C_MspDeInit+0x3c>)
 8002b3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b40:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	4807      	ldr	r0, [pc, #28]	; (8002b64 <HAL_I2C_MspDeInit+0x40>)
 8002b46:	f001 f9a9 	bl	8003e9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <HAL_I2C_MspDeInit+0x40>)
 8002b4e:	f001 f9a5 	bl	8003e9c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	40021000 	.word	0x40021000
 8002b64:	48000400 	.word	0x48000400

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b6e:	f000 fe7f 	bl	8003870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b72:	f000 f8a9 	bl	8002cc8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b76:	f7ff fec1 	bl	80028fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b7a:	f7ff ff4f 	bl	8002a1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002b7e:	f000 fc11 	bl	80033a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b82:	f000 fdd7 	bl	8003734 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED4);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f7ff f806 	bl	8001b98 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7ff f803 	bl	8001b98 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8002b92:	2002      	movs	r0, #2
 8002b94:	f7ff f800 	bl	8001b98 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 8002b98:	2004      	movs	r0, #4
 8002b9a:	f7fe fffd 	bl	8001b98 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 8002b9e:	2006      	movs	r0, #6
 8002ba0:	f7fe fffa 	bl	8001b98 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 8002ba4:	2007      	movs	r0, #7
 8002ba6:	f7fe fff7 	bl	8001b98 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 8002baa:	2005      	movs	r0, #5
 8002bac:	f7fe fff4 	bl	8001b98 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f7fe fff1 	bl	8001b98 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7ff f8eb 	bl	8001d94 <BSP_PB_Init>

  while (!UserPressButton) Toggle_Leds();
 8002bbe:	e001      	b.n	8002bc4 <main+0x5c>
 8002bc0:	f000 f8f2 	bl	8002da8 <Toggle_Leds>
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <main+0x138>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f8      	beq.n	8002bc0 <main+0x58>
  BSP_LED_Off(LED3);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff f8ac 	bl	8001d2c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7ff f8a9 	bl	8001d2c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f7ff f8a6 	bl	8001d2c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f7ff f8a3 	bl	8001d2c <BSP_LED_Off>

  /* Initialize RC Filters */
  RCFilter_Init(&Acc_RC_LPF, 5.0f, 0.01f);
 8002be6:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002ca4 <main+0x13c>
 8002bea:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002bee:	482e      	ldr	r0, [pc, #184]	; (8002ca8 <main+0x140>)
 8002bf0:	f7ff fe47 	bl	8002882 <RCFilter_Init>

  FIRFilter_Init(&Acc_FIR_LPF);
 8002bf4:	482d      	ldr	r0, [pc, #180]	; (8002cac <main+0x144>)
 8002bf6:	f7ff fd8f 	bl	8002718 <FIRFilter_Init>

  IIRFilter_Init(&Acc_IIR_LPF, IIR_ALPHA, IIR_BETA);
 8002bfa:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8002cb0 <main+0x148>
 8002bfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c02:	482c      	ldr	r0, [pc, #176]	; (8002cb4 <main+0x14c>)
 8002c04:	f7ff fe00 	bl	8002808 <IIRFilter_Init>

  for(uint8_t i = 0; i < 3; i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	71fb      	strb	r3, [r7, #7]
 8002c0c:	e014      	b.n	8002c38 <main+0xd0>
  {
	  FirstOrderIIR_Init(&Acc_FO_IIR[i], FO_IIR_ALPHA);
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4a29      	ldr	r2, [pc, #164]	; (8002cb8 <main+0x150>)
 8002c14:	4413      	add	r3, r2
 8002c16:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002cb0 <main+0x148>
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fd9e 	bl	800275c <FirstOrderIIR_Init>
	  FirstOrderIIR_Init(&Gyro_FO_IIR[i], FO_IIR_ALPHA);
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <main+0x154>)
 8002c26:	4413      	add	r3, r2
 8002c28:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8002cb0 <main+0x148>
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fd95 	bl	800275c <FirstOrderIIR_Init>
  for(uint8_t i = 0; i < 3; i++)
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	3301      	adds	r3, #1
 8002c36:	71fb      	strb	r3, [r7, #7]
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d9e7      	bls.n	8002c0e <main+0xa6>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1,data,7,HAL_MAX_DELAY);

	  UserPressButton = 0;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <main+0x138>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
	  BSP_examples[DemoIndex++].DemoFunc();
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <main+0x158>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	b2d1      	uxtb	r1, r2
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <main+0x158>)
 8002c4e:	7011      	strb	r1, [r2, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <main+0x15c>)
 8002c54:	460b      	mov	r3, r1
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a5b      	subs	r3, r3, r1
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4798      	blx	r3

	  /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
	  if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8002c62:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <main+0x158>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d902      	bls.n	8002c70 <main+0x108>
	  {
		DemoIndex = 0;
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <main+0x158>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
	  }
	  /* Toggle LEDs between each Test */
	  UserPressButton = 0;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <main+0x138>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
	  while (!UserPressButton) IIR_Check(); //	Toggle_Leds();
 8002c76:	e001      	b.n	8002c7c <main+0x114>
 8002c78:	f000 f8ca 	bl	8002e10 <IIR_Check>
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <main+0x138>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f8      	beq.n	8002c78 <main+0x110>
	  BSP_LED_Off(LED3);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff f850 	bl	8001d2c <BSP_LED_Off>
	  BSP_LED_Off(LED4);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7ff f84d 	bl	8001d2c <BSP_LED_Off>
	  BSP_LED_Off(LED5);
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7ff f84a 	bl	8001d2c <BSP_LED_Off>
	  BSP_LED_Off(LED6);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f7ff f847 	bl	8001d2c <BSP_LED_Off>
	  UserPressButton = 0;
 8002c9e:	e7ce      	b.n	8002c3e <main+0xd6>
 8002ca0:	20000429 	.word	0x20000429
 8002ca4:	3c23d70a 	.word	0x3c23d70a
 8002ca8:	200004f8 	.word	0x200004f8
 8002cac:	20000508 	.word	0x20000508
 8002cb0:	3f666666 	.word	0x3f666666
 8002cb4:	200004ec 	.word	0x200004ec
 8002cb8:	200004d4 	.word	0x200004d4
 8002cbc:	200004ac 	.word	0x200004ac
 8002cc0:	20000428 	.word	0x20000428
 8002cc4:	200000fc 	.word	0x200000fc

08002cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b09e      	sub	sp, #120	; 0x78
 8002ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cd2:	2228      	movs	r2, #40	; 0x28
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f005 fc5e 	bl	8008598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cec:	463b      	mov	r3, r7
 8002cee:	223c      	movs	r2, #60	; 0x3c
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f005 fc50 	bl	8008598 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d00:	2310      	movs	r3, #16
 8002d02:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d04:	2302      	movs	r3, #2
 8002d06:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002d0c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002d10:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 ffbc 	bl	8004c94 <HAL_RCC_OscConfig>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002d22:	f000 f8d9 	bl	8002ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d26:	230f      	movs	r3, #15
 8002d28:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 feae 	bl	8005aa4 <HAL_RCC_ClockConfig>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002d4e:	f000 f8c3 	bl	8002ed8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d52:	2321      	movs	r3, #33	; 0x21
 8002d54:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d5e:	463b      	mov	r3, r7
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 f8d5 	bl	8005f10 <HAL_RCCEx_PeriphCLKConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002d6c:	f000 f8b4 	bl	8002ed8 <Error_Handler>
  }
}
 8002d70:	bf00      	nop
 8002d72:	3778      	adds	r7, #120	; 0x78
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	80fb      	strh	r3, [r7, #6]
  if (USER_BUTTON_PIN == GPIO_Pin)
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d109      	bne.n	8002d9c <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 8002d88:	bf00      	nop
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff f864 	bl	8001e58 <BSP_PB_GetState>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f9      	bne.n	8002d8a <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000429 	.word	0x20000429

08002da8 <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED3);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe ffd7 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002db2:	2064      	movs	r0, #100	; 0x64
 8002db4:	f000 fdc2 	bl	800393c <HAL_Delay>
    BSP_LED_Toggle(LED4);
 8002db8:	2001      	movs	r0, #1
 8002dba:	f7fe ffd1 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002dbe:	2064      	movs	r0, #100	; 0x64
 8002dc0:	f000 fdbc 	bl	800393c <HAL_Delay>
    BSP_LED_Toggle(LED6);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f7fe ffcb 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002dca:	2064      	movs	r0, #100	; 0x64
 8002dcc:	f000 fdb6 	bl	800393c <HAL_Delay>
    BSP_LED_Toggle(LED8);
 8002dd0:	2005      	movs	r0, #5
 8002dd2:	f7fe ffc5 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002dd6:	2064      	movs	r0, #100	; 0x64
 8002dd8:	f000 fdb0 	bl	800393c <HAL_Delay>
    BSP_LED_Toggle(LED10);
 8002ddc:	2007      	movs	r0, #7
 8002dde:	f7fe ffbf 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002de2:	2064      	movs	r0, #100	; 0x64
 8002de4:	f000 fdaa 	bl	800393c <HAL_Delay>
    BSP_LED_Toggle(LED9);
 8002de8:	2006      	movs	r0, #6
 8002dea:	f7fe ffb9 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002dee:	2064      	movs	r0, #100	; 0x64
 8002df0:	f000 fda4 	bl	800393c <HAL_Delay>
    BSP_LED_Toggle(LED7);
 8002df4:	2004      	movs	r0, #4
 8002df6:	f7fe ffb3 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002dfa:	2064      	movs	r0, #100	; 0x64
 8002dfc:	f000 fd9e 	bl	800393c <HAL_Delay>
    BSP_LED_Toggle(LED5);
 8002e00:	2002      	movs	r0, #2
 8002e02:	f7fe ffad 	bl	8001d60 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002e06:	2064      	movs	r0, #100	; 0x64
 8002e08:	f000 fd98 	bl	800393c <HAL_Delay>
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <IIR_Check>:

/* IIR Filter Check */
void IIR_Check()
{
 8002e10:	b5b0      	push	{r4, r5, r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af02      	add	r7, sp, #8
	if((HAL_GetTick() - timerFILTER_MS) >= SAMPLE_TIME_FILTER_MS)
 8002e16:	f000 fd85 	bl	8003924 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <IIR_Check+0x90>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	d938      	bls.n	8002e98 <IIR_Check+0x88>
	{
		filterInput = 10.0f * sinf(0.0062831853f * SIN_FREQ_HZ * timerFILTER_MS);
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <IIR_Check+0x90>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e32:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ea4 <IIR_Check+0x94>
 8002e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	f004 fbf1 	bl	8007624 <sinf>
 8002e42:	eef0 7a40 	vmov.f32	s15, s0
 8002e46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <IIR_Check+0x98>)
 8002e50:	edc3 7a00 	vstr	s15, [r3]

		IIRFilter_Update(&Acc_IIR_LPF, filterInput);
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <IIR_Check+0x98>)
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	4813      	ldr	r0, [pc, #76]	; (8002eac <IIR_Check+0x9c>)
 8002e60:	f7ff fcea 	bl	8002838 <IIRFilter_Update>

		printf(" %.3f, %.3f\r\n",
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <IIR_Check+0x98>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb6d 	bl	8000548 <__aeabi_f2d>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	460d      	mov	r5, r1
				filterInput, Acc_IIR_LPF.out);
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <IIR_Check+0x9c>)
 8002e74:	689b      	ldr	r3, [r3, #8]
		printf(" %.3f, %.3f\r\n",
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fb66 	bl	8000548 <__aeabi_f2d>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	e9cd 2300 	strd	r2, r3, [sp]
 8002e84:	4622      	mov	r2, r4
 8002e86:	462b      	mov	r3, r5
 8002e88:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <IIR_Check+0xa0>)
 8002e8a:	f005 fff7 	bl	8008e7c <iprintf>

		timerFILTER_MS += SAMPLE_TIME_FILTER_MS;
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <IIR_Check+0x90>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330a      	adds	r3, #10
 8002e94:	4a02      	ldr	r2, [pc, #8]	; (8002ea0 <IIR_Check+0x90>)
 8002e96:	6013      	str	r3, [r2, #0]

	}
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000430 	.word	0x20000430
 8002ea4:	3c23ae35 	.word	0x3c23ae35
 8002ea8:	2000042c 	.word	0x2000042c
 8002eac:	200004ec 	.word	0x200004ec
 8002eb0:	0800af98 	.word	0x0800af98

08002eb4 <__io_putchar>:

int __io_putchar(int ch)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t *)&ch , 1 , 0xFFFF);
 8002ebc:	1d39      	adds	r1, r7, #4
 8002ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <__io_putchar+0x20>)
 8002ec6:	f003 fe79 	bl	8006bbc <HAL_UART_Transmit>
	return ch;
 8002eca:	687b      	ldr	r3, [r7, #4]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200005c8 	.word	0x200005c8

08002ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 8002edc:	2007      	movs	r0, #7
 8002ede:	f7fe ff0b 	bl	8001cf8 <BSP_LED_On>
    BSP_LED_On(LED3);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fe ff08 	bl	8001cf8 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	bf00      	nop
  __disable_irq();
  while (1)
 8002eec:	e7fe      	b.n	8002eec <Error_Handler+0x14>
	...

08002ef0 <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
  {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002ef4:	f7ff fa70 	bl	80023d8 <BSP_ACCELERO_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002efe:	f7ff ffeb 	bl	8002ed8 <Error_Handler>
  }
  
  UserPressButton = 0;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <ACCELERO_MEMS_Test+0x30>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002f08:	e001      	b.n	8002f0e <ACCELERO_MEMS_Test+0x1e>
  {
    ACCELERO_ReadAcc();
 8002f0a:	f000 f80d 	bl	8002f28 <ACCELERO_ReadAcc>
  while(!UserPressButton)
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <ACCELERO_MEMS_Test+0x30>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f8      	beq.n	8002f0a <ACCELERO_MEMS_Test+0x1a>
  }
}  
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000429 	.word	0x20000429
 8002f24:	00000000 	.word	0x00000000

08002f28 <ACCELERO_ReadAcc>:

static void ACCELERO_ReadAcc(void)
{
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af02      	add	r7, sp, #8
  int16_t buffer[3] = {0};
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval = 0x00;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	83bb      	strh	r3, [r7, #28]
  
  float acc[3] = {0};
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
  float pitchAng = 0;
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
  float rollAng = 0;
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]

  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fb00 	bl	800255c <BSP_ACCELERO_GetXYZ>
 
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
 8002f5c:	89bb      	ldrh	r3, [r7, #12]
 8002f5e:	827b      	strh	r3, [r7, #18]
  yval = buffer[1];
 8002f60:	89fb      	ldrh	r3, [r7, #14]
 8002f62:	83bb      	strh	r3, [r7, #28]
 // FIRFilter_Update(&Acc_FIR_LPF, xval);
 // IIRFilter_Update(&Acc_IIR_LPF, xval);
  //printf(" %.3f, %.3f , %.3f \r\n",
  		 // 0.061035*buffer[0]*9.81/1000, 0.061035*buffer[1]*9.81/1000, 0.061035*buffer[2]*9.81/1000);

  for(uint8_t i=0; i<3; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e044      	b.n	8002ff4 <ACCELERO_ReadAcc+0xcc>
  {
	  FirstOrderIIR_Update(&Acc_FO_IIR[i], buffer[i]);
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4a7c      	ldr	r2, [pc, #496]	; (8003160 <ACCELERO_ReadAcc+0x238>)
 8002f70:	441a      	add	r2, r3
 8002f72:	7ffb      	ldrb	r3, [r7, #31]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	f107 0120 	add.w	r1, r7, #32
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f7ff fc12 	bl	80027b6 <FirstOrderIIR_Update>
	  acc[i] = 0.061035*Acc_FO_IIR[i].out*9.81/1000;
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	4a72      	ldr	r2, [pc, #456]	; (8003160 <ACCELERO_ReadAcc+0x238>)
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fad2 	bl	8000548 <__aeabi_f2d>
 8002fa4:	a36a      	add	r3, pc, #424	; (adr r3, 8003150 <ACCELERO_ReadAcc+0x228>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f7fd fb25 	bl	80005f8 <__aeabi_dmul>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	a368      	add	r3, pc, #416	; (adr r3, 8003158 <ACCELERO_ReadAcc+0x230>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd fb1c 	bl	80005f8 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	4b65      	ldr	r3, [pc, #404]	; (8003164 <ACCELERO_ReadAcc+0x23c>)
 8002fce:	f7fd fc3d 	bl	800084c <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	7ffc      	ldrb	r4, [r7, #31]
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f7fd fde4 	bl	8000ba8 <__aeabi_d2f>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	00a3      	lsls	r3, r4, #2
 8002fe4:	f107 0120 	add.w	r1, r7, #32
 8002fe8:	440b      	add	r3, r1
 8002fea:	3b20      	subs	r3, #32
 8002fec:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<3; i++)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d9b7      	bls.n	8002f6a <ACCELERO_ReadAcc+0x42>
  }

  /* Pitch Ang = asin(Ax / g) */
  pitchAng = asinf(acc[0] / 9.81) * RAD_TO_DEG;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd faa3 	bl	8000548 <__aeabi_f2d>
 8003002:	a355      	add	r3, pc, #340	; (adr r3, 8003158 <ACCELERO_ReadAcc+0x230>)
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f7fd fc20 	bl	800084c <__aeabi_ddiv>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f7fd fdc8 	bl	8000ba8 <__aeabi_d2f>
 8003018:	4603      	mov	r3, r0
 800301a:	ee00 3a10 	vmov	s0, r3
 800301e:	f004 fb6b 	bl	80076f8 <asinf>
 8003022:	eef0 7a40 	vmov.f32	s15, s0
 8003026:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003168 <ACCELERO_ReadAcc+0x240>
 800302a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Roll Ang = atan(Ay / Az) */
  rollAng = atanf(acc[1] / acc[2]) * RAD_TO_DEG;
 8003032:	ed97 7a01 	vldr	s14, [r7, #4]
 8003036:	edd7 7a02 	vldr	s15, [r7, #8]
 800303a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800303e:	eeb0 0a66 	vmov.f32	s0, s13
 8003042:	f004 f9d3 	bl	80073ec <atanf>
 8003046:	eef0 7a40 	vmov.f32	s15, s0
 800304a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003168 <ACCELERO_ReadAcc+0x240>
 800304e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003052:	edc7 7a05 	vstr	s15, [r7, #20]

  //printf(" %.3f, %.3f, %.3f", acc[0], acc[1], acc[2]);
  printf(" %.3f, %.3f\r\n", pitchAng, rollAng);
 8003056:	69b8      	ldr	r0, [r7, #24]
 8003058:	f7fd fa76 	bl	8000548 <__aeabi_f2d>
 800305c:	4604      	mov	r4, r0
 800305e:	460d      	mov	r5, r1
 8003060:	6978      	ldr	r0, [r7, #20]
 8003062:	f7fd fa71 	bl	8000548 <__aeabi_f2d>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	e9cd 2300 	strd	r2, r3, [sp]
 800306e:	4622      	mov	r2, r4
 8003070:	462b      	mov	r3, r5
 8003072:	483e      	ldr	r0, [pc, #248]	; (800316c <ACCELERO_ReadAcc+0x244>)
 8003074:	f005 ff02 	bl	8008e7c <iprintf>

  //HAL_Delay(500);

  if((ABS(xval))>(ABS(yval)))
 8003078:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800307c:	2b00      	cmp	r3, #0
 800307e:	bfb8      	it	lt
 8003080:	425b      	neglt	r3, r3
 8003082:	b29a      	uxth	r2, r3
 8003084:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	bfb8      	it	lt
 800308c:	425b      	neglt	r3, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	429a      	cmp	r2, r3
 8003092:	d91f      	bls.n	80030d4 <ACCELERO_ReadAcc+0x1ac>
  {
    if(xval > ThresholdHigh)
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <ACCELERO_ReadAcc+0x248>)
 8003096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800309e:	429a      	cmp	r2, r3
 80030a0:	dd06      	ble.n	80030b0 <ACCELERO_ReadAcc+0x188>
    { 
      /* LED10 On */
      BSP_LED_On(LED10);
 80030a2:	2007      	movs	r0, #7
 80030a4:	f7fe fe28 	bl	8001cf8 <BSP_LED_On>
      HAL_Delay(10);
 80030a8:	200a      	movs	r0, #10
 80030aa:	f000 fc47 	bl	800393c <HAL_Delay>
 80030ae:	e030      	b.n	8003112 <ACCELERO_ReadAcc+0x1ea>
    }
    else if(xval < ThresholdLow)
 80030b0:	4b30      	ldr	r3, [pc, #192]	; (8003174 <ACCELERO_ReadAcc+0x24c>)
 80030b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	da06      	bge.n	80030cc <ACCELERO_ReadAcc+0x1a4>
    { 
      /* LED3 On */
      BSP_LED_On(LED3);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fe fe1a 	bl	8001cf8 <BSP_LED_On>
      HAL_Delay(10);
 80030c4:	200a      	movs	r0, #10
 80030c6:	f000 fc39 	bl	800393c <HAL_Delay>
 80030ca:	e022      	b.n	8003112 <ACCELERO_ReadAcc+0x1ea>
    }
    else
    { 
      HAL_Delay(10);
 80030cc:	200a      	movs	r0, #10
 80030ce:	f000 fc35 	bl	800393c <HAL_Delay>
 80030d2:	e01e      	b.n	8003112 <ACCELERO_ReadAcc+0x1ea>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <ACCELERO_ReadAcc+0x24c>)
 80030d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030da:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	da06      	bge.n	80030f0 <ACCELERO_ReadAcc+0x1c8>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 80030e2:	2003      	movs	r0, #3
 80030e4:	f7fe fe08 	bl	8001cf8 <BSP_LED_On>
      HAL_Delay(10);
 80030e8:	200a      	movs	r0, #10
 80030ea:	f000 fc27 	bl	800393c <HAL_Delay>
 80030ee:	e010      	b.n	8003112 <ACCELERO_ReadAcc+0x1ea>
    }
    else if(yval > ThresholdHigh)
 80030f0:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <ACCELERO_ReadAcc+0x248>)
 80030f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	dd06      	ble.n	800310c <ACCELERO_ReadAcc+0x1e4>
    {
      /* LED7 On */
      BSP_LED_On(LED7);
 80030fe:	2004      	movs	r0, #4
 8003100:	f7fe fdfa 	bl	8001cf8 <BSP_LED_On>
      HAL_Delay(10);
 8003104:	200a      	movs	r0, #10
 8003106:	f000 fc19 	bl	800393c <HAL_Delay>
 800310a:	e002      	b.n	8003112 <ACCELERO_ReadAcc+0x1ea>
    } 
    else
  {	    
      HAL_Delay(10);
 800310c:	200a      	movs	r0, #10
 800310e:	f000 fc15 	bl	800393c <HAL_Delay>
    }
  } 
  
     BSP_LED_Off(LED3);
 8003112:	2000      	movs	r0, #0
 8003114:	f7fe fe0a 	bl	8001d2c <BSP_LED_Off>
     BSP_LED_Off(LED6);
 8003118:	2003      	movs	r0, #3
 800311a:	f7fe fe07 	bl	8001d2c <BSP_LED_Off>
     BSP_LED_Off(LED7);
 800311e:	2004      	movs	r0, #4
 8003120:	f7fe fe04 	bl	8001d2c <BSP_LED_Off>
     BSP_LED_Off(LED4);
 8003124:	2001      	movs	r0, #1
 8003126:	f7fe fe01 	bl	8001d2c <BSP_LED_Off>
     BSP_LED_Off(LED10);
 800312a:	2007      	movs	r0, #7
 800312c:	f7fe fdfe 	bl	8001d2c <BSP_LED_Off>
     BSP_LED_Off(LED8);
 8003130:	2005      	movs	r0, #5
 8003132:	f7fe fdfb 	bl	8001d2c <BSP_LED_Off>
     BSP_LED_Off(LED9);
 8003136:	2006      	movs	r0, #6
 8003138:	f7fe fdf8 	bl	8001d2c <BSP_LED_Off>
     BSP_LED_Off(LED5);
 800313c:	2002      	movs	r0, #2
 800313e:	f7fe fdf5 	bl	8001d2c <BSP_LED_Off>
}
 8003142:	bf00      	nop
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bdb0      	pop	{r4, r5, r7, pc}
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w
 8003150:	c1d29dc7 	.word	0xc1d29dc7
 8003154:	3faf3ffa 	.word	0x3faf3ffa
 8003158:	51eb851f 	.word	0x51eb851f
 800315c:	40239eb8 	.word	0x40239eb8
 8003160:	200004d4 	.word	0x200004d4
 8003164:	408f4000 	.word	0x408f4000
 8003168:	42651746 	.word	0x42651746
 800316c:	0800afa8 	.word	0x0800afa8
 8003170:	20000174 	.word	0x20000174
 8003174:	20000176 	.word	0x20000176

08003178 <GYRO_MEMS_Test>:
  *   MEMS peripheral.
  * @param None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 800317c:	f7ff f92c 	bl	80023d8 <BSP_ACCELERO_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <GYRO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8003186:	f7ff fea7 	bl	8002ed8 <Error_Handler>
  }
  
  UserPressButton = 0;
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <GYRO_MEMS_Test+0x30>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8003190:	e001      	b.n	8003196 <GYRO_MEMS_Test+0x1e>
  {
    GYRO_ReadAng();
 8003192:	f000 f80b 	bl	80031ac <GYRO_ReadAng>
  while(!UserPressButton)
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <GYRO_MEMS_Test+0x30>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f8      	beq.n	8003192 <GYRO_MEMS_Test+0x1a>
  }
}  
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000429 	.word	0x20000429

080031ac <GYRO_ReadAng>:

static void GYRO_ReadAng(void)
{
 80031ac:	b5b0      	push	{r4, r5, r7, lr}
 80031ae:	ed2d 8b04 	vpush	{d8-d9}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af02      	add	r7, sp, #8
  if((HAL_GetTick() - GyroTime) >= SAMPLE_TIME_GYRO)
 80031b6:	f000 fbb5 	bl	8003924 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b6c      	ldr	r3, [pc, #432]	; (8003370 <GYRO_ReadAng+0x1c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b13      	cmp	r3, #19
 80031c4:	f240 80cd 	bls.w	8003362 <GYRO_ReadAng+0x1b6>
  {

	  /* Init Gyroscope Mems */
	  if(BSP_GYRO_Init() != HAL_OK)
 80031c8:	f7ff f9dc 	bl	8002584 <BSP_GYRO_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <GYRO_ReadAng+0x2a>
	  {
		/* Initialization Error */
		Error_Handler();
 80031d2:	f7ff fe81 	bl	8002ed8 <Error_Handler>
	  }

	  /* Read Gyro Angular data */
	  BSP_GYRO_GetXYZ(Buffer);
 80031d6:	4867      	ldr	r0, [pc, #412]	; (8003374 <GYRO_ReadAng+0x1c8>)
 80031d8:	f7ff fa8a 	bl	80026f0 <BSP_GYRO_GetXYZ>

	  /* Update autoreload and capture compare registers value*/

	  /* dps */

	  for(uint8_t i=0; i<3; i++)
 80031dc:	2300      	movs	r3, #0
 80031de:	71fb      	strb	r3, [r7, #7]
 80031e0:	e026      	b.n	8003230 <GYRO_ReadAng+0x84>
	  {
		  FirstOrderIIR_Update(&Gyro_FO_IIR[i], Buffer[i]);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4a64      	ldr	r2, [pc, #400]	; (8003378 <GYRO_ReadAng+0x1cc>)
 80031e8:	441a      	add	r2, r3
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	4961      	ldr	r1, [pc, #388]	; (8003374 <GYRO_ReadAng+0x1c8>)
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	eeb0 0a67 	vmov.f32	s0, s15
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7ff fadb 	bl	80027b6 <FirstOrderIIR_Update>
		  angRate[i] = DEG_TO_RAD * L3GD20_SENSITIVITY_250DPS*Gyro_FO_IIR[i].out/1000;
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	4a5d      	ldr	r2, [pc, #372]	; (8003378 <GYRO_ReadAng+0x1cc>)
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800337c <GYRO_ReadAng+0x1d0>
 8003212:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	eddf 6a59 	vldr	s13, [pc, #356]	; 8003380 <GYRO_ReadAng+0x1d4>
 800321c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003220:	4a58      	ldr	r2, [pc, #352]	; (8003384 <GYRO_ReadAng+0x1d8>)
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	edc3 7a00 	vstr	s15, [r3]
	  for(uint8_t i=0; i<3; i++)
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	3301      	adds	r3, #1
 800322e:	71fb      	strb	r3, [r7, #7]
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d9d5      	bls.n	80031e2 <GYRO_ReadAng+0x36>
	  //printf("%.3f, %.3f, %.3f \r\n",angRate[0],angRate[1],angRate[2]);
	  //printf("%.3f, %.3f, %.3f \r\n",
			  //L3GD20_SENSITIVITY_250DPS*Xval/1000, L3GD20_SENSITIVITY_250DPS*Yval/1000,
			 // L3GD20_SENSITIVITY_250DPS*Zval/1000);
	  /* Body rates to Euler Rates */
	  pitchAng_dot = angRate[0] + tanf(pitchAng_Gyro) * (sinf(rollAng_Gyro) * angRate[1] + cosf(rollAng_Gyro) * angRate[2]);
 8003236:	4b53      	ldr	r3, [pc, #332]	; (8003384 <GYRO_ReadAng+0x1d8>)
 8003238:	ed93 8a00 	vldr	s16, [r3]
 800323c:	4b52      	ldr	r3, [pc, #328]	; (8003388 <GYRO_ReadAng+0x1dc>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	eeb0 0a67 	vmov.f32	s0, s15
 8003246:	f004 fa2f 	bl	80076a8 <tanf>
 800324a:	eeb0 9a40 	vmov.f32	s18, s0
 800324e:	4b4f      	ldr	r3, [pc, #316]	; (800338c <GYRO_ReadAng+0x1e0>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	eeb0 0a67 	vmov.f32	s0, s15
 8003258:	f004 f9e4 	bl	8007624 <sinf>
 800325c:	eeb0 7a40 	vmov.f32	s14, s0
 8003260:	4b48      	ldr	r3, [pc, #288]	; (8003384 <GYRO_ReadAng+0x1d8>)
 8003262:	edd3 7a01 	vldr	s15, [r3, #4]
 8003266:	ee67 8a27 	vmul.f32	s17, s14, s15
 800326a:	4b48      	ldr	r3, [pc, #288]	; (800338c <GYRO_ReadAng+0x1e0>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	eeb0 0a67 	vmov.f32	s0, s15
 8003274:	f004 f98e 	bl	8007594 <cosf>
 8003278:	eeb0 7a40 	vmov.f32	s14, s0
 800327c:	4b41      	ldr	r3, [pc, #260]	; (8003384 <GYRO_ReadAng+0x1d8>)
 800327e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003286:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800328a:	ee69 7a27 	vmul.f32	s15, s18, s15
 800328e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <GYRO_ReadAng+0x1e4>)
 8003294:	edc3 7a00 	vstr	s15, [r3]
	  rollAng_dot =	cosf(rollAng_Gyro) * angRate[1] - sinf(rollAng_Gyro) * angRate[2];
 8003298:	4b3c      	ldr	r3, [pc, #240]	; (800338c <GYRO_ReadAng+0x1e0>)
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	f004 f977 	bl	8007594 <cosf>
 80032a6:	eeb0 7a40 	vmov.f32	s14, s0
 80032aa:	4b36      	ldr	r3, [pc, #216]	; (8003384 <GYRO_ReadAng+0x1d8>)
 80032ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <GYRO_ReadAng+0x1e0>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	eeb0 0a67 	vmov.f32	s0, s15
 80032be:	f004 f9b1 	bl	8007624 <sinf>
 80032c2:	eeb0 7a40 	vmov.f32	s14, s0
 80032c6:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <GYRO_ReadAng+0x1d8>)
 80032c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80032cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80032d4:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <GYRO_ReadAng+0x1e8>)
 80032d6:	edc3 7a00 	vstr	s15, [r3]

	  pitchAng_Gyro = pitchAng_Gyro + (SAMPLE_TIME_GYRO / 1000.0f) * pitchAng_dot;
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <GYRO_ReadAng+0x1e4>)
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003398 <GYRO_ReadAng+0x1ec>
 80032e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <GYRO_ReadAng+0x1dc>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	4b25      	ldr	r3, [pc, #148]	; (8003388 <GYRO_ReadAng+0x1dc>)
 80032f4:	edc3 7a00 	vstr	s15, [r3]
	  rollAng_Gyro = rollAng_Gyro + (SAMPLE_TIME_GYRO / 1000.0f) * rollAng_dot;
 80032f8:	4b26      	ldr	r3, [pc, #152]	; (8003394 <GYRO_ReadAng+0x1e8>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003398 <GYRO_ReadAng+0x1ec>
 8003302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <GYRO_ReadAng+0x1e0>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <GYRO_ReadAng+0x1e0>)
 8003312:	edc3 7a00 	vstr	s15, [r3]

	  printf(" %.3f, %.3f\r\n", pitchAng_Gyro * RAD_TO_DEG, rollAng_Gyro * RAD_TO_DEG);
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <GYRO_ReadAng+0x1dc>)
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800339c <GYRO_ReadAng+0x1f0>
 8003320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003324:	ee17 0a90 	vmov	r0, s15
 8003328:	f7fd f90e 	bl	8000548 <__aeabi_f2d>
 800332c:	4604      	mov	r4, r0
 800332e:	460d      	mov	r5, r1
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <GYRO_ReadAng+0x1e0>)
 8003332:	edd3 7a00 	vldr	s15, [r3]
 8003336:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800339c <GYRO_ReadAng+0x1f0>
 800333a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800333e:	ee17 0a90 	vmov	r0, s15
 8003342:	f7fd f901 	bl	8000548 <__aeabi_f2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	e9cd 2300 	strd	r2, r3, [sp]
 800334e:	4622      	mov	r2, r4
 8003350:	462b      	mov	r3, r5
 8003352:	4813      	ldr	r0, [pc, #76]	; (80033a0 <GYRO_ReadAng+0x1f4>)
 8003354:	f005 fd92 	bl	8008e7c <iprintf>

	  GyroTime = HAL_GetTick();
 8003358:	f000 fae4 	bl	8003924 <HAL_GetTick>
 800335c:	4603      	mov	r3, r0
 800335e:	4a04      	ldr	r2, [pc, #16]	; (8003370 <GYRO_ReadAng+0x1c4>)
 8003360:	6013      	str	r3, [r2, #0]
  }
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	ecbd 8b04 	vpop	{d8-d9}
 800336c:	bdb0      	pop	{r4, r5, r7, pc}
 800336e:	bf00      	nop
 8003370:	20000434 	.word	0x20000434
 8003374:	20000558 	.word	0x20000558
 8003378:	200004ac 	.word	0x200004ac
 800337c:	3e1c71c8 	.word	0x3e1c71c8
 8003380:	447a0000 	.word	0x447a0000
 8003384:	20000438 	.word	0x20000438
 8003388:	20000444 	.word	0x20000444
 800338c:	20000448 	.word	0x20000448
 8003390:	2000044c 	.word	0x2000044c
 8003394:	20000450 	.word	0x20000450
 8003398:	3ca3d70a 	.word	0x3ca3d70a
 800339c:	42651746 	.word	0x42651746
 80033a0:	0800afa8 	.word	0x0800afa8

080033a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <MX_SPI1_Init+0x74>)
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <MX_SPI1_Init+0x78>)
 80033ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <MX_SPI1_Init+0x74>)
 80033b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033b6:	4b18      	ldr	r3, [pc, #96]	; (8003418 <MX_SPI1_Init+0x74>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <MX_SPI1_Init+0x74>)
 80033be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80033c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <MX_SPI1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <MX_SPI1_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <MX_SPI1_Init+0x74>)
 80033d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <MX_SPI1_Init+0x74>)
 80033da:	2210      	movs	r2, #16
 80033dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <MX_SPI1_Init+0x74>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <MX_SPI1_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <MX_SPI1_Init+0x74>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <MX_SPI1_Init+0x74>)
 80033f2:	2207      	movs	r2, #7
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <MX_SPI1_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <MX_SPI1_Init+0x74>)
 80033fe:	2208      	movs	r2, #8
 8003400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <MX_SPI1_Init+0x74>)
 8003404:	f002 ff34 	bl	8006270 <HAL_SPI_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800340e:	f7ff fd63 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000564 	.word	0x20000564
 800341c:	40013000 	.word	0x40013000

08003420 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_SPI_MspInit+0x7c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d128      	bne.n	8003494 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003442:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <HAL_SPI_MspInit+0x80>)
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_SPI_MspInit+0x80>)
 8003448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800344c:	6193      	str	r3, [r2, #24]
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_SPI_MspInit+0x80>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_SPI_MspInit+0x80>)
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <HAL_SPI_MspInit+0x80>)
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	6153      	str	r3, [r2, #20]
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_SPI_MspInit+0x80>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003472:	23e0      	movs	r3, #224	; 0xe0
 8003474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
 8003478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003482:	2305      	movs	r3, #5
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003486:	f107 0314 	add.w	r3, r7, #20
 800348a:	4619      	mov	r1, r3
 800348c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003490:	f000 fb8a 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003494:	bf00      	nop
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40013000 	.word	0x40013000
 80034a0:	40021000 	.word	0x40021000

080034a4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_SPI_MspDeInit+0x30>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10a      	bne.n	80034cc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_SPI_MspDeInit+0x34>)
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_SPI_MspDeInit+0x34>)
 80034bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034c0:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 80034c2:	21e0      	movs	r1, #224	; 0xe0
 80034c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c8:	f000 fce8 	bl	8003e9c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40013000 	.word	0x40013000
 80034d8:	40021000 	.word	0x40021000

080034dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_MspInit+0x44>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <HAL_MspInit+0x44>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6193      	str	r3, [r2, #24]
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_MspInit+0x44>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_MspInit+0x44>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_MspInit+0x44>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	61d3      	str	r3, [r2, #28]
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_MspInit+0x44>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003512:	2007      	movs	r0, #7
 8003514:	f000 fb06 	bl	8003b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000

08003524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <NMI_Handler+0x4>

0800352a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800352e:	e7fe      	b.n	800352e <HardFault_Handler+0x4>

08003530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003534:	e7fe      	b.n	8003534 <MemManage_Handler+0x4>

08003536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800353a:	e7fe      	b.n	800353a <BusFault_Handler+0x4>

0800353c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003540:	e7fe      	b.n	8003540 <UsageFault_Handler+0x4>

08003542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003570:	f000 f9c4 	bl	80038fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}

08003578 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 800357c:	2001      	movs	r0, #1
 800357e:	f000 fdb3 	bl	80040e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}

08003586 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
	return 1;
 800358a:	2301      	movs	r3, #1
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_kill>:

int _kill(int pid, int sig)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035a0:	f004 ffd0 	bl	8008544 <__errno>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2216      	movs	r2, #22
 80035a8:	601a      	str	r2, [r3, #0]
	return -1;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_exit>:

void _exit (int status)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035be:	f04f 31ff 	mov.w	r1, #4294967295
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffe7 	bl	8003596 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035c8:	e7fe      	b.n	80035c8 <_exit+0x12>

080035ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e00a      	b.n	80035f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035dc:	f3af 8000 	nop.w
 80035e0:	4601      	mov	r1, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	b2ca      	uxtb	r2, r1
 80035ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	dbf0      	blt.n	80035dc <_read+0x12>
	}

return len;
 80035fa:	687b      	ldr	r3, [r7, #4]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e009      	b.n	800362a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	60ba      	str	r2, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fc48 	bl	8002eb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	dbf1      	blt.n	8003616 <_write+0x12>
	}
	return len;
 8003632:	687b      	ldr	r3, [r7, #4]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_close>:

int _close(int file)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	return -1;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003664:	605a      	str	r2, [r3, #4]
	return 0;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_isatty>:

int _isatty(int file)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	return 1;
 800367c:	2301      	movs	r3, #1
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
	return 0;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <_sbrk+0x5c>)
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <_sbrk+0x60>)
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <_sbrk+0x64>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <_sbrk+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <_sbrk+0x64>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d207      	bcs.n	80036e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d4:	f004 ff36 	bl	8008544 <__errno>
 80036d8:	4603      	mov	r3, r0
 80036da:	220c      	movs	r2, #12
 80036dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e009      	b.n	80036f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <_sbrk+0x64>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	4a05      	ldr	r2, [pc, #20]	; (8003708 <_sbrk+0x64>)
 80036f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036f6:	68fb      	ldr	r3, [r7, #12]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	2000a000 	.word	0x2000a000
 8003704:	00000400 	.word	0x00000400
 8003708:	20000454 	.word	0x20000454
 800370c:	20000660 	.word	0x20000660

08003710 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <SystemInit+0x20>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	4a05      	ldr	r2, [pc, #20]	; (8003730 <SystemInit+0x20>)
 800371c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <MX_USART1_UART_Init+0x58>)
 800373a:	4a15      	ldr	r2, [pc, #84]	; (8003790 <MX_USART1_UART_Init+0x5c>)
 800373c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <MX_USART1_UART_Init+0x58>)
 8003740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <MX_USART1_UART_Init+0x58>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <MX_USART1_UART_Init+0x58>)
 800374e:	2200      	movs	r2, #0
 8003750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <MX_USART1_UART_Init+0x58>)
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <MX_USART1_UART_Init+0x58>)
 800375a:	220c      	movs	r2, #12
 800375c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <MX_USART1_UART_Init+0x58>)
 8003760:	2200      	movs	r2, #0
 8003762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <MX_USART1_UART_Init+0x58>)
 8003766:	2200      	movs	r2, #0
 8003768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <MX_USART1_UART_Init+0x58>)
 800376c:	2200      	movs	r2, #0
 800376e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <MX_USART1_UART_Init+0x58>)
 8003772:	2200      	movs	r2, #0
 8003774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003776:	4805      	ldr	r0, [pc, #20]	; (800378c <MX_USART1_UART_Init+0x58>)
 8003778:	f003 f9d2 	bl	8006b20 <HAL_UART_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003782:	f7ff fba9 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200005c8 	.word	0x200005c8
 8003790:	40013800 	.word	0x40013800

08003794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_UART_MspInit+0x7c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d127      	bne.n	8003806 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_UART_MspInit+0x80>)
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <HAL_UART_MspInit+0x80>)
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c0:	6193      	str	r3, [r2, #24]
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_UART_MspInit+0x80>)
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_UART_MspInit+0x80>)
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_UART_MspInit+0x80>)
 80037d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037d8:	6153      	str	r3, [r2, #20]
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_UART_MspInit+0x80>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037e6:	2330      	movs	r3, #48	; 0x30
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037f2:	2303      	movs	r3, #3
 80037f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037f6:	2307      	movs	r3, #7
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	4619      	mov	r1, r3
 8003800:	4805      	ldr	r0, [pc, #20]	; (8003818 <HAL_UART_MspInit+0x84>)
 8003802:	f000 f9d1 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003806:	bf00      	nop
 8003808:	3728      	adds	r7, #40	; 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40013800 	.word	0x40013800
 8003814:	40021000 	.word	0x40021000
 8003818:	48000800 	.word	0x48000800

0800381c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800381c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003854 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <LoopForever+0x6>)
  ldr r1, =_edata
 8003822:	490e      	ldr	r1, [pc, #56]	; (800385c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003824:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <LoopForever+0xe>)
  movs r3, #0
 8003826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003828:	e002      	b.n	8003830 <LoopCopyDataInit>

0800382a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800382c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382e:	3304      	adds	r3, #4

08003830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003834:	d3f9      	bcc.n	800382a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003836:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003838:	4c0b      	ldr	r4, [pc, #44]	; (8003868 <LoopForever+0x16>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800383c:	e001      	b.n	8003842 <LoopFillZerobss>

0800383e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003840:	3204      	adds	r2, #4

08003842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003844:	d3fb      	bcc.n	800383e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003846:	f7ff ff63 	bl	8003710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800384a:	f004 fe81 	bl	8008550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800384e:	f7ff f98b 	bl	8002b68 <main>

08003852 <LoopForever>:

LoopForever:
    b LoopForever
 8003852:	e7fe      	b.n	8003852 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003854:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800385c:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8003860:	0800b7dc 	.word	0x0800b7dc
  ldr r2, =_sbss
 8003864:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8003868:	20000660 	.word	0x20000660

0800386c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800386c:	e7fe      	b.n	800386c <ADC1_2_IRQHandler>
	...

08003870 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_Init+0x28>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_Init+0x28>)
 800387a:	f043 0310 	orr.w	r3, r3, #16
 800387e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003880:	2003      	movs	r0, #3
 8003882:	f000 f94f 	bl	8003b24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003886:	2000      	movs	r0, #0
 8003888:	f000 f808 	bl	800389c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800388c:	f7ff fe26 	bl	80034dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40022000 	.word	0x40022000

0800389c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a4:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_InitTick+0x54>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_InitTick+0x58>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f967 	bl	8003b8e <HAL_SYSTICK_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00e      	b.n	80038e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b0f      	cmp	r3, #15
 80038ce:	d80a      	bhi.n	80038e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d0:	2200      	movs	r2, #0
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	f000 f92f 	bl	8003b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038dc:	4a06      	ldr	r2, [pc, #24]	; (80038f8 <HAL_InitTick+0x5c>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000178 	.word	0x20000178
 80038f4:	20000180 	.word	0x20000180
 80038f8:	2000017c 	.word	0x2000017c

080038fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_IncTick+0x20>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_IncTick+0x24>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4413      	add	r3, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <HAL_IncTick+0x24>)
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000180 	.word	0x20000180
 8003920:	2000064c 	.word	0x2000064c

08003924 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return uwTick;  
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <HAL_GetTick+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	2000064c 	.word	0x2000064c

0800393c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff ffee 	bl	8003924 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_Delay+0x44>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003962:	bf00      	nop
 8003964:	f7ff ffde 	bl	8003924 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000180 	.word	0x20000180

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4907      	ldr	r1, [pc, #28]	; (8003a20 <__NVIC_EnableIRQ+0x38>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100

08003a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db0a      	blt.n	8003a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	490c      	ldr	r1, [pc, #48]	; (8003a70 <__NVIC_SetPriority+0x4c>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a4c:	e00a      	b.n	8003a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4908      	ldr	r1, [pc, #32]	; (8003a74 <__NVIC_SetPriority+0x50>)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3b04      	subs	r3, #4
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	440b      	add	r3, r1
 8003a62:	761a      	strb	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000e100 	.word	0xe000e100
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f1c3 0307 	rsb	r3, r3, #7
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf28      	it	cs
 8003a96:	2304      	movcs	r3, #4
 8003a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d902      	bls.n	8003aa8 <NVIC_EncodePriority+0x30>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3b03      	subs	r3, #3
 8003aa6:	e000      	b.n	8003aaa <NVIC_EncodePriority+0x32>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	401a      	ands	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43d9      	mvns	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	4313      	orrs	r3, r2
         );
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	; 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af0:	d301      	bcc.n	8003af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003af2:	2301      	movs	r3, #1
 8003af4:	e00f      	b.n	8003b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <SysTick_Config+0x40>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afe:	210f      	movs	r1, #15
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	f7ff ff8e 	bl	8003a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <SysTick_Config+0x40>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <SysTick_Config+0x40>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	e000e010 	.word	0xe000e010

08003b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff29 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b4c:	f7ff ff3e 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff ff8e 	bl	8003a78 <NVIC_EncodePriority>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ff5d 	bl	8003a24 <__NVIC_SetPriority>
}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff31 	bl	80039e8 <__NVIC_EnableIRQ>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffa2 	bl	8003ae0 <SysTick_Config>
 8003b9c:	4603      	mov	r3, r0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	e154      	b.n	8003e62 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8146 	beq.w	8003e5c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d005      	beq.n	8003be8 <HAL_GPIO_Init+0x40>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d130      	bne.n	8003c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c1e:	2201      	movs	r2, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0201 	and.w	r2, r3, #1
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d017      	beq.n	8003c86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d123      	bne.n	8003cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	08da      	lsrs	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3208      	adds	r2, #8
 8003cd4:	6939      	ldr	r1, [r7, #16]
 8003cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0203 	and.w	r2, r3, #3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80a0 	beq.w	8003e5c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6193      	str	r3, [r2, #24]
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d34:	4a53      	ldr	r2, [pc, #332]	; (8003e84 <HAL_GPIO_Init+0x2dc>)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	220f      	movs	r2, #15
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d5e:	d019      	beq.n	8003d94 <HAL_GPIO_Init+0x1ec>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a49      	ldr	r2, [pc, #292]	; (8003e88 <HAL_GPIO_Init+0x2e0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <HAL_GPIO_Init+0x1e8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a48      	ldr	r2, [pc, #288]	; (8003e8c <HAL_GPIO_Init+0x2e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00d      	beq.n	8003d8c <HAL_GPIO_Init+0x1e4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a47      	ldr	r2, [pc, #284]	; (8003e90 <HAL_GPIO_Init+0x2e8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <HAL_GPIO_Init+0x1e0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a46      	ldr	r2, [pc, #280]	; (8003e94 <HAL_GPIO_Init+0x2ec>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_GPIO_Init+0x1dc>
 8003d80:	2304      	movs	r3, #4
 8003d82:	e008      	b.n	8003d96 <HAL_GPIO_Init+0x1ee>
 8003d84:	2305      	movs	r3, #5
 8003d86:	e006      	b.n	8003d96 <HAL_GPIO_Init+0x1ee>
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e004      	b.n	8003d96 <HAL_GPIO_Init+0x1ee>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e002      	b.n	8003d96 <HAL_GPIO_Init+0x1ee>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_GPIO_Init+0x1ee>
 8003d94:	2300      	movs	r3, #0
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	f002 0203 	and.w	r2, r2, #3
 8003d9c:	0092      	lsls	r2, r2, #2
 8003d9e:	4093      	lsls	r3, r2
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da6:	4937      	ldr	r1, [pc, #220]	; (8003e84 <HAL_GPIO_Init+0x2dc>)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3302      	adds	r3, #2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db4:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003dd8:	4a2f      	ldr	r2, [pc, #188]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003dde:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e02:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e56:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f aea3 	bne.w	8003bb8 <HAL_GPIO_Init+0x10>
  }
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40010000 	.word	0x40010000
 8003e88:	48000400 	.word	0x48000400
 8003e8c:	48000800 	.word	0x48000800
 8003e90:	48000c00 	.word	0x48000c00
 8003e94:	48001000 	.word	0x48001000
 8003e98:	40010400 	.word	0x40010400

08003e9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003eaa:	e0b8      	b.n	800401e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003eac:	2201      	movs	r2, #1
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80ab 	beq.w	8004018 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ec2:	4a5e      	ldr	r2, [pc, #376]	; (800403c <HAL_GPIO_DeInit+0x1a0>)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	3302      	adds	r3, #2
 8003eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ece:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	220f      	movs	r2, #15
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eea:	d019      	beq.n	8003f20 <HAL_GPIO_DeInit+0x84>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a54      	ldr	r2, [pc, #336]	; (8004040 <HAL_GPIO_DeInit+0x1a4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_GPIO_DeInit+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a53      	ldr	r2, [pc, #332]	; (8004044 <HAL_GPIO_DeInit+0x1a8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00d      	beq.n	8003f18 <HAL_GPIO_DeInit+0x7c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a52      	ldr	r2, [pc, #328]	; (8004048 <HAL_GPIO_DeInit+0x1ac>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <HAL_GPIO_DeInit+0x78>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a51      	ldr	r2, [pc, #324]	; (800404c <HAL_GPIO_DeInit+0x1b0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_GPIO_DeInit+0x74>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e008      	b.n	8003f22 <HAL_GPIO_DeInit+0x86>
 8003f10:	2305      	movs	r3, #5
 8003f12:	e006      	b.n	8003f22 <HAL_GPIO_DeInit+0x86>
 8003f14:	2303      	movs	r3, #3
 8003f16:	e004      	b.n	8003f22 <HAL_GPIO_DeInit+0x86>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e002      	b.n	8003f22 <HAL_GPIO_DeInit+0x86>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_GPIO_DeInit+0x86>
 8003f20:	2300      	movs	r3, #0
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	f002 0203 	and.w	r2, r2, #3
 8003f28:	0092      	lsls	r2, r2, #2
 8003f2a:	4093      	lsls	r3, r2
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d132      	bne.n	8003f98 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	4945      	ldr	r1, [pc, #276]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	4941      	ldr	r1, [pc, #260]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f4e:	4b40      	ldr	r3, [pc, #256]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	493e      	ldr	r1, [pc, #248]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f5c:	4b3c      	ldr	r3, [pc, #240]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	493a      	ldr	r1, [pc, #232]	; (8004050 <HAL_GPIO_DeInit+0x1b4>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f7a:	4a30      	ldr	r2, [pc, #192]	; (800403c <HAL_GPIO_DeInit+0x1a0>)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	3302      	adds	r3, #2
 8003f82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	482c      	ldr	r0, [pc, #176]	; (800403c <HAL_GPIO_DeInit+0x1a0>)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	400a      	ands	r2, r1
 8003f92:	3302      	adds	r3, #2
 8003f94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	2103      	movs	r1, #3
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	08da      	lsrs	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	08d2      	lsrs	r2, r2, #3
 8003fce:	4019      	ands	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	2103      	movs	r1, #3
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	401a      	ands	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2103      	movs	r1, #3
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	401a      	ands	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3301      	adds	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	f47f af40 	bne.w	8003eac <HAL_GPIO_DeInit+0x10>
  }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40010000 	.word	0x40010000
 8004040:	48000400 	.word	0x48000400
 8004044:	48000800 	.word	0x48000800
 8004048:	48000c00 	.word	0x48000c00
 800404c:	48001000 	.word	0x48001000
 8004050:	40010400 	.word	0x40010400

08004054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	887b      	ldrh	r3, [r7, #2]
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
 8004070:	e001      	b.n	8004076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	807b      	strh	r3, [r7, #2]
 8004090:	4613      	mov	r3, r2
 8004092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004094:	787b      	ldrb	r3, [r7, #1]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040a0:	e002      	b.n	80040a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4013      	ands	r3, r2
 80040cc:	041a      	lsls	r2, r3, #16
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	43d9      	mvns	r1, r3
 80040d2:	887b      	ldrh	r3, [r7, #2]
 80040d4:	400b      	ands	r3, r1
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	619a      	str	r2, [r3, #24]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040fe:	4a05      	ldr	r2, [pc, #20]	; (8004114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fe36 	bl	8002d78 <HAL_GPIO_EXTI_Callback>
  }
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40010400 	.word	0x40010400

08004118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e081      	b.n	800422e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fe fcac 	bl	8002a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	e006      	b.n	80041a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800419e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d104      	bne.n	80041b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e021      	b.n	800428c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	; 0x24
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fe fc5f 	bl	8002b24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	f040 80f9 	bne.w	80044ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x34>
 80042c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0ed      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Mem_Write+0x4e>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0e6      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ea:	f7ff fb1b 	bl	8003924 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fad1 	bl	80048a4 <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d1      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2221      	movs	r2, #33	; 0x21
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004334:	88f8      	ldrh	r0, [r7, #6]
 8004336:	893a      	ldrh	r2, [r7, #8]
 8004338:	8979      	ldrh	r1, [r7, #10]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4603      	mov	r3, r0
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f9e1 	bl	800470c <I2C_RequestMemoryWrite>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0a9      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2bff      	cmp	r3, #255	; 0xff
 8004364:	d90e      	bls.n	8004384 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fbc3 	bl	8004b08 <I2C_TransferConfig>
 8004382:	e00f      	b.n	80043a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fbb2 	bl	8004b08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fabb 	bl	8004924 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e07b      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d034      	beq.n	800445c <HAL_I2C_Mem_Write+0x1c8>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d130      	bne.n	800445c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fa4d 	bl	80048a4 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04d      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2bff      	cmp	r3, #255	; 0xff
 800441c:	d90e      	bls.n	800443c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	22ff      	movs	r2, #255	; 0xff
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	8979      	ldrh	r1, [r7, #10]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fb67 	bl	8004b08 <I2C_TransferConfig>
 800443a:	e00f      	b.n	800445c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	b2da      	uxtb	r2, r3
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fb56 	bl	8004b08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d19e      	bne.n	80043a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa9a 	bl	80049a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01a      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2220      	movs	r2, #32
 8004480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_I2C_Mem_Write+0x224>)
 800448e:	400b      	ands	r3, r1
 8004490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	fe00e800 	.word	0xfe00e800

080044bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	817b      	strh	r3, [r7, #10]
 80044ce:	460b      	mov	r3, r1
 80044d0:	813b      	strh	r3, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	f040 80fd 	bne.w	80046de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_I2C_Mem_Read+0x34>
 80044ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0f1      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_I2C_Mem_Read+0x4e>
 8004506:	2302      	movs	r3, #2
 8004508:	e0ea      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004512:	f7ff fa07 	bl	8003924 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2319      	movs	r3, #25
 800451e:	2201      	movs	r2, #1
 8004520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f9bd 	bl	80048a4 <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0d5      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2222      	movs	r2, #34	; 0x22
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2240      	movs	r2, #64	; 0x40
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a3a      	ldr	r2, [r7, #32]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800455c:	88f8      	ldrh	r0, [r7, #6]
 800455e:	893a      	ldrh	r2, [r7, #8]
 8004560:	8979      	ldrh	r1, [r7, #10]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4603      	mov	r3, r0
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f921 	bl	80047b4 <I2C_RequestMemoryRead>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0ad      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2bff      	cmp	r3, #255	; 0xff
 800458c:	d90e      	bls.n	80045ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	b2da      	uxtb	r2, r3
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	4b52      	ldr	r3, [pc, #328]	; (80046e8 <HAL_I2C_Mem_Read+0x22c>)
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 faaf 	bl	8004b08 <I2C_TransferConfig>
 80045aa:	e00f      	b.n	80045cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_I2C_Mem_Read+0x22c>)
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa9e 	bl	8004b08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2200      	movs	r2, #0
 80045d4:	2104      	movs	r1, #4
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f964 	bl	80048a4 <I2C_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07c      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d034      	beq.n	800468c <HAL_I2C_Mem_Read+0x1d0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	d130      	bne.n	800468c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f935 	bl	80048a4 <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e04d      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2bff      	cmp	r3, #255	; 0xff
 800464c:	d90e      	bls.n	800466c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	b2da      	uxtb	r2, r3
 800465a:	8979      	ldrh	r1, [r7, #10]
 800465c:	2300      	movs	r3, #0
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa4f 	bl	8004b08 <I2C_TransferConfig>
 800466a:	e00f      	b.n	800468c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	8979      	ldrh	r1, [r7, #10]
 800467e:	2300      	movs	r3, #0
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fa3e 	bl	8004b08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d19a      	bne.n	80045cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f982 	bl	80049a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e01a      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2220      	movs	r2, #32
 80046b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_I2C_Mem_Read+0x230>)
 80046be:	400b      	ands	r3, r1
 80046c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e000      	b.n	80046e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046de:	2302      	movs	r3, #2
  }
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	80002400 	.word	0x80002400
 80046ec:	fe00e800 	.word	0xfe00e800

080046f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fe:	b2db      	uxtb	r3, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	4608      	mov	r0, r1
 8004716:	4611      	mov	r1, r2
 8004718:	461a      	mov	r2, r3
 800471a:	4603      	mov	r3, r0
 800471c:	817b      	strh	r3, [r7, #10]
 800471e:	460b      	mov	r3, r1
 8004720:	813b      	strh	r3, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <I2C_RequestMemoryWrite+0xa4>)
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f9e7 	bl	8004b08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f8f0 	bl	8004924 <I2C_WaitOnTXISFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e02c      	b.n	80047a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	629a      	str	r2, [r3, #40]	; 0x28
 800475e:	e015      	b.n	800478c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b29b      	uxth	r3, r3
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	69b9      	ldr	r1, [r7, #24]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f8d6 	bl	8004924 <I2C_WaitOnTXISFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e012      	b.n	80047a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004782:	893b      	ldrh	r3, [r7, #8]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2200      	movs	r2, #0
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f884 	bl	80048a4 <I2C_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	80002000 	.word	0x80002000

080047b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	8979      	ldrh	r1, [r7, #10]
 80047d4:	4b20      	ldr	r3, [pc, #128]	; (8004858 <I2C_RequestMemoryRead+0xa4>)
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f994 	bl	8004b08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	69b9      	ldr	r1, [r7, #24]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f89d 	bl	8004924 <I2C_WaitOnTXISFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e02c      	b.n	800484e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047fa:	893b      	ldrh	r3, [r7, #8]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
 8004804:	e015      	b.n	8004832 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004806:	893b      	ldrh	r3, [r7, #8]
 8004808:	0a1b      	lsrs	r3, r3, #8
 800480a:	b29b      	uxth	r3, r3
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f883 	bl	8004924 <I2C_WaitOnTXISFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e012      	b.n	800484e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004828:	893b      	ldrh	r3, [r7, #8]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2200      	movs	r2, #0
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f831 	bl	80048a4 <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	80002000 	.word	0x80002000

0800485c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d103      	bne.n	800487a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d007      	beq.n	8004898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	619a      	str	r2, [r3, #24]
  }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b4:	e022      	b.n	80048fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d01e      	beq.n	80048fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7ff f831 	bl	8003924 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e00f      	b.n	800491c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	429a      	cmp	r2, r3
 8004918:	d0cd      	beq.n	80048b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004930:	e02c      	b.n	800498c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f870 	bl	8004a1c <I2C_IsAcknowledgeFailed>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e02a      	b.n	800499c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d01e      	beq.n	800498c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fe ffe9 	bl	8003924 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d113      	bne.n	800498c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e007      	b.n	800499c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d1cb      	bne.n	8004932 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b0:	e028      	b.n	8004a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f830 	bl	8004a1c <I2C_IsAcknowledgeFailed>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e026      	b.n	8004a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fe ffad 	bl	8003924 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d113      	bne.n	8004a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e007      	b.n	8004a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d1cf      	bne.n	80049b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d161      	bne.n	8004afa <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a44:	d02b      	beq.n	8004a9e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a54:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a56:	e022      	b.n	8004a9e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d01e      	beq.n	8004a9e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a60:	f7fe ff60 	bl	8003924 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <I2C_IsAcknowledgeFailed+0x5a>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d113      	bne.n	8004a9e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e02e      	b.n	8004afc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d1d5      	bne.n	8004a58 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f7ff fecd 	bl	800485c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <I2C_IsAcknowledgeFailed+0xe8>)
 8004ace:	400b      	ands	r3, r1
 8004ad0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	fe00e800 	.word	0xfe00e800

08004b08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	4613      	mov	r3, r2
 8004b18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	0d5b      	lsrs	r3, r3, #21
 8004b24:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <I2C_TransferConfig+0x58>)
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	ea02 0103 	and.w	r1, r2, r3
 8004b32:	897b      	ldrh	r3, [r7, #10]
 8004b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b38:	7a7b      	ldrb	r3, [r7, #9]
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	03ff63ff 	.word	0x03ff63ff

08004b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d138      	bne.n	8004bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e032      	b.n	8004bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	; 0x24
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d139      	bne.n	8004c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e033      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2224      	movs	r2, #36	; 0x24
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f000 bef4 	b.w	8005a96 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 816a 	beq.w	8004f92 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004cbe:	4bb3      	ldr	r3, [pc, #716]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cca:	4bb0      	ldr	r3, [pc, #704]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d159      	bne.n	8004d8a <HAL_RCC_OscConfig+0xf6>
 8004cd6:	4bad      	ldr	r3, [pc, #692]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce2:	d152      	bne.n	8004d8a <HAL_RCC_OscConfig+0xf6>
 8004ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004cf8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCC_OscConfig+0x82>
 8004d10:	4b9e      	ldr	r3, [pc, #632]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	e015      	b.n	8004d42 <HAL_RCC_OscConfig+0xae>
 8004d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004d22:	fa93 f3a3 	rbit	r3, r3
 8004d26:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004d32:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004d36:	fa93 f3a3 	rbit	r3, r3
 8004d3a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004d3e:	4b93      	ldr	r3, [pc, #588]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d46:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004d4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004d4e:	fa92 f2a2 	rbit	r2, r2
 8004d52:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004d56:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004d5a:	fab2 f282 	clz	r2, r2
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	f042 0220 	orr.w	r2, r2, #32
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	f002 021f 	and.w	r2, r2, #31
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 810c 	beq.w	8004f90 <HAL_RCC_OscConfig+0x2fc>
 8004d78:	1d3b      	adds	r3, r7, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f040 8106 	bne.w	8004f90 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f000 be86 	b.w	8005a96 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d94:	d106      	bne.n	8004da4 <HAL_RCC_OscConfig+0x110>
 8004d96:	4b7d      	ldr	r3, [pc, #500]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a7c      	ldr	r2, [pc, #496]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e030      	b.n	8004e06 <HAL_RCC_OscConfig+0x172>
 8004da4:	1d3b      	adds	r3, r7, #4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x134>
 8004dae:	4b77      	ldr	r3, [pc, #476]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a76      	ldr	r2, [pc, #472]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b74      	ldr	r3, [pc, #464]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a73      	ldr	r2, [pc, #460]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e01e      	b.n	8004e06 <HAL_RCC_OscConfig+0x172>
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCC_OscConfig+0x15a>
 8004dd4:	4b6d      	ldr	r3, [pc, #436]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a6c      	ldr	r2, [pc, #432]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a69      	ldr	r2, [pc, #420]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	e00b      	b.n	8004e06 <HAL_RCC_OscConfig+0x172>
 8004dee:	4b67      	ldr	r3, [pc, #412]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a66      	ldr	r2, [pc, #408]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b64      	ldr	r3, [pc, #400]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a63      	ldr	r2, [pc, #396]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e04:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e06:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f023 020f 	bic.w	r2, r3, #15
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	495d      	ldr	r1, [pc, #372]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d059      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fe fd7e 	bl	8003924 <HAL_GetTick>
 8004e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e2e:	f7fe fd79 	bl	8003924 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d902      	bls.n	8004e44 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	f000 be29 	b.w	8005a96 <HAL_RCC_OscConfig+0xe02>
 8004e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004e58:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCC_OscConfig+0x1e2>
 8004e70:	4b46      	ldr	r3, [pc, #280]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	e015      	b.n	8004ea2 <HAL_RCC_OscConfig+0x20e>
 8004e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004e92:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004e96:	fa93 f3a3 	rbit	r3, r3
 8004e9a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ea6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004eaa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004eae:	fa92 f2a2 	rbit	r2, r2
 8004eb2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004eb6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004eba:	fab2 f282 	clz	r2, r2
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	f042 0220 	orr.w	r2, r2, #32
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	f002 021f 	and.w	r2, r2, #31
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ab      	beq.n	8004e2e <HAL_RCC_OscConfig+0x19a>
 8004ed6:	e05c      	b.n	8004f92 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fe fd24 	bl	8003924 <HAL_GetTick>
 8004edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee2:	f7fe fd1f 	bl	8003924 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b64      	cmp	r3, #100	; 0x64
 8004ef0:	d902      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	f000 bdcf 	b.w	8005a96 <HAL_RCC_OscConfig+0xe02>
 8004ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004efc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004f0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f10:	fab3 f383 	clz	r3, r3
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d102      	bne.n	8004f2a <HAL_RCC_OscConfig+0x296>
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	e015      	b.n	8004f56 <HAL_RCC_OscConfig+0x2c2>
 8004f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004f36:	fa93 f3a3 	rbit	r3, r3
 8004f3a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004f46:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004f4a:	fa93 f3a3 	rbit	r3, r3
 8004f4e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <HAL_RCC_OscConfig+0x2f8>)
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004f5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004f62:	fa92 f2a2 	rbit	r2, r2
 8004f66:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004f6a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004f6e:	fab2 f282 	clz	r2, r2
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	f042 0220 	orr.w	r2, r2, #32
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	f002 021f 	and.w	r2, r2, #31
 8004f7e:	2101      	movs	r1, #1
 8004f80:	fa01 f202 	lsl.w	r2, r1, r2
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ab      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x24e>
 8004f8a:	e002      	b.n	8004f92 <HAL_RCC_OscConfig+0x2fe>
 8004f8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 816f 	beq.w	8005280 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fa2:	4bd0      	ldr	r3, [pc, #832]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fae:	4bcd      	ldr	r3, [pc, #820]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d16c      	bne.n	8005094 <HAL_RCC_OscConfig+0x400>
 8004fba:	4bca      	ldr	r3, [pc, #808]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d166      	bne.n	8005094 <HAL_RCC_OscConfig+0x400>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004fd0:	fa93 f3a3 	rbit	r3, r3
 8004fd4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004fd8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d102      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x362>
 8004ff0:	4bbc      	ldr	r3, [pc, #752]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	e013      	b.n	800501e <HAL_RCC_OscConfig+0x38a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005008:	2302      	movs	r3, #2
 800500a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800500e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800501a:	4bb2      	ldr	r3, [pc, #712]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2202      	movs	r2, #2
 8005020:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005024:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005028:	fa92 f2a2 	rbit	r2, r2
 800502c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005030:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005034:	fab2 f282 	clz	r2, r2
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	f042 0220 	orr.w	r2, r2, #32
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	f002 021f 	and.w	r2, r2, #31
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f202 	lsl.w	r2, r1, r2
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_RCC_OscConfig+0x3cc>
 8005050:	1d3b      	adds	r3, r7, #4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d002      	beq.n	8005060 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f000 bd1b 	b.w	8005a96 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	4ba0      	ldr	r3, [pc, #640]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005068:	1d3b      	adds	r3, r7, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	21f8      	movs	r1, #248	; 0xf8
 8005070:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005078:	fa91 f1a1 	rbit	r1, r1
 800507c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005080:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005084:	fab1 f181 	clz	r1, r1
 8005088:	b2c9      	uxtb	r1, r1
 800508a:	408b      	lsls	r3, r1
 800508c:	4995      	ldr	r1, [pc, #596]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	e0f5      	b.n	8005280 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8085 	beq.w	80051aa <HAL_RCC_OscConfig+0x516>
 80050a0:	2301      	movs	r3, #1
 80050a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80050b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b6:	fab3 f383 	clz	r3, r3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	461a      	mov	r2, r3
 80050c8:	2301      	movs	r3, #1
 80050ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fe fc2a 	bl	8003924 <HAL_GetTick>
 80050d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d4:	e00a      	b.n	80050ec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d6:	f7fe fc25 	bl	8003924 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d902      	bls.n	80050ec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	f000 bcd5 	b.w	8005a96 <HAL_RCC_OscConfig+0xe02>
 80050ec:	2302      	movs	r3, #2
 80050ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80050fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_RCC_OscConfig+0x488>
 8005116:	4b73      	ldr	r3, [pc, #460]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e013      	b.n	8005144 <HAL_RCC_OscConfig+0x4b0>
 800511c:	2302      	movs	r3, #2
 800511e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005126:	fa93 f3a3 	rbit	r3, r3
 800512a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800512e:	2302      	movs	r3, #2
 8005130:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005134:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005138:	fa93 f3a3 	rbit	r3, r3
 800513c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2202      	movs	r2, #2
 8005146:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800514a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800514e:	fa92 f2a2 	rbit	r2, r2
 8005152:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005156:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800515a:	fab2 f282 	clz	r2, r2
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	f042 0220 	orr.w	r2, r2, #32
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	f002 021f 	and.w	r2, r2, #31
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f202 	lsl.w	r2, r1, r2
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0af      	beq.n	80050d6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	21f8      	movs	r1, #248	; 0xf8
 8005186:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800518e:	fa91 f1a1 	rbit	r1, r1
 8005192:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005196:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800519a:	fab1 f181 	clz	r1, r1
 800519e:	b2c9      	uxtb	r1, r1
 80051a0:	408b      	lsls	r3, r1
 80051a2:	4950      	ldr	r1, [pc, #320]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]
 80051a8:	e06a      	b.n	8005280 <HAL_RCC_OscConfig+0x5ec>
 80051aa:	2301      	movs	r3, #1
 80051ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80051b4:	fa93 f3a3 	rbit	r3, r3
 80051b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80051bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c0:	fab3 f383 	clz	r3, r3
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d6:	f7fe fba5 	bl	8003924 <HAL_GetTick>
 80051da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e0:	f7fe fba0 	bl	8003924 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d902      	bls.n	80051f6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	f000 bc50 	b.w	8005a96 <HAL_RCC_OscConfig+0xe02>
 80051f6:	2302      	movs	r3, #2
 80051f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005200:	fa93 f3a3 	rbit	r3, r3
 8005204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520c:	fab3 f383 	clz	r3, r3
 8005210:	b2db      	uxtb	r3, r3
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d102      	bne.n	8005226 <HAL_RCC_OscConfig+0x592>
 8005220:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	e013      	b.n	800524e <HAL_RCC_OscConfig+0x5ba>
 8005226:	2302      	movs	r3, #2
 8005228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005230:	fa93 f3a3 	rbit	r3, r3
 8005234:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005238:	2302      	movs	r3, #2
 800523a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800523e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005242:	fa93 f3a3 	rbit	r3, r3
 8005246:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800524a:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <HAL_RCC_OscConfig+0x650>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2202      	movs	r2, #2
 8005250:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005254:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005258:	fa92 f2a2 	rbit	r2, r2
 800525c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005260:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005264:	fab2 f282 	clz	r2, r2
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	f042 0220 	orr.w	r2, r2, #32
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	f002 021f 	and.w	r2, r2, #31
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f202 	lsl.w	r2, r1, r2
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1af      	bne.n	80051e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80da 	beq.w	8005444 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d069      	beq.n	800536e <HAL_RCC_OscConfig+0x6da>
 800529a:	2301      	movs	r3, #1
 800529c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80052ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_OscConfig+0x654>)
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	461a      	mov	r2, r3
 80052c0:	2301      	movs	r3, #1
 80052c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c4:	f7fe fb2e 	bl	8003924 <HAL_GetTick>
 80052c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052cc:	e00e      	b.n	80052ec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ce:	f7fe fb29 	bl	8003924 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d906      	bls.n	80052ec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e3d9      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000
 80052e8:	10908120 	.word	0x10908120
 80052ec:	2302      	movs	r3, #2
 80052ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005302:	2202      	movs	r2, #2
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	fa93 f2a3 	rbit	r2, r3
 8005310:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800531a:	2202      	movs	r2, #2
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	fa93 f2a3 	rbit	r2, r3
 8005328:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800532c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532e:	4ba5      	ldr	r3, [pc, #660]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005332:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005336:	2102      	movs	r1, #2
 8005338:	6019      	str	r1, [r3, #0]
 800533a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	fa93 f1a3 	rbit	r1, r3
 8005344:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005348:	6019      	str	r1, [r3, #0]
  return result;
 800534a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	fab3 f383 	clz	r3, r3
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2101      	movs	r1, #1
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0b0      	beq.n	80052ce <HAL_RCC_OscConfig+0x63a>
 800536c:	e06a      	b.n	8005444 <HAL_RCC_OscConfig+0x7b0>
 800536e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005376:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	fa93 f2a3 	rbit	r2, r3
 8005380:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005384:	601a      	str	r2, [r3, #0]
  return result;
 8005386:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800538a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	4b8c      	ldr	r3, [pc, #560]	; (80055c8 <HAL_RCC_OscConfig+0x934>)
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	461a      	mov	r2, r3
 800539c:	2300      	movs	r3, #0
 800539e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a0:	f7fe fac0 	bl	8003924 <HAL_GetTick>
 80053a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a8:	e009      	b.n	80053be <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053aa:	f7fe fabb 	bl	8003924 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e36b      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
 80053be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80053c2:	2202      	movs	r2, #2
 80053c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80053da:	2202      	movs	r2, #2
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	fa93 f2a3 	rbit	r2, r3
 80053e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80053f2:	2202      	movs	r2, #2
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	fa93 f2a3 	rbit	r2, r3
 8005400:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005404:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005406:	4b6f      	ldr	r3, [pc, #444]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800540e:	2102      	movs	r1, #2
 8005410:	6019      	str	r1, [r3, #0]
 8005412:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	fa93 f1a3 	rbit	r1, r3
 800541c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005420:	6019      	str	r1, [r3, #0]
  return result;
 8005422:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	fab3 f383 	clz	r3, r3
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	2101      	movs	r1, #1
 800543a:	fa01 f303 	lsl.w	r3, r1, r3
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1b2      	bne.n	80053aa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8158 	beq.w	8005704 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005454:	2300      	movs	r3, #0
 8005456:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b5a      	ldr	r3, [pc, #360]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d112      	bne.n	800548c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	4b57      	ldr	r3, [pc, #348]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4a56      	ldr	r2, [pc, #344]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005470:	61d3      	str	r3, [r2, #28]
 8005472:	4b54      	ldr	r3, [pc, #336]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800547a:	f107 0308 	add.w	r3, r7, #8
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548c:	4b4f      	ldr	r3, [pc, #316]	; (80055cc <HAL_RCC_OscConfig+0x938>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11a      	bne.n	80054ce <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005498:	4b4c      	ldr	r3, [pc, #304]	; (80055cc <HAL_RCC_OscConfig+0x938>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a4b      	ldr	r2, [pc, #300]	; (80055cc <HAL_RCC_OscConfig+0x938>)
 800549e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a4:	f7fe fa3e 	bl	8003924 <HAL_GetTick>
 80054a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ac:	e009      	b.n	80054c2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ae:	f7fe fa39 	bl	8003924 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e2e9      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c2:	4b42      	ldr	r3, [pc, #264]	; (80055cc <HAL_RCC_OscConfig+0x938>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0ef      	beq.n	80054ae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d106      	bne.n	80054e6 <HAL_RCC_OscConfig+0x852>
 80054d8:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	4a39      	ldr	r2, [pc, #228]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6213      	str	r3, [r2, #32]
 80054e4:	e02f      	b.n	8005546 <HAL_RCC_OscConfig+0x8b2>
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10c      	bne.n	800550a <HAL_RCC_OscConfig+0x876>
 80054f0:	4b34      	ldr	r3, [pc, #208]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4a33      	ldr	r2, [pc, #204]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	6213      	str	r3, [r2, #32]
 80054fc:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	4a30      	ldr	r2, [pc, #192]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005502:	f023 0304 	bic.w	r3, r3, #4
 8005506:	6213      	str	r3, [r2, #32]
 8005508:	e01d      	b.n	8005546 <HAL_RCC_OscConfig+0x8b2>
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b05      	cmp	r3, #5
 8005512:	d10c      	bne.n	800552e <HAL_RCC_OscConfig+0x89a>
 8005514:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 800551a:	f043 0304 	orr.w	r3, r3, #4
 800551e:	6213      	str	r3, [r2, #32]
 8005520:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	4a27      	ldr	r2, [pc, #156]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	6213      	str	r3, [r2, #32]
 800552c:	e00b      	b.n	8005546 <HAL_RCC_OscConfig+0x8b2>
 800552e:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	6213      	str	r3, [r2, #32]
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 8005540:	f023 0304 	bic.w	r3, r3, #4
 8005544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d06b      	beq.n	8005628 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005550:	f7fe f9e8 	bl	8003924 <HAL_GetTick>
 8005554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005558:	e00b      	b.n	8005572 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800555a:	f7fe f9e3 	bl	8003924 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e291      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
 8005572:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005576:	2202      	movs	r2, #2
 8005578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	fa93 f2a3 	rbit	r2, r3
 8005584:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800558e:	2202      	movs	r2, #2
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	fa93 f2a3 	rbit	r2, r3
 800559c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80055a0:	601a      	str	r2, [r3, #0]
  return result;
 80055a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80055a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a8:	fab3 f383 	clz	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f043 0302 	orr.w	r3, r3, #2
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d109      	bne.n	80055d0 <HAL_RCC_OscConfig+0x93c>
 80055bc:	4b01      	ldr	r3, [pc, #4]	; (80055c4 <HAL_RCC_OscConfig+0x930>)
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	e014      	b.n	80055ec <HAL_RCC_OscConfig+0x958>
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000
 80055c8:	10908120 	.word	0x10908120
 80055cc:	40007000 	.word	0x40007000
 80055d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80055d4:	2202      	movs	r2, #2
 80055d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	fa93 f2a3 	rbit	r2, r3
 80055e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	4bbb      	ldr	r3, [pc, #748]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80055f0:	2102      	movs	r1, #2
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	fa92 f1a2 	rbit	r1, r2
 80055fe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005602:	6011      	str	r1, [r2, #0]
  return result;
 8005604:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	fab2 f282 	clz	r2, r2
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	f002 021f 	and.w	r2, r2, #31
 800561a:	2101      	movs	r1, #1
 800561c:	fa01 f202 	lsl.w	r2, r1, r2
 8005620:	4013      	ands	r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d099      	beq.n	800555a <HAL_RCC_OscConfig+0x8c6>
 8005626:	e063      	b.n	80056f0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005628:	f7fe f97c 	bl	8003924 <HAL_GetTick>
 800562c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005630:	e00b      	b.n	800564a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7fe f977 	bl	8003924 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e225      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
 800564a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800564e:	2202      	movs	r2, #2
 8005650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	fa93 f2a3 	rbit	r2, r3
 800565c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005666:	2202      	movs	r2, #2
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	fa93 f2a3 	rbit	r2, r3
 8005674:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005678:	601a      	str	r2, [r3, #0]
  return result;
 800567a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800567e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f043 0302 	orr.w	r3, r3, #2
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d102      	bne.n	800569a <HAL_RCC_OscConfig+0xa06>
 8005694:	4b90      	ldr	r3, [pc, #576]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	e00d      	b.n	80056b6 <HAL_RCC_OscConfig+0xa22>
 800569a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800569e:	2202      	movs	r2, #2
 80056a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	fa93 f2a3 	rbit	r2, r3
 80056ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	4b89      	ldr	r3, [pc, #548]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80056ba:	2102      	movs	r1, #2
 80056bc:	6011      	str	r1, [r2, #0]
 80056be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	fa92 f1a2 	rbit	r1, r2
 80056c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80056cc:	6011      	str	r1, [r2, #0]
  return result;
 80056ce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	fab2 f282 	clz	r2, r2
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	f002 021f 	and.w	r2, r2, #31
 80056e4:	2101      	movs	r1, #1
 80056e6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1a0      	bne.n	8005632 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f8:	4b77      	ldr	r3, [pc, #476]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	4a76      	ldr	r2, [pc, #472]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 80056fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005702:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005704:	1d3b      	adds	r3, r7, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 81c2 	beq.w	8005a94 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005710:	4b71      	ldr	r3, [pc, #452]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	f000 819c 	beq.w	8005a56 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	2b02      	cmp	r3, #2
 8005726:	f040 8114 	bne.w	8005952 <HAL_RCC_OscConfig+0xcbe>
 800572a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800572e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005734:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	fa93 f2a3 	rbit	r2, r3
 800573e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005742:	601a      	str	r2, [r3, #0]
  return result;
 8005744:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005748:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574a:	fab3 f383 	clz	r3, r3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	461a      	mov	r2, r3
 800575c:	2300      	movs	r3, #0
 800575e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fe f8e0 	bl	8003924 <HAL_GetTick>
 8005764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005768:	e009      	b.n	800577e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576a:	f7fe f8db 	bl	8003924 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e18b      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
 800577e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	fa93 f2a3 	rbit	r2, r3
 8005792:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005796:	601a      	str	r2, [r3, #0]
  return result;
 8005798:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800579c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800579e:	fab3 f383 	clz	r3, r3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d102      	bne.n	80057b8 <HAL_RCC_OscConfig+0xb24>
 80057b2:	4b49      	ldr	r3, [pc, #292]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	e01b      	b.n	80057f0 <HAL_RCC_OscConfig+0xb5c>
 80057b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80057bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	fa93 f2a3 	rbit	r2, r3
 80057cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80057d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	fa93 f2a3 	rbit	r2, r3
 80057e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	4b3a      	ldr	r3, [pc, #232]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80057f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057f8:	6011      	str	r1, [r2, #0]
 80057fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	fa92 f1a2 	rbit	r1, r2
 8005804:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005808:	6011      	str	r1, [r2, #0]
  return result;
 800580a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	fab2 f282 	clz	r2, r2
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	f042 0220 	orr.w	r2, r2, #32
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	f002 021f 	and.w	r2, r2, #31
 8005820:	2101      	movs	r1, #1
 8005822:	fa01 f202 	lsl.w	r2, r1, r2
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d19e      	bne.n	800576a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800582c:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	430b      	orrs	r3, r1
 8005842:	4925      	ldr	r1, [pc, #148]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 8005844:	4313      	orrs	r3, r2
 8005846:	604b      	str	r3, [r1, #4]
 8005848:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800584c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005852:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	fa93 f2a3 	rbit	r2, r3
 800585c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005860:	601a      	str	r2, [r3, #0]
  return result;
 8005862:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005866:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005868:	fab3 f383 	clz	r3, r3
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	461a      	mov	r2, r3
 800587a:	2301      	movs	r3, #1
 800587c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587e:	f7fe f851 	bl	8003924 <HAL_GetTick>
 8005882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005886:	e009      	b.n	800589c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005888:	f7fe f84c 	bl	8003924 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e0fc      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
 800589c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	fa93 f2a3 	rbit	r2, r3
 80058b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058b4:	601a      	str	r2, [r3, #0]
  return result;
 80058b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058bc:	fab3 f383 	clz	r3, r3
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d105      	bne.n	80058dc <HAL_RCC_OscConfig+0xc48>
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <HAL_RCC_OscConfig+0xc44>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	e01e      	b.n	8005914 <HAL_RCC_OscConfig+0xc80>
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000
 80058dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	fa93 f2a3 	rbit	r2, r3
 80058f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	fa93 f2a3 	rbit	r2, r3
 800590a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	4b63      	ldr	r3, [pc, #396]	; (8005aa0 <HAL_RCC_OscConfig+0xe0c>)
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005918:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	fa92 f1a2 	rbit	r1, r2
 8005928:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800592c:	6011      	str	r1, [r2, #0]
  return result;
 800592e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	fab2 f282 	clz	r2, r2
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	f042 0220 	orr.w	r2, r2, #32
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	f002 021f 	and.w	r2, r2, #31
 8005944:	2101      	movs	r1, #1
 8005946:	fa01 f202 	lsl.w	r2, r1, r2
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d09b      	beq.n	8005888 <HAL_RCC_OscConfig+0xbf4>
 8005950:	e0a0      	b.n	8005a94 <HAL_RCC_OscConfig+0xe00>
 8005952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800595a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	fa93 f2a3 	rbit	r2, r3
 8005966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800596a:	601a      	str	r2, [r3, #0]
  return result;
 800596c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005970:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800597c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	461a      	mov	r2, r3
 8005984:	2300      	movs	r3, #0
 8005986:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005988:	f7fd ffcc 	bl	8003924 <HAL_GetTick>
 800598c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005990:	e009      	b.n	80059a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005992:	f7fd ffc7 	bl	8003924 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e077      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
 80059a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	fa93 f2a3 	rbit	r2, r3
 80059ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059be:	601a      	str	r2, [r3, #0]
  return result;
 80059c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c6:	fab3 f383 	clz	r3, r3
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d102      	bne.n	80059e0 <HAL_RCC_OscConfig+0xd4c>
 80059da:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <HAL_RCC_OscConfig+0xe0c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	e01b      	b.n	8005a18 <HAL_RCC_OscConfig+0xd84>
 80059e0:	f107 0320 	add.w	r3, r7, #32
 80059e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ea:	f107 0320 	add.w	r3, r7, #32
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	fa93 f2a3 	rbit	r2, r3
 80059f4:	f107 031c 	add.w	r3, r7, #28
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	f107 0318 	add.w	r3, r7, #24
 80059fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f107 0318 	add.w	r3, r7, #24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	fa93 f2a3 	rbit	r2, r3
 8005a0e:	f107 0314 	add.w	r3, r7, #20
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <HAL_RCC_OscConfig+0xe0c>)
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	f107 0210 	add.w	r2, r7, #16
 8005a1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	f107 0210 	add.w	r2, r7, #16
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	fa92 f1a2 	rbit	r1, r2
 8005a2c:	f107 020c 	add.w	r2, r7, #12
 8005a30:	6011      	str	r1, [r2, #0]
  return result;
 8005a32:	f107 020c 	add.w	r2, r7, #12
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	fab2 f282 	clz	r2, r2
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	f042 0220 	orr.w	r2, r2, #32
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	f002 021f 	and.w	r2, r2, #31
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d19e      	bne.n	8005992 <HAL_RCC_OscConfig+0xcfe>
 8005a54:	e01e      	b.n	8005a94 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a56:	1d3b      	adds	r3, r7, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e018      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <HAL_RCC_OscConfig+0xe0c>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d108      	bne.n	8005a90 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005a7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40021000 	.word	0x40021000

08005aa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b09e      	sub	sp, #120	; 0x78
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e162      	b.n	8005d82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005abc:	4b90      	ldr	r3, [pc, #576]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d910      	bls.n	8005aec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4b8d      	ldr	r3, [pc, #564]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 0207 	bic.w	r2, r3, #7
 8005ad2:	498b      	ldr	r1, [pc, #556]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b89      	ldr	r3, [pc, #548]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e14a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af8:	4b82      	ldr	r3, [pc, #520]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	497f      	ldr	r1, [pc, #508]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80dc 	beq.w	8005cd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d13c      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xf6>
 8005b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b28:	fa93 f3a3 	rbit	r3, r3
 8005b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b30:	fab3 f383 	clz	r3, r3
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d102      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xa6>
 8005b44:	4b6f      	ldr	r3, [pc, #444]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	e00f      	b.n	8005b6a <HAL_RCC_ClockConfig+0xc6>
 8005b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b52:	fa93 f3a3 	rbit	r3, r3
 8005b56:	667b      	str	r3, [r7, #100]	; 0x64
 8005b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b60:	fa93 f3a3 	rbit	r3, r3
 8005b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b66:	4b67      	ldr	r3, [pc, #412]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b72:	fa92 f2a2 	rbit	r2, r2
 8005b76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b7a:	fab2 f282 	clz	r2, r2
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	f042 0220 	orr.w	r2, r2, #32
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	f002 021f 	and.w	r2, r2, #31
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d17b      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0f3      	b.n	8005d82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d13c      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x178>
 8005ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ba6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb2:	fab3 f383 	clz	r3, r3
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d102      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x128>
 8005bc6:	4b4f      	ldr	r3, [pc, #316]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	e00f      	b.n	8005bec <HAL_RCC_ClockConfig+0x148>
 8005bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd4:	fa93 f3a3 	rbit	r3, r3
 8005bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bde:	643b      	str	r3, [r7, #64]	; 0x40
 8005be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be2:	fa93 f3a3 	rbit	r3, r3
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be8:	4b46      	ldr	r3, [pc, #280]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bf0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf4:	fa92 f2a2 	rbit	r2, r2
 8005bf8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bfc:	fab2 f282 	clz	r2, r2
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	f042 0220 	orr.w	r2, r2, #32
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	f002 021f 	and.w	r2, r2, #31
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d13a      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0b2      	b.n	8005d82 <HAL_RCC_ClockConfig+0x2de>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	fa93 f3a3 	rbit	r3, r3
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	fab3 f383 	clz	r3, r3
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d102      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x1a0>
 8005c3e:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	e00d      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1bc>
 8005c44:	2302      	movs	r3, #2
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c50:	2302      	movs	r3, #2
 8005c52:	623b      	str	r3, [r7, #32]
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2202      	movs	r2, #2
 8005c62:	61ba      	str	r2, [r7, #24]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	fa92 f2a2 	rbit	r2, r2
 8005c6a:	617a      	str	r2, [r7, #20]
  return result;
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	fab2 f282 	clz	r2, r2
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	f042 0220 	orr.w	r2, r2, #32
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	f002 021f 	and.w	r2, r2, #31
 8005c7e:	2101      	movs	r1, #1
 8005c80:	fa01 f202 	lsl.w	r2, r1, r2
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e079      	b.n	8005d82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8e:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f023 0203 	bic.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	491a      	ldr	r1, [pc, #104]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca0:	f7fd fe40 	bl	8003924 <HAL_GetTick>
 8005ca4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca8:	f7fd fe3c 	bl	8003924 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e061      	b.n	8005d82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <HAL_RCC_ClockConfig+0x260>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f003 020c 	and.w	r2, r3, #12
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1eb      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d214      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 0207 	bic.w	r2, r3, #7
 8005ce6:	4906      	ldr	r1, [pc, #24]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <HAL_RCC_ClockConfig+0x25c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e040      	b.n	8005d82 <HAL_RCC_ClockConfig+0x2de>
 8005d00:	40022000 	.word	0x40022000
 8005d04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_RCC_ClockConfig+0x2e8>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	491a      	ldr	r1, [pc, #104]	; (8005d8c <HAL_RCC_ClockConfig+0x2e8>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d32:	4b16      	ldr	r3, [pc, #88]	; (8005d8c <HAL_RCC_ClockConfig+0x2e8>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4912      	ldr	r1, [pc, #72]	; (8005d8c <HAL_RCC_ClockConfig+0x2e8>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d46:	f000 f829 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <HAL_RCC_ClockConfig+0x2e8>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d54:	22f0      	movs	r2, #240	; 0xf0
 8005d56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	fa92 f2a2 	rbit	r2, r2
 8005d5e:	60fa      	str	r2, [r7, #12]
  return result;
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	fab2 f282 	clz	r2, r2
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	40d3      	lsrs	r3, r2
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <HAL_RCC_ClockConfig+0x2ec>)
 8005d6c:	5cd3      	ldrb	r3, [r2, r3]
 8005d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d72:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <HAL_RCC_ClockConfig+0x2f0>)
 8005d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d76:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <HAL_RCC_ClockConfig+0x2f4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fd fd8e 	bl	800389c <HAL_InitTick>
  
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3778      	adds	r7, #120	; 0x78
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	0800afc8 	.word	0x0800afc8
 8005d94:	20000178 	.word	0x20000178
 8005d98:	2000017c 	.word	0x2000017c

08005d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b08b      	sub	sp, #44	; 0x2c
 8005da0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005db6:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d002      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x30>
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d003      	beq.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x36>
 8005dca:	e03c      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dcc:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dce:	623b      	str	r3, [r7, #32]
      break;
 8005dd0:	e03c      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005dd8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ddc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	fa92 f2a2 	rbit	r2, r2
 8005de4:	607a      	str	r2, [r7, #4]
  return result;
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	fab2 f282 	clz	r2, r2
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	40d3      	lsrs	r3, r2
 8005df0:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005df2:	5cd3      	ldrb	r3, [r2, r3]
 8005df4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005df6:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	220f      	movs	r2, #15
 8005e00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	fa92 f2a2 	rbit	r2, r2
 8005e08:	60fa      	str	r2, [r7, #12]
  return result;
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	fab2 f282 	clz	r2, r2
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	40d3      	lsrs	r3, r2
 8005e14:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e16:	5cd3      	ldrb	r3, [r2, r3]
 8005e18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e24:	4a0e      	ldr	r2, [pc, #56]	; (8005e60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	e004      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	623b      	str	r3, [r7, #32]
      break;
 8005e44:	e002      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e48:	623b      	str	r3, [r7, #32]
      break;
 8005e4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	372c      	adds	r7, #44	; 0x2c
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	007a1200 	.word	0x007a1200
 8005e64:	0800afe0 	.word	0x0800afe0
 8005e68:	0800aff0 	.word	0x0800aff0
 8005e6c:	003d0900 	.word	0x003d0900

08005e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e74:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e76:	681b      	ldr	r3, [r3, #0]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000178 	.word	0x20000178

08005e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e8e:	f7ff ffef 	bl	8005e70 <HAL_RCC_GetHCLKFreq>
 8005e92:	4601      	mov	r1, r0
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005ea0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	fa92 f2a2 	rbit	r2, r2
 8005ea8:	603a      	str	r2, [r7, #0]
  return result;
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	fab2 f282 	clz	r2, r2
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	40d3      	lsrs	r3, r2
 8005eb4:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005eb6:	5cd3      	ldrb	r3, [r2, r3]
 8005eb8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	0800afd8 	.word	0x0800afd8

08005ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005ed2:	f7ff ffcd 	bl	8005e70 <HAL_RCC_GetHCLKFreq>
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005ee0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005ee4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	fa92 f2a2 	rbit	r2, r2
 8005eec:	603a      	str	r2, [r7, #0]
  return result;
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	fab2 f282 	clz	r2, r2
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	40d3      	lsrs	r3, r2
 8005ef8:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005efa:	5cd3      	ldrb	r3, [r2, r3]
 8005efc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	0800afd8 	.word	0x0800afd8

08005f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b092      	sub	sp, #72	; 0x48
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80d4 	beq.w	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f34:	4b4e      	ldr	r3, [pc, #312]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10e      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f40:	4b4b      	ldr	r3, [pc, #300]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4a4a      	ldr	r2, [pc, #296]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	61d3      	str	r3, [r2, #28]
 8005f4c:	4b48      	ldr	r3, [pc, #288]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5e:	4b45      	ldr	r3, [pc, #276]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d118      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f6a:	4b42      	ldr	r3, [pc, #264]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a41      	ldr	r2, [pc, #260]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f76:	f7fd fcd5 	bl	8003924 <HAL_GetTick>
 8005f7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7c:	e008      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f7e:	f7fd fcd1 	bl	8003924 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b64      	cmp	r3, #100	; 0x64
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e169      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f90:	4b38      	ldr	r3, [pc, #224]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f9c:	4b34      	ldr	r3, [pc, #208]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8084 	beq.w	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d07c      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fbc:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	fa93 f3a3 	rbit	r3, r3
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fd6:	fab3 f383 	clz	r3, r3
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4b26      	ldr	r3, [pc, #152]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	fa93 f3a3 	rbit	r3, r3
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ffa:	fab3 f383 	clz	r3, r3
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	461a      	mov	r2, r3
 800600a:	2300      	movs	r3, #0
 800600c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800600e:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006012:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d04b      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601e:	f7fd fc81 	bl	8003924 <HAL_GetTick>
 8006022:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006024:	e00a      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006026:	f7fd fc7d 	bl	8003924 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f241 3288 	movw	r2, #5000	; 0x1388
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e113      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800603c:	2302      	movs	r3, #2
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	fa93 f3a3 	rbit	r3, r3
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
 8006048:	2302      	movs	r3, #2
 800604a:	623b      	str	r3, [r7, #32]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	fa93 f3a3 	rbit	r3, r3
 8006052:	61fb      	str	r3, [r7, #28]
  return result;
 8006054:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006056:	fab3 f383 	clz	r3, r3
 800605a:	b2db      	uxtb	r3, r3
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d108      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800606a:	4b01      	ldr	r3, [pc, #4]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	e00d      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006070:	40021000 	.word	0x40021000
 8006074:	40007000 	.word	0x40007000
 8006078:	10908100 	.word	0x10908100
 800607c:	2302      	movs	r3, #2
 800607e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	fa93 f3a3 	rbit	r3, r3
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	4b78      	ldr	r3, [pc, #480]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	2202      	movs	r2, #2
 800608e:	613a      	str	r2, [r7, #16]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	fa92 f2a2 	rbit	r2, r2
 8006096:	60fa      	str	r2, [r7, #12]
  return result;
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	fab2 f282 	clz	r2, r2
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	f002 021f 	and.w	r2, r2, #31
 80060aa:	2101      	movs	r1, #1
 80060ac:	fa01 f202 	lsl.w	r2, r1, r2
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0b7      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80060b6:	4b6d      	ldr	r3, [pc, #436]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	496a      	ldr	r1, [pc, #424]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d105      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d0:	4b66      	ldr	r3, [pc, #408]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	4a65      	ldr	r2, [pc, #404]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060e8:	4b60      	ldr	r3, [pc, #384]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	f023 0203 	bic.w	r2, r3, #3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	495d      	ldr	r1, [pc, #372]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006106:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	4956      	ldr	r1, [pc, #344]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006124:	4b51      	ldr	r3, [pc, #324]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	494e      	ldr	r1, [pc, #312]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006132:	4313      	orrs	r3, r2
 8006134:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006142:	4b4a      	ldr	r3, [pc, #296]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f023 0210 	bic.w	r2, r3, #16
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4947      	ldr	r1, [pc, #284]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006150:	4313      	orrs	r3, r2
 8006152:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006160:	4b42      	ldr	r3, [pc, #264]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	493f      	ldr	r1, [pc, #252]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800616e:	4313      	orrs	r3, r2
 8006170:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800617e:	4b3b      	ldr	r3, [pc, #236]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	f023 0220 	bic.w	r2, r3, #32
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	4938      	ldr	r1, [pc, #224]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800619c:	4b33      	ldr	r3, [pc, #204]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	4930      	ldr	r1, [pc, #192]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0310 	and.w	r3, r3, #16
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061ba:	4b2c      	ldr	r3, [pc, #176]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	4929      	ldr	r1, [pc, #164]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061d8:	4b24      	ldr	r3, [pc, #144]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4921      	ldr	r1, [pc, #132]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	491a      	ldr	r1, [pc, #104]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006204:	4313      	orrs	r3, r2
 8006206:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006214:	4b15      	ldr	r3, [pc, #84]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	4912      	ldr	r1, [pc, #72]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006232:	4b0e      	ldr	r3, [pc, #56]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	490b      	ldr	r1, [pc, #44]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006240:	4313      	orrs	r3, r2
 8006242:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	4903      	ldr	r1, [pc, #12]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800625e:	4313      	orrs	r3, r2
 8006260:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3748      	adds	r7, #72	; 0x48
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40021000 	.word	0x40021000

08006270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e09d      	b.n	80063be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	d108      	bne.n	800629c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006292:	d009      	beq.n	80062a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
 800629a:	e005      	b.n	80062a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fd f8ac 	bl	8003420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062e8:	d902      	bls.n	80062f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	e002      	b.n	80062f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80062fe:	d007      	beq.n	8006310 <HAL_SPI_Init+0xa0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006308:	d002      	beq.n	8006310 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	ea42 0103 	orr.w	r1, r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	0c1b      	lsrs	r3, r3, #16
 800636c:	f003 0204 	and.w	r2, r3, #4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800638c:	ea42 0103 	orr.w	r1, r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e01a      	b.n	800640e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fd f857 	bl	80034a4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b08a      	sub	sp, #40	; 0x28
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006424:	2301      	movs	r3, #1
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_SPI_TransmitReceive+0x26>
 8006438:	2302      	movs	r3, #2
 800643a:	e1fb      	b.n	8006834 <HAL_SPI_TransmitReceive+0x41e>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006444:	f7fd fa6e 	bl	8003924 <HAL_GetTick>
 8006448:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006450:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800645c:	887b      	ldrh	r3, [r7, #2]
 800645e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006460:	7efb      	ldrb	r3, [r7, #27]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d00e      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x6e>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800646c:	d106      	bne.n	800647c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <HAL_SPI_TransmitReceive+0x66>
 8006476:	7efb      	ldrb	r3, [r7, #27]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d003      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800647c:	2302      	movs	r3, #2
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006482:	e1cd      	b.n	8006820 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <HAL_SPI_TransmitReceive+0x80>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SPI_TransmitReceive+0x80>
 8006490:	887b      	ldrh	r3, [r7, #2]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800649c:	e1c0      	b.n	8006820 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d003      	beq.n	80064b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2205      	movs	r2, #5
 80064ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	887a      	ldrh	r2, [r7, #2]
 80064c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	887a      	ldrh	r2, [r7, #2]
 80064ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	887a      	ldrh	r2, [r7, #2]
 80064d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	887a      	ldrh	r2, [r7, #2]
 80064de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064f4:	d802      	bhi.n	80064fc <HAL_SPI_TransmitReceive+0xe6>
 80064f6:	8a3b      	ldrh	r3, [r7, #16]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d908      	bls.n	800650e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	e007      	b.n	800651e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b40      	cmp	r3, #64	; 0x40
 800652a:	d007      	beq.n	800653c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800653a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006544:	d97c      	bls.n	8006640 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x13e>
 800654e:	8a7b      	ldrh	r3, [r7, #18]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d169      	bne.n	8006628 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006578:	e056      	b.n	8006628 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d11b      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x1aa>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d016      	beq.n	80065c0 <HAL_SPI_TransmitReceive+0x1aa>
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	2b01      	cmp	r3, #1
 8006596:	d113      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	881a      	ldrh	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	1c9a      	adds	r2, r3, #2
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d11c      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x1f2>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	b292      	uxth	r2, r2
 80065e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	1c9a      	adds	r2, r3, #2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006604:	2301      	movs	r3, #1
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006608:	f7fd f98c 	bl	8003924 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006614:	429a      	cmp	r2, r3
 8006616:	d807      	bhi.n	8006628 <HAL_SPI_TransmitReceive+0x212>
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d003      	beq.n	8006628 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006626:	e0fb      	b.n	8006820 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1a3      	bne.n	800657a <HAL_SPI_TransmitReceive+0x164>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d19d      	bne.n	800657a <HAL_SPI_TransmitReceive+0x164>
 800663e:	e0df      	b.n	8006800 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_SPI_TransmitReceive+0x23a>
 8006648:	8a7b      	ldrh	r3, [r7, #18]
 800664a:	2b01      	cmp	r3, #1
 800664c:	f040 80cb 	bne.w	80067e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b01      	cmp	r3, #1
 8006658:	d912      	bls.n	8006680 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	881a      	ldrh	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b02      	subs	r3, #2
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800667e:	e0b2      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a6:	e09e      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d134      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x30a>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d02f      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x30a>
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d12c      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d912      	bls.n	80066f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	881a      	ldrh	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	1c9a      	adds	r2, r3, #2
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b02      	subs	r3, #2
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066f4:	e012      	b.n	800671c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	d148      	bne.n	80067c0 <HAL_SPI_TransmitReceive+0x3aa>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d042      	beq.n	80067c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b01      	cmp	r3, #1
 8006744:	d923      	bls.n	800678e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	b292      	uxth	r2, r2
 8006752:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	1c9a      	adds	r2, r3, #2
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b02      	subs	r3, #2
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	d81f      	bhi.n	80067bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	e016      	b.n	80067bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f103 020c 	add.w	r2, r3, #12
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	7812      	ldrb	r2, [r2, #0]
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067bc:	2301      	movs	r3, #1
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067c0:	f7fd f8b0 	bl	8003924 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d803      	bhi.n	80067d8 <HAL_SPI_TransmitReceive+0x3c2>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d102      	bne.n	80067de <HAL_SPI_TransmitReceive+0x3c8>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80067e4:	e01c      	b.n	8006820 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f af5b 	bne.w	80066a8 <HAL_SPI_TransmitReceive+0x292>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f47f af54 	bne.w	80066a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f945 	bl	8006a94 <SPI_EndRxTxTransaction>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	661a      	str	r2, [r3, #96]	; 0x60
 800681c:	e000      	b.n	8006820 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800681e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006834:	4618      	mov	r0, r3
 8006836:	3728      	adds	r7, #40	; 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800684a:	b2db      	uxtb	r3, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006868:	f7fd f85c 	bl	8003924 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4413      	add	r3, r2
 8006876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006878:	f7fd f854 	bl	8003924 <HAL_GetTick>
 800687c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800687e:	4b39      	ldr	r3, [pc, #228]	; (8006964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	015b      	lsls	r3, r3, #5
 8006884:	0d1b      	lsrs	r3, r3, #20
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688e:	e054      	b.n	800693a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d050      	beq.n	800693a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006898:	f7fd f844 	bl	8003924 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d902      	bls.n	80068ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d13d      	bne.n	800692a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c6:	d111      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d0:	d004      	beq.n	80068dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d107      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d10f      	bne.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e017      	b.n	800695a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	3b01      	subs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4013      	ands	r3, r2
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	bf0c      	ite	eq
 800694a:	2301      	moveq	r3, #1
 800694c:	2300      	movne	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	429a      	cmp	r2, r3
 8006956:	d19b      	bne.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000178 	.word	0x20000178

08006968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800697a:	f7fc ffd3 	bl	8003924 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	4413      	add	r3, r2
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800698a:	f7fc ffcb 	bl	8003924 <HAL_GetTick>
 800698e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006998:	4b3d      	ldr	r3, [pc, #244]	; (8006a90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	00da      	lsls	r2, r3, #3
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	0d1b      	lsrs	r3, r3, #20
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069b0:	e060      	b.n	8006a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069b8:	d107      	bne.n	80069ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d050      	beq.n	8006a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069d2:	f7fc ffa7 	bl	8003924 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069de:	429a      	cmp	r2, r3
 80069e0:	d902      	bls.n	80069e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d13d      	bne.n	8006a64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a00:	d111      	bne.n	8006a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0a:	d004      	beq.n	8006a16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a14:	d107      	bne.n	8006a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2e:	d10f      	bne.n	8006a50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e010      	b.n	8006a86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d196      	bne.n	80069b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3728      	adds	r7, #40	; 0x28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000178 	.word	0x20000178

08006a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff ff5b 	bl	8006968 <SPI_WaitFifoStateUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abc:	f043 0220 	orr.w	r2, r3, #32
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e027      	b.n	8006b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2180      	movs	r1, #128	; 0x80
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fec0 	bl	8006858 <SPI_WaitFlagStateUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae2:	f043 0220 	orr.w	r2, r3, #32
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e014      	b.n	8006b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff ff34 	bl	8006968 <SPI_WaitFifoStateUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0a:	f043 0220 	orr.w	r2, r3, #32
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e000      	b.n	8006b18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e040      	b.n	8006bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fc fe26 	bl	8003794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2224      	movs	r2, #36	; 0x24
 8006b4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8c0 	bl	8006ce4 <UART_SetConfig>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e022      	b.n	8006bb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa88 	bl	800708c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fb0f 	bl	80071d0 <UART_CheckIdleState>
 8006bb2:	4603      	mov	r3, r0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	f040 8082 	bne.w	8006cda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_UART_Transmit+0x26>
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e07a      	b.n	8006cdc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_UART_Transmit+0x38>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e073      	b.n	8006cdc <HAL_UART_Transmit+0x120>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2221      	movs	r2, #33	; 0x21
 8006c08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c0a:	f7fc fe8b 	bl	8003924 <HAL_GetTick>
 8006c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	88fa      	ldrh	r2, [r7, #6]
 8006c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c28:	d108      	bne.n	8006c3c <HAL_UART_Transmit+0x80>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e003      	b.n	8006c44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006c4c:	e02d      	b.n	8006caa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2200      	movs	r2, #0
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fb02 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e039      	b.n	8006cdc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10b      	bne.n	8006c86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	881a      	ldrh	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	3302      	adds	r3, #2
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e008      	b.n	8006c98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	3301      	adds	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1cb      	bne.n	8006c4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2140      	movs	r1, #64	; 0x40
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 face 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e005      	b.n	8006cdc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d12:	f023 030c 	bic.w	r3, r3, #12
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	6979      	ldr	r1, [r7, #20]
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4aae      	ldr	r2, [pc, #696]	; (8007018 <UART_SetConfig+0x334>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d120      	bne.n	8006da6 <UART_SetConfig+0xc2>
 8006d64:	4bad      	ldr	r3, [pc, #692]	; (800701c <UART_SetConfig+0x338>)
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d817      	bhi.n	8006da0 <UART_SetConfig+0xbc>
 8006d70:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0x94>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006d89 	.word	0x08006d89
 8006d7c:	08006d95 	.word	0x08006d95
 8006d80:	08006d9b 	.word	0x08006d9b
 8006d84:	08006d8f 	.word	0x08006d8f
 8006d88:	2301      	movs	r3, #1
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e0b5      	b.n	8006efa <UART_SetConfig+0x216>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e0b2      	b.n	8006efa <UART_SetConfig+0x216>
 8006d94:	2304      	movs	r3, #4
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e0af      	b.n	8006efa <UART_SetConfig+0x216>
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e0ac      	b.n	8006efa <UART_SetConfig+0x216>
 8006da0:	2310      	movs	r3, #16
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e0a9      	b.n	8006efa <UART_SetConfig+0x216>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a9d      	ldr	r2, [pc, #628]	; (8007020 <UART_SetConfig+0x33c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d124      	bne.n	8006dfa <UART_SetConfig+0x116>
 8006db0:	4b9a      	ldr	r3, [pc, #616]	; (800701c <UART_SetConfig+0x338>)
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006db8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dbc:	d011      	beq.n	8006de2 <UART_SetConfig+0xfe>
 8006dbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dc2:	d817      	bhi.n	8006df4 <UART_SetConfig+0x110>
 8006dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc8:	d011      	beq.n	8006dee <UART_SetConfig+0x10a>
 8006dca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dce:	d811      	bhi.n	8006df4 <UART_SetConfig+0x110>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <UART_SetConfig+0xf8>
 8006dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd8:	d006      	beq.n	8006de8 <UART_SetConfig+0x104>
 8006dda:	e00b      	b.n	8006df4 <UART_SetConfig+0x110>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e08b      	b.n	8006efa <UART_SetConfig+0x216>
 8006de2:	2302      	movs	r3, #2
 8006de4:	77fb      	strb	r3, [r7, #31]
 8006de6:	e088      	b.n	8006efa <UART_SetConfig+0x216>
 8006de8:	2304      	movs	r3, #4
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e085      	b.n	8006efa <UART_SetConfig+0x216>
 8006dee:	2308      	movs	r3, #8
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e082      	b.n	8006efa <UART_SetConfig+0x216>
 8006df4:	2310      	movs	r3, #16
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e07f      	b.n	8006efa <UART_SetConfig+0x216>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a89      	ldr	r2, [pc, #548]	; (8007024 <UART_SetConfig+0x340>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d124      	bne.n	8006e4e <UART_SetConfig+0x16a>
 8006e04:	4b85      	ldr	r3, [pc, #532]	; (800701c <UART_SetConfig+0x338>)
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e10:	d011      	beq.n	8006e36 <UART_SetConfig+0x152>
 8006e12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e16:	d817      	bhi.n	8006e48 <UART_SetConfig+0x164>
 8006e18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e1c:	d011      	beq.n	8006e42 <UART_SetConfig+0x15e>
 8006e1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e22:	d811      	bhi.n	8006e48 <UART_SetConfig+0x164>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <UART_SetConfig+0x14c>
 8006e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e2c:	d006      	beq.n	8006e3c <UART_SetConfig+0x158>
 8006e2e:	e00b      	b.n	8006e48 <UART_SetConfig+0x164>
 8006e30:	2300      	movs	r3, #0
 8006e32:	77fb      	strb	r3, [r7, #31]
 8006e34:	e061      	b.n	8006efa <UART_SetConfig+0x216>
 8006e36:	2302      	movs	r3, #2
 8006e38:	77fb      	strb	r3, [r7, #31]
 8006e3a:	e05e      	b.n	8006efa <UART_SetConfig+0x216>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e05b      	b.n	8006efa <UART_SetConfig+0x216>
 8006e42:	2308      	movs	r3, #8
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e058      	b.n	8006efa <UART_SetConfig+0x216>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e055      	b.n	8006efa <UART_SetConfig+0x216>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a75      	ldr	r2, [pc, #468]	; (8007028 <UART_SetConfig+0x344>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d124      	bne.n	8006ea2 <UART_SetConfig+0x1be>
 8006e58:	4b70      	ldr	r3, [pc, #448]	; (800701c <UART_SetConfig+0x338>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e64:	d011      	beq.n	8006e8a <UART_SetConfig+0x1a6>
 8006e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e6a:	d817      	bhi.n	8006e9c <UART_SetConfig+0x1b8>
 8006e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e70:	d011      	beq.n	8006e96 <UART_SetConfig+0x1b2>
 8006e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e76:	d811      	bhi.n	8006e9c <UART_SetConfig+0x1b8>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <UART_SetConfig+0x1a0>
 8006e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e80:	d006      	beq.n	8006e90 <UART_SetConfig+0x1ac>
 8006e82:	e00b      	b.n	8006e9c <UART_SetConfig+0x1b8>
 8006e84:	2300      	movs	r3, #0
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e037      	b.n	8006efa <UART_SetConfig+0x216>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e034      	b.n	8006efa <UART_SetConfig+0x216>
 8006e90:	2304      	movs	r3, #4
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e031      	b.n	8006efa <UART_SetConfig+0x216>
 8006e96:	2308      	movs	r3, #8
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e02e      	b.n	8006efa <UART_SetConfig+0x216>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e02b      	b.n	8006efa <UART_SetConfig+0x216>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a61      	ldr	r2, [pc, #388]	; (800702c <UART_SetConfig+0x348>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d124      	bne.n	8006ef6 <UART_SetConfig+0x212>
 8006eac:	4b5b      	ldr	r3, [pc, #364]	; (800701c <UART_SetConfig+0x338>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eb8:	d011      	beq.n	8006ede <UART_SetConfig+0x1fa>
 8006eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ebe:	d817      	bhi.n	8006ef0 <UART_SetConfig+0x20c>
 8006ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ec4:	d011      	beq.n	8006eea <UART_SetConfig+0x206>
 8006ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eca:	d811      	bhi.n	8006ef0 <UART_SetConfig+0x20c>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <UART_SetConfig+0x1f4>
 8006ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed4:	d006      	beq.n	8006ee4 <UART_SetConfig+0x200>
 8006ed6:	e00b      	b.n	8006ef0 <UART_SetConfig+0x20c>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e00d      	b.n	8006efa <UART_SetConfig+0x216>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e00a      	b.n	8006efa <UART_SetConfig+0x216>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	77fb      	strb	r3, [r7, #31]
 8006ee8:	e007      	b.n	8006efa <UART_SetConfig+0x216>
 8006eea:	2308      	movs	r3, #8
 8006eec:	77fb      	strb	r3, [r7, #31]
 8006eee:	e004      	b.n	8006efa <UART_SetConfig+0x216>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e001      	b.n	8006efa <UART_SetConfig+0x216>
 8006ef6:	2310      	movs	r3, #16
 8006ef8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f02:	d15c      	bne.n	8006fbe <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006f04:	7ffb      	ldrb	r3, [r7, #31]
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d827      	bhi.n	8006f5a <UART_SetConfig+0x276>
 8006f0a:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <UART_SetConfig+0x22c>)
 8006f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f3d 	.word	0x08006f3d
 8006f18:	08006f45 	.word	0x08006f45
 8006f1c:	08006f5b 	.word	0x08006f5b
 8006f20:	08006f4b 	.word	0x08006f4b
 8006f24:	08006f5b 	.word	0x08006f5b
 8006f28:	08006f5b 	.word	0x08006f5b
 8006f2c:	08006f5b 	.word	0x08006f5b
 8006f30:	08006f53 	.word	0x08006f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f34:	f7fe ffa8 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 8006f38:	61b8      	str	r0, [r7, #24]
        break;
 8006f3a:	e013      	b.n	8006f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f3c:	f7fe ffc6 	bl	8005ecc <HAL_RCC_GetPCLK2Freq>
 8006f40:	61b8      	str	r0, [r7, #24]
        break;
 8006f42:	e00f      	b.n	8006f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f44:	4b3a      	ldr	r3, [pc, #232]	; (8007030 <UART_SetConfig+0x34c>)
 8006f46:	61bb      	str	r3, [r7, #24]
        break;
 8006f48:	e00c      	b.n	8006f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4a:	f7fe ff27 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 8006f4e:	61b8      	str	r0, [r7, #24]
        break;
 8006f50:	e008      	b.n	8006f64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f56:	61bb      	str	r3, [r7, #24]
        break;
 8006f58:	e004      	b.n	8006f64 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	77bb      	strb	r3, [r7, #30]
        break;
 8006f62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8085 	beq.w	8007076 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	005a      	lsls	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b0f      	cmp	r3, #15
 8006f88:	d916      	bls.n	8006fb8 <UART_SetConfig+0x2d4>
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f90:	d212      	bcs.n	8006fb8 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f023 030f 	bic.w	r3, r3, #15
 8006f9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	89fb      	ldrh	r3, [r7, #14]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	89fa      	ldrh	r2, [r7, #14]
 8006fb4:	60da      	str	r2, [r3, #12]
 8006fb6:	e05e      	b.n	8007076 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	77bb      	strb	r3, [r7, #30]
 8006fbc:	e05b      	b.n	8007076 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fbe:	7ffb      	ldrb	r3, [r7, #31]
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d837      	bhi.n	8007034 <UART_SetConfig+0x350>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0x2e8>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08006ff9 	.word	0x08006ff9
 8006fd4:	08007001 	.word	0x08007001
 8006fd8:	08007035 	.word	0x08007035
 8006fdc:	08007007 	.word	0x08007007
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	08007035 	.word	0x08007035
 8006fec:	0800700f 	.word	0x0800700f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff0:	f7fe ff4a 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 8006ff4:	61b8      	str	r0, [r7, #24]
        break;
 8006ff6:	e022      	b.n	800703e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff8:	f7fe ff68 	bl	8005ecc <HAL_RCC_GetPCLK2Freq>
 8006ffc:	61b8      	str	r0, [r7, #24]
        break;
 8006ffe:	e01e      	b.n	800703e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007000:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <UART_SetConfig+0x34c>)
 8007002:	61bb      	str	r3, [r7, #24]
        break;
 8007004:	e01b      	b.n	800703e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007006:	f7fe fec9 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 800700a:	61b8      	str	r0, [r7, #24]
        break;
 800700c:	e017      	b.n	800703e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007012:	61bb      	str	r3, [r7, #24]
        break;
 8007014:	e013      	b.n	800703e <UART_SetConfig+0x35a>
 8007016:	bf00      	nop
 8007018:	40013800 	.word	0x40013800
 800701c:	40021000 	.word	0x40021000
 8007020:	40004400 	.word	0x40004400
 8007024:	40004800 	.word	0x40004800
 8007028:	40004c00 	.word	0x40004c00
 800702c:	40005000 	.word	0x40005000
 8007030:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	77bb      	strb	r3, [r7, #30]
        break;
 800703c:	bf00      	nop
    }

    if (pclk != 0U)
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d018      	beq.n	8007076 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	085a      	lsrs	r2, r3, #1
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	441a      	add	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	fbb2 f3f3 	udiv	r3, r2, r3
 8007056:	b29b      	uxth	r3, r3
 8007058:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b0f      	cmp	r3, #15
 800705e:	d908      	bls.n	8007072 <UART_SetConfig+0x38e>
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007066:	d204      	bcs.n	8007072 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	60da      	str	r2, [r3, #12]
 8007070:	e001      	b.n	8007076 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007082:	7fbb      	ldrb	r3, [r7, #30]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3720      	adds	r7, #32
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718a:	d10a      	bne.n	80071a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071e0:	f7fc fba0 	bl	8003924 <HAL_GetTick>
 80071e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d10e      	bne.n	8007212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f82d 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e023      	b.n	800725a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d10e      	bne.n	800723e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f817 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e00d      	b.n	800725a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b09c      	sub	sp, #112	; 0x70
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007272:	e0a5      	b.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	f000 80a1 	beq.w	80073c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727e:	f7fc fb51 	bl	8003924 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800728a:	429a      	cmp	r2, r3
 800728c:	d302      	bcc.n	8007294 <UART_WaitOnFlagUntilTimeout+0x32>
 800728e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007290:	2b00      	cmp	r3, #0
 8007292:	d13e      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072a8:	667b      	str	r3, [r7, #100]	; 0x64
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e6      	bne.n	8007294 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	663b      	str	r3, [r7, #96]	; 0x60
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80072e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e5      	bne.n	80072c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e067      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	d04f      	beq.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800732a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732e:	d147      	bne.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800734e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
 800735a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800735e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e6      	bne.n	800733a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	613b      	str	r3, [r7, #16]
   return(result);
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	66bb      	str	r3, [r7, #104]	; 0x68
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3308      	adds	r3, #8
 800738a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800738c:	623a      	str	r2, [r7, #32]
 800738e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	69f9      	ldr	r1, [r7, #28]
 8007392:	6a3a      	ldr	r2, [r7, #32]
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	61bb      	str	r3, [r7, #24]
   return(result);
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e010      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4013      	ands	r3, r2
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	429a      	cmp	r2, r3
 80073dc:	f43f af4a 	beq.w	8007274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3770      	adds	r7, #112	; 0x70
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <atanf>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	ee10 5a10 	vmov	r5, s0
 80073f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80073f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80073fa:	eef0 7a40 	vmov.f32	s15, s0
 80073fe:	db10      	blt.n	8007422 <atanf+0x36>
 8007400:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007404:	dd04      	ble.n	8007410 <atanf+0x24>
 8007406:	ee70 7a00 	vadd.f32	s15, s0, s0
 800740a:	eeb0 0a67 	vmov.f32	s0, s15
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007548 <atanf+0x15c>
 8007414:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800754c <atanf+0x160>
 8007418:	2d00      	cmp	r5, #0
 800741a:	bfd8      	it	le
 800741c:	eef0 7a40 	vmovle.f32	s15, s0
 8007420:	e7f3      	b.n	800740a <atanf+0x1e>
 8007422:	4b4b      	ldr	r3, [pc, #300]	; (8007550 <atanf+0x164>)
 8007424:	429c      	cmp	r4, r3
 8007426:	dc10      	bgt.n	800744a <atanf+0x5e>
 8007428:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800742c:	da0a      	bge.n	8007444 <atanf+0x58>
 800742e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007554 <atanf+0x168>
 8007432:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007442:	dce2      	bgt.n	800740a <atanf+0x1e>
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
 8007448:	e013      	b.n	8007472 <atanf+0x86>
 800744a:	f000 f8e3 	bl	8007614 <fabsf>
 800744e:	4b42      	ldr	r3, [pc, #264]	; (8007558 <atanf+0x16c>)
 8007450:	429c      	cmp	r4, r3
 8007452:	dc4f      	bgt.n	80074f4 <atanf+0x108>
 8007454:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007458:	429c      	cmp	r4, r3
 800745a:	dc41      	bgt.n	80074e0 <atanf+0xf4>
 800745c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007460:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007464:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007468:	2300      	movs	r3, #0
 800746a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800746e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007478:	eddf 5a38 	vldr	s11, [pc, #224]	; 800755c <atanf+0x170>
 800747c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8007560 <atanf+0x174>
 8007480:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007564 <atanf+0x178>
 8007484:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8007568 <atanf+0x17c>
 8007488:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800748c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007490:	eddf 5a36 	vldr	s11, [pc, #216]	; 800756c <atanf+0x180>
 8007494:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007498:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8007570 <atanf+0x184>
 800749c:	eea5 6a87 	vfma.f32	s12, s11, s14
 80074a0:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007574 <atanf+0x188>
 80074a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80074a8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8007578 <atanf+0x18c>
 80074ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 80074b0:	eddf 5a32 	vldr	s11, [pc, #200]	; 800757c <atanf+0x190>
 80074b4:	eee7 5a05 	vfma.f32	s11, s14, s10
 80074b8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8007580 <atanf+0x194>
 80074bc:	eea5 5a87 	vfma.f32	s10, s11, s14
 80074c0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8007584 <atanf+0x198>
 80074c4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80074c8:	eea5 0a87 	vfma.f32	s0, s11, s14
 80074cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80074d0:	eea6 0a26 	vfma.f32	s0, s12, s13
 80074d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80074d8:	d121      	bne.n	800751e <atanf+0x132>
 80074da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80074de:	e794      	b.n	800740a <atanf+0x1e>
 80074e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80074e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80074ec:	2301      	movs	r3, #1
 80074ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80074f2:	e7be      	b.n	8007472 <atanf+0x86>
 80074f4:	4b24      	ldr	r3, [pc, #144]	; (8007588 <atanf+0x19c>)
 80074f6:	429c      	cmp	r4, r3
 80074f8:	dc0b      	bgt.n	8007512 <atanf+0x126>
 80074fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80074fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007502:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007506:	2302      	movs	r3, #2
 8007508:	ee70 6a67 	vsub.f32	s13, s0, s15
 800750c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007510:	e7af      	b.n	8007472 <atanf+0x86>
 8007512:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007516:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800751a:	2303      	movs	r3, #3
 800751c:	e7a9      	b.n	8007472 <atanf+0x86>
 800751e:	4a1b      	ldr	r2, [pc, #108]	; (800758c <atanf+0x1a0>)
 8007520:	491b      	ldr	r1, [pc, #108]	; (8007590 <atanf+0x1a4>)
 8007522:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007526:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800752a:	ed93 7a00 	vldr	s14, [r3]
 800752e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007532:	2d00      	cmp	r5, #0
 8007534:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007538:	ed92 0a00 	vldr	s0, [r2]
 800753c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007540:	bfb8      	it	lt
 8007542:	eef1 7a67 	vneglt.f32	s15, s15
 8007546:	e760      	b.n	800740a <atanf+0x1e>
 8007548:	3fc90fdb 	.word	0x3fc90fdb
 800754c:	bfc90fdb 	.word	0xbfc90fdb
 8007550:	3edfffff 	.word	0x3edfffff
 8007554:	7149f2ca 	.word	0x7149f2ca
 8007558:	3f97ffff 	.word	0x3f97ffff
 800755c:	3c8569d7 	.word	0x3c8569d7
 8007560:	3d4bda59 	.word	0x3d4bda59
 8007564:	bd15a221 	.word	0xbd15a221
 8007568:	be4ccccd 	.word	0xbe4ccccd
 800756c:	3d886b35 	.word	0x3d886b35
 8007570:	3dba2e6e 	.word	0x3dba2e6e
 8007574:	3e124925 	.word	0x3e124925
 8007578:	3eaaaaab 	.word	0x3eaaaaab
 800757c:	bd6ef16b 	.word	0xbd6ef16b
 8007580:	bd9d8795 	.word	0xbd9d8795
 8007584:	bde38e38 	.word	0xbde38e38
 8007588:	401bffff 	.word	0x401bffff
 800758c:	0800b000 	.word	0x0800b000
 8007590:	0800b010 	.word	0x0800b010

08007594 <cosf>:
 8007594:	ee10 3a10 	vmov	r3, s0
 8007598:	b507      	push	{r0, r1, r2, lr}
 800759a:	4a1c      	ldr	r2, [pc, #112]	; (800760c <cosf+0x78>)
 800759c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075a0:	4293      	cmp	r3, r2
 80075a2:	dc04      	bgt.n	80075ae <cosf+0x1a>
 80075a4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007610 <cosf+0x7c>
 80075a8:	f000 fafe 	bl	8007ba8 <__kernel_cosf>
 80075ac:	e004      	b.n	80075b8 <cosf+0x24>
 80075ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80075b2:	db04      	blt.n	80075be <cosf+0x2a>
 80075b4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80075b8:	b003      	add	sp, #12
 80075ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80075be:	4668      	mov	r0, sp
 80075c0:	f000 f9b2 	bl	8007928 <__ieee754_rem_pio2f>
 80075c4:	f000 0003 	and.w	r0, r0, #3
 80075c8:	2801      	cmp	r0, #1
 80075ca:	d007      	beq.n	80075dc <cosf+0x48>
 80075cc:	2802      	cmp	r0, #2
 80075ce:	d00e      	beq.n	80075ee <cosf+0x5a>
 80075d0:	b9a0      	cbnz	r0, 80075fc <cosf+0x68>
 80075d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80075d6:	ed9d 0a00 	vldr	s0, [sp]
 80075da:	e7e5      	b.n	80075a8 <cosf+0x14>
 80075dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80075e0:	ed9d 0a00 	vldr	s0, [sp]
 80075e4:	f000 fdca 	bl	800817c <__kernel_sinf>
 80075e8:	eeb1 0a40 	vneg.f32	s0, s0
 80075ec:	e7e4      	b.n	80075b8 <cosf+0x24>
 80075ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80075f2:	ed9d 0a00 	vldr	s0, [sp]
 80075f6:	f000 fad7 	bl	8007ba8 <__kernel_cosf>
 80075fa:	e7f5      	b.n	80075e8 <cosf+0x54>
 80075fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8007600:	ed9d 0a00 	vldr	s0, [sp]
 8007604:	2001      	movs	r0, #1
 8007606:	f000 fdb9 	bl	800817c <__kernel_sinf>
 800760a:	e7d5      	b.n	80075b8 <cosf+0x24>
 800760c:	3f490fd8 	.word	0x3f490fd8
 8007610:	00000000 	.word	0x00000000

08007614 <fabsf>:
 8007614:	ee10 3a10 	vmov	r3, s0
 8007618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800761c:	ee00 3a10 	vmov	s0, r3
 8007620:	4770      	bx	lr
	...

08007624 <sinf>:
 8007624:	ee10 3a10 	vmov	r3, s0
 8007628:	b507      	push	{r0, r1, r2, lr}
 800762a:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <sinf+0x7c>)
 800762c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007630:	4293      	cmp	r3, r2
 8007632:	dc05      	bgt.n	8007640 <sinf+0x1c>
 8007634:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80076a4 <sinf+0x80>
 8007638:	2000      	movs	r0, #0
 800763a:	f000 fd9f 	bl	800817c <__kernel_sinf>
 800763e:	e004      	b.n	800764a <sinf+0x26>
 8007640:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007644:	db04      	blt.n	8007650 <sinf+0x2c>
 8007646:	ee30 0a40 	vsub.f32	s0, s0, s0
 800764a:	b003      	add	sp, #12
 800764c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007650:	4668      	mov	r0, sp
 8007652:	f000 f969 	bl	8007928 <__ieee754_rem_pio2f>
 8007656:	f000 0003 	and.w	r0, r0, #3
 800765a:	2801      	cmp	r0, #1
 800765c:	d008      	beq.n	8007670 <sinf+0x4c>
 800765e:	2802      	cmp	r0, #2
 8007660:	d00d      	beq.n	800767e <sinf+0x5a>
 8007662:	b9b0      	cbnz	r0, 8007692 <sinf+0x6e>
 8007664:	eddd 0a01 	vldr	s1, [sp, #4]
 8007668:	ed9d 0a00 	vldr	s0, [sp]
 800766c:	2001      	movs	r0, #1
 800766e:	e7e4      	b.n	800763a <sinf+0x16>
 8007670:	eddd 0a01 	vldr	s1, [sp, #4]
 8007674:	ed9d 0a00 	vldr	s0, [sp]
 8007678:	f000 fa96 	bl	8007ba8 <__kernel_cosf>
 800767c:	e7e5      	b.n	800764a <sinf+0x26>
 800767e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007682:	ed9d 0a00 	vldr	s0, [sp]
 8007686:	2001      	movs	r0, #1
 8007688:	f000 fd78 	bl	800817c <__kernel_sinf>
 800768c:	eeb1 0a40 	vneg.f32	s0, s0
 8007690:	e7db      	b.n	800764a <sinf+0x26>
 8007692:	eddd 0a01 	vldr	s1, [sp, #4]
 8007696:	ed9d 0a00 	vldr	s0, [sp]
 800769a:	f000 fa85 	bl	8007ba8 <__kernel_cosf>
 800769e:	e7f5      	b.n	800768c <sinf+0x68>
 80076a0:	3f490fd8 	.word	0x3f490fd8
 80076a4:	00000000 	.word	0x00000000

080076a8 <tanf>:
 80076a8:	ee10 3a10 	vmov	r3, s0
 80076ac:	b507      	push	{r0, r1, r2, lr}
 80076ae:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <tanf+0x48>)
 80076b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076b4:	4293      	cmp	r3, r2
 80076b6:	dc05      	bgt.n	80076c4 <tanf+0x1c>
 80076b8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80076f4 <tanf+0x4c>
 80076bc:	2001      	movs	r0, #1
 80076be:	f000 fda5 	bl	800820c <__kernel_tanf>
 80076c2:	e004      	b.n	80076ce <tanf+0x26>
 80076c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80076c8:	db04      	blt.n	80076d4 <tanf+0x2c>
 80076ca:	ee30 0a40 	vsub.f32	s0, s0, s0
 80076ce:	b003      	add	sp, #12
 80076d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80076d4:	4668      	mov	r0, sp
 80076d6:	f000 f927 	bl	8007928 <__ieee754_rem_pio2f>
 80076da:	0040      	lsls	r0, r0, #1
 80076dc:	f000 0002 	and.w	r0, r0, #2
 80076e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80076e4:	ed9d 0a00 	vldr	s0, [sp]
 80076e8:	f1c0 0001 	rsb	r0, r0, #1
 80076ec:	e7e7      	b.n	80076be <tanf+0x16>
 80076ee:	bf00      	nop
 80076f0:	3f490fda 	.word	0x3f490fda
 80076f4:	00000000 	.word	0x00000000

080076f8 <asinf>:
 80076f8:	b508      	push	{r3, lr}
 80076fa:	ed2d 8b02 	vpush	{d8}
 80076fe:	eeb0 8a40 	vmov.f32	s16, s0
 8007702:	f000 f82b 	bl	800775c <__ieee754_asinf>
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <asinf+0x5c>)
 8007708:	f993 3000 	ldrsb.w	r3, [r3]
 800770c:	3301      	adds	r3, #1
 800770e:	eef0 8a40 	vmov.f32	s17, s0
 8007712:	d01a      	beq.n	800774a <asinf+0x52>
 8007714:	eeb4 8a48 	vcmp.f32	s16, s16
 8007718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771c:	d615      	bvs.n	800774a <asinf+0x52>
 800771e:	eeb0 0a48 	vmov.f32	s0, s16
 8007722:	f7ff ff77 	bl	8007614 <fabsf>
 8007726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800772a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	dd0a      	ble.n	800774a <asinf+0x52>
 8007734:	f000 ff06 	bl	8008544 <__errno>
 8007738:	ecbd 8b02 	vpop	{d8}
 800773c:	2321      	movs	r3, #33	; 0x21
 800773e:	6003      	str	r3, [r0, #0]
 8007740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007744:	4804      	ldr	r0, [pc, #16]	; (8007758 <asinf+0x60>)
 8007746:	f000 be85 	b.w	8008454 <nanf>
 800774a:	eeb0 0a68 	vmov.f32	s0, s17
 800774e:	ecbd 8b02 	vpop	{d8}
 8007752:	bd08      	pop	{r3, pc}
 8007754:	20000181 	.word	0x20000181
 8007758:	0800b6c8 	.word	0x0800b6c8

0800775c <__ieee754_asinf>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	ee10 5a10 	vmov	r5, s0
 8007762:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007766:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800776a:	ed2d 8b04 	vpush	{d8-d9}
 800776e:	d10c      	bne.n	800778a <__ieee754_asinf+0x2e>
 8007770:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80078e8 <__ieee754_asinf+0x18c>
 8007774:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80078ec <__ieee754_asinf+0x190>
 8007778:	ee60 7a27 	vmul.f32	s15, s0, s15
 800777c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007780:	eeb0 0a67 	vmov.f32	s0, s15
 8007784:	ecbd 8b04 	vpop	{d8-d9}
 8007788:	bd38      	pop	{r3, r4, r5, pc}
 800778a:	dd04      	ble.n	8007796 <__ieee754_asinf+0x3a>
 800778c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007790:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007794:	e7f6      	b.n	8007784 <__ieee754_asinf+0x28>
 8007796:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800779a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800779e:	da0b      	bge.n	80077b8 <__ieee754_asinf+0x5c>
 80077a0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80077a4:	da52      	bge.n	800784c <__ieee754_asinf+0xf0>
 80077a6:	eddf 7a52 	vldr	s15, [pc, #328]	; 80078f0 <__ieee754_asinf+0x194>
 80077aa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80077ae:	eef4 7ae8 	vcmpe.f32	s15, s17
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	dce5      	bgt.n	8007784 <__ieee754_asinf+0x28>
 80077b8:	f7ff ff2c 	bl	8007614 <fabsf>
 80077bc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80077c0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80077c4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80077c8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80078f4 <__ieee754_asinf+0x198>
 80077cc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80078f8 <__ieee754_asinf+0x19c>
 80077d0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80078fc <__ieee754_asinf+0x1a0>
 80077d4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80077d8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007900 <__ieee754_asinf+0x1a4>
 80077dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80077e0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007904 <__ieee754_asinf+0x1a8>
 80077e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80077e8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8007908 <__ieee754_asinf+0x1ac>
 80077ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80077f0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800790c <__ieee754_asinf+0x1b0>
 80077f4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80077f8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8007910 <__ieee754_asinf+0x1b4>
 80077fc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8007800:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007914 <__ieee754_asinf+0x1b8>
 8007804:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007808:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007918 <__ieee754_asinf+0x1bc>
 800780c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007810:	eeb0 0a48 	vmov.f32	s0, s16
 8007814:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007818:	f000 f9c2 	bl	8007ba0 <__ieee754_sqrtf>
 800781c:	4b3f      	ldr	r3, [pc, #252]	; (800791c <__ieee754_asinf+0x1c0>)
 800781e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8007822:	429c      	cmp	r4, r3
 8007824:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8007828:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800782c:	dd3d      	ble.n	80078aa <__ieee754_asinf+0x14e>
 800782e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8007832:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8007920 <__ieee754_asinf+0x1c4>
 8007836:	eee0 7a26 	vfma.f32	s15, s0, s13
 800783a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80078ec <__ieee754_asinf+0x190>
 800783e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007842:	2d00      	cmp	r5, #0
 8007844:	bfd8      	it	le
 8007846:	eeb1 0a40 	vnegle.f32	s0, s0
 800784a:	e79b      	b.n	8007784 <__ieee754_asinf+0x28>
 800784c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007850:	eddf 6a28 	vldr	s13, [pc, #160]	; 80078f4 <__ieee754_asinf+0x198>
 8007854:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80078f8 <__ieee754_asinf+0x19c>
 8007858:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800790c <__ieee754_asinf+0x1b0>
 800785c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007860:	eddf 6a27 	vldr	s13, [pc, #156]	; 8007900 <__ieee754_asinf+0x1a4>
 8007864:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007868:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007904 <__ieee754_asinf+0x1a8>
 800786c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007870:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007908 <__ieee754_asinf+0x1ac>
 8007874:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007878:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80078fc <__ieee754_asinf+0x1a0>
 800787c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007880:	eddf 6a23 	vldr	s13, [pc, #140]	; 8007910 <__ieee754_asinf+0x1b4>
 8007884:	eee7 6a86 	vfma.f32	s13, s15, s12
 8007888:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8007914 <__ieee754_asinf+0x1b8>
 800788c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007890:	eddf 6a21 	vldr	s13, [pc, #132]	; 8007918 <__ieee754_asinf+0x1bc>
 8007894:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800789c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80078a0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80078a4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80078a8:	e76c      	b.n	8007784 <__ieee754_asinf+0x28>
 80078aa:	ee10 3a10 	vmov	r3, s0
 80078ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80078b2:	f023 030f 	bic.w	r3, r3, #15
 80078b6:	ee07 3a10 	vmov	s14, r3
 80078ba:	eea7 8a47 	vfms.f32	s16, s14, s14
 80078be:	ee70 7a07 	vadd.f32	s15, s0, s14
 80078c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80078c6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80078ca:	eddf 7a07 	vldr	s15, [pc, #28]	; 80078e8 <__ieee754_asinf+0x18c>
 80078ce:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80078d2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80078d6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007924 <__ieee754_asinf+0x1c8>
 80078da:	eeb0 6a40 	vmov.f32	s12, s0
 80078de:	eea7 6a66 	vfms.f32	s12, s14, s13
 80078e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80078e6:	e7aa      	b.n	800783e <__ieee754_asinf+0xe2>
 80078e8:	b33bbd2e 	.word	0xb33bbd2e
 80078ec:	3fc90fdb 	.word	0x3fc90fdb
 80078f0:	7149f2ca 	.word	0x7149f2ca
 80078f4:	3811ef08 	.word	0x3811ef08
 80078f8:	3a4f7f04 	.word	0x3a4f7f04
 80078fc:	3e2aaaab 	.word	0x3e2aaaab
 8007900:	bd241146 	.word	0xbd241146
 8007904:	3e4e0aa8 	.word	0x3e4e0aa8
 8007908:	bea6b090 	.word	0xbea6b090
 800790c:	3d9dc62e 	.word	0x3d9dc62e
 8007910:	bf303361 	.word	0xbf303361
 8007914:	4001572d 	.word	0x4001572d
 8007918:	c019d139 	.word	0xc019d139
 800791c:	3f799999 	.word	0x3f799999
 8007920:	333bbd2e 	.word	0x333bbd2e
 8007924:	3f490fdb 	.word	0x3f490fdb

08007928 <__ieee754_rem_pio2f>:
 8007928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800792a:	ee10 6a10 	vmov	r6, s0
 800792e:	4b8e      	ldr	r3, [pc, #568]	; (8007b68 <__ieee754_rem_pio2f+0x240>)
 8007930:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007934:	429d      	cmp	r5, r3
 8007936:	b087      	sub	sp, #28
 8007938:	eef0 7a40 	vmov.f32	s15, s0
 800793c:	4604      	mov	r4, r0
 800793e:	dc05      	bgt.n	800794c <__ieee754_rem_pio2f+0x24>
 8007940:	2300      	movs	r3, #0
 8007942:	ed80 0a00 	vstr	s0, [r0]
 8007946:	6043      	str	r3, [r0, #4]
 8007948:	2000      	movs	r0, #0
 800794a:	e01a      	b.n	8007982 <__ieee754_rem_pio2f+0x5a>
 800794c:	4b87      	ldr	r3, [pc, #540]	; (8007b6c <__ieee754_rem_pio2f+0x244>)
 800794e:	429d      	cmp	r5, r3
 8007950:	dc46      	bgt.n	80079e0 <__ieee754_rem_pio2f+0xb8>
 8007952:	2e00      	cmp	r6, #0
 8007954:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007b70 <__ieee754_rem_pio2f+0x248>
 8007958:	4b86      	ldr	r3, [pc, #536]	; (8007b74 <__ieee754_rem_pio2f+0x24c>)
 800795a:	f025 050f 	bic.w	r5, r5, #15
 800795e:	dd1f      	ble.n	80079a0 <__ieee754_rem_pio2f+0x78>
 8007960:	429d      	cmp	r5, r3
 8007962:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007966:	d00e      	beq.n	8007986 <__ieee754_rem_pio2f+0x5e>
 8007968:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007b78 <__ieee754_rem_pio2f+0x250>
 800796c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007970:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007974:	ed80 0a00 	vstr	s0, [r0]
 8007978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800797c:	2001      	movs	r0, #1
 800797e:	edc4 7a01 	vstr	s15, [r4, #4]
 8007982:	b007      	add	sp, #28
 8007984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007986:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007b7c <__ieee754_rem_pio2f+0x254>
 800798a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007b80 <__ieee754_rem_pio2f+0x258>
 800798e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007992:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007996:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800799a:	edc0 6a00 	vstr	s13, [r0]
 800799e:	e7eb      	b.n	8007978 <__ieee754_rem_pio2f+0x50>
 80079a0:	429d      	cmp	r5, r3
 80079a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80079a6:	d00e      	beq.n	80079c6 <__ieee754_rem_pio2f+0x9e>
 80079a8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007b78 <__ieee754_rem_pio2f+0x250>
 80079ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 80079b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079b4:	ed80 0a00 	vstr	s0, [r0]
 80079b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	edc4 7a01 	vstr	s15, [r4, #4]
 80079c4:	e7dd      	b.n	8007982 <__ieee754_rem_pio2f+0x5a>
 80079c6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007b7c <__ieee754_rem_pio2f+0x254>
 80079ca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007b80 <__ieee754_rem_pio2f+0x258>
 80079ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80079d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80079d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079da:	edc0 6a00 	vstr	s13, [r0]
 80079de:	e7eb      	b.n	80079b8 <__ieee754_rem_pio2f+0x90>
 80079e0:	4b68      	ldr	r3, [pc, #416]	; (8007b84 <__ieee754_rem_pio2f+0x25c>)
 80079e2:	429d      	cmp	r5, r3
 80079e4:	dc72      	bgt.n	8007acc <__ieee754_rem_pio2f+0x1a4>
 80079e6:	f7ff fe15 	bl	8007614 <fabsf>
 80079ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007b88 <__ieee754_rem_pio2f+0x260>
 80079ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80079f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80079f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079fe:	ee17 0a90 	vmov	r0, s15
 8007a02:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007b70 <__ieee754_rem_pio2f+0x248>
 8007a06:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007a0a:	281f      	cmp	r0, #31
 8007a0c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007b78 <__ieee754_rem_pio2f+0x250>
 8007a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a14:	eeb1 6a47 	vneg.f32	s12, s14
 8007a18:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007a1c:	ee16 2a90 	vmov	r2, s13
 8007a20:	dc1c      	bgt.n	8007a5c <__ieee754_rem_pio2f+0x134>
 8007a22:	495a      	ldr	r1, [pc, #360]	; (8007b8c <__ieee754_rem_pio2f+0x264>)
 8007a24:	1e47      	subs	r7, r0, #1
 8007a26:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007a2a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007a2e:	428b      	cmp	r3, r1
 8007a30:	d014      	beq.n	8007a5c <__ieee754_rem_pio2f+0x134>
 8007a32:	6022      	str	r2, [r4, #0]
 8007a34:	ed94 7a00 	vldr	s14, [r4]
 8007a38:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007a3c:	2e00      	cmp	r6, #0
 8007a3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a42:	ed84 0a01 	vstr	s0, [r4, #4]
 8007a46:	da9c      	bge.n	8007982 <__ieee754_rem_pio2f+0x5a>
 8007a48:	eeb1 7a47 	vneg.f32	s14, s14
 8007a4c:	eeb1 0a40 	vneg.f32	s0, s0
 8007a50:	ed84 7a00 	vstr	s14, [r4]
 8007a54:	ed84 0a01 	vstr	s0, [r4, #4]
 8007a58:	4240      	negs	r0, r0
 8007a5a:	e792      	b.n	8007982 <__ieee754_rem_pio2f+0x5a>
 8007a5c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007a60:	15eb      	asrs	r3, r5, #23
 8007a62:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007a66:	2d08      	cmp	r5, #8
 8007a68:	dde3      	ble.n	8007a32 <__ieee754_rem_pio2f+0x10a>
 8007a6a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007b7c <__ieee754_rem_pio2f+0x254>
 8007a6e:	eef0 6a40 	vmov.f32	s13, s0
 8007a72:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007a76:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007a7a:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007a7e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007b80 <__ieee754_rem_pio2f+0x258>
 8007a82:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8007a86:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007a8a:	eef0 7a40 	vmov.f32	s15, s0
 8007a8e:	ee15 2a90 	vmov	r2, s11
 8007a92:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007a96:	1a5b      	subs	r3, r3, r1
 8007a98:	2b19      	cmp	r3, #25
 8007a9a:	dc04      	bgt.n	8007aa6 <__ieee754_rem_pio2f+0x17e>
 8007a9c:	edc4 5a00 	vstr	s11, [r4]
 8007aa0:	eeb0 0a66 	vmov.f32	s0, s13
 8007aa4:	e7c6      	b.n	8007a34 <__ieee754_rem_pio2f+0x10c>
 8007aa6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007b90 <__ieee754_rem_pio2f+0x268>
 8007aaa:	eeb0 0a66 	vmov.f32	s0, s13
 8007aae:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007ab2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007ab6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007b94 <__ieee754_rem_pio2f+0x26c>
 8007aba:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007abe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007ac2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007ac6:	ed84 7a00 	vstr	s14, [r4]
 8007aca:	e7b3      	b.n	8007a34 <__ieee754_rem_pio2f+0x10c>
 8007acc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007ad0:	db06      	blt.n	8007ae0 <__ieee754_rem_pio2f+0x1b8>
 8007ad2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007ad6:	edc0 7a01 	vstr	s15, [r0, #4]
 8007ada:	edc0 7a00 	vstr	s15, [r0]
 8007ade:	e733      	b.n	8007948 <__ieee754_rem_pio2f+0x20>
 8007ae0:	15ea      	asrs	r2, r5, #23
 8007ae2:	3a86      	subs	r2, #134	; 0x86
 8007ae4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007af0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007b98 <__ieee754_rem_pio2f+0x270>
 8007af4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007afc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007b00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b10:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007b14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	edcd 7a05 	vstr	s15, [sp, #20]
 8007b24:	d11e      	bne.n	8007b64 <__ieee754_rem_pio2f+0x23c>
 8007b26:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2e:	bf14      	ite	ne
 8007b30:	2302      	movne	r3, #2
 8007b32:	2301      	moveq	r3, #1
 8007b34:	4919      	ldr	r1, [pc, #100]	; (8007b9c <__ieee754_rem_pio2f+0x274>)
 8007b36:	9101      	str	r1, [sp, #4]
 8007b38:	2102      	movs	r1, #2
 8007b3a:	9100      	str	r1, [sp, #0]
 8007b3c:	a803      	add	r0, sp, #12
 8007b3e:	4621      	mov	r1, r4
 8007b40:	f000 f892 	bl	8007c68 <__kernel_rem_pio2f>
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	f6bf af1c 	bge.w	8007982 <__ieee754_rem_pio2f+0x5a>
 8007b4a:	edd4 7a00 	vldr	s15, [r4]
 8007b4e:	eef1 7a67 	vneg.f32	s15, s15
 8007b52:	edc4 7a00 	vstr	s15, [r4]
 8007b56:	edd4 7a01 	vldr	s15, [r4, #4]
 8007b5a:	eef1 7a67 	vneg.f32	s15, s15
 8007b5e:	edc4 7a01 	vstr	s15, [r4, #4]
 8007b62:	e779      	b.n	8007a58 <__ieee754_rem_pio2f+0x130>
 8007b64:	2303      	movs	r3, #3
 8007b66:	e7e5      	b.n	8007b34 <__ieee754_rem_pio2f+0x20c>
 8007b68:	3f490fd8 	.word	0x3f490fd8
 8007b6c:	4016cbe3 	.word	0x4016cbe3
 8007b70:	3fc90f80 	.word	0x3fc90f80
 8007b74:	3fc90fd0 	.word	0x3fc90fd0
 8007b78:	37354443 	.word	0x37354443
 8007b7c:	37354400 	.word	0x37354400
 8007b80:	2e85a308 	.word	0x2e85a308
 8007b84:	43490f80 	.word	0x43490f80
 8007b88:	3f22f984 	.word	0x3f22f984
 8007b8c:	0800b020 	.word	0x0800b020
 8007b90:	2e85a300 	.word	0x2e85a300
 8007b94:	248d3132 	.word	0x248d3132
 8007b98:	43800000 	.word	0x43800000
 8007b9c:	0800b0a0 	.word	0x0800b0a0

08007ba0 <__ieee754_sqrtf>:
 8007ba0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007ba4:	4770      	bx	lr
	...

08007ba8 <__kernel_cosf>:
 8007ba8:	ee10 3a10 	vmov	r3, s0
 8007bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007bb4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007bb8:	da05      	bge.n	8007bc6 <__kernel_cosf+0x1e>
 8007bba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007bbe:	ee17 2a90 	vmov	r2, s15
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d03d      	beq.n	8007c42 <__kernel_cosf+0x9a>
 8007bc6:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007bca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007c48 <__kernel_cosf+0xa0>
 8007bce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007c4c <__kernel_cosf+0xa4>
 8007bd2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007c50 <__kernel_cosf+0xa8>
 8007bd6:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <__kernel_cosf+0xac>)
 8007bd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007c58 <__kernel_cosf+0xb0>
 8007be2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007be6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007c5c <__kernel_cosf+0xb4>
 8007bea:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007bee:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007c60 <__kernel_cosf+0xb8>
 8007bf2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007bf6:	eeb0 7a66 	vmov.f32	s14, s13
 8007bfa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007bfe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007c02:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007c06:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007c0a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007c0e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c12:	dc04      	bgt.n	8007c1e <__kernel_cosf+0x76>
 8007c14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007c18:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007c1c:	4770      	bx	lr
 8007c1e:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <__kernel_cosf+0xbc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	bfda      	itte	le
 8007c24:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007c28:	ee06 3a90 	vmovle	s13, r3
 8007c2c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007c30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c34:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007c38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c40:	4770      	bx	lr
 8007c42:	eeb0 0a46 	vmov.f32	s0, s12
 8007c46:	4770      	bx	lr
 8007c48:	ad47d74e 	.word	0xad47d74e
 8007c4c:	310f74f6 	.word	0x310f74f6
 8007c50:	3d2aaaab 	.word	0x3d2aaaab
 8007c54:	3e999999 	.word	0x3e999999
 8007c58:	b493f27c 	.word	0xb493f27c
 8007c5c:	37d00d01 	.word	0x37d00d01
 8007c60:	bab60b61 	.word	0xbab60b61
 8007c64:	3f480000 	.word	0x3f480000

08007c68 <__kernel_rem_pio2f>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	ed2d 8b04 	vpush	{d8-d9}
 8007c70:	b0d7      	sub	sp, #348	; 0x15c
 8007c72:	4616      	mov	r6, r2
 8007c74:	4698      	mov	r8, r3
 8007c76:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007c78:	4bbb      	ldr	r3, [pc, #748]	; (8007f68 <__kernel_rem_pio2f+0x300>)
 8007c7a:	9001      	str	r0, [sp, #4]
 8007c7c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007c80:	1d33      	adds	r3, r6, #4
 8007c82:	460d      	mov	r5, r1
 8007c84:	f108 39ff 	add.w	r9, r8, #4294967295
 8007c88:	db29      	blt.n	8007cde <__kernel_rem_pio2f+0x76>
 8007c8a:	1ef1      	subs	r1, r6, #3
 8007c8c:	bf48      	it	mi
 8007c8e:	1d31      	addmi	r1, r6, #4
 8007c90:	10c9      	asrs	r1, r1, #3
 8007c92:	1c4c      	adds	r4, r1, #1
 8007c94:	00e3      	lsls	r3, r4, #3
 8007c96:	9302      	str	r3, [sp, #8]
 8007c98:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007c9a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007f78 <__kernel_rem_pio2f+0x310>
 8007c9e:	eba1 0009 	sub.w	r0, r1, r9
 8007ca2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007ca6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007caa:	eb07 0c09 	add.w	ip, r7, r9
 8007cae:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4563      	cmp	r3, ip
 8007cb6:	dd14      	ble.n	8007ce2 <__kernel_rem_pio2f+0x7a>
 8007cb8:	ab1a      	add	r3, sp, #104	; 0x68
 8007cba:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007cbe:	46cc      	mov	ip, r9
 8007cc0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007cc4:	f1c8 0b01 	rsb	fp, r8, #1
 8007cc8:	eb0b 020c 	add.w	r2, fp, ip
 8007ccc:	4297      	cmp	r7, r2
 8007cce:	db27      	blt.n	8007d20 <__kernel_rem_pio2f+0xb8>
 8007cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007cd4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007f78 <__kernel_rem_pio2f+0x310>
 8007cd8:	4618      	mov	r0, r3
 8007cda:	2200      	movs	r2, #0
 8007cdc:	e016      	b.n	8007d0c <__kernel_rem_pio2f+0xa4>
 8007cde:	2100      	movs	r1, #0
 8007ce0:	e7d7      	b.n	8007c92 <__kernel_rem_pio2f+0x2a>
 8007ce2:	42d8      	cmn	r0, r3
 8007ce4:	bf5d      	ittte	pl
 8007ce6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007cea:	ee07 2a90 	vmovpl	s15, r2
 8007cee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007cf2:	eef0 7a47 	vmovmi.f32	s15, s14
 8007cf6:	ecea 7a01 	vstmia	sl!, {s15}
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	e7da      	b.n	8007cb4 <__kernel_rem_pio2f+0x4c>
 8007cfe:	ecfe 6a01 	vldmia	lr!, {s13}
 8007d02:	ed90 7a00 	vldr	s14, [r0]
 8007d06:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d0a:	3201      	adds	r2, #1
 8007d0c:	454a      	cmp	r2, r9
 8007d0e:	f1a0 0004 	sub.w	r0, r0, #4
 8007d12:	ddf4      	ble.n	8007cfe <__kernel_rem_pio2f+0x96>
 8007d14:	ecea 7a01 	vstmia	sl!, {s15}
 8007d18:	3304      	adds	r3, #4
 8007d1a:	f10c 0c01 	add.w	ip, ip, #1
 8007d1e:	e7d3      	b.n	8007cc8 <__kernel_rem_pio2f+0x60>
 8007d20:	ab06      	add	r3, sp, #24
 8007d22:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007d2a:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007f74 <__kernel_rem_pio2f+0x30c>
 8007d2e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007f70 <__kernel_rem_pio2f+0x308>
 8007d32:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007d36:	9303      	str	r3, [sp, #12]
 8007d38:	46ba      	mov	sl, r7
 8007d3a:	ab56      	add	r3, sp, #344	; 0x158
 8007d3c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007d40:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007d44:	ab06      	add	r3, sp, #24
 8007d46:	4618      	mov	r0, r3
 8007d48:	4652      	mov	r2, sl
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	dc51      	bgt.n	8007df2 <__kernel_rem_pio2f+0x18a>
 8007d4e:	4620      	mov	r0, r4
 8007d50:	9305      	str	r3, [sp, #20]
 8007d52:	f000 fb85 	bl	8008460 <scalbnf>
 8007d56:	eeb0 8a40 	vmov.f32	s16, s0
 8007d5a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007d5e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007d62:	f000 fb35 	bl	80083d0 <floorf>
 8007d66:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007d6a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	9b05      	ldr	r3, [sp, #20]
 8007d72:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007d76:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007d7a:	edcd 7a00 	vstr	s15, [sp]
 8007d7e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007d82:	dd4b      	ble.n	8007e1c <__kernel_rem_pio2f+0x1b4>
 8007d84:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007d88:	aa06      	add	r2, sp, #24
 8007d8a:	f1c4 0e08 	rsb	lr, r4, #8
 8007d8e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007d92:	ee17 1a90 	vmov	r1, s15
 8007d96:	fa42 f00e 	asr.w	r0, r2, lr
 8007d9a:	4401      	add	r1, r0
 8007d9c:	9100      	str	r1, [sp, #0]
 8007d9e:	fa00 f00e 	lsl.w	r0, r0, lr
 8007da2:	a906      	add	r1, sp, #24
 8007da4:	1a12      	subs	r2, r2, r0
 8007da6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007daa:	f1c4 0007 	rsb	r0, r4, #7
 8007dae:	fa42 fb00 	asr.w	fp, r2, r0
 8007db2:	f1bb 0f00 	cmp.w	fp, #0
 8007db6:	dd43      	ble.n	8007e40 <__kernel_rem_pio2f+0x1d8>
 8007db8:	9a00      	ldr	r2, [sp, #0]
 8007dba:	f04f 0e00 	mov.w	lr, #0
 8007dbe:	3201      	adds	r2, #1
 8007dc0:	9200      	str	r2, [sp, #0]
 8007dc2:	4670      	mov	r0, lr
 8007dc4:	45f2      	cmp	sl, lr
 8007dc6:	dc6c      	bgt.n	8007ea2 <__kernel_rem_pio2f+0x23a>
 8007dc8:	2c00      	cmp	r4, #0
 8007dca:	dd04      	ble.n	8007dd6 <__kernel_rem_pio2f+0x16e>
 8007dcc:	2c01      	cmp	r4, #1
 8007dce:	d079      	beq.n	8007ec4 <__kernel_rem_pio2f+0x25c>
 8007dd0:	2c02      	cmp	r4, #2
 8007dd2:	f000 8082 	beq.w	8007eda <__kernel_rem_pio2f+0x272>
 8007dd6:	f1bb 0f02 	cmp.w	fp, #2
 8007dda:	d131      	bne.n	8007e40 <__kernel_rem_pio2f+0x1d8>
 8007ddc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007de0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007de4:	b360      	cbz	r0, 8007e40 <__kernel_rem_pio2f+0x1d8>
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 fb3a 	bl	8008460 <scalbnf>
 8007dec:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007df0:	e026      	b.n	8007e40 <__kernel_rem_pio2f+0x1d8>
 8007df2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007df6:	3a01      	subs	r2, #1
 8007df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dfc:	a942      	add	r1, sp, #264	; 0x108
 8007dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e02:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007e06:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007e0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e0e:	eca0 0a01 	vstmia	r0!, {s0}
 8007e12:	ed9c 0a00 	vldr	s0, [ip]
 8007e16:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007e1a:	e796      	b.n	8007d4a <__kernel_rem_pio2f+0xe2>
 8007e1c:	d107      	bne.n	8007e2e <__kernel_rem_pio2f+0x1c6>
 8007e1e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007e22:	a906      	add	r1, sp, #24
 8007e24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e28:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007e2c:	e7c1      	b.n	8007db2 <__kernel_rem_pio2f+0x14a>
 8007e2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007e32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3a:	da2f      	bge.n	8007e9c <__kernel_rem_pio2f+0x234>
 8007e3c:	f04f 0b00 	mov.w	fp, #0
 8007e40:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e48:	f040 8098 	bne.w	8007f7c <__kernel_rem_pio2f+0x314>
 8007e4c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e50:	469c      	mov	ip, r3
 8007e52:	2200      	movs	r2, #0
 8007e54:	45bc      	cmp	ip, r7
 8007e56:	da48      	bge.n	8007eea <__kernel_rem_pio2f+0x282>
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	d05f      	beq.n	8007f1c <__kernel_rem_pio2f+0x2b4>
 8007e5c:	aa06      	add	r2, sp, #24
 8007e5e:	3c08      	subs	r4, #8
 8007e60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d07d      	beq.n	8007f64 <__kernel_rem_pio2f+0x2fc>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	f000 faf6 	bl	8008460 <scalbnf>
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007f74 <__kernel_rem_pio2f+0x30c>
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	f280 80af 	bge.w	8007fe0 <__kernel_rem_pio2f+0x378>
 8007e82:	4618      	mov	r0, r3
 8007e84:	2400      	movs	r4, #0
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f2c0 80d0 	blt.w	800802c <__kernel_rem_pio2f+0x3c4>
 8007e8c:	a942      	add	r1, sp, #264	; 0x108
 8007e8e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007e92:	4a36      	ldr	r2, [pc, #216]	; (8007f6c <__kernel_rem_pio2f+0x304>)
 8007e94:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007f78 <__kernel_rem_pio2f+0x310>
 8007e98:	2100      	movs	r1, #0
 8007e9a:	e0bb      	b.n	8008014 <__kernel_rem_pio2f+0x3ac>
 8007e9c:	f04f 0b02 	mov.w	fp, #2
 8007ea0:	e78a      	b.n	8007db8 <__kernel_rem_pio2f+0x150>
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	b948      	cbnz	r0, 8007eba <__kernel_rem_pio2f+0x252>
 8007ea6:	b11a      	cbz	r2, 8007eb0 <__kernel_rem_pio2f+0x248>
 8007ea8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f10e 0e01 	add.w	lr, lr, #1
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	e784      	b.n	8007dc4 <__kernel_rem_pio2f+0x15c>
 8007eba:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	e7f5      	b.n	8007eb0 <__kernel_rem_pio2f+0x248>
 8007ec4:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007ec8:	ab06      	add	r3, sp, #24
 8007eca:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed2:	aa06      	add	r2, sp, #24
 8007ed4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007ed8:	e77d      	b.n	8007dd6 <__kernel_rem_pio2f+0x16e>
 8007eda:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007ede:	ab06      	add	r3, sp, #24
 8007ee0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ee8:	e7f3      	b.n	8007ed2 <__kernel_rem_pio2f+0x26a>
 8007eea:	a906      	add	r1, sp, #24
 8007eec:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007ef0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ef4:	4302      	orrs	r2, r0
 8007ef6:	e7ad      	b.n	8007e54 <__kernel_rem_pio2f+0x1ec>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d0fa      	beq.n	8007ef8 <__kernel_rem_pio2f+0x290>
 8007f02:	a91a      	add	r1, sp, #104	; 0x68
 8007f04:	eb0a 0208 	add.w	r2, sl, r8
 8007f08:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007f0c:	f10a 0301 	add.w	r3, sl, #1
 8007f10:	eb0a 0100 	add.w	r1, sl, r0
 8007f14:	4299      	cmp	r1, r3
 8007f16:	da04      	bge.n	8007f22 <__kernel_rem_pio2f+0x2ba>
 8007f18:	468a      	mov	sl, r1
 8007f1a:	e70e      	b.n	8007d3a <__kernel_rem_pio2f+0xd2>
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	2001      	movs	r0, #1
 8007f20:	e7eb      	b.n	8007efa <__kernel_rem_pio2f+0x292>
 8007f22:	9803      	ldr	r0, [sp, #12]
 8007f24:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007f28:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007f2c:	9000      	str	r0, [sp, #0]
 8007f2e:	ee07 0a90 	vmov	s15, r0
 8007f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f36:	2000      	movs	r0, #0
 8007f38:	ece2 7a01 	vstmia	r2!, {s15}
 8007f3c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007f78 <__kernel_rem_pio2f+0x310>
 8007f40:	4696      	mov	lr, r2
 8007f42:	4548      	cmp	r0, r9
 8007f44:	dd06      	ble.n	8007f54 <__kernel_rem_pio2f+0x2ec>
 8007f46:	a842      	add	r0, sp, #264	; 0x108
 8007f48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007f4c:	edc0 7a00 	vstr	s15, [r0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	e7df      	b.n	8007f14 <__kernel_rem_pio2f+0x2ac>
 8007f54:	ecfc 6a01 	vldmia	ip!, {s13}
 8007f58:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007f62:	e7ee      	b.n	8007f42 <__kernel_rem_pio2f+0x2da>
 8007f64:	3b01      	subs	r3, #1
 8007f66:	e779      	b.n	8007e5c <__kernel_rem_pio2f+0x1f4>
 8007f68:	0800b3e4 	.word	0x0800b3e4
 8007f6c:	0800b3b8 	.word	0x0800b3b8
 8007f70:	43800000 	.word	0x43800000
 8007f74:	3b800000 	.word	0x3b800000
 8007f78:	00000000 	.word	0x00000000
 8007f7c:	9b02      	ldr	r3, [sp, #8]
 8007f7e:	eeb0 0a48 	vmov.f32	s0, s16
 8007f82:	1b98      	subs	r0, r3, r6
 8007f84:	f000 fa6c 	bl	8008460 <scalbnf>
 8007f88:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007f70 <__kernel_rem_pio2f+0x308>
 8007f8c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f94:	db1b      	blt.n	8007fce <__kernel_rem_pio2f+0x366>
 8007f96:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007f74 <__kernel_rem_pio2f+0x30c>
 8007f9a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007f9e:	aa06      	add	r2, sp, #24
 8007fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fa4:	a906      	add	r1, sp, #24
 8007fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007faa:	3408      	adds	r4, #8
 8007fac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fb8:	ee10 3a10 	vmov	r3, s0
 8007fbc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007fc0:	ee17 2a90 	vmov	r2, s15
 8007fc4:	f10a 0301 	add.w	r3, sl, #1
 8007fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007fcc:	e74c      	b.n	8007e68 <__kernel_rem_pio2f+0x200>
 8007fce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fd2:	aa06      	add	r2, sp, #24
 8007fd4:	ee10 3a10 	vmov	r3, s0
 8007fd8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007fdc:	4653      	mov	r3, sl
 8007fde:	e743      	b.n	8007e68 <__kernel_rem_pio2f+0x200>
 8007fe0:	aa42      	add	r2, sp, #264	; 0x108
 8007fe2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007fe6:	aa06      	add	r2, sp, #24
 8007fe8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007fec:	9201      	str	r2, [sp, #4]
 8007fee:	ee07 2a90 	vmov	s15, r2
 8007ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ff6:	3901      	subs	r1, #1
 8007ff8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007ffc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008000:	edc0 7a00 	vstr	s15, [r0]
 8008004:	e73a      	b.n	8007e7c <__kernel_rem_pio2f+0x214>
 8008006:	ecf2 6a01 	vldmia	r2!, {s13}
 800800a:	ecb6 7a01 	vldmia	r6!, {s14}
 800800e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008012:	3101      	adds	r1, #1
 8008014:	42b9      	cmp	r1, r7
 8008016:	dc01      	bgt.n	800801c <__kernel_rem_pio2f+0x3b4>
 8008018:	428c      	cmp	r4, r1
 800801a:	daf4      	bge.n	8008006 <__kernel_rem_pio2f+0x39e>
 800801c:	aa56      	add	r2, sp, #344	; 0x158
 800801e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8008022:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008026:	3801      	subs	r0, #1
 8008028:	3401      	adds	r4, #1
 800802a:	e72c      	b.n	8007e86 <__kernel_rem_pio2f+0x21e>
 800802c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800802e:	2a02      	cmp	r2, #2
 8008030:	dc0a      	bgt.n	8008048 <__kernel_rem_pio2f+0x3e0>
 8008032:	2a00      	cmp	r2, #0
 8008034:	dc61      	bgt.n	80080fa <__kernel_rem_pio2f+0x492>
 8008036:	d03c      	beq.n	80080b2 <__kernel_rem_pio2f+0x44a>
 8008038:	9b00      	ldr	r3, [sp, #0]
 800803a:	f003 0007 	and.w	r0, r3, #7
 800803e:	b057      	add	sp, #348	; 0x15c
 8008040:	ecbd 8b04 	vpop	{d8-d9}
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800804a:	2a03      	cmp	r2, #3
 800804c:	d1f4      	bne.n	8008038 <__kernel_rem_pio2f+0x3d0>
 800804e:	aa2e      	add	r2, sp, #184	; 0xb8
 8008050:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008054:	4608      	mov	r0, r1
 8008056:	461c      	mov	r4, r3
 8008058:	2c00      	cmp	r4, #0
 800805a:	f1a0 0004 	sub.w	r0, r0, #4
 800805e:	dc59      	bgt.n	8008114 <__kernel_rem_pio2f+0x4ac>
 8008060:	4618      	mov	r0, r3
 8008062:	2801      	cmp	r0, #1
 8008064:	f1a1 0104 	sub.w	r1, r1, #4
 8008068:	dc64      	bgt.n	8008134 <__kernel_rem_pio2f+0x4cc>
 800806a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007f78 <__kernel_rem_pio2f+0x310>
 800806e:	2b01      	cmp	r3, #1
 8008070:	dc70      	bgt.n	8008154 <__kernel_rem_pio2f+0x4ec>
 8008072:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008076:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800807a:	f1bb 0f00 	cmp.w	fp, #0
 800807e:	d172      	bne.n	8008166 <__kernel_rem_pio2f+0x4fe>
 8008080:	edc5 6a00 	vstr	s13, [r5]
 8008084:	ed85 7a01 	vstr	s14, [r5, #4]
 8008088:	edc5 7a02 	vstr	s15, [r5, #8]
 800808c:	e7d4      	b.n	8008038 <__kernel_rem_pio2f+0x3d0>
 800808e:	aa2e      	add	r2, sp, #184	; 0xb8
 8008090:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008094:	ed91 7a00 	vldr	s14, [r1]
 8008098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800809c:	3b01      	subs	r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	daf5      	bge.n	800808e <__kernel_rem_pio2f+0x426>
 80080a2:	f1bb 0f00 	cmp.w	fp, #0
 80080a6:	d001      	beq.n	80080ac <__kernel_rem_pio2f+0x444>
 80080a8:	eef1 7a67 	vneg.f32	s15, s15
 80080ac:	edc5 7a00 	vstr	s15, [r5]
 80080b0:	e7c2      	b.n	8008038 <__kernel_rem_pio2f+0x3d0>
 80080b2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007f78 <__kernel_rem_pio2f+0x310>
 80080b6:	e7f2      	b.n	800809e <__kernel_rem_pio2f+0x436>
 80080b8:	aa2e      	add	r2, sp, #184	; 0xb8
 80080ba:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80080be:	edd0 7a00 	vldr	s15, [r0]
 80080c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080c6:	3901      	subs	r1, #1
 80080c8:	2900      	cmp	r1, #0
 80080ca:	daf5      	bge.n	80080b8 <__kernel_rem_pio2f+0x450>
 80080cc:	f1bb 0f00 	cmp.w	fp, #0
 80080d0:	d017      	beq.n	8008102 <__kernel_rem_pio2f+0x49a>
 80080d2:	eef1 7a47 	vneg.f32	s15, s14
 80080d6:	edc5 7a00 	vstr	s15, [r5]
 80080da:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80080de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080e2:	a82f      	add	r0, sp, #188	; 0xbc
 80080e4:	2101      	movs	r1, #1
 80080e6:	428b      	cmp	r3, r1
 80080e8:	da0e      	bge.n	8008108 <__kernel_rem_pio2f+0x4a0>
 80080ea:	f1bb 0f00 	cmp.w	fp, #0
 80080ee:	d001      	beq.n	80080f4 <__kernel_rem_pio2f+0x48c>
 80080f0:	eef1 7a67 	vneg.f32	s15, s15
 80080f4:	edc5 7a01 	vstr	s15, [r5, #4]
 80080f8:	e79e      	b.n	8008038 <__kernel_rem_pio2f+0x3d0>
 80080fa:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007f78 <__kernel_rem_pio2f+0x310>
 80080fe:	4619      	mov	r1, r3
 8008100:	e7e2      	b.n	80080c8 <__kernel_rem_pio2f+0x460>
 8008102:	eef0 7a47 	vmov.f32	s15, s14
 8008106:	e7e6      	b.n	80080d6 <__kernel_rem_pio2f+0x46e>
 8008108:	ecb0 7a01 	vldmia	r0!, {s14}
 800810c:	3101      	adds	r1, #1
 800810e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008112:	e7e8      	b.n	80080e6 <__kernel_rem_pio2f+0x47e>
 8008114:	edd0 7a00 	vldr	s15, [r0]
 8008118:	edd0 6a01 	vldr	s13, [r0, #4]
 800811c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008120:	3c01      	subs	r4, #1
 8008122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008126:	ed80 7a00 	vstr	s14, [r0]
 800812a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812e:	edc0 7a01 	vstr	s15, [r0, #4]
 8008132:	e791      	b.n	8008058 <__kernel_rem_pio2f+0x3f0>
 8008134:	edd1 7a00 	vldr	s15, [r1]
 8008138:	edd1 6a01 	vldr	s13, [r1, #4]
 800813c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008140:	3801      	subs	r0, #1
 8008142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008146:	ed81 7a00 	vstr	s14, [r1]
 800814a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814e:	edc1 7a01 	vstr	s15, [r1, #4]
 8008152:	e786      	b.n	8008062 <__kernel_rem_pio2f+0x3fa>
 8008154:	aa2e      	add	r2, sp, #184	; 0xb8
 8008156:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800815a:	ed91 7a00 	vldr	s14, [r1]
 800815e:	3b01      	subs	r3, #1
 8008160:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008164:	e783      	b.n	800806e <__kernel_rem_pio2f+0x406>
 8008166:	eef1 6a66 	vneg.f32	s13, s13
 800816a:	eeb1 7a47 	vneg.f32	s14, s14
 800816e:	edc5 6a00 	vstr	s13, [r5]
 8008172:	ed85 7a01 	vstr	s14, [r5, #4]
 8008176:	eef1 7a67 	vneg.f32	s15, s15
 800817a:	e785      	b.n	8008088 <__kernel_rem_pio2f+0x420>

0800817c <__kernel_sinf>:
 800817c:	ee10 3a10 	vmov	r3, s0
 8008180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008184:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008188:	da04      	bge.n	8008194 <__kernel_sinf+0x18>
 800818a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800818e:	ee17 3a90 	vmov	r3, s15
 8008192:	b35b      	cbz	r3, 80081ec <__kernel_sinf+0x70>
 8008194:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008198:	eddf 7a15 	vldr	s15, [pc, #84]	; 80081f0 <__kernel_sinf+0x74>
 800819c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80081f4 <__kernel_sinf+0x78>
 80081a0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80081a4:	eddf 7a14 	vldr	s15, [pc, #80]	; 80081f8 <__kernel_sinf+0x7c>
 80081a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80081ac:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80081fc <__kernel_sinf+0x80>
 80081b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80081b4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008200 <__kernel_sinf+0x84>
 80081b8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80081bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80081c0:	b930      	cbnz	r0, 80081d0 <__kernel_sinf+0x54>
 80081c2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008204 <__kernel_sinf+0x88>
 80081c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80081ca:	eea6 0a26 	vfma.f32	s0, s12, s13
 80081ce:	4770      	bx	lr
 80081d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80081d4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80081d8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80081dc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80081e0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008208 <__kernel_sinf+0x8c>
 80081e4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80081e8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	2f2ec9d3 	.word	0x2f2ec9d3
 80081f4:	b2d72f34 	.word	0xb2d72f34
 80081f8:	3638ef1b 	.word	0x3638ef1b
 80081fc:	b9500d01 	.word	0xb9500d01
 8008200:	3c088889 	.word	0x3c088889
 8008204:	be2aaaab 	.word	0xbe2aaaab
 8008208:	3e2aaaab 	.word	0x3e2aaaab

0800820c <__kernel_tanf>:
 800820c:	b508      	push	{r3, lr}
 800820e:	ee10 3a10 	vmov	r3, s0
 8008212:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008216:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800821a:	eef0 7a40 	vmov.f32	s15, s0
 800821e:	da17      	bge.n	8008250 <__kernel_tanf+0x44>
 8008220:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8008224:	ee17 1a10 	vmov	r1, s14
 8008228:	bb41      	cbnz	r1, 800827c <__kernel_tanf+0x70>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	4313      	orrs	r3, r2
 800822e:	d108      	bne.n	8008242 <__kernel_tanf+0x36>
 8008230:	f7ff f9f0 	bl	8007614 <fabsf>
 8008234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008238:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800823c:	eeb0 0a67 	vmov.f32	s0, s15
 8008240:	bd08      	pop	{r3, pc}
 8008242:	2801      	cmp	r0, #1
 8008244:	d0fa      	beq.n	800823c <__kernel_tanf+0x30>
 8008246:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800824a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800824e:	e7f5      	b.n	800823c <__kernel_tanf+0x30>
 8008250:	494d      	ldr	r1, [pc, #308]	; (8008388 <__kernel_tanf+0x17c>)
 8008252:	428a      	cmp	r2, r1
 8008254:	db12      	blt.n	800827c <__kernel_tanf+0x70>
 8008256:	2b00      	cmp	r3, #0
 8008258:	bfb8      	it	lt
 800825a:	eef1 7a40 	vneglt.f32	s15, s0
 800825e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800838c <__kernel_tanf+0x180>
 8008262:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008266:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8008390 <__kernel_tanf+0x184>
 800826a:	bfb8      	it	lt
 800826c:	eef1 0a60 	vneglt.f32	s1, s1
 8008270:	ee70 0a60 	vsub.f32	s1, s0, s1
 8008274:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8008278:	eddf 0a46 	vldr	s1, [pc, #280]	; 8008394 <__kernel_tanf+0x188>
 800827c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8008398 <__kernel_tanf+0x18c>
 8008280:	ed9f 6a46 	vldr	s12, [pc, #280]	; 800839c <__kernel_tanf+0x190>
 8008284:	ed9f 5a46 	vldr	s10, [pc, #280]	; 80083a0 <__kernel_tanf+0x194>
 8008288:	493f      	ldr	r1, [pc, #252]	; (8008388 <__kernel_tanf+0x17c>)
 800828a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800828e:	428a      	cmp	r2, r1
 8008290:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008294:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008298:	eddf 5a42 	vldr	s11, [pc, #264]	; 80083a4 <__kernel_tanf+0x198>
 800829c:	eee6 5a07 	vfma.f32	s11, s12, s14
 80082a0:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80083a8 <__kernel_tanf+0x19c>
 80082a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80082a8:	eddf 5a40 	vldr	s11, [pc, #256]	; 80083ac <__kernel_tanf+0x1a0>
 80082ac:	eee6 5a07 	vfma.f32	s11, s12, s14
 80082b0:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80083b0 <__kernel_tanf+0x1a4>
 80082b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80082b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80083b4 <__kernel_tanf+0x1a8>
 80082bc:	eee7 5a05 	vfma.f32	s11, s14, s10
 80082c0:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80083b8 <__kernel_tanf+0x1ac>
 80082c4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80082c8:	eddf 5a3c 	vldr	s11, [pc, #240]	; 80083bc <__kernel_tanf+0x1b0>
 80082cc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80082d0:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 80083c0 <__kernel_tanf+0x1b4>
 80082d4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80082d8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80083c4 <__kernel_tanf+0x1b8>
 80082dc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80082e0:	eeb0 7a65 	vmov.f32	s14, s11
 80082e4:	eea7 6a26 	vfma.f32	s12, s14, s13
 80082e8:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80082ec:	eeb0 7a46 	vmov.f32	s14, s12
 80082f0:	eeb0 6a60 	vmov.f32	s12, s1
 80082f4:	eea7 6a25 	vfma.f32	s12, s14, s11
 80082f8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80083c8 <__kernel_tanf+0x1bc>
 80082fc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8008300:	eee5 0a87 	vfma.f32	s1, s11, s14
 8008304:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008308:	db1d      	blt.n	8008346 <__kernel_tanf+0x13a>
 800830a:	ee06 0a90 	vmov	s13, r0
 800830e:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8008312:	ee27 6a07 	vmul.f32	s12, s14, s14
 8008316:	ee37 7a00 	vadd.f32	s14, s14, s0
 800831a:	179b      	asrs	r3, r3, #30
 800831c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	f1c3 0301 	rsb	r3, r3, #1
 8008328:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800832c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8008330:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008334:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008340:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008344:	e77a      	b.n	800823c <__kernel_tanf+0x30>
 8008346:	2801      	cmp	r0, #1
 8008348:	d01b      	beq.n	8008382 <__kernel_tanf+0x176>
 800834a:	4b20      	ldr	r3, [pc, #128]	; (80083cc <__kernel_tanf+0x1c0>)
 800834c:	ee17 2a10 	vmov	r2, s14
 8008350:	401a      	ands	r2, r3
 8008352:	ee06 2a10 	vmov	s12, r2
 8008356:	ee76 7a67 	vsub.f32	s15, s12, s15
 800835a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800835e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008362:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800836a:	ee16 2a90 	vmov	r2, s13
 800836e:	4013      	ands	r3, r2
 8008370:	ee07 3a90 	vmov	s15, r3
 8008374:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008378:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800837c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008380:	e75c      	b.n	800823c <__kernel_tanf+0x30>
 8008382:	eef0 7a47 	vmov.f32	s15, s14
 8008386:	e759      	b.n	800823c <__kernel_tanf+0x30>
 8008388:	3f2ca140 	.word	0x3f2ca140
 800838c:	3f490fda 	.word	0x3f490fda
 8008390:	33222168 	.word	0x33222168
 8008394:	00000000 	.word	0x00000000
 8008398:	b79bae5f 	.word	0xb79bae5f
 800839c:	38a3f445 	.word	0x38a3f445
 80083a0:	37d95384 	.word	0x37d95384
 80083a4:	3a1a26c8 	.word	0x3a1a26c8
 80083a8:	3b6b6916 	.word	0x3b6b6916
 80083ac:	3cb327a4 	.word	0x3cb327a4
 80083b0:	3e088889 	.word	0x3e088889
 80083b4:	3895c07a 	.word	0x3895c07a
 80083b8:	398137b9 	.word	0x398137b9
 80083bc:	3abede48 	.word	0x3abede48
 80083c0:	3c11371f 	.word	0x3c11371f
 80083c4:	3d5d0dd1 	.word	0x3d5d0dd1
 80083c8:	3eaaaaab 	.word	0x3eaaaaab
 80083cc:	fffff000 	.word	0xfffff000

080083d0 <floorf>:
 80083d0:	ee10 3a10 	vmov	r3, s0
 80083d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80083d8:	3a7f      	subs	r2, #127	; 0x7f
 80083da:	2a16      	cmp	r2, #22
 80083dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083e0:	dc2a      	bgt.n	8008438 <floorf+0x68>
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	da11      	bge.n	800840a <floorf+0x3a>
 80083e6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008448 <floorf+0x78>
 80083ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f6:	dd05      	ble.n	8008404 <floorf+0x34>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	da23      	bge.n	8008444 <floorf+0x74>
 80083fc:	4a13      	ldr	r2, [pc, #76]	; (800844c <floorf+0x7c>)
 80083fe:	2900      	cmp	r1, #0
 8008400:	bf18      	it	ne
 8008402:	4613      	movne	r3, r2
 8008404:	ee00 3a10 	vmov	s0, r3
 8008408:	4770      	bx	lr
 800840a:	4911      	ldr	r1, [pc, #68]	; (8008450 <floorf+0x80>)
 800840c:	4111      	asrs	r1, r2
 800840e:	420b      	tst	r3, r1
 8008410:	d0fa      	beq.n	8008408 <floorf+0x38>
 8008412:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008448 <floorf+0x78>
 8008416:	ee30 0a27 	vadd.f32	s0, s0, s15
 800841a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008422:	ddef      	ble.n	8008404 <floorf+0x34>
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfbe      	ittt	lt
 8008428:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800842c:	fa40 f202 	asrlt.w	r2, r0, r2
 8008430:	189b      	addlt	r3, r3, r2
 8008432:	ea23 0301 	bic.w	r3, r3, r1
 8008436:	e7e5      	b.n	8008404 <floorf+0x34>
 8008438:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800843c:	d3e4      	bcc.n	8008408 <floorf+0x38>
 800843e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008442:	4770      	bx	lr
 8008444:	2300      	movs	r3, #0
 8008446:	e7dd      	b.n	8008404 <floorf+0x34>
 8008448:	7149f2ca 	.word	0x7149f2ca
 800844c:	bf800000 	.word	0xbf800000
 8008450:	007fffff 	.word	0x007fffff

08008454 <nanf>:
 8008454:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800845c <nanf+0x8>
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	7fc00000 	.word	0x7fc00000

08008460 <scalbnf>:
 8008460:	ee10 3a10 	vmov	r3, s0
 8008464:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008468:	d025      	beq.n	80084b6 <scalbnf+0x56>
 800846a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800846e:	d302      	bcc.n	8008476 <scalbnf+0x16>
 8008470:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008474:	4770      	bx	lr
 8008476:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800847a:	d122      	bne.n	80084c2 <scalbnf+0x62>
 800847c:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <scalbnf+0xc8>)
 800847e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800852c <scalbnf+0xcc>
 8008482:	4298      	cmp	r0, r3
 8008484:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008488:	db16      	blt.n	80084b8 <scalbnf+0x58>
 800848a:	ee10 3a10 	vmov	r3, s0
 800848e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008492:	3a19      	subs	r2, #25
 8008494:	4402      	add	r2, r0
 8008496:	2afe      	cmp	r2, #254	; 0xfe
 8008498:	dd15      	ble.n	80084c6 <scalbnf+0x66>
 800849a:	ee10 3a10 	vmov	r3, s0
 800849e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008530 <scalbnf+0xd0>
 80084a2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008534 <scalbnf+0xd4>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	eeb0 7a67 	vmov.f32	s14, s15
 80084ac:	bfb8      	it	lt
 80084ae:	eef0 7a66 	vmovlt.f32	s15, s13
 80084b2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80084b6:	4770      	bx	lr
 80084b8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008538 <scalbnf+0xd8>
 80084bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80084c0:	4770      	bx	lr
 80084c2:	0dd2      	lsrs	r2, r2, #23
 80084c4:	e7e6      	b.n	8008494 <scalbnf+0x34>
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	dd06      	ble.n	80084d8 <scalbnf+0x78>
 80084ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80084d2:	ee00 3a10 	vmov	s0, r3
 80084d6:	4770      	bx	lr
 80084d8:	f112 0f16 	cmn.w	r2, #22
 80084dc:	da1a      	bge.n	8008514 <scalbnf+0xb4>
 80084de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80084e2:	4298      	cmp	r0, r3
 80084e4:	ee10 3a10 	vmov	r3, s0
 80084e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ec:	dd0a      	ble.n	8008504 <scalbnf+0xa4>
 80084ee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008530 <scalbnf+0xd0>
 80084f2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008534 <scalbnf+0xd4>
 80084f6:	eef0 7a40 	vmov.f32	s15, s0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf18      	it	ne
 80084fe:	eeb0 0a47 	vmovne.f32	s0, s14
 8008502:	e7db      	b.n	80084bc <scalbnf+0x5c>
 8008504:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008538 <scalbnf+0xd8>
 8008508:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800853c <scalbnf+0xdc>
 800850c:	eef0 7a40 	vmov.f32	s15, s0
 8008510:	2b00      	cmp	r3, #0
 8008512:	e7f3      	b.n	80084fc <scalbnf+0x9c>
 8008514:	3219      	adds	r2, #25
 8008516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800851a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800851e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008540 <scalbnf+0xe0>
 8008522:	ee07 3a10 	vmov	s14, r3
 8008526:	e7c4      	b.n	80084b2 <scalbnf+0x52>
 8008528:	ffff3cb0 	.word	0xffff3cb0
 800852c:	4c000000 	.word	0x4c000000
 8008530:	7149f2ca 	.word	0x7149f2ca
 8008534:	f149f2ca 	.word	0xf149f2ca
 8008538:	0da24260 	.word	0x0da24260
 800853c:	8da24260 	.word	0x8da24260
 8008540:	33000000 	.word	0x33000000

08008544 <__errno>:
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <__errno+0x8>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000184 	.word	0x20000184

08008550 <__libc_init_array>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4d0d      	ldr	r5, [pc, #52]	; (8008588 <__libc_init_array+0x38>)
 8008554:	4c0d      	ldr	r4, [pc, #52]	; (800858c <__libc_init_array+0x3c>)
 8008556:	1b64      	subs	r4, r4, r5
 8008558:	10a4      	asrs	r4, r4, #2
 800855a:	2600      	movs	r6, #0
 800855c:	42a6      	cmp	r6, r4
 800855e:	d109      	bne.n	8008574 <__libc_init_array+0x24>
 8008560:	4d0b      	ldr	r5, [pc, #44]	; (8008590 <__libc_init_array+0x40>)
 8008562:	4c0c      	ldr	r4, [pc, #48]	; (8008594 <__libc_init_array+0x44>)
 8008564:	f002 fd0a 	bl	800af7c <_init>
 8008568:	1b64      	subs	r4, r4, r5
 800856a:	10a4      	asrs	r4, r4, #2
 800856c:	2600      	movs	r6, #0
 800856e:	42a6      	cmp	r6, r4
 8008570:	d105      	bne.n	800857e <__libc_init_array+0x2e>
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	f855 3b04 	ldr.w	r3, [r5], #4
 8008578:	4798      	blx	r3
 800857a:	3601      	adds	r6, #1
 800857c:	e7ee      	b.n	800855c <__libc_init_array+0xc>
 800857e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008582:	4798      	blx	r3
 8008584:	3601      	adds	r6, #1
 8008586:	e7f2      	b.n	800856e <__libc_init_array+0x1e>
 8008588:	0800b7d4 	.word	0x0800b7d4
 800858c:	0800b7d4 	.word	0x0800b7d4
 8008590:	0800b7d4 	.word	0x0800b7d4
 8008594:	0800b7d8 	.word	0x0800b7d8

08008598 <memset>:
 8008598:	4402      	add	r2, r0
 800859a:	4603      	mov	r3, r0
 800859c:	4293      	cmp	r3, r2
 800859e:	d100      	bne.n	80085a2 <memset+0xa>
 80085a0:	4770      	bx	lr
 80085a2:	f803 1b01 	strb.w	r1, [r3], #1
 80085a6:	e7f9      	b.n	800859c <memset+0x4>

080085a8 <__cvt>:
 80085a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	ec55 4b10 	vmov	r4, r5, d0
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	460e      	mov	r6, r1
 80085b4:	4619      	mov	r1, r3
 80085b6:	462b      	mov	r3, r5
 80085b8:	bfbb      	ittet	lt
 80085ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085be:	461d      	movlt	r5, r3
 80085c0:	2300      	movge	r3, #0
 80085c2:	232d      	movlt	r3, #45	; 0x2d
 80085c4:	700b      	strb	r3, [r1, #0]
 80085c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085cc:	4691      	mov	r9, r2
 80085ce:	f023 0820 	bic.w	r8, r3, #32
 80085d2:	bfbc      	itt	lt
 80085d4:	4622      	movlt	r2, r4
 80085d6:	4614      	movlt	r4, r2
 80085d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085dc:	d005      	beq.n	80085ea <__cvt+0x42>
 80085de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085e2:	d100      	bne.n	80085e6 <__cvt+0x3e>
 80085e4:	3601      	adds	r6, #1
 80085e6:	2102      	movs	r1, #2
 80085e8:	e000      	b.n	80085ec <__cvt+0x44>
 80085ea:	2103      	movs	r1, #3
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	ab02      	add	r3, sp, #8
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	ec45 4b10 	vmov	d0, r4, r5
 80085f8:	4653      	mov	r3, sl
 80085fa:	4632      	mov	r2, r6
 80085fc:	f000 fce4 	bl	8008fc8 <_dtoa_r>
 8008600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008604:	4607      	mov	r7, r0
 8008606:	d102      	bne.n	800860e <__cvt+0x66>
 8008608:	f019 0f01 	tst.w	r9, #1
 800860c:	d022      	beq.n	8008654 <__cvt+0xac>
 800860e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008612:	eb07 0906 	add.w	r9, r7, r6
 8008616:	d110      	bne.n	800863a <__cvt+0x92>
 8008618:	783b      	ldrb	r3, [r7, #0]
 800861a:	2b30      	cmp	r3, #48	; 0x30
 800861c:	d10a      	bne.n	8008634 <__cvt+0x8c>
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	4620      	mov	r0, r4
 8008624:	4629      	mov	r1, r5
 8008626:	f7f8 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800862a:	b918      	cbnz	r0, 8008634 <__cvt+0x8c>
 800862c:	f1c6 0601 	rsb	r6, r6, #1
 8008630:	f8ca 6000 	str.w	r6, [sl]
 8008634:	f8da 3000 	ldr.w	r3, [sl]
 8008638:	4499      	add	r9, r3
 800863a:	2200      	movs	r2, #0
 800863c:	2300      	movs	r3, #0
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	f7f8 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008646:	b108      	cbz	r0, 800864c <__cvt+0xa4>
 8008648:	f8cd 900c 	str.w	r9, [sp, #12]
 800864c:	2230      	movs	r2, #48	; 0x30
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	454b      	cmp	r3, r9
 8008652:	d307      	bcc.n	8008664 <__cvt+0xbc>
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008658:	1bdb      	subs	r3, r3, r7
 800865a:	4638      	mov	r0, r7
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	b004      	add	sp, #16
 8008660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008664:	1c59      	adds	r1, r3, #1
 8008666:	9103      	str	r1, [sp, #12]
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e7f0      	b.n	800864e <__cvt+0xa6>

0800866c <__exponent>:
 800866c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800866e:	4603      	mov	r3, r0
 8008670:	2900      	cmp	r1, #0
 8008672:	bfb8      	it	lt
 8008674:	4249      	neglt	r1, r1
 8008676:	f803 2b02 	strb.w	r2, [r3], #2
 800867a:	bfb4      	ite	lt
 800867c:	222d      	movlt	r2, #45	; 0x2d
 800867e:	222b      	movge	r2, #43	; 0x2b
 8008680:	2909      	cmp	r1, #9
 8008682:	7042      	strb	r2, [r0, #1]
 8008684:	dd2a      	ble.n	80086dc <__exponent+0x70>
 8008686:	f10d 0407 	add.w	r4, sp, #7
 800868a:	46a4      	mov	ip, r4
 800868c:	270a      	movs	r7, #10
 800868e:	46a6      	mov	lr, r4
 8008690:	460a      	mov	r2, r1
 8008692:	fb91 f6f7 	sdiv	r6, r1, r7
 8008696:	fb07 1516 	mls	r5, r7, r6, r1
 800869a:	3530      	adds	r5, #48	; 0x30
 800869c:	2a63      	cmp	r2, #99	; 0x63
 800869e:	f104 34ff 	add.w	r4, r4, #4294967295
 80086a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086a6:	4631      	mov	r1, r6
 80086a8:	dcf1      	bgt.n	800868e <__exponent+0x22>
 80086aa:	3130      	adds	r1, #48	; 0x30
 80086ac:	f1ae 0502 	sub.w	r5, lr, #2
 80086b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086b4:	1c44      	adds	r4, r0, #1
 80086b6:	4629      	mov	r1, r5
 80086b8:	4561      	cmp	r1, ip
 80086ba:	d30a      	bcc.n	80086d2 <__exponent+0x66>
 80086bc:	f10d 0209 	add.w	r2, sp, #9
 80086c0:	eba2 020e 	sub.w	r2, r2, lr
 80086c4:	4565      	cmp	r5, ip
 80086c6:	bf88      	it	hi
 80086c8:	2200      	movhi	r2, #0
 80086ca:	4413      	add	r3, r2
 80086cc:	1a18      	subs	r0, r3, r0
 80086ce:	b003      	add	sp, #12
 80086d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086da:	e7ed      	b.n	80086b8 <__exponent+0x4c>
 80086dc:	2330      	movs	r3, #48	; 0x30
 80086de:	3130      	adds	r1, #48	; 0x30
 80086e0:	7083      	strb	r3, [r0, #2]
 80086e2:	70c1      	strb	r1, [r0, #3]
 80086e4:	1d03      	adds	r3, r0, #4
 80086e6:	e7f1      	b.n	80086cc <__exponent+0x60>

080086e8 <_printf_float>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	ed2d 8b02 	vpush	{d8}
 80086f0:	b08d      	sub	sp, #52	; 0x34
 80086f2:	460c      	mov	r4, r1
 80086f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086f8:	4616      	mov	r6, r2
 80086fa:	461f      	mov	r7, r3
 80086fc:	4605      	mov	r5, r0
 80086fe:	f001 fb45 	bl	8009d8c <_localeconv_r>
 8008702:	f8d0 a000 	ldr.w	sl, [r0]
 8008706:	4650      	mov	r0, sl
 8008708:	f7f7 fd62 	bl	80001d0 <strlen>
 800870c:	2300      	movs	r3, #0
 800870e:	930a      	str	r3, [sp, #40]	; 0x28
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	9305      	str	r3, [sp, #20]
 8008714:	f8d8 3000 	ldr.w	r3, [r8]
 8008718:	f894 b018 	ldrb.w	fp, [r4, #24]
 800871c:	3307      	adds	r3, #7
 800871e:	f023 0307 	bic.w	r3, r3, #7
 8008722:	f103 0208 	add.w	r2, r3, #8
 8008726:	f8c8 2000 	str.w	r2, [r8]
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008732:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800873a:	9307      	str	r3, [sp, #28]
 800873c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008740:	ee08 0a10 	vmov	s16, r0
 8008744:	4b9f      	ldr	r3, [pc, #636]	; (80089c4 <_printf_float+0x2dc>)
 8008746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800874a:	f04f 32ff 	mov.w	r2, #4294967295
 800874e:	f7f8 f9ed 	bl	8000b2c <__aeabi_dcmpun>
 8008752:	bb88      	cbnz	r0, 80087b8 <_printf_float+0xd0>
 8008754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008758:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <_printf_float+0x2dc>)
 800875a:	f04f 32ff 	mov.w	r2, #4294967295
 800875e:	f7f8 f9c7 	bl	8000af0 <__aeabi_dcmple>
 8008762:	bb48      	cbnz	r0, 80087b8 <_printf_float+0xd0>
 8008764:	2200      	movs	r2, #0
 8008766:	2300      	movs	r3, #0
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f8 f9b6 	bl	8000adc <__aeabi_dcmplt>
 8008770:	b110      	cbz	r0, 8008778 <_printf_float+0x90>
 8008772:	232d      	movs	r3, #45	; 0x2d
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008778:	4b93      	ldr	r3, [pc, #588]	; (80089c8 <_printf_float+0x2e0>)
 800877a:	4894      	ldr	r0, [pc, #592]	; (80089cc <_printf_float+0x2e4>)
 800877c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008780:	bf94      	ite	ls
 8008782:	4698      	movls	r8, r3
 8008784:	4680      	movhi	r8, r0
 8008786:	2303      	movs	r3, #3
 8008788:	6123      	str	r3, [r4, #16]
 800878a:	9b05      	ldr	r3, [sp, #20]
 800878c:	f023 0204 	bic.w	r2, r3, #4
 8008790:	6022      	str	r2, [r4, #0]
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	9700      	str	r7, [sp, #0]
 8008798:	4633      	mov	r3, r6
 800879a:	aa0b      	add	r2, sp, #44	; 0x2c
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 f9d8 	bl	8008b54 <_printf_common>
 80087a4:	3001      	adds	r0, #1
 80087a6:	f040 8090 	bne.w	80088ca <_printf_float+0x1e2>
 80087aa:	f04f 30ff 	mov.w	r0, #4294967295
 80087ae:	b00d      	add	sp, #52	; 0x34
 80087b0:	ecbd 8b02 	vpop	{d8}
 80087b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f8 f9b4 	bl	8000b2c <__aeabi_dcmpun>
 80087c4:	b140      	cbz	r0, 80087d8 <_printf_float+0xf0>
 80087c6:	464b      	mov	r3, r9
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bfbc      	itt	lt
 80087cc:	232d      	movlt	r3, #45	; 0x2d
 80087ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087d2:	487f      	ldr	r0, [pc, #508]	; (80089d0 <_printf_float+0x2e8>)
 80087d4:	4b7f      	ldr	r3, [pc, #508]	; (80089d4 <_printf_float+0x2ec>)
 80087d6:	e7d1      	b.n	800877c <_printf_float+0x94>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087de:	9206      	str	r2, [sp, #24]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	d13f      	bne.n	8008864 <_printf_float+0x17c>
 80087e4:	2306      	movs	r3, #6
 80087e6:	6063      	str	r3, [r4, #4]
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	6861      	ldr	r1, [r4, #4]
 80087ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087f0:	2300      	movs	r3, #0
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	ab0a      	add	r3, sp, #40	; 0x28
 80087f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087fa:	ab09      	add	r3, sp, #36	; 0x24
 80087fc:	ec49 8b10 	vmov	d0, r8, r9
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	6022      	str	r2, [r4, #0]
 8008804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff fecd 	bl	80085a8 <__cvt>
 800880e:	9b06      	ldr	r3, [sp, #24]
 8008810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008812:	2b47      	cmp	r3, #71	; 0x47
 8008814:	4680      	mov	r8, r0
 8008816:	d108      	bne.n	800882a <_printf_float+0x142>
 8008818:	1cc8      	adds	r0, r1, #3
 800881a:	db02      	blt.n	8008822 <_printf_float+0x13a>
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	4299      	cmp	r1, r3
 8008820:	dd41      	ble.n	80088a6 <_printf_float+0x1be>
 8008822:	f1ab 0b02 	sub.w	fp, fp, #2
 8008826:	fa5f fb8b 	uxtb.w	fp, fp
 800882a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800882e:	d820      	bhi.n	8008872 <_printf_float+0x18a>
 8008830:	3901      	subs	r1, #1
 8008832:	465a      	mov	r2, fp
 8008834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008838:	9109      	str	r1, [sp, #36]	; 0x24
 800883a:	f7ff ff17 	bl	800866c <__exponent>
 800883e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008840:	1813      	adds	r3, r2, r0
 8008842:	2a01      	cmp	r2, #1
 8008844:	4681      	mov	r9, r0
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	dc02      	bgt.n	8008850 <_printf_float+0x168>
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	07d2      	lsls	r2, r2, #31
 800884e:	d501      	bpl.n	8008854 <_printf_float+0x16c>
 8008850:	3301      	adds	r3, #1
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008858:	2b00      	cmp	r3, #0
 800885a:	d09c      	beq.n	8008796 <_printf_float+0xae>
 800885c:	232d      	movs	r3, #45	; 0x2d
 800885e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008862:	e798      	b.n	8008796 <_printf_float+0xae>
 8008864:	9a06      	ldr	r2, [sp, #24]
 8008866:	2a47      	cmp	r2, #71	; 0x47
 8008868:	d1be      	bne.n	80087e8 <_printf_float+0x100>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1bc      	bne.n	80087e8 <_printf_float+0x100>
 800886e:	2301      	movs	r3, #1
 8008870:	e7b9      	b.n	80087e6 <_printf_float+0xfe>
 8008872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008876:	d118      	bne.n	80088aa <_printf_float+0x1c2>
 8008878:	2900      	cmp	r1, #0
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	dd0b      	ble.n	8008896 <_printf_float+0x1ae>
 800887e:	6121      	str	r1, [r4, #16]
 8008880:	b913      	cbnz	r3, 8008888 <_printf_float+0x1a0>
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	07d0      	lsls	r0, r2, #31
 8008886:	d502      	bpl.n	800888e <_printf_float+0x1a6>
 8008888:	3301      	adds	r3, #1
 800888a:	440b      	add	r3, r1
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008890:	f04f 0900 	mov.w	r9, #0
 8008894:	e7de      	b.n	8008854 <_printf_float+0x16c>
 8008896:	b913      	cbnz	r3, 800889e <_printf_float+0x1b6>
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	07d2      	lsls	r2, r2, #31
 800889c:	d501      	bpl.n	80088a2 <_printf_float+0x1ba>
 800889e:	3302      	adds	r3, #2
 80088a0:	e7f4      	b.n	800888c <_printf_float+0x1a4>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e7f2      	b.n	800888c <_printf_float+0x1a4>
 80088a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ac:	4299      	cmp	r1, r3
 80088ae:	db05      	blt.n	80088bc <_printf_float+0x1d4>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	6121      	str	r1, [r4, #16]
 80088b4:	07d8      	lsls	r0, r3, #31
 80088b6:	d5ea      	bpl.n	800888e <_printf_float+0x1a6>
 80088b8:	1c4b      	adds	r3, r1, #1
 80088ba:	e7e7      	b.n	800888c <_printf_float+0x1a4>
 80088bc:	2900      	cmp	r1, #0
 80088be:	bfd4      	ite	le
 80088c0:	f1c1 0202 	rsble	r2, r1, #2
 80088c4:	2201      	movgt	r2, #1
 80088c6:	4413      	add	r3, r2
 80088c8:	e7e0      	b.n	800888c <_printf_float+0x1a4>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	055a      	lsls	r2, r3, #21
 80088ce:	d407      	bmi.n	80088e0 <_printf_float+0x1f8>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	4642      	mov	r2, r8
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	d12c      	bne.n	8008938 <_printf_float+0x250>
 80088de:	e764      	b.n	80087aa <_printf_float+0xc2>
 80088e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088e4:	f240 80e0 	bls.w	8008aa8 <_printf_float+0x3c0>
 80088e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ec:	2200      	movs	r2, #0
 80088ee:	2300      	movs	r3, #0
 80088f0:	f7f8 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d034      	beq.n	8008962 <_printf_float+0x27a>
 80088f8:	4a37      	ldr	r2, [pc, #220]	; (80089d8 <_printf_float+0x2f0>)
 80088fa:	2301      	movs	r3, #1
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af51 	beq.w	80087aa <_printf_float+0xc2>
 8008908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800890c:	429a      	cmp	r2, r3
 800890e:	db02      	blt.n	8008916 <_printf_float+0x22e>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	07d8      	lsls	r0, r3, #31
 8008914:	d510      	bpl.n	8008938 <_printf_float+0x250>
 8008916:	ee18 3a10 	vmov	r3, s16
 800891a:	4652      	mov	r2, sl
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f af41 	beq.w	80087aa <_printf_float+0xc2>
 8008928:	f04f 0800 	mov.w	r8, #0
 800892c:	f104 091a 	add.w	r9, r4, #26
 8008930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008932:	3b01      	subs	r3, #1
 8008934:	4543      	cmp	r3, r8
 8008936:	dc09      	bgt.n	800894c <_printf_float+0x264>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	079b      	lsls	r3, r3, #30
 800893c:	f100 8105 	bmi.w	8008b4a <_printf_float+0x462>
 8008940:	68e0      	ldr	r0, [r4, #12]
 8008942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008944:	4298      	cmp	r0, r3
 8008946:	bfb8      	it	lt
 8008948:	4618      	movlt	r0, r3
 800894a:	e730      	b.n	80087ae <_printf_float+0xc6>
 800894c:	2301      	movs	r3, #1
 800894e:	464a      	mov	r2, r9
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f af27 	beq.w	80087aa <_printf_float+0xc2>
 800895c:	f108 0801 	add.w	r8, r8, #1
 8008960:	e7e6      	b.n	8008930 <_printf_float+0x248>
 8008962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc39      	bgt.n	80089dc <_printf_float+0x2f4>
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <_printf_float+0x2f0>)
 800896a:	2301      	movs	r3, #1
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f af19 	beq.w	80087aa <_printf_float+0xc2>
 8008978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800897c:	4313      	orrs	r3, r2
 800897e:	d102      	bne.n	8008986 <_printf_float+0x29e>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07d9      	lsls	r1, r3, #31
 8008984:	d5d8      	bpl.n	8008938 <_printf_float+0x250>
 8008986:	ee18 3a10 	vmov	r3, s16
 800898a:	4652      	mov	r2, sl
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af09 	beq.w	80087aa <_printf_float+0xc2>
 8008998:	f04f 0900 	mov.w	r9, #0
 800899c:	f104 0a1a 	add.w	sl, r4, #26
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	425b      	negs	r3, r3
 80089a4:	454b      	cmp	r3, r9
 80089a6:	dc01      	bgt.n	80089ac <_printf_float+0x2c4>
 80089a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089aa:	e792      	b.n	80088d2 <_printf_float+0x1ea>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4652      	mov	r2, sl
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f aef7 	beq.w	80087aa <_printf_float+0xc2>
 80089bc:	f109 0901 	add.w	r9, r9, #1
 80089c0:	e7ee      	b.n	80089a0 <_printf_float+0x2b8>
 80089c2:	bf00      	nop
 80089c4:	7fefffff 	.word	0x7fefffff
 80089c8:	0800b3f4 	.word	0x0800b3f4
 80089cc:	0800b3f8 	.word	0x0800b3f8
 80089d0:	0800b400 	.word	0x0800b400
 80089d4:	0800b3fc 	.word	0x0800b3fc
 80089d8:	0800b404 	.word	0x0800b404
 80089dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089e0:	429a      	cmp	r2, r3
 80089e2:	bfa8      	it	ge
 80089e4:	461a      	movge	r2, r3
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	4691      	mov	r9, r2
 80089ea:	dc37      	bgt.n	8008a5c <_printf_float+0x374>
 80089ec:	f04f 0b00 	mov.w	fp, #0
 80089f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089f4:	f104 021a 	add.w	r2, r4, #26
 80089f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	eba3 0309 	sub.w	r3, r3, r9
 8008a00:	455b      	cmp	r3, fp
 8008a02:	dc33      	bgt.n	8008a6c <_printf_float+0x384>
 8008a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	db3b      	blt.n	8008a84 <_printf_float+0x39c>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	07da      	lsls	r2, r3, #31
 8008a10:	d438      	bmi.n	8008a84 <_printf_float+0x39c>
 8008a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a14:	9b05      	ldr	r3, [sp, #20]
 8008a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	eba2 0901 	sub.w	r9, r2, r1
 8008a1e:	4599      	cmp	r9, r3
 8008a20:	bfa8      	it	ge
 8008a22:	4699      	movge	r9, r3
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	dc35      	bgt.n	8008a96 <_printf_float+0x3ae>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a32:	f104 0a1a 	add.w	sl, r4, #26
 8008a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	eba3 0309 	sub.w	r3, r3, r9
 8008a40:	4543      	cmp	r3, r8
 8008a42:	f77f af79 	ble.w	8008938 <_printf_float+0x250>
 8008a46:	2301      	movs	r3, #1
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	f43f aeaa 	beq.w	80087aa <_printf_float+0xc2>
 8008a56:	f108 0801 	add.w	r8, r8, #1
 8008a5a:	e7ec      	b.n	8008a36 <_printf_float+0x34e>
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4642      	mov	r2, r8
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b8      	blx	r7
 8008a66:	3001      	adds	r0, #1
 8008a68:	d1c0      	bne.n	80089ec <_printf_float+0x304>
 8008a6a:	e69e      	b.n	80087aa <_printf_float+0xc2>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	9205      	str	r2, [sp, #20]
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	f43f ae97 	beq.w	80087aa <_printf_float+0xc2>
 8008a7c:	9a05      	ldr	r2, [sp, #20]
 8008a7e:	f10b 0b01 	add.w	fp, fp, #1
 8008a82:	e7b9      	b.n	80089f8 <_printf_float+0x310>
 8008a84:	ee18 3a10 	vmov	r3, s16
 8008a88:	4652      	mov	r2, sl
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	d1be      	bne.n	8008a12 <_printf_float+0x32a>
 8008a94:	e689      	b.n	80087aa <_printf_float+0xc2>
 8008a96:	9a05      	ldr	r2, [sp, #20]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	4442      	add	r2, r8
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	d1c1      	bne.n	8008a2a <_printf_float+0x342>
 8008aa6:	e680      	b.n	80087aa <_printf_float+0xc2>
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	2a01      	cmp	r2, #1
 8008aac:	dc01      	bgt.n	8008ab2 <_printf_float+0x3ca>
 8008aae:	07db      	lsls	r3, r3, #31
 8008ab0:	d538      	bpl.n	8008b24 <_printf_float+0x43c>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f ae74 	beq.w	80087aa <_printf_float+0xc2>
 8008ac2:	ee18 3a10 	vmov	r3, s16
 8008ac6:	4652      	mov	r2, sl
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	f43f ae6b 	beq.w	80087aa <_printf_float+0xc2>
 8008ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2300      	movs	r3, #0
 8008adc:	f7f7 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ae0:	b9d8      	cbnz	r0, 8008b1a <_printf_float+0x432>
 8008ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae4:	f108 0201 	add.w	r2, r8, #1
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	d10e      	bne.n	8008b12 <_printf_float+0x42a>
 8008af4:	e659      	b.n	80087aa <_printf_float+0xc2>
 8008af6:	2301      	movs	r3, #1
 8008af8:	4652      	mov	r2, sl
 8008afa:	4631      	mov	r1, r6
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b8      	blx	r7
 8008b00:	3001      	adds	r0, #1
 8008b02:	f43f ae52 	beq.w	80087aa <_printf_float+0xc2>
 8008b06:	f108 0801 	add.w	r8, r8, #1
 8008b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	4543      	cmp	r3, r8
 8008b10:	dcf1      	bgt.n	8008af6 <_printf_float+0x40e>
 8008b12:	464b      	mov	r3, r9
 8008b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b18:	e6dc      	b.n	80088d4 <_printf_float+0x1ec>
 8008b1a:	f04f 0800 	mov.w	r8, #0
 8008b1e:	f104 0a1a 	add.w	sl, r4, #26
 8008b22:	e7f2      	b.n	8008b0a <_printf_float+0x422>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4642      	mov	r2, r8
 8008b28:	e7df      	b.n	8008aea <_printf_float+0x402>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	464a      	mov	r2, r9
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b8      	blx	r7
 8008b34:	3001      	adds	r0, #1
 8008b36:	f43f ae38 	beq.w	80087aa <_printf_float+0xc2>
 8008b3a:	f108 0801 	add.w	r8, r8, #1
 8008b3e:	68e3      	ldr	r3, [r4, #12]
 8008b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b42:	1a5b      	subs	r3, r3, r1
 8008b44:	4543      	cmp	r3, r8
 8008b46:	dcf0      	bgt.n	8008b2a <_printf_float+0x442>
 8008b48:	e6fa      	b.n	8008940 <_printf_float+0x258>
 8008b4a:	f04f 0800 	mov.w	r8, #0
 8008b4e:	f104 0919 	add.w	r9, r4, #25
 8008b52:	e7f4      	b.n	8008b3e <_printf_float+0x456>

08008b54 <_printf_common>:
 8008b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	4616      	mov	r6, r2
 8008b5a:	4699      	mov	r9, r3
 8008b5c:	688a      	ldr	r2, [r1, #8]
 8008b5e:	690b      	ldr	r3, [r1, #16]
 8008b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	bfb8      	it	lt
 8008b68:	4613      	movlt	r3, r2
 8008b6a:	6033      	str	r3, [r6, #0]
 8008b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b70:	4607      	mov	r7, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	b10a      	cbz	r2, 8008b7a <_printf_common+0x26>
 8008b76:	3301      	adds	r3, #1
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	0699      	lsls	r1, r3, #26
 8008b7e:	bf42      	ittt	mi
 8008b80:	6833      	ldrmi	r3, [r6, #0]
 8008b82:	3302      	addmi	r3, #2
 8008b84:	6033      	strmi	r3, [r6, #0]
 8008b86:	6825      	ldr	r5, [r4, #0]
 8008b88:	f015 0506 	ands.w	r5, r5, #6
 8008b8c:	d106      	bne.n	8008b9c <_printf_common+0x48>
 8008b8e:	f104 0a19 	add.w	sl, r4, #25
 8008b92:	68e3      	ldr	r3, [r4, #12]
 8008b94:	6832      	ldr	r2, [r6, #0]
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	42ab      	cmp	r3, r5
 8008b9a:	dc26      	bgt.n	8008bea <_printf_common+0x96>
 8008b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ba0:	1e13      	subs	r3, r2, #0
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	bf18      	it	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	0692      	lsls	r2, r2, #26
 8008baa:	d42b      	bmi.n	8008c04 <_printf_common+0xb0>
 8008bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47c0      	blx	r8
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d01e      	beq.n	8008bf8 <_printf_common+0xa4>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	68e5      	ldr	r5, [r4, #12]
 8008bbe:	6832      	ldr	r2, [r6, #0]
 8008bc0:	f003 0306 	and.w	r3, r3, #6
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	bf08      	it	eq
 8008bc8:	1aad      	subeq	r5, r5, r2
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	bf0c      	ite	eq
 8008bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd4:	2500      	movne	r5, #0
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	bfc4      	itt	gt
 8008bda:	1a9b      	subgt	r3, r3, r2
 8008bdc:	18ed      	addgt	r5, r5, r3
 8008bde:	2600      	movs	r6, #0
 8008be0:	341a      	adds	r4, #26
 8008be2:	42b5      	cmp	r5, r6
 8008be4:	d11a      	bne.n	8008c1c <_printf_common+0xc8>
 8008be6:	2000      	movs	r0, #0
 8008be8:	e008      	b.n	8008bfc <_printf_common+0xa8>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4652      	mov	r2, sl
 8008bee:	4649      	mov	r1, r9
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	47c0      	blx	r8
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d103      	bne.n	8008c00 <_printf_common+0xac>
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c00:	3501      	adds	r5, #1
 8008c02:	e7c6      	b.n	8008b92 <_printf_common+0x3e>
 8008c04:	18e1      	adds	r1, r4, r3
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	2030      	movs	r0, #48	; 0x30
 8008c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c0e:	4422      	add	r2, r4
 8008c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c18:	3302      	adds	r3, #2
 8008c1a:	e7c7      	b.n	8008bac <_printf_common+0x58>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4622      	mov	r2, r4
 8008c20:	4649      	mov	r1, r9
 8008c22:	4638      	mov	r0, r7
 8008c24:	47c0      	blx	r8
 8008c26:	3001      	adds	r0, #1
 8008c28:	d0e6      	beq.n	8008bf8 <_printf_common+0xa4>
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7d9      	b.n	8008be2 <_printf_common+0x8e>
	...

08008c30 <_printf_i>:
 8008c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	460c      	mov	r4, r1
 8008c36:	4691      	mov	r9, r2
 8008c38:	7e27      	ldrb	r7, [r4, #24]
 8008c3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c3c:	2f78      	cmp	r7, #120	; 0x78
 8008c3e:	4680      	mov	r8, r0
 8008c40:	469a      	mov	sl, r3
 8008c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c46:	d807      	bhi.n	8008c58 <_printf_i+0x28>
 8008c48:	2f62      	cmp	r7, #98	; 0x62
 8008c4a:	d80a      	bhi.n	8008c62 <_printf_i+0x32>
 8008c4c:	2f00      	cmp	r7, #0
 8008c4e:	f000 80d8 	beq.w	8008e02 <_printf_i+0x1d2>
 8008c52:	2f58      	cmp	r7, #88	; 0x58
 8008c54:	f000 80a3 	beq.w	8008d9e <_printf_i+0x16e>
 8008c58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c60:	e03a      	b.n	8008cd8 <_printf_i+0xa8>
 8008c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c66:	2b15      	cmp	r3, #21
 8008c68:	d8f6      	bhi.n	8008c58 <_printf_i+0x28>
 8008c6a:	a001      	add	r0, pc, #4	; (adr r0, 8008c70 <_printf_i+0x40>)
 8008c6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c70:	08008cc9 	.word	0x08008cc9
 8008c74:	08008cdd 	.word	0x08008cdd
 8008c78:	08008c59 	.word	0x08008c59
 8008c7c:	08008c59 	.word	0x08008c59
 8008c80:	08008c59 	.word	0x08008c59
 8008c84:	08008c59 	.word	0x08008c59
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008c59 	.word	0x08008c59
 8008c90:	08008c59 	.word	0x08008c59
 8008c94:	08008c59 	.word	0x08008c59
 8008c98:	08008c59 	.word	0x08008c59
 8008c9c:	08008de9 	.word	0x08008de9
 8008ca0:	08008d0d 	.word	0x08008d0d
 8008ca4:	08008dcb 	.word	0x08008dcb
 8008ca8:	08008c59 	.word	0x08008c59
 8008cac:	08008c59 	.word	0x08008c59
 8008cb0:	08008e0b 	.word	0x08008e0b
 8008cb4:	08008c59 	.word	0x08008c59
 8008cb8:	08008d0d 	.word	0x08008d0d
 8008cbc:	08008c59 	.word	0x08008c59
 8008cc0:	08008c59 	.word	0x08008c59
 8008cc4:	08008dd3 	.word	0x08008dd3
 8008cc8:	680b      	ldr	r3, [r1, #0]
 8008cca:	1d1a      	adds	r2, r3, #4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	600a      	str	r2, [r1, #0]
 8008cd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0a3      	b.n	8008e24 <_printf_i+0x1f4>
 8008cdc:	6825      	ldr	r5, [r4, #0]
 8008cde:	6808      	ldr	r0, [r1, #0]
 8008ce0:	062e      	lsls	r6, r5, #24
 8008ce2:	f100 0304 	add.w	r3, r0, #4
 8008ce6:	d50a      	bpl.n	8008cfe <_printf_i+0xce>
 8008ce8:	6805      	ldr	r5, [r0, #0]
 8008cea:	600b      	str	r3, [r1, #0]
 8008cec:	2d00      	cmp	r5, #0
 8008cee:	da03      	bge.n	8008cf8 <_printf_i+0xc8>
 8008cf0:	232d      	movs	r3, #45	; 0x2d
 8008cf2:	426d      	negs	r5, r5
 8008cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf8:	485e      	ldr	r0, [pc, #376]	; (8008e74 <_printf_i+0x244>)
 8008cfa:	230a      	movs	r3, #10
 8008cfc:	e019      	b.n	8008d32 <_printf_i+0x102>
 8008cfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d02:	6805      	ldr	r5, [r0, #0]
 8008d04:	600b      	str	r3, [r1, #0]
 8008d06:	bf18      	it	ne
 8008d08:	b22d      	sxthne	r5, r5
 8008d0a:	e7ef      	b.n	8008cec <_printf_i+0xbc>
 8008d0c:	680b      	ldr	r3, [r1, #0]
 8008d0e:	6825      	ldr	r5, [r4, #0]
 8008d10:	1d18      	adds	r0, r3, #4
 8008d12:	6008      	str	r0, [r1, #0]
 8008d14:	0628      	lsls	r0, r5, #24
 8008d16:	d501      	bpl.n	8008d1c <_printf_i+0xec>
 8008d18:	681d      	ldr	r5, [r3, #0]
 8008d1a:	e002      	b.n	8008d22 <_printf_i+0xf2>
 8008d1c:	0669      	lsls	r1, r5, #25
 8008d1e:	d5fb      	bpl.n	8008d18 <_printf_i+0xe8>
 8008d20:	881d      	ldrh	r5, [r3, #0]
 8008d22:	4854      	ldr	r0, [pc, #336]	; (8008e74 <_printf_i+0x244>)
 8008d24:	2f6f      	cmp	r7, #111	; 0x6f
 8008d26:	bf0c      	ite	eq
 8008d28:	2308      	moveq	r3, #8
 8008d2a:	230a      	movne	r3, #10
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d32:	6866      	ldr	r6, [r4, #4]
 8008d34:	60a6      	str	r6, [r4, #8]
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	bfa2      	ittt	ge
 8008d3a:	6821      	ldrge	r1, [r4, #0]
 8008d3c:	f021 0104 	bicge.w	r1, r1, #4
 8008d40:	6021      	strge	r1, [r4, #0]
 8008d42:	b90d      	cbnz	r5, 8008d48 <_printf_i+0x118>
 8008d44:	2e00      	cmp	r6, #0
 8008d46:	d04d      	beq.n	8008de4 <_printf_i+0x1b4>
 8008d48:	4616      	mov	r6, r2
 8008d4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d4e:	fb03 5711 	mls	r7, r3, r1, r5
 8008d52:	5dc7      	ldrb	r7, [r0, r7]
 8008d54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d58:	462f      	mov	r7, r5
 8008d5a:	42bb      	cmp	r3, r7
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	d9f4      	bls.n	8008d4a <_printf_i+0x11a>
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d10b      	bne.n	8008d7c <_printf_i+0x14c>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07df      	lsls	r7, r3, #31
 8008d68:	d508      	bpl.n	8008d7c <_printf_i+0x14c>
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	bfde      	ittt	le
 8008d72:	2330      	movle	r3, #48	; 0x30
 8008d74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d7c:	1b92      	subs	r2, r2, r6
 8008d7e:	6122      	str	r2, [r4, #16]
 8008d80:	f8cd a000 	str.w	sl, [sp]
 8008d84:	464b      	mov	r3, r9
 8008d86:	aa03      	add	r2, sp, #12
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f7ff fee2 	bl	8008b54 <_printf_common>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d14c      	bne.n	8008e2e <_printf_i+0x1fe>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b004      	add	sp, #16
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	4835      	ldr	r0, [pc, #212]	; (8008e74 <_printf_i+0x244>)
 8008da0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	680e      	ldr	r6, [r1, #0]
 8008da8:	061f      	lsls	r7, r3, #24
 8008daa:	f856 5b04 	ldr.w	r5, [r6], #4
 8008dae:	600e      	str	r6, [r1, #0]
 8008db0:	d514      	bpl.n	8008ddc <_printf_i+0x1ac>
 8008db2:	07d9      	lsls	r1, r3, #31
 8008db4:	bf44      	itt	mi
 8008db6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dba:	6023      	strmi	r3, [r4, #0]
 8008dbc:	b91d      	cbnz	r5, 8008dc6 <_printf_i+0x196>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	f023 0320 	bic.w	r3, r3, #32
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	e7b0      	b.n	8008d2c <_printf_i+0xfc>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	f043 0320 	orr.w	r3, r3, #32
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	2378      	movs	r3, #120	; 0x78
 8008dd4:	4828      	ldr	r0, [pc, #160]	; (8008e78 <_printf_i+0x248>)
 8008dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dda:	e7e3      	b.n	8008da4 <_printf_i+0x174>
 8008ddc:	065e      	lsls	r6, r3, #25
 8008dde:	bf48      	it	mi
 8008de0:	b2ad      	uxthmi	r5, r5
 8008de2:	e7e6      	b.n	8008db2 <_printf_i+0x182>
 8008de4:	4616      	mov	r6, r2
 8008de6:	e7bb      	b.n	8008d60 <_printf_i+0x130>
 8008de8:	680b      	ldr	r3, [r1, #0]
 8008dea:	6826      	ldr	r6, [r4, #0]
 8008dec:	6960      	ldr	r0, [r4, #20]
 8008dee:	1d1d      	adds	r5, r3, #4
 8008df0:	600d      	str	r5, [r1, #0]
 8008df2:	0635      	lsls	r5, r6, #24
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	d501      	bpl.n	8008dfc <_printf_i+0x1cc>
 8008df8:	6018      	str	r0, [r3, #0]
 8008dfa:	e002      	b.n	8008e02 <_printf_i+0x1d2>
 8008dfc:	0671      	lsls	r1, r6, #25
 8008dfe:	d5fb      	bpl.n	8008df8 <_printf_i+0x1c8>
 8008e00:	8018      	strh	r0, [r3, #0]
 8008e02:	2300      	movs	r3, #0
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	4616      	mov	r6, r2
 8008e08:	e7ba      	b.n	8008d80 <_printf_i+0x150>
 8008e0a:	680b      	ldr	r3, [r1, #0]
 8008e0c:	1d1a      	adds	r2, r3, #4
 8008e0e:	600a      	str	r2, [r1, #0]
 8008e10:	681e      	ldr	r6, [r3, #0]
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	2100      	movs	r1, #0
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7f7 f9e2 	bl	80001e0 <memchr>
 8008e1c:	b108      	cbz	r0, 8008e22 <_printf_i+0x1f2>
 8008e1e:	1b80      	subs	r0, r0, r6
 8008e20:	6060      	str	r0, [r4, #4]
 8008e22:	6863      	ldr	r3, [r4, #4]
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	2300      	movs	r3, #0
 8008e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e2c:	e7a8      	b.n	8008d80 <_printf_i+0x150>
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	4632      	mov	r2, r6
 8008e32:	4649      	mov	r1, r9
 8008e34:	4640      	mov	r0, r8
 8008e36:	47d0      	blx	sl
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d0ab      	beq.n	8008d94 <_printf_i+0x164>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	079b      	lsls	r3, r3, #30
 8008e40:	d413      	bmi.n	8008e6a <_printf_i+0x23a>
 8008e42:	68e0      	ldr	r0, [r4, #12]
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	4298      	cmp	r0, r3
 8008e48:	bfb8      	it	lt
 8008e4a:	4618      	movlt	r0, r3
 8008e4c:	e7a4      	b.n	8008d98 <_printf_i+0x168>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4632      	mov	r2, r6
 8008e52:	4649      	mov	r1, r9
 8008e54:	4640      	mov	r0, r8
 8008e56:	47d0      	blx	sl
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d09b      	beq.n	8008d94 <_printf_i+0x164>
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	9903      	ldr	r1, [sp, #12]
 8008e62:	1a5b      	subs	r3, r3, r1
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dcf2      	bgt.n	8008e4e <_printf_i+0x21e>
 8008e68:	e7eb      	b.n	8008e42 <_printf_i+0x212>
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	f104 0619 	add.w	r6, r4, #25
 8008e70:	e7f5      	b.n	8008e5e <_printf_i+0x22e>
 8008e72:	bf00      	nop
 8008e74:	0800b406 	.word	0x0800b406
 8008e78:	0800b417 	.word	0x0800b417

08008e7c <iprintf>:
 8008e7c:	b40f      	push	{r0, r1, r2, r3}
 8008e7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <iprintf+0x2c>)
 8008e80:	b513      	push	{r0, r1, r4, lr}
 8008e82:	681c      	ldr	r4, [r3, #0]
 8008e84:	b124      	cbz	r4, 8008e90 <iprintf+0x14>
 8008e86:	69a3      	ldr	r3, [r4, #24]
 8008e88:	b913      	cbnz	r3, 8008e90 <iprintf+0x14>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 fee0 	bl	8009c50 <__sinit>
 8008e90:	ab05      	add	r3, sp, #20
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	68a1      	ldr	r1, [r4, #8]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f001 fbf7 	bl	800a68c <_vfiprintf_r>
 8008e9e:	b002      	add	sp, #8
 8008ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea4:	b004      	add	sp, #16
 8008ea6:	4770      	bx	lr
 8008ea8:	20000184 	.word	0x20000184

08008eac <quorem>:
 8008eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	6903      	ldr	r3, [r0, #16]
 8008eb2:	690c      	ldr	r4, [r1, #16]
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	f2c0 8081 	blt.w	8008fbe <quorem+0x112>
 8008ebc:	3c01      	subs	r4, #1
 8008ebe:	f101 0814 	add.w	r8, r1, #20
 8008ec2:	f100 0514 	add.w	r5, r0, #20
 8008ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ee4:	d331      	bcc.n	8008f4a <quorem+0x9e>
 8008ee6:	f04f 0e00 	mov.w	lr, #0
 8008eea:	4640      	mov	r0, r8
 8008eec:	46ac      	mov	ip, r5
 8008eee:	46f2      	mov	sl, lr
 8008ef0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ef4:	b293      	uxth	r3, r2
 8008ef6:	fb06 e303 	mla	r3, r6, r3, lr
 8008efa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ebaa 0303 	sub.w	r3, sl, r3
 8008f04:	0c12      	lsrs	r2, r2, #16
 8008f06:	f8dc a000 	ldr.w	sl, [ip]
 8008f0a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f0e:	fa13 f38a 	uxtah	r3, r3, sl
 8008f12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f16:	fa1f fa82 	uxth.w	sl, r2
 8008f1a:	f8dc 2000 	ldr.w	r2, [ip]
 8008f1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f2c:	4581      	cmp	r9, r0
 8008f2e:	f84c 3b04 	str.w	r3, [ip], #4
 8008f32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f36:	d2db      	bcs.n	8008ef0 <quorem+0x44>
 8008f38:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f3c:	b92b      	cbnz	r3, 8008f4a <quorem+0x9e>
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	3b04      	subs	r3, #4
 8008f42:	429d      	cmp	r5, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	d32e      	bcc.n	8008fa6 <quorem+0xfa>
 8008f48:	613c      	str	r4, [r7, #16]
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f001 f9ba 	bl	800a2c4 <__mcmp>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	db24      	blt.n	8008f9e <quorem+0xf2>
 8008f54:	3601      	adds	r6, #1
 8008f56:	4628      	mov	r0, r5
 8008f58:	f04f 0c00 	mov.w	ip, #0
 8008f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f60:	f8d0 e000 	ldr.w	lr, [r0]
 8008f64:	b293      	uxth	r3, r2
 8008f66:	ebac 0303 	sub.w	r3, ip, r3
 8008f6a:	0c12      	lsrs	r2, r2, #16
 8008f6c:	fa13 f38e 	uxtah	r3, r3, lr
 8008f70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f7e:	45c1      	cmp	r9, r8
 8008f80:	f840 3b04 	str.w	r3, [r0], #4
 8008f84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f88:	d2e8      	bcs.n	8008f5c <quorem+0xb0>
 8008f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f92:	b922      	cbnz	r2, 8008f9e <quorem+0xf2>
 8008f94:	3b04      	subs	r3, #4
 8008f96:	429d      	cmp	r5, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	d30a      	bcc.n	8008fb2 <quorem+0x106>
 8008f9c:	613c      	str	r4, [r7, #16]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	b003      	add	sp, #12
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d1cc      	bne.n	8008f48 <quorem+0x9c>
 8008fae:	3c01      	subs	r4, #1
 8008fb0:	e7c7      	b.n	8008f42 <quorem+0x96>
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	3b04      	subs	r3, #4
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	d1f0      	bne.n	8008f9c <quorem+0xf0>
 8008fba:	3c01      	subs	r4, #1
 8008fbc:	e7eb      	b.n	8008f96 <quorem+0xea>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e7ee      	b.n	8008fa0 <quorem+0xf4>
 8008fc2:	0000      	movs	r0, r0
 8008fc4:	0000      	movs	r0, r0
	...

08008fc8 <_dtoa_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	ed2d 8b02 	vpush	{d8}
 8008fd0:	ec57 6b10 	vmov	r6, r7, d0
 8008fd4:	b095      	sub	sp, #84	; 0x54
 8008fd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fdc:	9105      	str	r1, [sp, #20]
 8008fde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fe8:	b975      	cbnz	r5, 8009008 <_dtoa_r+0x40>
 8008fea:	2010      	movs	r0, #16
 8008fec:	f000 fed6 	bl	8009d9c <malloc>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6260      	str	r0, [r4, #36]	; 0x24
 8008ff4:	b920      	cbnz	r0, 8009000 <_dtoa_r+0x38>
 8008ff6:	4bb2      	ldr	r3, [pc, #712]	; (80092c0 <_dtoa_r+0x2f8>)
 8008ff8:	21ea      	movs	r1, #234	; 0xea
 8008ffa:	48b2      	ldr	r0, [pc, #712]	; (80092c4 <_dtoa_r+0x2fc>)
 8008ffc:	f001 fd9c 	bl	800ab38 <__assert_func>
 8009000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009004:	6005      	str	r5, [r0, #0]
 8009006:	60c5      	str	r5, [r0, #12]
 8009008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800900a:	6819      	ldr	r1, [r3, #0]
 800900c:	b151      	cbz	r1, 8009024 <_dtoa_r+0x5c>
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	604a      	str	r2, [r1, #4]
 8009012:	2301      	movs	r3, #1
 8009014:	4093      	lsls	r3, r2
 8009016:	608b      	str	r3, [r1, #8]
 8009018:	4620      	mov	r0, r4
 800901a:	f000 ff15 	bl	8009e48 <_Bfree>
 800901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	1e3b      	subs	r3, r7, #0
 8009026:	bfb9      	ittee	lt
 8009028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800902c:	9303      	strlt	r3, [sp, #12]
 800902e:	2300      	movge	r3, #0
 8009030:	f8c8 3000 	strge.w	r3, [r8]
 8009034:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009038:	4ba3      	ldr	r3, [pc, #652]	; (80092c8 <_dtoa_r+0x300>)
 800903a:	bfbc      	itt	lt
 800903c:	2201      	movlt	r2, #1
 800903e:	f8c8 2000 	strlt.w	r2, [r8]
 8009042:	ea33 0309 	bics.w	r3, r3, r9
 8009046:	d11b      	bne.n	8009080 <_dtoa_r+0xb8>
 8009048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800904a:	f242 730f 	movw	r3, #9999	; 0x270f
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009054:	4333      	orrs	r3, r6
 8009056:	f000 857a 	beq.w	8009b4e <_dtoa_r+0xb86>
 800905a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800905c:	b963      	cbnz	r3, 8009078 <_dtoa_r+0xb0>
 800905e:	4b9b      	ldr	r3, [pc, #620]	; (80092cc <_dtoa_r+0x304>)
 8009060:	e024      	b.n	80090ac <_dtoa_r+0xe4>
 8009062:	4b9b      	ldr	r3, [pc, #620]	; (80092d0 <_dtoa_r+0x308>)
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	9800      	ldr	r0, [sp, #0]
 800906e:	b015      	add	sp, #84	; 0x54
 8009070:	ecbd 8b02 	vpop	{d8}
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	4b94      	ldr	r3, [pc, #592]	; (80092cc <_dtoa_r+0x304>)
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	3303      	adds	r3, #3
 800907e:	e7f3      	b.n	8009068 <_dtoa_r+0xa0>
 8009080:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009084:	2200      	movs	r2, #0
 8009086:	ec51 0b17 	vmov	r0, r1, d7
 800908a:	2300      	movs	r3, #0
 800908c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009090:	f7f7 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009094:	4680      	mov	r8, r0
 8009096:	b158      	cbz	r0, 80090b0 <_dtoa_r+0xe8>
 8009098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800909a:	2301      	movs	r3, #1
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8551 	beq.w	8009b48 <_dtoa_r+0xb80>
 80090a6:	488b      	ldr	r0, [pc, #556]	; (80092d4 <_dtoa_r+0x30c>)
 80090a8:	6018      	str	r0, [r3, #0]
 80090aa:	1e43      	subs	r3, r0, #1
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	e7dd      	b.n	800906c <_dtoa_r+0xa4>
 80090b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80090b4:	aa12      	add	r2, sp, #72	; 0x48
 80090b6:	a913      	add	r1, sp, #76	; 0x4c
 80090b8:	4620      	mov	r0, r4
 80090ba:	f001 f9a7 	bl	800a40c <__d2b>
 80090be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090c2:	4683      	mov	fp, r0
 80090c4:	2d00      	cmp	r5, #0
 80090c6:	d07c      	beq.n	80091c2 <_dtoa_r+0x1fa>
 80090c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80090ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80090d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090e2:	4b7d      	ldr	r3, [pc, #500]	; (80092d8 <_dtoa_r+0x310>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 f8cd 	bl	8000288 <__aeabi_dsub>
 80090ee:	a36e      	add	r3, pc, #440	; (adr r3, 80092a8 <_dtoa_r+0x2e0>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 fa80 	bl	80005f8 <__aeabi_dmul>
 80090f8:	a36d      	add	r3, pc, #436	; (adr r3, 80092b0 <_dtoa_r+0x2e8>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 f8c5 	bl	800028c <__adddf3>
 8009102:	4606      	mov	r6, r0
 8009104:	4628      	mov	r0, r5
 8009106:	460f      	mov	r7, r1
 8009108:	f7f7 fa0c 	bl	8000524 <__aeabi_i2d>
 800910c:	a36a      	add	r3, pc, #424	; (adr r3, 80092b8 <_dtoa_r+0x2f0>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 fa71 	bl	80005f8 <__aeabi_dmul>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4630      	mov	r0, r6
 800911c:	4639      	mov	r1, r7
 800911e:	f7f7 f8b5 	bl	800028c <__adddf3>
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	f7f7 fd17 	bl	8000b58 <__aeabi_d2iz>
 800912a:	2200      	movs	r2, #0
 800912c:	4682      	mov	sl, r0
 800912e:	2300      	movs	r3, #0
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fcd2 	bl	8000adc <__aeabi_dcmplt>
 8009138:	b148      	cbz	r0, 800914e <_dtoa_r+0x186>
 800913a:	4650      	mov	r0, sl
 800913c:	f7f7 f9f2 	bl	8000524 <__aeabi_i2d>
 8009140:	4632      	mov	r2, r6
 8009142:	463b      	mov	r3, r7
 8009144:	f7f7 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009148:	b908      	cbnz	r0, 800914e <_dtoa_r+0x186>
 800914a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800914e:	f1ba 0f16 	cmp.w	sl, #22
 8009152:	d854      	bhi.n	80091fe <_dtoa_r+0x236>
 8009154:	4b61      	ldr	r3, [pc, #388]	; (80092dc <_dtoa_r+0x314>)
 8009156:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009162:	f7f7 fcbb 	bl	8000adc <__aeabi_dcmplt>
 8009166:	2800      	cmp	r0, #0
 8009168:	d04b      	beq.n	8009202 <_dtoa_r+0x23a>
 800916a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916e:	2300      	movs	r3, #0
 8009170:	930e      	str	r3, [sp, #56]	; 0x38
 8009172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009174:	1b5d      	subs	r5, r3, r5
 8009176:	1e6b      	subs	r3, r5, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	bf43      	ittte	mi
 800917c:	2300      	movmi	r3, #0
 800917e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009182:	9304      	strmi	r3, [sp, #16]
 8009184:	f04f 0800 	movpl.w	r8, #0
 8009188:	f1ba 0f00 	cmp.w	sl, #0
 800918c:	db3b      	blt.n	8009206 <_dtoa_r+0x23e>
 800918e:	9b04      	ldr	r3, [sp, #16]
 8009190:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009194:	4453      	add	r3, sl
 8009196:	9304      	str	r3, [sp, #16]
 8009198:	2300      	movs	r3, #0
 800919a:	9306      	str	r3, [sp, #24]
 800919c:	9b05      	ldr	r3, [sp, #20]
 800919e:	2b09      	cmp	r3, #9
 80091a0:	d869      	bhi.n	8009276 <_dtoa_r+0x2ae>
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	bfc4      	itt	gt
 80091a6:	3b04      	subgt	r3, #4
 80091a8:	9305      	strgt	r3, [sp, #20]
 80091aa:	9b05      	ldr	r3, [sp, #20]
 80091ac:	f1a3 0302 	sub.w	r3, r3, #2
 80091b0:	bfcc      	ite	gt
 80091b2:	2500      	movgt	r5, #0
 80091b4:	2501      	movle	r5, #1
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d869      	bhi.n	800928e <_dtoa_r+0x2c6>
 80091ba:	e8df f003 	tbb	[pc, r3]
 80091be:	4e2c      	.short	0x4e2c
 80091c0:	5a4c      	.short	0x5a4c
 80091c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80091c6:	441d      	add	r5, r3
 80091c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	bfc1      	itttt	gt
 80091d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80091dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091e0:	bfda      	itte	le
 80091e2:	f1c3 0320 	rsble	r3, r3, #32
 80091e6:	fa06 f003 	lslle.w	r0, r6, r3
 80091ea:	4318      	orrgt	r0, r3
 80091ec:	f7f7 f98a 	bl	8000504 <__aeabi_ui2d>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4606      	mov	r6, r0
 80091f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80091f8:	3d01      	subs	r5, #1
 80091fa:	9310      	str	r3, [sp, #64]	; 0x40
 80091fc:	e771      	b.n	80090e2 <_dtoa_r+0x11a>
 80091fe:	2301      	movs	r3, #1
 8009200:	e7b6      	b.n	8009170 <_dtoa_r+0x1a8>
 8009202:	900e      	str	r0, [sp, #56]	; 0x38
 8009204:	e7b5      	b.n	8009172 <_dtoa_r+0x1aa>
 8009206:	f1ca 0300 	rsb	r3, sl, #0
 800920a:	9306      	str	r3, [sp, #24]
 800920c:	2300      	movs	r3, #0
 800920e:	eba8 080a 	sub.w	r8, r8, sl
 8009212:	930d      	str	r3, [sp, #52]	; 0x34
 8009214:	e7c2      	b.n	800919c <_dtoa_r+0x1d4>
 8009216:	2300      	movs	r3, #0
 8009218:	9308      	str	r3, [sp, #32]
 800921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc39      	bgt.n	8009294 <_dtoa_r+0x2cc>
 8009220:	f04f 0901 	mov.w	r9, #1
 8009224:	f8cd 9004 	str.w	r9, [sp, #4]
 8009228:	464b      	mov	r3, r9
 800922a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800922e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009230:	2200      	movs	r2, #0
 8009232:	6042      	str	r2, [r0, #4]
 8009234:	2204      	movs	r2, #4
 8009236:	f102 0614 	add.w	r6, r2, #20
 800923a:	429e      	cmp	r6, r3
 800923c:	6841      	ldr	r1, [r0, #4]
 800923e:	d92f      	bls.n	80092a0 <_dtoa_r+0x2d8>
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fdc1 	bl	8009dc8 <_Balloc>
 8009246:	9000      	str	r0, [sp, #0]
 8009248:	2800      	cmp	r0, #0
 800924a:	d14b      	bne.n	80092e4 <_dtoa_r+0x31c>
 800924c:	4b24      	ldr	r3, [pc, #144]	; (80092e0 <_dtoa_r+0x318>)
 800924e:	4602      	mov	r2, r0
 8009250:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009254:	e6d1      	b.n	8008ffa <_dtoa_r+0x32>
 8009256:	2301      	movs	r3, #1
 8009258:	e7de      	b.n	8009218 <_dtoa_r+0x250>
 800925a:	2300      	movs	r3, #0
 800925c:	9308      	str	r3, [sp, #32]
 800925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009260:	eb0a 0903 	add.w	r9, sl, r3
 8009264:	f109 0301 	add.w	r3, r9, #1
 8009268:	2b01      	cmp	r3, #1
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	bfb8      	it	lt
 800926e:	2301      	movlt	r3, #1
 8009270:	e7dd      	b.n	800922e <_dtoa_r+0x266>
 8009272:	2301      	movs	r3, #1
 8009274:	e7f2      	b.n	800925c <_dtoa_r+0x294>
 8009276:	2501      	movs	r5, #1
 8009278:	2300      	movs	r3, #0
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	9508      	str	r5, [sp, #32]
 800927e:	f04f 39ff 	mov.w	r9, #4294967295
 8009282:	2200      	movs	r2, #0
 8009284:	f8cd 9004 	str.w	r9, [sp, #4]
 8009288:	2312      	movs	r3, #18
 800928a:	9209      	str	r2, [sp, #36]	; 0x24
 800928c:	e7cf      	b.n	800922e <_dtoa_r+0x266>
 800928e:	2301      	movs	r3, #1
 8009290:	9308      	str	r3, [sp, #32]
 8009292:	e7f4      	b.n	800927e <_dtoa_r+0x2b6>
 8009294:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009298:	f8cd 9004 	str.w	r9, [sp, #4]
 800929c:	464b      	mov	r3, r9
 800929e:	e7c6      	b.n	800922e <_dtoa_r+0x266>
 80092a0:	3101      	adds	r1, #1
 80092a2:	6041      	str	r1, [r0, #4]
 80092a4:	0052      	lsls	r2, r2, #1
 80092a6:	e7c6      	b.n	8009236 <_dtoa_r+0x26e>
 80092a8:	636f4361 	.word	0x636f4361
 80092ac:	3fd287a7 	.word	0x3fd287a7
 80092b0:	8b60c8b3 	.word	0x8b60c8b3
 80092b4:	3fc68a28 	.word	0x3fc68a28
 80092b8:	509f79fb 	.word	0x509f79fb
 80092bc:	3fd34413 	.word	0x3fd34413
 80092c0:	0800b435 	.word	0x0800b435
 80092c4:	0800b44c 	.word	0x0800b44c
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	0800b431 	.word	0x0800b431
 80092d0:	0800b428 	.word	0x0800b428
 80092d4:	0800b405 	.word	0x0800b405
 80092d8:	3ff80000 	.word	0x3ff80000
 80092dc:	0800b5a8 	.word	0x0800b5a8
 80092e0:	0800b4ab 	.word	0x0800b4ab
 80092e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e6:	9a00      	ldr	r2, [sp, #0]
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	9b01      	ldr	r3, [sp, #4]
 80092ec:	2b0e      	cmp	r3, #14
 80092ee:	f200 80ad 	bhi.w	800944c <_dtoa_r+0x484>
 80092f2:	2d00      	cmp	r5, #0
 80092f4:	f000 80aa 	beq.w	800944c <_dtoa_r+0x484>
 80092f8:	f1ba 0f00 	cmp.w	sl, #0
 80092fc:	dd36      	ble.n	800936c <_dtoa_r+0x3a4>
 80092fe:	4ac3      	ldr	r2, [pc, #780]	; (800960c <_dtoa_r+0x644>)
 8009300:	f00a 030f 	and.w	r3, sl, #15
 8009304:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009308:	ed93 7b00 	vldr	d7, [r3]
 800930c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009310:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009314:	eeb0 8a47 	vmov.f32	s16, s14
 8009318:	eef0 8a67 	vmov.f32	s17, s15
 800931c:	d016      	beq.n	800934c <_dtoa_r+0x384>
 800931e:	4bbc      	ldr	r3, [pc, #752]	; (8009610 <_dtoa_r+0x648>)
 8009320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009328:	f7f7 fa90 	bl	800084c <__aeabi_ddiv>
 800932c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009330:	f007 070f 	and.w	r7, r7, #15
 8009334:	2503      	movs	r5, #3
 8009336:	4eb6      	ldr	r6, [pc, #728]	; (8009610 <_dtoa_r+0x648>)
 8009338:	b957      	cbnz	r7, 8009350 <_dtoa_r+0x388>
 800933a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800933e:	ec53 2b18 	vmov	r2, r3, d8
 8009342:	f7f7 fa83 	bl	800084c <__aeabi_ddiv>
 8009346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800934a:	e029      	b.n	80093a0 <_dtoa_r+0x3d8>
 800934c:	2502      	movs	r5, #2
 800934e:	e7f2      	b.n	8009336 <_dtoa_r+0x36e>
 8009350:	07f9      	lsls	r1, r7, #31
 8009352:	d508      	bpl.n	8009366 <_dtoa_r+0x39e>
 8009354:	ec51 0b18 	vmov	r0, r1, d8
 8009358:	e9d6 2300 	ldrd	r2, r3, [r6]
 800935c:	f7f7 f94c 	bl	80005f8 <__aeabi_dmul>
 8009360:	ec41 0b18 	vmov	d8, r0, r1
 8009364:	3501      	adds	r5, #1
 8009366:	107f      	asrs	r7, r7, #1
 8009368:	3608      	adds	r6, #8
 800936a:	e7e5      	b.n	8009338 <_dtoa_r+0x370>
 800936c:	f000 80a6 	beq.w	80094bc <_dtoa_r+0x4f4>
 8009370:	f1ca 0600 	rsb	r6, sl, #0
 8009374:	4ba5      	ldr	r3, [pc, #660]	; (800960c <_dtoa_r+0x644>)
 8009376:	4fa6      	ldr	r7, [pc, #664]	; (8009610 <_dtoa_r+0x648>)
 8009378:	f006 020f 	and.w	r2, r6, #15
 800937c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009388:	f7f7 f936 	bl	80005f8 <__aeabi_dmul>
 800938c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009390:	1136      	asrs	r6, r6, #4
 8009392:	2300      	movs	r3, #0
 8009394:	2502      	movs	r5, #2
 8009396:	2e00      	cmp	r6, #0
 8009398:	f040 8085 	bne.w	80094a6 <_dtoa_r+0x4de>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1d2      	bne.n	8009346 <_dtoa_r+0x37e>
 80093a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 808c 	beq.w	80094c0 <_dtoa_r+0x4f8>
 80093a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093ac:	4b99      	ldr	r3, [pc, #612]	; (8009614 <_dtoa_r+0x64c>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	f7f7 fb92 	bl	8000adc <__aeabi_dcmplt>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	f000 8081 	beq.w	80094c0 <_dtoa_r+0x4f8>
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d07d      	beq.n	80094c0 <_dtoa_r+0x4f8>
 80093c4:	f1b9 0f00 	cmp.w	r9, #0
 80093c8:	dd3c      	ble.n	8009444 <_dtoa_r+0x47c>
 80093ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	2200      	movs	r2, #0
 80093d2:	4b91      	ldr	r3, [pc, #580]	; (8009618 <_dtoa_r+0x650>)
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	f7f7 f90e 	bl	80005f8 <__aeabi_dmul>
 80093dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e0:	3501      	adds	r5, #1
 80093e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80093e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093ea:	4628      	mov	r0, r5
 80093ec:	f7f7 f89a 	bl	8000524 <__aeabi_i2d>
 80093f0:	4632      	mov	r2, r6
 80093f2:	463b      	mov	r3, r7
 80093f4:	f7f7 f900 	bl	80005f8 <__aeabi_dmul>
 80093f8:	4b88      	ldr	r3, [pc, #544]	; (800961c <_dtoa_r+0x654>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	f7f6 ff46 	bl	800028c <__adddf3>
 8009400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009408:	9303      	str	r3, [sp, #12]
 800940a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800940c:	2b00      	cmp	r3, #0
 800940e:	d15c      	bne.n	80094ca <_dtoa_r+0x502>
 8009410:	4b83      	ldr	r3, [pc, #524]	; (8009620 <_dtoa_r+0x658>)
 8009412:	2200      	movs	r2, #0
 8009414:	4630      	mov	r0, r6
 8009416:	4639      	mov	r1, r7
 8009418:	f7f6 ff36 	bl	8000288 <__aeabi_dsub>
 800941c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009420:	4606      	mov	r6, r0
 8009422:	460f      	mov	r7, r1
 8009424:	f7f7 fb78 	bl	8000b18 <__aeabi_dcmpgt>
 8009428:	2800      	cmp	r0, #0
 800942a:	f040 8296 	bne.w	800995a <_dtoa_r+0x992>
 800942e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009432:	4630      	mov	r0, r6
 8009434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009438:	4639      	mov	r1, r7
 800943a:	f7f7 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800943e:	2800      	cmp	r0, #0
 8009440:	f040 8288 	bne.w	8009954 <_dtoa_r+0x98c>
 8009444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009448:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800944c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800944e:	2b00      	cmp	r3, #0
 8009450:	f2c0 8158 	blt.w	8009704 <_dtoa_r+0x73c>
 8009454:	f1ba 0f0e 	cmp.w	sl, #14
 8009458:	f300 8154 	bgt.w	8009704 <_dtoa_r+0x73c>
 800945c:	4b6b      	ldr	r3, [pc, #428]	; (800960c <_dtoa_r+0x644>)
 800945e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009462:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	f280 80e3 	bge.w	8009634 <_dtoa_r+0x66c>
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f300 80df 	bgt.w	8009634 <_dtoa_r+0x66c>
 8009476:	f040 826d 	bne.w	8009954 <_dtoa_r+0x98c>
 800947a:	4b69      	ldr	r3, [pc, #420]	; (8009620 <_dtoa_r+0x658>)
 800947c:	2200      	movs	r2, #0
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f7 f8b9 	bl	80005f8 <__aeabi_dmul>
 8009486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800948a:	f7f7 fb3b 	bl	8000b04 <__aeabi_dcmpge>
 800948e:	9e01      	ldr	r6, [sp, #4]
 8009490:	4637      	mov	r7, r6
 8009492:	2800      	cmp	r0, #0
 8009494:	f040 8243 	bne.w	800991e <_dtoa_r+0x956>
 8009498:	9d00      	ldr	r5, [sp, #0]
 800949a:	2331      	movs	r3, #49	; 0x31
 800949c:	f805 3b01 	strb.w	r3, [r5], #1
 80094a0:	f10a 0a01 	add.w	sl, sl, #1
 80094a4:	e23f      	b.n	8009926 <_dtoa_r+0x95e>
 80094a6:	07f2      	lsls	r2, r6, #31
 80094a8:	d505      	bpl.n	80094b6 <_dtoa_r+0x4ee>
 80094aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	3501      	adds	r5, #1
 80094b4:	2301      	movs	r3, #1
 80094b6:	1076      	asrs	r6, r6, #1
 80094b8:	3708      	adds	r7, #8
 80094ba:	e76c      	b.n	8009396 <_dtoa_r+0x3ce>
 80094bc:	2502      	movs	r5, #2
 80094be:	e76f      	b.n	80093a0 <_dtoa_r+0x3d8>
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80094c6:	930c      	str	r3, [sp, #48]	; 0x30
 80094c8:	e78d      	b.n	80093e6 <_dtoa_r+0x41e>
 80094ca:	9900      	ldr	r1, [sp, #0]
 80094cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094d0:	4b4e      	ldr	r3, [pc, #312]	; (800960c <_dtoa_r+0x644>)
 80094d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094d6:	4401      	add	r1, r0
 80094d8:	9102      	str	r1, [sp, #8]
 80094da:	9908      	ldr	r1, [sp, #32]
 80094dc:	eeb0 8a47 	vmov.f32	s16, s14
 80094e0:	eef0 8a67 	vmov.f32	s17, s15
 80094e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d045      	beq.n	800957c <_dtoa_r+0x5b4>
 80094f0:	494c      	ldr	r1, [pc, #304]	; (8009624 <_dtoa_r+0x65c>)
 80094f2:	2000      	movs	r0, #0
 80094f4:	f7f7 f9aa 	bl	800084c <__aeabi_ddiv>
 80094f8:	ec53 2b18 	vmov	r2, r3, d8
 80094fc:	f7f6 fec4 	bl	8000288 <__aeabi_dsub>
 8009500:	9d00      	ldr	r5, [sp, #0]
 8009502:	ec41 0b18 	vmov	d8, r0, r1
 8009506:	4639      	mov	r1, r7
 8009508:	4630      	mov	r0, r6
 800950a:	f7f7 fb25 	bl	8000b58 <__aeabi_d2iz>
 800950e:	900c      	str	r0, [sp, #48]	; 0x30
 8009510:	f7f7 f808 	bl	8000524 <__aeabi_i2d>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f6 feb4 	bl	8000288 <__aeabi_dsub>
 8009520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009522:	3330      	adds	r3, #48	; 0x30
 8009524:	f805 3b01 	strb.w	r3, [r5], #1
 8009528:	ec53 2b18 	vmov	r2, r3, d8
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	f7f7 fad4 	bl	8000adc <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	d165      	bne.n	8009604 <_dtoa_r+0x63c>
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	4935      	ldr	r1, [pc, #212]	; (8009614 <_dtoa_r+0x64c>)
 800953e:	2000      	movs	r0, #0
 8009540:	f7f6 fea2 	bl	8000288 <__aeabi_dsub>
 8009544:	ec53 2b18 	vmov	r2, r3, d8
 8009548:	f7f7 fac8 	bl	8000adc <__aeabi_dcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	f040 80b9 	bne.w	80096c4 <_dtoa_r+0x6fc>
 8009552:	9b02      	ldr	r3, [sp, #8]
 8009554:	429d      	cmp	r5, r3
 8009556:	f43f af75 	beq.w	8009444 <_dtoa_r+0x47c>
 800955a:	4b2f      	ldr	r3, [pc, #188]	; (8009618 <_dtoa_r+0x650>)
 800955c:	ec51 0b18 	vmov	r0, r1, d8
 8009560:	2200      	movs	r2, #0
 8009562:	f7f7 f849 	bl	80005f8 <__aeabi_dmul>
 8009566:	4b2c      	ldr	r3, [pc, #176]	; (8009618 <_dtoa_r+0x650>)
 8009568:	ec41 0b18 	vmov	d8, r0, r1
 800956c:	2200      	movs	r2, #0
 800956e:	4630      	mov	r0, r6
 8009570:	4639      	mov	r1, r7
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	4606      	mov	r6, r0
 8009578:	460f      	mov	r7, r1
 800957a:	e7c4      	b.n	8009506 <_dtoa_r+0x53e>
 800957c:	ec51 0b17 	vmov	r0, r1, d7
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	9d00      	ldr	r5, [sp, #0]
 8009588:	930c      	str	r3, [sp, #48]	; 0x30
 800958a:	ec41 0b18 	vmov	d8, r0, r1
 800958e:	4639      	mov	r1, r7
 8009590:	4630      	mov	r0, r6
 8009592:	f7f7 fae1 	bl	8000b58 <__aeabi_d2iz>
 8009596:	9011      	str	r0, [sp, #68]	; 0x44
 8009598:	f7f6 ffc4 	bl	8000524 <__aeabi_i2d>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4630      	mov	r0, r6
 80095a2:	4639      	mov	r1, r7
 80095a4:	f7f6 fe70 	bl	8000288 <__aeabi_dsub>
 80095a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095aa:	3330      	adds	r3, #48	; 0x30
 80095ac:	f805 3b01 	strb.w	r3, [r5], #1
 80095b0:	9b02      	ldr	r3, [sp, #8]
 80095b2:	429d      	cmp	r5, r3
 80095b4:	4606      	mov	r6, r0
 80095b6:	460f      	mov	r7, r1
 80095b8:	f04f 0200 	mov.w	r2, #0
 80095bc:	d134      	bne.n	8009628 <_dtoa_r+0x660>
 80095be:	4b19      	ldr	r3, [pc, #100]	; (8009624 <_dtoa_r+0x65c>)
 80095c0:	ec51 0b18 	vmov	r0, r1, d8
 80095c4:	f7f6 fe62 	bl	800028c <__adddf3>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f7 faa2 	bl	8000b18 <__aeabi_dcmpgt>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d175      	bne.n	80096c4 <_dtoa_r+0x6fc>
 80095d8:	ec53 2b18 	vmov	r2, r3, d8
 80095dc:	4911      	ldr	r1, [pc, #68]	; (8009624 <_dtoa_r+0x65c>)
 80095de:	2000      	movs	r0, #0
 80095e0:	f7f6 fe52 	bl	8000288 <__aeabi_dsub>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f7 fa76 	bl	8000adc <__aeabi_dcmplt>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	f43f af27 	beq.w	8009444 <_dtoa_r+0x47c>
 80095f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095f8:	1e6b      	subs	r3, r5, #1
 80095fa:	930c      	str	r3, [sp, #48]	; 0x30
 80095fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009600:	2b30      	cmp	r3, #48	; 0x30
 8009602:	d0f8      	beq.n	80095f6 <_dtoa_r+0x62e>
 8009604:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009608:	e04a      	b.n	80096a0 <_dtoa_r+0x6d8>
 800960a:	bf00      	nop
 800960c:	0800b5a8 	.word	0x0800b5a8
 8009610:	0800b580 	.word	0x0800b580
 8009614:	3ff00000 	.word	0x3ff00000
 8009618:	40240000 	.word	0x40240000
 800961c:	401c0000 	.word	0x401c0000
 8009620:	40140000 	.word	0x40140000
 8009624:	3fe00000 	.word	0x3fe00000
 8009628:	4baf      	ldr	r3, [pc, #700]	; (80098e8 <_dtoa_r+0x920>)
 800962a:	f7f6 ffe5 	bl	80005f8 <__aeabi_dmul>
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	e7ac      	b.n	800958e <_dtoa_r+0x5c6>
 8009634:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009638:	9d00      	ldr	r5, [sp, #0]
 800963a:	4642      	mov	r2, r8
 800963c:	464b      	mov	r3, r9
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	f7f7 f903 	bl	800084c <__aeabi_ddiv>
 8009646:	f7f7 fa87 	bl	8000b58 <__aeabi_d2iz>
 800964a:	9002      	str	r0, [sp, #8]
 800964c:	f7f6 ff6a 	bl	8000524 <__aeabi_i2d>
 8009650:	4642      	mov	r2, r8
 8009652:	464b      	mov	r3, r9
 8009654:	f7f6 ffd0 	bl	80005f8 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f6 fe12 	bl	8000288 <__aeabi_dsub>
 8009664:	9e02      	ldr	r6, [sp, #8]
 8009666:	9f01      	ldr	r7, [sp, #4]
 8009668:	3630      	adds	r6, #48	; 0x30
 800966a:	f805 6b01 	strb.w	r6, [r5], #1
 800966e:	9e00      	ldr	r6, [sp, #0]
 8009670:	1bae      	subs	r6, r5, r6
 8009672:	42b7      	cmp	r7, r6
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	d137      	bne.n	80096ea <_dtoa_r+0x722>
 800967a:	f7f6 fe07 	bl	800028c <__adddf3>
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	4606      	mov	r6, r0
 8009684:	460f      	mov	r7, r1
 8009686:	f7f7 fa47 	bl	8000b18 <__aeabi_dcmpgt>
 800968a:	b9c8      	cbnz	r0, 80096c0 <_dtoa_r+0x6f8>
 800968c:	4642      	mov	r2, r8
 800968e:	464b      	mov	r3, r9
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f7 fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009698:	b110      	cbz	r0, 80096a0 <_dtoa_r+0x6d8>
 800969a:	9b02      	ldr	r3, [sp, #8]
 800969c:	07d9      	lsls	r1, r3, #31
 800969e:	d40f      	bmi.n	80096c0 <_dtoa_r+0x6f8>
 80096a0:	4620      	mov	r0, r4
 80096a2:	4659      	mov	r1, fp
 80096a4:	f000 fbd0 	bl	8009e48 <_Bfree>
 80096a8:	2300      	movs	r3, #0
 80096aa:	702b      	strb	r3, [r5, #0]
 80096ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ae:	f10a 0001 	add.w	r0, sl, #1
 80096b2:	6018      	str	r0, [r3, #0]
 80096b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f43f acd8 	beq.w	800906c <_dtoa_r+0xa4>
 80096bc:	601d      	str	r5, [r3, #0]
 80096be:	e4d5      	b.n	800906c <_dtoa_r+0xa4>
 80096c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80096c4:	462b      	mov	r3, r5
 80096c6:	461d      	mov	r5, r3
 80096c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096cc:	2a39      	cmp	r2, #57	; 0x39
 80096ce:	d108      	bne.n	80096e2 <_dtoa_r+0x71a>
 80096d0:	9a00      	ldr	r2, [sp, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d1f7      	bne.n	80096c6 <_dtoa_r+0x6fe>
 80096d6:	9a07      	ldr	r2, [sp, #28]
 80096d8:	9900      	ldr	r1, [sp, #0]
 80096da:	3201      	adds	r2, #1
 80096dc:	9207      	str	r2, [sp, #28]
 80096de:	2230      	movs	r2, #48	; 0x30
 80096e0:	700a      	strb	r2, [r1, #0]
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	3201      	adds	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e78c      	b.n	8009604 <_dtoa_r+0x63c>
 80096ea:	4b7f      	ldr	r3, [pc, #508]	; (80098e8 <_dtoa_r+0x920>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	2200      	movs	r2, #0
 80096f4:	2300      	movs	r3, #0
 80096f6:	4606      	mov	r6, r0
 80096f8:	460f      	mov	r7, r1
 80096fa:	f7f7 f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d09b      	beq.n	800963a <_dtoa_r+0x672>
 8009702:	e7cd      	b.n	80096a0 <_dtoa_r+0x6d8>
 8009704:	9a08      	ldr	r2, [sp, #32]
 8009706:	2a00      	cmp	r2, #0
 8009708:	f000 80c4 	beq.w	8009894 <_dtoa_r+0x8cc>
 800970c:	9a05      	ldr	r2, [sp, #20]
 800970e:	2a01      	cmp	r2, #1
 8009710:	f300 80a8 	bgt.w	8009864 <_dtoa_r+0x89c>
 8009714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009716:	2a00      	cmp	r2, #0
 8009718:	f000 80a0 	beq.w	800985c <_dtoa_r+0x894>
 800971c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009720:	9e06      	ldr	r6, [sp, #24]
 8009722:	4645      	mov	r5, r8
 8009724:	9a04      	ldr	r2, [sp, #16]
 8009726:	2101      	movs	r1, #1
 8009728:	441a      	add	r2, r3
 800972a:	4620      	mov	r0, r4
 800972c:	4498      	add	r8, r3
 800972e:	9204      	str	r2, [sp, #16]
 8009730:	f000 fc46 	bl	8009fc0 <__i2b>
 8009734:	4607      	mov	r7, r0
 8009736:	2d00      	cmp	r5, #0
 8009738:	dd0b      	ble.n	8009752 <_dtoa_r+0x78a>
 800973a:	9b04      	ldr	r3, [sp, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd08      	ble.n	8009752 <_dtoa_r+0x78a>
 8009740:	42ab      	cmp	r3, r5
 8009742:	9a04      	ldr	r2, [sp, #16]
 8009744:	bfa8      	it	ge
 8009746:	462b      	movge	r3, r5
 8009748:	eba8 0803 	sub.w	r8, r8, r3
 800974c:	1aed      	subs	r5, r5, r3
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	9b06      	ldr	r3, [sp, #24]
 8009754:	b1fb      	cbz	r3, 8009796 <_dtoa_r+0x7ce>
 8009756:	9b08      	ldr	r3, [sp, #32]
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 809f 	beq.w	800989c <_dtoa_r+0x8d4>
 800975e:	2e00      	cmp	r6, #0
 8009760:	dd11      	ble.n	8009786 <_dtoa_r+0x7be>
 8009762:	4639      	mov	r1, r7
 8009764:	4632      	mov	r2, r6
 8009766:	4620      	mov	r0, r4
 8009768:	f000 fce6 	bl	800a138 <__pow5mult>
 800976c:	465a      	mov	r2, fp
 800976e:	4601      	mov	r1, r0
 8009770:	4607      	mov	r7, r0
 8009772:	4620      	mov	r0, r4
 8009774:	f000 fc3a 	bl	8009fec <__multiply>
 8009778:	4659      	mov	r1, fp
 800977a:	9007      	str	r0, [sp, #28]
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fb63 	bl	8009e48 <_Bfree>
 8009782:	9b07      	ldr	r3, [sp, #28]
 8009784:	469b      	mov	fp, r3
 8009786:	9b06      	ldr	r3, [sp, #24]
 8009788:	1b9a      	subs	r2, r3, r6
 800978a:	d004      	beq.n	8009796 <_dtoa_r+0x7ce>
 800978c:	4659      	mov	r1, fp
 800978e:	4620      	mov	r0, r4
 8009790:	f000 fcd2 	bl	800a138 <__pow5mult>
 8009794:	4683      	mov	fp, r0
 8009796:	2101      	movs	r1, #1
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fc11 	bl	8009fc0 <__i2b>
 800979e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	4606      	mov	r6, r0
 80097a4:	dd7c      	ble.n	80098a0 <_dtoa_r+0x8d8>
 80097a6:	461a      	mov	r2, r3
 80097a8:	4601      	mov	r1, r0
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fcc4 	bl	800a138 <__pow5mult>
 80097b0:	9b05      	ldr	r3, [sp, #20]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	4606      	mov	r6, r0
 80097b6:	dd76      	ble.n	80098a6 <_dtoa_r+0x8de>
 80097b8:	2300      	movs	r3, #0
 80097ba:	9306      	str	r3, [sp, #24]
 80097bc:	6933      	ldr	r3, [r6, #16]
 80097be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097c2:	6918      	ldr	r0, [r3, #16]
 80097c4:	f000 fbac 	bl	8009f20 <__hi0bits>
 80097c8:	f1c0 0020 	rsb	r0, r0, #32
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	4418      	add	r0, r3
 80097d0:	f010 001f 	ands.w	r0, r0, #31
 80097d4:	f000 8086 	beq.w	80098e4 <_dtoa_r+0x91c>
 80097d8:	f1c0 0320 	rsb	r3, r0, #32
 80097dc:	2b04      	cmp	r3, #4
 80097de:	dd7f      	ble.n	80098e0 <_dtoa_r+0x918>
 80097e0:	f1c0 001c 	rsb	r0, r0, #28
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	4403      	add	r3, r0
 80097e8:	4480      	add	r8, r0
 80097ea:	4405      	add	r5, r0
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	dd05      	ble.n	8009800 <_dtoa_r+0x838>
 80097f4:	4659      	mov	r1, fp
 80097f6:	4642      	mov	r2, r8
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 fcf7 	bl	800a1ec <__lshift>
 80097fe:	4683      	mov	fp, r0
 8009800:	9b04      	ldr	r3, [sp, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd05      	ble.n	8009812 <_dtoa_r+0x84a>
 8009806:	4631      	mov	r1, r6
 8009808:	461a      	mov	r2, r3
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fcee 	bl	800a1ec <__lshift>
 8009810:	4606      	mov	r6, r0
 8009812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	d069      	beq.n	80098ec <_dtoa_r+0x924>
 8009818:	4631      	mov	r1, r6
 800981a:	4658      	mov	r0, fp
 800981c:	f000 fd52 	bl	800a2c4 <__mcmp>
 8009820:	2800      	cmp	r0, #0
 8009822:	da63      	bge.n	80098ec <_dtoa_r+0x924>
 8009824:	2300      	movs	r3, #0
 8009826:	4659      	mov	r1, fp
 8009828:	220a      	movs	r2, #10
 800982a:	4620      	mov	r0, r4
 800982c:	f000 fb2e 	bl	8009e8c <__multadd>
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009836:	4683      	mov	fp, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 818f 	beq.w	8009b5c <_dtoa_r+0xb94>
 800983e:	4639      	mov	r1, r7
 8009840:	2300      	movs	r3, #0
 8009842:	220a      	movs	r2, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fb21 	bl	8009e8c <__multadd>
 800984a:	f1b9 0f00 	cmp.w	r9, #0
 800984e:	4607      	mov	r7, r0
 8009850:	f300 808e 	bgt.w	8009970 <_dtoa_r+0x9a8>
 8009854:	9b05      	ldr	r3, [sp, #20]
 8009856:	2b02      	cmp	r3, #2
 8009858:	dc50      	bgt.n	80098fc <_dtoa_r+0x934>
 800985a:	e089      	b.n	8009970 <_dtoa_r+0x9a8>
 800985c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800985e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009862:	e75d      	b.n	8009720 <_dtoa_r+0x758>
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	1e5e      	subs	r6, r3, #1
 8009868:	9b06      	ldr	r3, [sp, #24]
 800986a:	42b3      	cmp	r3, r6
 800986c:	bfbf      	itttt	lt
 800986e:	9b06      	ldrlt	r3, [sp, #24]
 8009870:	9606      	strlt	r6, [sp, #24]
 8009872:	1af2      	sublt	r2, r6, r3
 8009874:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009876:	bfb6      	itet	lt
 8009878:	189b      	addlt	r3, r3, r2
 800987a:	1b9e      	subge	r6, r3, r6
 800987c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	bfb8      	it	lt
 8009882:	2600      	movlt	r6, #0
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfb5      	itete	lt
 8009888:	eba8 0503 	sublt.w	r5, r8, r3
 800988c:	9b01      	ldrge	r3, [sp, #4]
 800988e:	2300      	movlt	r3, #0
 8009890:	4645      	movge	r5, r8
 8009892:	e747      	b.n	8009724 <_dtoa_r+0x75c>
 8009894:	9e06      	ldr	r6, [sp, #24]
 8009896:	9f08      	ldr	r7, [sp, #32]
 8009898:	4645      	mov	r5, r8
 800989a:	e74c      	b.n	8009736 <_dtoa_r+0x76e>
 800989c:	9a06      	ldr	r2, [sp, #24]
 800989e:	e775      	b.n	800978c <_dtoa_r+0x7c4>
 80098a0:	9b05      	ldr	r3, [sp, #20]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	dc18      	bgt.n	80098d8 <_dtoa_r+0x910>
 80098a6:	9b02      	ldr	r3, [sp, #8]
 80098a8:	b9b3      	cbnz	r3, 80098d8 <_dtoa_r+0x910>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b0:	b9a3      	cbnz	r3, 80098dc <_dtoa_r+0x914>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098b8:	0d1b      	lsrs	r3, r3, #20
 80098ba:	051b      	lsls	r3, r3, #20
 80098bc:	b12b      	cbz	r3, 80098ca <_dtoa_r+0x902>
 80098be:	9b04      	ldr	r3, [sp, #16]
 80098c0:	3301      	adds	r3, #1
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	f108 0801 	add.w	r8, r8, #1
 80098c8:	2301      	movs	r3, #1
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f af74 	bne.w	80097bc <_dtoa_r+0x7f4>
 80098d4:	2001      	movs	r0, #1
 80098d6:	e779      	b.n	80097cc <_dtoa_r+0x804>
 80098d8:	2300      	movs	r3, #0
 80098da:	e7f6      	b.n	80098ca <_dtoa_r+0x902>
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	e7f4      	b.n	80098ca <_dtoa_r+0x902>
 80098e0:	d085      	beq.n	80097ee <_dtoa_r+0x826>
 80098e2:	4618      	mov	r0, r3
 80098e4:	301c      	adds	r0, #28
 80098e6:	e77d      	b.n	80097e4 <_dtoa_r+0x81c>
 80098e8:	40240000 	.word	0x40240000
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dc38      	bgt.n	8009964 <_dtoa_r+0x99c>
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	dd35      	ble.n	8009964 <_dtoa_r+0x99c>
 80098f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80098fc:	f1b9 0f00 	cmp.w	r9, #0
 8009900:	d10d      	bne.n	800991e <_dtoa_r+0x956>
 8009902:	4631      	mov	r1, r6
 8009904:	464b      	mov	r3, r9
 8009906:	2205      	movs	r2, #5
 8009908:	4620      	mov	r0, r4
 800990a:	f000 fabf 	bl	8009e8c <__multadd>
 800990e:	4601      	mov	r1, r0
 8009910:	4606      	mov	r6, r0
 8009912:	4658      	mov	r0, fp
 8009914:	f000 fcd6 	bl	800a2c4 <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	f73f adbd 	bgt.w	8009498 <_dtoa_r+0x4d0>
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	9d00      	ldr	r5, [sp, #0]
 8009922:	ea6f 0a03 	mvn.w	sl, r3
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	4631      	mov	r1, r6
 800992c:	4620      	mov	r0, r4
 800992e:	f000 fa8b 	bl	8009e48 <_Bfree>
 8009932:	2f00      	cmp	r7, #0
 8009934:	f43f aeb4 	beq.w	80096a0 <_dtoa_r+0x6d8>
 8009938:	f1b8 0f00 	cmp.w	r8, #0
 800993c:	d005      	beq.n	800994a <_dtoa_r+0x982>
 800993e:	45b8      	cmp	r8, r7
 8009940:	d003      	beq.n	800994a <_dtoa_r+0x982>
 8009942:	4641      	mov	r1, r8
 8009944:	4620      	mov	r0, r4
 8009946:	f000 fa7f 	bl	8009e48 <_Bfree>
 800994a:	4639      	mov	r1, r7
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fa7b 	bl	8009e48 <_Bfree>
 8009952:	e6a5      	b.n	80096a0 <_dtoa_r+0x6d8>
 8009954:	2600      	movs	r6, #0
 8009956:	4637      	mov	r7, r6
 8009958:	e7e1      	b.n	800991e <_dtoa_r+0x956>
 800995a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800995c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009960:	4637      	mov	r7, r6
 8009962:	e599      	b.n	8009498 <_dtoa_r+0x4d0>
 8009964:	9b08      	ldr	r3, [sp, #32]
 8009966:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 80fd 	beq.w	8009b6a <_dtoa_r+0xba2>
 8009970:	2d00      	cmp	r5, #0
 8009972:	dd05      	ble.n	8009980 <_dtoa_r+0x9b8>
 8009974:	4639      	mov	r1, r7
 8009976:	462a      	mov	r2, r5
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fc37 	bl	800a1ec <__lshift>
 800997e:	4607      	mov	r7, r0
 8009980:	9b06      	ldr	r3, [sp, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d05c      	beq.n	8009a40 <_dtoa_r+0xa78>
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fa1d 	bl	8009dc8 <_Balloc>
 800998e:	4605      	mov	r5, r0
 8009990:	b928      	cbnz	r0, 800999e <_dtoa_r+0x9d6>
 8009992:	4b80      	ldr	r3, [pc, #512]	; (8009b94 <_dtoa_r+0xbcc>)
 8009994:	4602      	mov	r2, r0
 8009996:	f240 21ea 	movw	r1, #746	; 0x2ea
 800999a:	f7ff bb2e 	b.w	8008ffa <_dtoa_r+0x32>
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	3202      	adds	r2, #2
 80099a2:	0092      	lsls	r2, r2, #2
 80099a4:	f107 010c 	add.w	r1, r7, #12
 80099a8:	300c      	adds	r0, #12
 80099aa:	f000 f9ff 	bl	8009dac <memcpy>
 80099ae:	2201      	movs	r2, #1
 80099b0:	4629      	mov	r1, r5
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 fc1a 	bl	800a1ec <__lshift>
 80099b8:	9b00      	ldr	r3, [sp, #0]
 80099ba:	3301      	adds	r3, #1
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	444b      	add	r3, r9
 80099c2:	9307      	str	r3, [sp, #28]
 80099c4:	9b02      	ldr	r3, [sp, #8]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	46b8      	mov	r8, r7
 80099cc:	9306      	str	r3, [sp, #24]
 80099ce:	4607      	mov	r7, r0
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	4631      	mov	r1, r6
 80099d4:	3b01      	subs	r3, #1
 80099d6:	4658      	mov	r0, fp
 80099d8:	9302      	str	r3, [sp, #8]
 80099da:	f7ff fa67 	bl	8008eac <quorem>
 80099de:	4603      	mov	r3, r0
 80099e0:	3330      	adds	r3, #48	; 0x30
 80099e2:	9004      	str	r0, [sp, #16]
 80099e4:	4641      	mov	r1, r8
 80099e6:	4658      	mov	r0, fp
 80099e8:	9308      	str	r3, [sp, #32]
 80099ea:	f000 fc6b 	bl	800a2c4 <__mcmp>
 80099ee:	463a      	mov	r2, r7
 80099f0:	4681      	mov	r9, r0
 80099f2:	4631      	mov	r1, r6
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 fc81 	bl	800a2fc <__mdiff>
 80099fa:	68c2      	ldr	r2, [r0, #12]
 80099fc:	9b08      	ldr	r3, [sp, #32]
 80099fe:	4605      	mov	r5, r0
 8009a00:	bb02      	cbnz	r2, 8009a44 <_dtoa_r+0xa7c>
 8009a02:	4601      	mov	r1, r0
 8009a04:	4658      	mov	r0, fp
 8009a06:	f000 fc5d 	bl	800a2c4 <__mcmp>
 8009a0a:	9b08      	ldr	r3, [sp, #32]
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4620      	mov	r0, r4
 8009a12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009a16:	f000 fa17 	bl	8009e48 <_Bfree>
 8009a1a:	9b05      	ldr	r3, [sp, #20]
 8009a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1e:	9d01      	ldr	r5, [sp, #4]
 8009a20:	ea43 0102 	orr.w	r1, r3, r2
 8009a24:	9b06      	ldr	r3, [sp, #24]
 8009a26:	430b      	orrs	r3, r1
 8009a28:	9b08      	ldr	r3, [sp, #32]
 8009a2a:	d10d      	bne.n	8009a48 <_dtoa_r+0xa80>
 8009a2c:	2b39      	cmp	r3, #57	; 0x39
 8009a2e:	d029      	beq.n	8009a84 <_dtoa_r+0xabc>
 8009a30:	f1b9 0f00 	cmp.w	r9, #0
 8009a34:	dd01      	ble.n	8009a3a <_dtoa_r+0xa72>
 8009a36:	9b04      	ldr	r3, [sp, #16]
 8009a38:	3331      	adds	r3, #49	; 0x31
 8009a3a:	9a02      	ldr	r2, [sp, #8]
 8009a3c:	7013      	strb	r3, [r2, #0]
 8009a3e:	e774      	b.n	800992a <_dtoa_r+0x962>
 8009a40:	4638      	mov	r0, r7
 8009a42:	e7b9      	b.n	80099b8 <_dtoa_r+0x9f0>
 8009a44:	2201      	movs	r2, #1
 8009a46:	e7e2      	b.n	8009a0e <_dtoa_r+0xa46>
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	db06      	blt.n	8009a5c <_dtoa_r+0xa94>
 8009a4e:	9905      	ldr	r1, [sp, #20]
 8009a50:	ea41 0909 	orr.w	r9, r1, r9
 8009a54:	9906      	ldr	r1, [sp, #24]
 8009a56:	ea59 0101 	orrs.w	r1, r9, r1
 8009a5a:	d120      	bne.n	8009a9e <_dtoa_r+0xad6>
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	ddec      	ble.n	8009a3a <_dtoa_r+0xa72>
 8009a60:	4659      	mov	r1, fp
 8009a62:	2201      	movs	r2, #1
 8009a64:	4620      	mov	r0, r4
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	f000 fbc0 	bl	800a1ec <__lshift>
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4683      	mov	fp, r0
 8009a70:	f000 fc28 	bl	800a2c4 <__mcmp>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	dc02      	bgt.n	8009a80 <_dtoa_r+0xab8>
 8009a7a:	d1de      	bne.n	8009a3a <_dtoa_r+0xa72>
 8009a7c:	07da      	lsls	r2, r3, #31
 8009a7e:	d5dc      	bpl.n	8009a3a <_dtoa_r+0xa72>
 8009a80:	2b39      	cmp	r3, #57	; 0x39
 8009a82:	d1d8      	bne.n	8009a36 <_dtoa_r+0xa6e>
 8009a84:	9a02      	ldr	r2, [sp, #8]
 8009a86:	2339      	movs	r3, #57	; 0x39
 8009a88:	7013      	strb	r3, [r2, #0]
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	461d      	mov	r5, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a94:	2a39      	cmp	r2, #57	; 0x39
 8009a96:	d050      	beq.n	8009b3a <_dtoa_r+0xb72>
 8009a98:	3201      	adds	r2, #1
 8009a9a:	701a      	strb	r2, [r3, #0]
 8009a9c:	e745      	b.n	800992a <_dtoa_r+0x962>
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	dd03      	ble.n	8009aaa <_dtoa_r+0xae2>
 8009aa2:	2b39      	cmp	r3, #57	; 0x39
 8009aa4:	d0ee      	beq.n	8009a84 <_dtoa_r+0xabc>
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	e7c7      	b.n	8009a3a <_dtoa_r+0xa72>
 8009aaa:	9a01      	ldr	r2, [sp, #4]
 8009aac:	9907      	ldr	r1, [sp, #28]
 8009aae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ab2:	428a      	cmp	r2, r1
 8009ab4:	d02a      	beq.n	8009b0c <_dtoa_r+0xb44>
 8009ab6:	4659      	mov	r1, fp
 8009ab8:	2300      	movs	r3, #0
 8009aba:	220a      	movs	r2, #10
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 f9e5 	bl	8009e8c <__multadd>
 8009ac2:	45b8      	cmp	r8, r7
 8009ac4:	4683      	mov	fp, r0
 8009ac6:	f04f 0300 	mov.w	r3, #0
 8009aca:	f04f 020a 	mov.w	r2, #10
 8009ace:	4641      	mov	r1, r8
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	d107      	bne.n	8009ae4 <_dtoa_r+0xb1c>
 8009ad4:	f000 f9da 	bl	8009e8c <__multadd>
 8009ad8:	4680      	mov	r8, r0
 8009ada:	4607      	mov	r7, r0
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	e775      	b.n	80099d0 <_dtoa_r+0xa08>
 8009ae4:	f000 f9d2 	bl	8009e8c <__multadd>
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4680      	mov	r8, r0
 8009aec:	2300      	movs	r3, #0
 8009aee:	220a      	movs	r2, #10
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 f9cb 	bl	8009e8c <__multadd>
 8009af6:	4607      	mov	r7, r0
 8009af8:	e7f0      	b.n	8009adc <_dtoa_r+0xb14>
 8009afa:	f1b9 0f00 	cmp.w	r9, #0
 8009afe:	9a00      	ldr	r2, [sp, #0]
 8009b00:	bfcc      	ite	gt
 8009b02:	464d      	movgt	r5, r9
 8009b04:	2501      	movle	r5, #1
 8009b06:	4415      	add	r5, r2
 8009b08:	f04f 0800 	mov.w	r8, #0
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4620      	mov	r0, r4
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	f000 fb6a 	bl	800a1ec <__lshift>
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4683      	mov	fp, r0
 8009b1c:	f000 fbd2 	bl	800a2c4 <__mcmp>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dcb2      	bgt.n	8009a8a <_dtoa_r+0xac2>
 8009b24:	d102      	bne.n	8009b2c <_dtoa_r+0xb64>
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	07db      	lsls	r3, r3, #31
 8009b2a:	d4ae      	bmi.n	8009a8a <_dtoa_r+0xac2>
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	461d      	mov	r5, r3
 8009b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b34:	2a30      	cmp	r2, #48	; 0x30
 8009b36:	d0fa      	beq.n	8009b2e <_dtoa_r+0xb66>
 8009b38:	e6f7      	b.n	800992a <_dtoa_r+0x962>
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d1a5      	bne.n	8009a8c <_dtoa_r+0xac4>
 8009b40:	f10a 0a01 	add.w	sl, sl, #1
 8009b44:	2331      	movs	r3, #49	; 0x31
 8009b46:	e779      	b.n	8009a3c <_dtoa_r+0xa74>
 8009b48:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <_dtoa_r+0xbd0>)
 8009b4a:	f7ff baaf 	b.w	80090ac <_dtoa_r+0xe4>
 8009b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f47f aa86 	bne.w	8009062 <_dtoa_r+0x9a>
 8009b56:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <_dtoa_r+0xbd4>)
 8009b58:	f7ff baa8 	b.w	80090ac <_dtoa_r+0xe4>
 8009b5c:	f1b9 0f00 	cmp.w	r9, #0
 8009b60:	dc03      	bgt.n	8009b6a <_dtoa_r+0xba2>
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	f73f aec9 	bgt.w	80098fc <_dtoa_r+0x934>
 8009b6a:	9d00      	ldr	r5, [sp, #0]
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f7ff f99c 	bl	8008eac <quorem>
 8009b74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b78:	f805 3b01 	strb.w	r3, [r5], #1
 8009b7c:	9a00      	ldr	r2, [sp, #0]
 8009b7e:	1aaa      	subs	r2, r5, r2
 8009b80:	4591      	cmp	r9, r2
 8009b82:	ddba      	ble.n	8009afa <_dtoa_r+0xb32>
 8009b84:	4659      	mov	r1, fp
 8009b86:	2300      	movs	r3, #0
 8009b88:	220a      	movs	r2, #10
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f97e 	bl	8009e8c <__multadd>
 8009b90:	4683      	mov	fp, r0
 8009b92:	e7eb      	b.n	8009b6c <_dtoa_r+0xba4>
 8009b94:	0800b4ab 	.word	0x0800b4ab
 8009b98:	0800b404 	.word	0x0800b404
 8009b9c:	0800b428 	.word	0x0800b428

08009ba0 <std>:
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	b510      	push	{r4, lr}
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8009baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bae:	6083      	str	r3, [r0, #8]
 8009bb0:	8181      	strh	r1, [r0, #12]
 8009bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8009bb4:	81c2      	strh	r2, [r0, #14]
 8009bb6:	6183      	str	r3, [r0, #24]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	2208      	movs	r2, #8
 8009bbc:	305c      	adds	r0, #92	; 0x5c
 8009bbe:	f7fe fceb 	bl	8008598 <memset>
 8009bc2:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <std+0x38>)
 8009bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8009bc6:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <std+0x3c>)
 8009bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <std+0x40>)
 8009bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bce:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <std+0x44>)
 8009bd0:	6224      	str	r4, [r4, #32]
 8009bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8009bd4:	bd10      	pop	{r4, pc}
 8009bd6:	bf00      	nop
 8009bd8:	0800a90d 	.word	0x0800a90d
 8009bdc:	0800a92f 	.word	0x0800a92f
 8009be0:	0800a967 	.word	0x0800a967
 8009be4:	0800a98b 	.word	0x0800a98b

08009be8 <_cleanup_r>:
 8009be8:	4901      	ldr	r1, [pc, #4]	; (8009bf0 <_cleanup_r+0x8>)
 8009bea:	f000 b8af 	b.w	8009d4c <_fwalk_reent>
 8009bee:	bf00      	nop
 8009bf0:	0800aca1 	.word	0x0800aca1

08009bf4 <__sfmoreglue>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	1e4a      	subs	r2, r1, #1
 8009bf8:	2568      	movs	r5, #104	; 0x68
 8009bfa:	4355      	muls	r5, r2
 8009bfc:	460e      	mov	r6, r1
 8009bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c02:	f000 fcbf 	bl	800a584 <_malloc_r>
 8009c06:	4604      	mov	r4, r0
 8009c08:	b140      	cbz	r0, 8009c1c <__sfmoreglue+0x28>
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8009c10:	300c      	adds	r0, #12
 8009c12:	60a0      	str	r0, [r4, #8]
 8009c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c18:	f7fe fcbe 	bl	8008598 <memset>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}

08009c20 <__sfp_lock_acquire>:
 8009c20:	4801      	ldr	r0, [pc, #4]	; (8009c28 <__sfp_lock_acquire+0x8>)
 8009c22:	f000 b8b8 	b.w	8009d96 <__retarget_lock_acquire_recursive>
 8009c26:	bf00      	nop
 8009c28:	20000658 	.word	0x20000658

08009c2c <__sfp_lock_release>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__sfp_lock_release+0x8>)
 8009c2e:	f000 b8b3 	b.w	8009d98 <__retarget_lock_release_recursive>
 8009c32:	bf00      	nop
 8009c34:	20000658 	.word	0x20000658

08009c38 <__sinit_lock_acquire>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__sinit_lock_acquire+0x8>)
 8009c3a:	f000 b8ac 	b.w	8009d96 <__retarget_lock_acquire_recursive>
 8009c3e:	bf00      	nop
 8009c40:	20000653 	.word	0x20000653

08009c44 <__sinit_lock_release>:
 8009c44:	4801      	ldr	r0, [pc, #4]	; (8009c4c <__sinit_lock_release+0x8>)
 8009c46:	f000 b8a7 	b.w	8009d98 <__retarget_lock_release_recursive>
 8009c4a:	bf00      	nop
 8009c4c:	20000653 	.word	0x20000653

08009c50 <__sinit>:
 8009c50:	b510      	push	{r4, lr}
 8009c52:	4604      	mov	r4, r0
 8009c54:	f7ff fff0 	bl	8009c38 <__sinit_lock_acquire>
 8009c58:	69a3      	ldr	r3, [r4, #24]
 8009c5a:	b11b      	cbz	r3, 8009c64 <__sinit+0x14>
 8009c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c60:	f7ff bff0 	b.w	8009c44 <__sinit_lock_release>
 8009c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c68:	6523      	str	r3, [r4, #80]	; 0x50
 8009c6a:	4b13      	ldr	r3, [pc, #76]	; (8009cb8 <__sinit+0x68>)
 8009c6c:	4a13      	ldr	r2, [pc, #76]	; (8009cbc <__sinit+0x6c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	bf04      	itt	eq
 8009c76:	2301      	moveq	r3, #1
 8009c78:	61a3      	streq	r3, [r4, #24]
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 f820 	bl	8009cc0 <__sfp>
 8009c80:	6060      	str	r0, [r4, #4]
 8009c82:	4620      	mov	r0, r4
 8009c84:	f000 f81c 	bl	8009cc0 <__sfp>
 8009c88:	60a0      	str	r0, [r4, #8]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 f818 	bl	8009cc0 <__sfp>
 8009c90:	2200      	movs	r2, #0
 8009c92:	60e0      	str	r0, [r4, #12]
 8009c94:	2104      	movs	r1, #4
 8009c96:	6860      	ldr	r0, [r4, #4]
 8009c98:	f7ff ff82 	bl	8009ba0 <std>
 8009c9c:	68a0      	ldr	r0, [r4, #8]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	2109      	movs	r1, #9
 8009ca2:	f7ff ff7d 	bl	8009ba0 <std>
 8009ca6:	68e0      	ldr	r0, [r4, #12]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	2112      	movs	r1, #18
 8009cac:	f7ff ff78 	bl	8009ba0 <std>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	61a3      	str	r3, [r4, #24]
 8009cb4:	e7d2      	b.n	8009c5c <__sinit+0xc>
 8009cb6:	bf00      	nop
 8009cb8:	0800b3f0 	.word	0x0800b3f0
 8009cbc:	08009be9 	.word	0x08009be9

08009cc0 <__sfp>:
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	f7ff ffac 	bl	8009c20 <__sfp_lock_acquire>
 8009cc8:	4b1e      	ldr	r3, [pc, #120]	; (8009d44 <__sfp+0x84>)
 8009cca:	681e      	ldr	r6, [r3, #0]
 8009ccc:	69b3      	ldr	r3, [r6, #24]
 8009cce:	b913      	cbnz	r3, 8009cd6 <__sfp+0x16>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff ffbd 	bl	8009c50 <__sinit>
 8009cd6:	3648      	adds	r6, #72	; 0x48
 8009cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	d503      	bpl.n	8009ce8 <__sfp+0x28>
 8009ce0:	6833      	ldr	r3, [r6, #0]
 8009ce2:	b30b      	cbz	r3, 8009d28 <__sfp+0x68>
 8009ce4:	6836      	ldr	r6, [r6, #0]
 8009ce6:	e7f7      	b.n	8009cd8 <__sfp+0x18>
 8009ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cec:	b9d5      	cbnz	r5, 8009d24 <__sfp+0x64>
 8009cee:	4b16      	ldr	r3, [pc, #88]	; (8009d48 <__sfp+0x88>)
 8009cf0:	60e3      	str	r3, [r4, #12]
 8009cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8009cf8:	f000 f84c 	bl	8009d94 <__retarget_lock_init_recursive>
 8009cfc:	f7ff ff96 	bl	8009c2c <__sfp_lock_release>
 8009d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d08:	6025      	str	r5, [r4, #0]
 8009d0a:	61a5      	str	r5, [r4, #24]
 8009d0c:	2208      	movs	r2, #8
 8009d0e:	4629      	mov	r1, r5
 8009d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d14:	f7fe fc40 	bl	8008598 <memset>
 8009d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d20:	4620      	mov	r0, r4
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	3468      	adds	r4, #104	; 0x68
 8009d26:	e7d9      	b.n	8009cdc <__sfp+0x1c>
 8009d28:	2104      	movs	r1, #4
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	f7ff ff62 	bl	8009bf4 <__sfmoreglue>
 8009d30:	4604      	mov	r4, r0
 8009d32:	6030      	str	r0, [r6, #0]
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d1d5      	bne.n	8009ce4 <__sfp+0x24>
 8009d38:	f7ff ff78 	bl	8009c2c <__sfp_lock_release>
 8009d3c:	230c      	movs	r3, #12
 8009d3e:	603b      	str	r3, [r7, #0]
 8009d40:	e7ee      	b.n	8009d20 <__sfp+0x60>
 8009d42:	bf00      	nop
 8009d44:	0800b3f0 	.word	0x0800b3f0
 8009d48:	ffff0001 	.word	0xffff0001

08009d4c <_fwalk_reent>:
 8009d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4606      	mov	r6, r0
 8009d52:	4688      	mov	r8, r1
 8009d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d58:	2700      	movs	r7, #0
 8009d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8009d62:	d505      	bpl.n	8009d70 <_fwalk_reent+0x24>
 8009d64:	6824      	ldr	r4, [r4, #0]
 8009d66:	2c00      	cmp	r4, #0
 8009d68:	d1f7      	bne.n	8009d5a <_fwalk_reent+0xe>
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d70:	89ab      	ldrh	r3, [r5, #12]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d907      	bls.n	8009d86 <_fwalk_reent+0x3a>
 8009d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	d003      	beq.n	8009d86 <_fwalk_reent+0x3a>
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4630      	mov	r0, r6
 8009d82:	47c0      	blx	r8
 8009d84:	4307      	orrs	r7, r0
 8009d86:	3568      	adds	r5, #104	; 0x68
 8009d88:	e7e9      	b.n	8009d5e <_fwalk_reent+0x12>
	...

08009d8c <_localeconv_r>:
 8009d8c:	4800      	ldr	r0, [pc, #0]	; (8009d90 <_localeconv_r+0x4>)
 8009d8e:	4770      	bx	lr
 8009d90:	200002d8 	.word	0x200002d8

08009d94 <__retarget_lock_init_recursive>:
 8009d94:	4770      	bx	lr

08009d96 <__retarget_lock_acquire_recursive>:
 8009d96:	4770      	bx	lr

08009d98 <__retarget_lock_release_recursive>:
 8009d98:	4770      	bx	lr
	...

08009d9c <malloc>:
 8009d9c:	4b02      	ldr	r3, [pc, #8]	; (8009da8 <malloc+0xc>)
 8009d9e:	4601      	mov	r1, r0
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	f000 bbef 	b.w	800a584 <_malloc_r>
 8009da6:	bf00      	nop
 8009da8:	20000184 	.word	0x20000184

08009dac <memcpy>:
 8009dac:	440a      	add	r2, r1
 8009dae:	4291      	cmp	r1, r2
 8009db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009db4:	d100      	bne.n	8009db8 <memcpy+0xc>
 8009db6:	4770      	bx	lr
 8009db8:	b510      	push	{r4, lr}
 8009dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc2:	4291      	cmp	r1, r2
 8009dc4:	d1f9      	bne.n	8009dba <memcpy+0xe>
 8009dc6:	bd10      	pop	{r4, pc}

08009dc8 <_Balloc>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	b976      	cbnz	r6, 8009df0 <_Balloc+0x28>
 8009dd2:	2010      	movs	r0, #16
 8009dd4:	f7ff ffe2 	bl	8009d9c <malloc>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	6260      	str	r0, [r4, #36]	; 0x24
 8009ddc:	b920      	cbnz	r0, 8009de8 <_Balloc+0x20>
 8009dde:	4b18      	ldr	r3, [pc, #96]	; (8009e40 <_Balloc+0x78>)
 8009de0:	4818      	ldr	r0, [pc, #96]	; (8009e44 <_Balloc+0x7c>)
 8009de2:	2166      	movs	r1, #102	; 0x66
 8009de4:	f000 fea8 	bl	800ab38 <__assert_func>
 8009de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dec:	6006      	str	r6, [r0, #0]
 8009dee:	60c6      	str	r6, [r0, #12]
 8009df0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009df2:	68f3      	ldr	r3, [r6, #12]
 8009df4:	b183      	cbz	r3, 8009e18 <_Balloc+0x50>
 8009df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dfe:	b9b8      	cbnz	r0, 8009e30 <_Balloc+0x68>
 8009e00:	2101      	movs	r1, #1
 8009e02:	fa01 f605 	lsl.w	r6, r1, r5
 8009e06:	1d72      	adds	r2, r6, #5
 8009e08:	0092      	lsls	r2, r2, #2
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fb5a 	bl	800a4c4 <_calloc_r>
 8009e10:	b160      	cbz	r0, 8009e2c <_Balloc+0x64>
 8009e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e16:	e00e      	b.n	8009e36 <_Balloc+0x6e>
 8009e18:	2221      	movs	r2, #33	; 0x21
 8009e1a:	2104      	movs	r1, #4
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fb51 	bl	800a4c4 <_calloc_r>
 8009e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e24:	60f0      	str	r0, [r6, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e4      	bne.n	8009df6 <_Balloc+0x2e>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	6802      	ldr	r2, [r0, #0]
 8009e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e36:	2300      	movs	r3, #0
 8009e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e3c:	e7f7      	b.n	8009e2e <_Balloc+0x66>
 8009e3e:	bf00      	nop
 8009e40:	0800b435 	.word	0x0800b435
 8009e44:	0800b51c 	.word	0x0800b51c

08009e48 <_Bfree>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	b976      	cbnz	r6, 8009e70 <_Bfree+0x28>
 8009e52:	2010      	movs	r0, #16
 8009e54:	f7ff ffa2 	bl	8009d9c <malloc>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	6268      	str	r0, [r5, #36]	; 0x24
 8009e5c:	b920      	cbnz	r0, 8009e68 <_Bfree+0x20>
 8009e5e:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <_Bfree+0x3c>)
 8009e60:	4809      	ldr	r0, [pc, #36]	; (8009e88 <_Bfree+0x40>)
 8009e62:	218a      	movs	r1, #138	; 0x8a
 8009e64:	f000 fe68 	bl	800ab38 <__assert_func>
 8009e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e6c:	6006      	str	r6, [r0, #0]
 8009e6e:	60c6      	str	r6, [r0, #12]
 8009e70:	b13c      	cbz	r4, 8009e82 <_Bfree+0x3a>
 8009e72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e74:	6862      	ldr	r2, [r4, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e7c:	6021      	str	r1, [r4, #0]
 8009e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
 8009e84:	0800b435 	.word	0x0800b435
 8009e88:	0800b51c 	.word	0x0800b51c

08009e8c <__multadd>:
 8009e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e90:	690e      	ldr	r6, [r1, #16]
 8009e92:	4607      	mov	r7, r0
 8009e94:	4698      	mov	r8, r3
 8009e96:	460c      	mov	r4, r1
 8009e98:	f101 0014 	add.w	r0, r1, #20
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	6805      	ldr	r5, [r0, #0]
 8009ea0:	b2a9      	uxth	r1, r5
 8009ea2:	fb02 8101 	mla	r1, r2, r1, r8
 8009ea6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009eaa:	0c2d      	lsrs	r5, r5, #16
 8009eac:	fb02 c505 	mla	r5, r2, r5, ip
 8009eb0:	b289      	uxth	r1, r1
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009eb8:	429e      	cmp	r6, r3
 8009eba:	f840 1b04 	str.w	r1, [r0], #4
 8009ebe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ec2:	dcec      	bgt.n	8009e9e <__multadd+0x12>
 8009ec4:	f1b8 0f00 	cmp.w	r8, #0
 8009ec8:	d022      	beq.n	8009f10 <__multadd+0x84>
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	42b3      	cmp	r3, r6
 8009ece:	dc19      	bgt.n	8009f04 <__multadd+0x78>
 8009ed0:	6861      	ldr	r1, [r4, #4]
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	3101      	adds	r1, #1
 8009ed6:	f7ff ff77 	bl	8009dc8 <_Balloc>
 8009eda:	4605      	mov	r5, r0
 8009edc:	b928      	cbnz	r0, 8009eea <__multadd+0x5e>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <__multadd+0x8c>)
 8009ee2:	480e      	ldr	r0, [pc, #56]	; (8009f1c <__multadd+0x90>)
 8009ee4:	21b5      	movs	r1, #181	; 0xb5
 8009ee6:	f000 fe27 	bl	800ab38 <__assert_func>
 8009eea:	6922      	ldr	r2, [r4, #16]
 8009eec:	3202      	adds	r2, #2
 8009eee:	f104 010c 	add.w	r1, r4, #12
 8009ef2:	0092      	lsls	r2, r2, #2
 8009ef4:	300c      	adds	r0, #12
 8009ef6:	f7ff ff59 	bl	8009dac <memcpy>
 8009efa:	4621      	mov	r1, r4
 8009efc:	4638      	mov	r0, r7
 8009efe:	f7ff ffa3 	bl	8009e48 <_Bfree>
 8009f02:	462c      	mov	r4, r5
 8009f04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009f08:	3601      	adds	r6, #1
 8009f0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009f0e:	6126      	str	r6, [r4, #16]
 8009f10:	4620      	mov	r0, r4
 8009f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f16:	bf00      	nop
 8009f18:	0800b4ab 	.word	0x0800b4ab
 8009f1c:	0800b51c 	.word	0x0800b51c

08009f20 <__hi0bits>:
 8009f20:	0c03      	lsrs	r3, r0, #16
 8009f22:	041b      	lsls	r3, r3, #16
 8009f24:	b9d3      	cbnz	r3, 8009f5c <__hi0bits+0x3c>
 8009f26:	0400      	lsls	r0, r0, #16
 8009f28:	2310      	movs	r3, #16
 8009f2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f2e:	bf04      	itt	eq
 8009f30:	0200      	lsleq	r0, r0, #8
 8009f32:	3308      	addeq	r3, #8
 8009f34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f38:	bf04      	itt	eq
 8009f3a:	0100      	lsleq	r0, r0, #4
 8009f3c:	3304      	addeq	r3, #4
 8009f3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f42:	bf04      	itt	eq
 8009f44:	0080      	lsleq	r0, r0, #2
 8009f46:	3302      	addeq	r3, #2
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	db05      	blt.n	8009f58 <__hi0bits+0x38>
 8009f4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f50:	f103 0301 	add.w	r3, r3, #1
 8009f54:	bf08      	it	eq
 8009f56:	2320      	moveq	r3, #32
 8009f58:	4618      	mov	r0, r3
 8009f5a:	4770      	bx	lr
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e7e4      	b.n	8009f2a <__hi0bits+0xa>

08009f60 <__lo0bits>:
 8009f60:	6803      	ldr	r3, [r0, #0]
 8009f62:	f013 0207 	ands.w	r2, r3, #7
 8009f66:	4601      	mov	r1, r0
 8009f68:	d00b      	beq.n	8009f82 <__lo0bits+0x22>
 8009f6a:	07da      	lsls	r2, r3, #31
 8009f6c:	d424      	bmi.n	8009fb8 <__lo0bits+0x58>
 8009f6e:	0798      	lsls	r0, r3, #30
 8009f70:	bf49      	itett	mi
 8009f72:	085b      	lsrmi	r3, r3, #1
 8009f74:	089b      	lsrpl	r3, r3, #2
 8009f76:	2001      	movmi	r0, #1
 8009f78:	600b      	strmi	r3, [r1, #0]
 8009f7a:	bf5c      	itt	pl
 8009f7c:	600b      	strpl	r3, [r1, #0]
 8009f7e:	2002      	movpl	r0, #2
 8009f80:	4770      	bx	lr
 8009f82:	b298      	uxth	r0, r3
 8009f84:	b9b0      	cbnz	r0, 8009fb4 <__lo0bits+0x54>
 8009f86:	0c1b      	lsrs	r3, r3, #16
 8009f88:	2010      	movs	r0, #16
 8009f8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f8e:	bf04      	itt	eq
 8009f90:	0a1b      	lsreq	r3, r3, #8
 8009f92:	3008      	addeq	r0, #8
 8009f94:	071a      	lsls	r2, r3, #28
 8009f96:	bf04      	itt	eq
 8009f98:	091b      	lsreq	r3, r3, #4
 8009f9a:	3004      	addeq	r0, #4
 8009f9c:	079a      	lsls	r2, r3, #30
 8009f9e:	bf04      	itt	eq
 8009fa0:	089b      	lsreq	r3, r3, #2
 8009fa2:	3002      	addeq	r0, #2
 8009fa4:	07da      	lsls	r2, r3, #31
 8009fa6:	d403      	bmi.n	8009fb0 <__lo0bits+0x50>
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	f100 0001 	add.w	r0, r0, #1
 8009fae:	d005      	beq.n	8009fbc <__lo0bits+0x5c>
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	4770      	bx	lr
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	e7e8      	b.n	8009f8a <__lo0bits+0x2a>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	4770      	bx	lr
 8009fbc:	2020      	movs	r0, #32
 8009fbe:	4770      	bx	lr

08009fc0 <__i2b>:
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	f7ff feff 	bl	8009dc8 <_Balloc>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	b928      	cbnz	r0, 8009fda <__i2b+0x1a>
 8009fce:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <__i2b+0x24>)
 8009fd0:	4805      	ldr	r0, [pc, #20]	; (8009fe8 <__i2b+0x28>)
 8009fd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009fd6:	f000 fdaf 	bl	800ab38 <__assert_func>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	6144      	str	r4, [r0, #20]
 8009fde:	6103      	str	r3, [r0, #16]
 8009fe0:	bd10      	pop	{r4, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800b4ab 	.word	0x0800b4ab
 8009fe8:	0800b51c 	.word	0x0800b51c

08009fec <__multiply>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	690a      	ldr	r2, [r1, #16]
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	bfb8      	it	lt
 8009ffa:	460b      	movlt	r3, r1
 8009ffc:	460d      	mov	r5, r1
 8009ffe:	bfbc      	itt	lt
 800a000:	4625      	movlt	r5, r4
 800a002:	461c      	movlt	r4, r3
 800a004:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a008:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a00c:	68ab      	ldr	r3, [r5, #8]
 800a00e:	6869      	ldr	r1, [r5, #4]
 800a010:	eb0a 0709 	add.w	r7, sl, r9
 800a014:	42bb      	cmp	r3, r7
 800a016:	b085      	sub	sp, #20
 800a018:	bfb8      	it	lt
 800a01a:	3101      	addlt	r1, #1
 800a01c:	f7ff fed4 	bl	8009dc8 <_Balloc>
 800a020:	b930      	cbnz	r0, 800a030 <__multiply+0x44>
 800a022:	4602      	mov	r2, r0
 800a024:	4b42      	ldr	r3, [pc, #264]	; (800a130 <__multiply+0x144>)
 800a026:	4843      	ldr	r0, [pc, #268]	; (800a134 <__multiply+0x148>)
 800a028:	f240 115d 	movw	r1, #349	; 0x15d
 800a02c:	f000 fd84 	bl	800ab38 <__assert_func>
 800a030:	f100 0614 	add.w	r6, r0, #20
 800a034:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a038:	4633      	mov	r3, r6
 800a03a:	2200      	movs	r2, #0
 800a03c:	4543      	cmp	r3, r8
 800a03e:	d31e      	bcc.n	800a07e <__multiply+0x92>
 800a040:	f105 0c14 	add.w	ip, r5, #20
 800a044:	f104 0314 	add.w	r3, r4, #20
 800a048:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a04c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a050:	9202      	str	r2, [sp, #8]
 800a052:	ebac 0205 	sub.w	r2, ip, r5
 800a056:	3a15      	subs	r2, #21
 800a058:	f022 0203 	bic.w	r2, r2, #3
 800a05c:	3204      	adds	r2, #4
 800a05e:	f105 0115 	add.w	r1, r5, #21
 800a062:	458c      	cmp	ip, r1
 800a064:	bf38      	it	cc
 800a066:	2204      	movcc	r2, #4
 800a068:	9201      	str	r2, [sp, #4]
 800a06a:	9a02      	ldr	r2, [sp, #8]
 800a06c:	9303      	str	r3, [sp, #12]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d808      	bhi.n	800a084 <__multiply+0x98>
 800a072:	2f00      	cmp	r7, #0
 800a074:	dc55      	bgt.n	800a122 <__multiply+0x136>
 800a076:	6107      	str	r7, [r0, #16]
 800a078:	b005      	add	sp, #20
 800a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07e:	f843 2b04 	str.w	r2, [r3], #4
 800a082:	e7db      	b.n	800a03c <__multiply+0x50>
 800a084:	f8b3 a000 	ldrh.w	sl, [r3]
 800a088:	f1ba 0f00 	cmp.w	sl, #0
 800a08c:	d020      	beq.n	800a0d0 <__multiply+0xe4>
 800a08e:	f105 0e14 	add.w	lr, r5, #20
 800a092:	46b1      	mov	r9, r6
 800a094:	2200      	movs	r2, #0
 800a096:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a09a:	f8d9 b000 	ldr.w	fp, [r9]
 800a09e:	b2a1      	uxth	r1, r4
 800a0a0:	fa1f fb8b 	uxth.w	fp, fp
 800a0a4:	fb0a b101 	mla	r1, sl, r1, fp
 800a0a8:	4411      	add	r1, r2
 800a0aa:	f8d9 2000 	ldr.w	r2, [r9]
 800a0ae:	0c24      	lsrs	r4, r4, #16
 800a0b0:	0c12      	lsrs	r2, r2, #16
 800a0b2:	fb0a 2404 	mla	r4, sl, r4, r2
 800a0b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a0ba:	b289      	uxth	r1, r1
 800a0bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a0c0:	45f4      	cmp	ip, lr
 800a0c2:	f849 1b04 	str.w	r1, [r9], #4
 800a0c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a0ca:	d8e4      	bhi.n	800a096 <__multiply+0xaa>
 800a0cc:	9901      	ldr	r1, [sp, #4]
 800a0ce:	5072      	str	r2, [r6, r1]
 800a0d0:	9a03      	ldr	r2, [sp, #12]
 800a0d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	f1b9 0f00 	cmp.w	r9, #0
 800a0dc:	d01f      	beq.n	800a11e <__multiply+0x132>
 800a0de:	6834      	ldr	r4, [r6, #0]
 800a0e0:	f105 0114 	add.w	r1, r5, #20
 800a0e4:	46b6      	mov	lr, r6
 800a0e6:	f04f 0a00 	mov.w	sl, #0
 800a0ea:	880a      	ldrh	r2, [r1, #0]
 800a0ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a0f0:	fb09 b202 	mla	r2, r9, r2, fp
 800a0f4:	4492      	add	sl, r2
 800a0f6:	b2a4      	uxth	r4, r4
 800a0f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a0fc:	f84e 4b04 	str.w	r4, [lr], #4
 800a100:	f851 4b04 	ldr.w	r4, [r1], #4
 800a104:	f8be 2000 	ldrh.w	r2, [lr]
 800a108:	0c24      	lsrs	r4, r4, #16
 800a10a:	fb09 2404 	mla	r4, r9, r4, r2
 800a10e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a112:	458c      	cmp	ip, r1
 800a114:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a118:	d8e7      	bhi.n	800a0ea <__multiply+0xfe>
 800a11a:	9a01      	ldr	r2, [sp, #4]
 800a11c:	50b4      	str	r4, [r6, r2]
 800a11e:	3604      	adds	r6, #4
 800a120:	e7a3      	b.n	800a06a <__multiply+0x7e>
 800a122:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1a5      	bne.n	800a076 <__multiply+0x8a>
 800a12a:	3f01      	subs	r7, #1
 800a12c:	e7a1      	b.n	800a072 <__multiply+0x86>
 800a12e:	bf00      	nop
 800a130:	0800b4ab 	.word	0x0800b4ab
 800a134:	0800b51c 	.word	0x0800b51c

0800a138 <__pow5mult>:
 800a138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13c:	4615      	mov	r5, r2
 800a13e:	f012 0203 	ands.w	r2, r2, #3
 800a142:	4606      	mov	r6, r0
 800a144:	460f      	mov	r7, r1
 800a146:	d007      	beq.n	800a158 <__pow5mult+0x20>
 800a148:	4c25      	ldr	r4, [pc, #148]	; (800a1e0 <__pow5mult+0xa8>)
 800a14a:	3a01      	subs	r2, #1
 800a14c:	2300      	movs	r3, #0
 800a14e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a152:	f7ff fe9b 	bl	8009e8c <__multadd>
 800a156:	4607      	mov	r7, r0
 800a158:	10ad      	asrs	r5, r5, #2
 800a15a:	d03d      	beq.n	800a1d8 <__pow5mult+0xa0>
 800a15c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a15e:	b97c      	cbnz	r4, 800a180 <__pow5mult+0x48>
 800a160:	2010      	movs	r0, #16
 800a162:	f7ff fe1b 	bl	8009d9c <malloc>
 800a166:	4602      	mov	r2, r0
 800a168:	6270      	str	r0, [r6, #36]	; 0x24
 800a16a:	b928      	cbnz	r0, 800a178 <__pow5mult+0x40>
 800a16c:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <__pow5mult+0xac>)
 800a16e:	481e      	ldr	r0, [pc, #120]	; (800a1e8 <__pow5mult+0xb0>)
 800a170:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a174:	f000 fce0 	bl	800ab38 <__assert_func>
 800a178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a17c:	6004      	str	r4, [r0, #0]
 800a17e:	60c4      	str	r4, [r0, #12]
 800a180:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a188:	b94c      	cbnz	r4, 800a19e <__pow5mult+0x66>
 800a18a:	f240 2171 	movw	r1, #625	; 0x271
 800a18e:	4630      	mov	r0, r6
 800a190:	f7ff ff16 	bl	8009fc0 <__i2b>
 800a194:	2300      	movs	r3, #0
 800a196:	f8c8 0008 	str.w	r0, [r8, #8]
 800a19a:	4604      	mov	r4, r0
 800a19c:	6003      	str	r3, [r0, #0]
 800a19e:	f04f 0900 	mov.w	r9, #0
 800a1a2:	07eb      	lsls	r3, r5, #31
 800a1a4:	d50a      	bpl.n	800a1bc <__pow5mult+0x84>
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f7ff ff1e 	bl	8009fec <__multiply>
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f7ff fe47 	bl	8009e48 <_Bfree>
 800a1ba:	4647      	mov	r7, r8
 800a1bc:	106d      	asrs	r5, r5, #1
 800a1be:	d00b      	beq.n	800a1d8 <__pow5mult+0xa0>
 800a1c0:	6820      	ldr	r0, [r4, #0]
 800a1c2:	b938      	cbnz	r0, 800a1d4 <__pow5mult+0x9c>
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7ff ff0f 	bl	8009fec <__multiply>
 800a1ce:	6020      	str	r0, [r4, #0]
 800a1d0:	f8c0 9000 	str.w	r9, [r0]
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	e7e4      	b.n	800a1a2 <__pow5mult+0x6a>
 800a1d8:	4638      	mov	r0, r7
 800a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1de:	bf00      	nop
 800a1e0:	0800b670 	.word	0x0800b670
 800a1e4:	0800b435 	.word	0x0800b435
 800a1e8:	0800b51c 	.word	0x0800b51c

0800a1ec <__lshift>:
 800a1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	6849      	ldr	r1, [r1, #4]
 800a1f4:	6923      	ldr	r3, [r4, #16]
 800a1f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1fa:	68a3      	ldr	r3, [r4, #8]
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	4691      	mov	r9, r2
 800a200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a204:	f108 0601 	add.w	r6, r8, #1
 800a208:	42b3      	cmp	r3, r6
 800a20a:	db0b      	blt.n	800a224 <__lshift+0x38>
 800a20c:	4638      	mov	r0, r7
 800a20e:	f7ff fddb 	bl	8009dc8 <_Balloc>
 800a212:	4605      	mov	r5, r0
 800a214:	b948      	cbnz	r0, 800a22a <__lshift+0x3e>
 800a216:	4602      	mov	r2, r0
 800a218:	4b28      	ldr	r3, [pc, #160]	; (800a2bc <__lshift+0xd0>)
 800a21a:	4829      	ldr	r0, [pc, #164]	; (800a2c0 <__lshift+0xd4>)
 800a21c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a220:	f000 fc8a 	bl	800ab38 <__assert_func>
 800a224:	3101      	adds	r1, #1
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	e7ee      	b.n	800a208 <__lshift+0x1c>
 800a22a:	2300      	movs	r3, #0
 800a22c:	f100 0114 	add.w	r1, r0, #20
 800a230:	f100 0210 	add.w	r2, r0, #16
 800a234:	4618      	mov	r0, r3
 800a236:	4553      	cmp	r3, sl
 800a238:	db33      	blt.n	800a2a2 <__lshift+0xb6>
 800a23a:	6920      	ldr	r0, [r4, #16]
 800a23c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a240:	f104 0314 	add.w	r3, r4, #20
 800a244:	f019 091f 	ands.w	r9, r9, #31
 800a248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a24c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a250:	d02b      	beq.n	800a2aa <__lshift+0xbe>
 800a252:	f1c9 0e20 	rsb	lr, r9, #32
 800a256:	468a      	mov	sl, r1
 800a258:	2200      	movs	r2, #0
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	fa00 f009 	lsl.w	r0, r0, r9
 800a260:	4302      	orrs	r2, r0
 800a262:	f84a 2b04 	str.w	r2, [sl], #4
 800a266:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26a:	459c      	cmp	ip, r3
 800a26c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a270:	d8f3      	bhi.n	800a25a <__lshift+0x6e>
 800a272:	ebac 0304 	sub.w	r3, ip, r4
 800a276:	3b15      	subs	r3, #21
 800a278:	f023 0303 	bic.w	r3, r3, #3
 800a27c:	3304      	adds	r3, #4
 800a27e:	f104 0015 	add.w	r0, r4, #21
 800a282:	4584      	cmp	ip, r0
 800a284:	bf38      	it	cc
 800a286:	2304      	movcc	r3, #4
 800a288:	50ca      	str	r2, [r1, r3]
 800a28a:	b10a      	cbz	r2, 800a290 <__lshift+0xa4>
 800a28c:	f108 0602 	add.w	r6, r8, #2
 800a290:	3e01      	subs	r6, #1
 800a292:	4638      	mov	r0, r7
 800a294:	612e      	str	r6, [r5, #16]
 800a296:	4621      	mov	r1, r4
 800a298:	f7ff fdd6 	bl	8009e48 <_Bfree>
 800a29c:	4628      	mov	r0, r5
 800a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	e7c5      	b.n	800a236 <__lshift+0x4a>
 800a2aa:	3904      	subs	r1, #4
 800a2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2b4:	459c      	cmp	ip, r3
 800a2b6:	d8f9      	bhi.n	800a2ac <__lshift+0xc0>
 800a2b8:	e7ea      	b.n	800a290 <__lshift+0xa4>
 800a2ba:	bf00      	nop
 800a2bc:	0800b4ab 	.word	0x0800b4ab
 800a2c0:	0800b51c 	.word	0x0800b51c

0800a2c4 <__mcmp>:
 800a2c4:	b530      	push	{r4, r5, lr}
 800a2c6:	6902      	ldr	r2, [r0, #16]
 800a2c8:	690c      	ldr	r4, [r1, #16]
 800a2ca:	1b12      	subs	r2, r2, r4
 800a2cc:	d10e      	bne.n	800a2ec <__mcmp+0x28>
 800a2ce:	f100 0314 	add.w	r3, r0, #20
 800a2d2:	3114      	adds	r1, #20
 800a2d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2e4:	42a5      	cmp	r5, r4
 800a2e6:	d003      	beq.n	800a2f0 <__mcmp+0x2c>
 800a2e8:	d305      	bcc.n	800a2f6 <__mcmp+0x32>
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	bd30      	pop	{r4, r5, pc}
 800a2f0:	4283      	cmp	r3, r0
 800a2f2:	d3f3      	bcc.n	800a2dc <__mcmp+0x18>
 800a2f4:	e7fa      	b.n	800a2ec <__mcmp+0x28>
 800a2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fa:	e7f7      	b.n	800a2ec <__mcmp+0x28>

0800a2fc <__mdiff>:
 800a2fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	460c      	mov	r4, r1
 800a302:	4606      	mov	r6, r0
 800a304:	4611      	mov	r1, r2
 800a306:	4620      	mov	r0, r4
 800a308:	4617      	mov	r7, r2
 800a30a:	f7ff ffdb 	bl	800a2c4 <__mcmp>
 800a30e:	1e05      	subs	r5, r0, #0
 800a310:	d110      	bne.n	800a334 <__mdiff+0x38>
 800a312:	4629      	mov	r1, r5
 800a314:	4630      	mov	r0, r6
 800a316:	f7ff fd57 	bl	8009dc8 <_Balloc>
 800a31a:	b930      	cbnz	r0, 800a32a <__mdiff+0x2e>
 800a31c:	4b39      	ldr	r3, [pc, #228]	; (800a404 <__mdiff+0x108>)
 800a31e:	4602      	mov	r2, r0
 800a320:	f240 2132 	movw	r1, #562	; 0x232
 800a324:	4838      	ldr	r0, [pc, #224]	; (800a408 <__mdiff+0x10c>)
 800a326:	f000 fc07 	bl	800ab38 <__assert_func>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	bfa4      	itt	ge
 800a336:	463b      	movge	r3, r7
 800a338:	4627      	movge	r7, r4
 800a33a:	4630      	mov	r0, r6
 800a33c:	6879      	ldr	r1, [r7, #4]
 800a33e:	bfa6      	itte	ge
 800a340:	461c      	movge	r4, r3
 800a342:	2500      	movge	r5, #0
 800a344:	2501      	movlt	r5, #1
 800a346:	f7ff fd3f 	bl	8009dc8 <_Balloc>
 800a34a:	b920      	cbnz	r0, 800a356 <__mdiff+0x5a>
 800a34c:	4b2d      	ldr	r3, [pc, #180]	; (800a404 <__mdiff+0x108>)
 800a34e:	4602      	mov	r2, r0
 800a350:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a354:	e7e6      	b.n	800a324 <__mdiff+0x28>
 800a356:	693e      	ldr	r6, [r7, #16]
 800a358:	60c5      	str	r5, [r0, #12]
 800a35a:	6925      	ldr	r5, [r4, #16]
 800a35c:	f107 0114 	add.w	r1, r7, #20
 800a360:	f104 0914 	add.w	r9, r4, #20
 800a364:	f100 0e14 	add.w	lr, r0, #20
 800a368:	f107 0210 	add.w	r2, r7, #16
 800a36c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a370:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a374:	46f2      	mov	sl, lr
 800a376:	2700      	movs	r7, #0
 800a378:	f859 3b04 	ldr.w	r3, [r9], #4
 800a37c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a380:	fa1f f883 	uxth.w	r8, r3
 800a384:	fa17 f78b 	uxtah	r7, r7, fp
 800a388:	0c1b      	lsrs	r3, r3, #16
 800a38a:	eba7 0808 	sub.w	r8, r7, r8
 800a38e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a392:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a396:	fa1f f888 	uxth.w	r8, r8
 800a39a:	141f      	asrs	r7, r3, #16
 800a39c:	454d      	cmp	r5, r9
 800a39e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a3a6:	d8e7      	bhi.n	800a378 <__mdiff+0x7c>
 800a3a8:	1b2b      	subs	r3, r5, r4
 800a3aa:	3b15      	subs	r3, #21
 800a3ac:	f023 0303 	bic.w	r3, r3, #3
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	3415      	adds	r4, #21
 800a3b4:	42a5      	cmp	r5, r4
 800a3b6:	bf38      	it	cc
 800a3b8:	2304      	movcc	r3, #4
 800a3ba:	4419      	add	r1, r3
 800a3bc:	4473      	add	r3, lr
 800a3be:	469e      	mov	lr, r3
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	4565      	cmp	r5, ip
 800a3c4:	d30e      	bcc.n	800a3e4 <__mdiff+0xe8>
 800a3c6:	f10c 0203 	add.w	r2, ip, #3
 800a3ca:	1a52      	subs	r2, r2, r1
 800a3cc:	f022 0203 	bic.w	r2, r2, #3
 800a3d0:	3903      	subs	r1, #3
 800a3d2:	458c      	cmp	ip, r1
 800a3d4:	bf38      	it	cc
 800a3d6:	2200      	movcc	r2, #0
 800a3d8:	441a      	add	r2, r3
 800a3da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a3de:	b17b      	cbz	r3, 800a400 <__mdiff+0x104>
 800a3e0:	6106      	str	r6, [r0, #16]
 800a3e2:	e7a5      	b.n	800a330 <__mdiff+0x34>
 800a3e4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a3e8:	fa17 f488 	uxtah	r4, r7, r8
 800a3ec:	1422      	asrs	r2, r4, #16
 800a3ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a3f2:	b2a4      	uxth	r4, r4
 800a3f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a3f8:	f84e 4b04 	str.w	r4, [lr], #4
 800a3fc:	1417      	asrs	r7, r2, #16
 800a3fe:	e7e0      	b.n	800a3c2 <__mdiff+0xc6>
 800a400:	3e01      	subs	r6, #1
 800a402:	e7ea      	b.n	800a3da <__mdiff+0xde>
 800a404:	0800b4ab 	.word	0x0800b4ab
 800a408:	0800b51c 	.word	0x0800b51c

0800a40c <__d2b>:
 800a40c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a410:	4689      	mov	r9, r1
 800a412:	2101      	movs	r1, #1
 800a414:	ec57 6b10 	vmov	r6, r7, d0
 800a418:	4690      	mov	r8, r2
 800a41a:	f7ff fcd5 	bl	8009dc8 <_Balloc>
 800a41e:	4604      	mov	r4, r0
 800a420:	b930      	cbnz	r0, 800a430 <__d2b+0x24>
 800a422:	4602      	mov	r2, r0
 800a424:	4b25      	ldr	r3, [pc, #148]	; (800a4bc <__d2b+0xb0>)
 800a426:	4826      	ldr	r0, [pc, #152]	; (800a4c0 <__d2b+0xb4>)
 800a428:	f240 310a 	movw	r1, #778	; 0x30a
 800a42c:	f000 fb84 	bl	800ab38 <__assert_func>
 800a430:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a434:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a438:	bb35      	cbnz	r5, 800a488 <__d2b+0x7c>
 800a43a:	2e00      	cmp	r6, #0
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	d028      	beq.n	800a492 <__d2b+0x86>
 800a440:	4668      	mov	r0, sp
 800a442:	9600      	str	r6, [sp, #0]
 800a444:	f7ff fd8c 	bl	8009f60 <__lo0bits>
 800a448:	9900      	ldr	r1, [sp, #0]
 800a44a:	b300      	cbz	r0, 800a48e <__d2b+0x82>
 800a44c:	9a01      	ldr	r2, [sp, #4]
 800a44e:	f1c0 0320 	rsb	r3, r0, #32
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	430b      	orrs	r3, r1
 800a458:	40c2      	lsrs	r2, r0
 800a45a:	6163      	str	r3, [r4, #20]
 800a45c:	9201      	str	r2, [sp, #4]
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	61a3      	str	r3, [r4, #24]
 800a462:	2b00      	cmp	r3, #0
 800a464:	bf14      	ite	ne
 800a466:	2202      	movne	r2, #2
 800a468:	2201      	moveq	r2, #1
 800a46a:	6122      	str	r2, [r4, #16]
 800a46c:	b1d5      	cbz	r5, 800a4a4 <__d2b+0x98>
 800a46e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a472:	4405      	add	r5, r0
 800a474:	f8c9 5000 	str.w	r5, [r9]
 800a478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a47c:	f8c8 0000 	str.w	r0, [r8]
 800a480:	4620      	mov	r0, r4
 800a482:	b003      	add	sp, #12
 800a484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a48c:	e7d5      	b.n	800a43a <__d2b+0x2e>
 800a48e:	6161      	str	r1, [r4, #20]
 800a490:	e7e5      	b.n	800a45e <__d2b+0x52>
 800a492:	a801      	add	r0, sp, #4
 800a494:	f7ff fd64 	bl	8009f60 <__lo0bits>
 800a498:	9b01      	ldr	r3, [sp, #4]
 800a49a:	6163      	str	r3, [r4, #20]
 800a49c:	2201      	movs	r2, #1
 800a49e:	6122      	str	r2, [r4, #16]
 800a4a0:	3020      	adds	r0, #32
 800a4a2:	e7e3      	b.n	800a46c <__d2b+0x60>
 800a4a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4ac:	f8c9 0000 	str.w	r0, [r9]
 800a4b0:	6918      	ldr	r0, [r3, #16]
 800a4b2:	f7ff fd35 	bl	8009f20 <__hi0bits>
 800a4b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4ba:	e7df      	b.n	800a47c <__d2b+0x70>
 800a4bc:	0800b4ab 	.word	0x0800b4ab
 800a4c0:	0800b51c 	.word	0x0800b51c

0800a4c4 <_calloc_r>:
 800a4c4:	b513      	push	{r0, r1, r4, lr}
 800a4c6:	434a      	muls	r2, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	9201      	str	r2, [sp, #4]
 800a4cc:	f000 f85a 	bl	800a584 <_malloc_r>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	b118      	cbz	r0, 800a4dc <_calloc_r+0x18>
 800a4d4:	9a01      	ldr	r2, [sp, #4]
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	f7fe f85e 	bl	8008598 <memset>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	b002      	add	sp, #8
 800a4e0:	bd10      	pop	{r4, pc}
	...

0800a4e4 <_free_r>:
 800a4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	d048      	beq.n	800a57c <_free_r+0x98>
 800a4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ee:	9001      	str	r0, [sp, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4f6:	bfb8      	it	lt
 800a4f8:	18e4      	addlt	r4, r4, r3
 800a4fa:	f000 fca7 	bl	800ae4c <__malloc_lock>
 800a4fe:	4a20      	ldr	r2, [pc, #128]	; (800a580 <_free_r+0x9c>)
 800a500:	9801      	ldr	r0, [sp, #4]
 800a502:	6813      	ldr	r3, [r2, #0]
 800a504:	4615      	mov	r5, r2
 800a506:	b933      	cbnz	r3, 800a516 <_free_r+0x32>
 800a508:	6063      	str	r3, [r4, #4]
 800a50a:	6014      	str	r4, [r2, #0]
 800a50c:	b003      	add	sp, #12
 800a50e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a512:	f000 bca1 	b.w	800ae58 <__malloc_unlock>
 800a516:	42a3      	cmp	r3, r4
 800a518:	d90b      	bls.n	800a532 <_free_r+0x4e>
 800a51a:	6821      	ldr	r1, [r4, #0]
 800a51c:	1862      	adds	r2, r4, r1
 800a51e:	4293      	cmp	r3, r2
 800a520:	bf04      	itt	eq
 800a522:	681a      	ldreq	r2, [r3, #0]
 800a524:	685b      	ldreq	r3, [r3, #4]
 800a526:	6063      	str	r3, [r4, #4]
 800a528:	bf04      	itt	eq
 800a52a:	1852      	addeq	r2, r2, r1
 800a52c:	6022      	streq	r2, [r4, #0]
 800a52e:	602c      	str	r4, [r5, #0]
 800a530:	e7ec      	b.n	800a50c <_free_r+0x28>
 800a532:	461a      	mov	r2, r3
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	b10b      	cbz	r3, 800a53c <_free_r+0x58>
 800a538:	42a3      	cmp	r3, r4
 800a53a:	d9fa      	bls.n	800a532 <_free_r+0x4e>
 800a53c:	6811      	ldr	r1, [r2, #0]
 800a53e:	1855      	adds	r5, r2, r1
 800a540:	42a5      	cmp	r5, r4
 800a542:	d10b      	bne.n	800a55c <_free_r+0x78>
 800a544:	6824      	ldr	r4, [r4, #0]
 800a546:	4421      	add	r1, r4
 800a548:	1854      	adds	r4, r2, r1
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	6011      	str	r1, [r2, #0]
 800a54e:	d1dd      	bne.n	800a50c <_free_r+0x28>
 800a550:	681c      	ldr	r4, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	6053      	str	r3, [r2, #4]
 800a556:	4421      	add	r1, r4
 800a558:	6011      	str	r1, [r2, #0]
 800a55a:	e7d7      	b.n	800a50c <_free_r+0x28>
 800a55c:	d902      	bls.n	800a564 <_free_r+0x80>
 800a55e:	230c      	movs	r3, #12
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	e7d3      	b.n	800a50c <_free_r+0x28>
 800a564:	6825      	ldr	r5, [r4, #0]
 800a566:	1961      	adds	r1, r4, r5
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf04      	itt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	6063      	str	r3, [r4, #4]
 800a572:	bf04      	itt	eq
 800a574:	1949      	addeq	r1, r1, r5
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	6054      	str	r4, [r2, #4]
 800a57a:	e7c7      	b.n	800a50c <_free_r+0x28>
 800a57c:	b003      	add	sp, #12
 800a57e:	bd30      	pop	{r4, r5, pc}
 800a580:	20000458 	.word	0x20000458

0800a584 <_malloc_r>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	1ccd      	adds	r5, r1, #3
 800a588:	f025 0503 	bic.w	r5, r5, #3
 800a58c:	3508      	adds	r5, #8
 800a58e:	2d0c      	cmp	r5, #12
 800a590:	bf38      	it	cc
 800a592:	250c      	movcc	r5, #12
 800a594:	2d00      	cmp	r5, #0
 800a596:	4606      	mov	r6, r0
 800a598:	db01      	blt.n	800a59e <_malloc_r+0x1a>
 800a59a:	42a9      	cmp	r1, r5
 800a59c:	d903      	bls.n	800a5a6 <_malloc_r+0x22>
 800a59e:	230c      	movs	r3, #12
 800a5a0:	6033      	str	r3, [r6, #0]
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a6:	f000 fc51 	bl	800ae4c <__malloc_lock>
 800a5aa:	4921      	ldr	r1, [pc, #132]	; (800a630 <_malloc_r+0xac>)
 800a5ac:	680a      	ldr	r2, [r1, #0]
 800a5ae:	4614      	mov	r4, r2
 800a5b0:	b99c      	cbnz	r4, 800a5da <_malloc_r+0x56>
 800a5b2:	4f20      	ldr	r7, [pc, #128]	; (800a634 <_malloc_r+0xb0>)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	b923      	cbnz	r3, 800a5c2 <_malloc_r+0x3e>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f000 f996 	bl	800a8ec <_sbrk_r>
 800a5c0:	6038      	str	r0, [r7, #0]
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f000 f991 	bl	800a8ec <_sbrk_r>
 800a5ca:	1c43      	adds	r3, r0, #1
 800a5cc:	d123      	bne.n	800a616 <_malloc_r+0x92>
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	6033      	str	r3, [r6, #0]
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 fc40 	bl	800ae58 <__malloc_unlock>
 800a5d8:	e7e3      	b.n	800a5a2 <_malloc_r+0x1e>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	1b5b      	subs	r3, r3, r5
 800a5de:	d417      	bmi.n	800a610 <_malloc_r+0x8c>
 800a5e0:	2b0b      	cmp	r3, #11
 800a5e2:	d903      	bls.n	800a5ec <_malloc_r+0x68>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	441c      	add	r4, r3
 800a5e8:	6025      	str	r5, [r4, #0]
 800a5ea:	e004      	b.n	800a5f6 <_malloc_r+0x72>
 800a5ec:	6863      	ldr	r3, [r4, #4]
 800a5ee:	42a2      	cmp	r2, r4
 800a5f0:	bf0c      	ite	eq
 800a5f2:	600b      	streq	r3, [r1, #0]
 800a5f4:	6053      	strne	r3, [r2, #4]
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f000 fc2e 	bl	800ae58 <__malloc_unlock>
 800a5fc:	f104 000b 	add.w	r0, r4, #11
 800a600:	1d23      	adds	r3, r4, #4
 800a602:	f020 0007 	bic.w	r0, r0, #7
 800a606:	1ac2      	subs	r2, r0, r3
 800a608:	d0cc      	beq.n	800a5a4 <_malloc_r+0x20>
 800a60a:	1a1b      	subs	r3, r3, r0
 800a60c:	50a3      	str	r3, [r4, r2]
 800a60e:	e7c9      	b.n	800a5a4 <_malloc_r+0x20>
 800a610:	4622      	mov	r2, r4
 800a612:	6864      	ldr	r4, [r4, #4]
 800a614:	e7cc      	b.n	800a5b0 <_malloc_r+0x2c>
 800a616:	1cc4      	adds	r4, r0, #3
 800a618:	f024 0403 	bic.w	r4, r4, #3
 800a61c:	42a0      	cmp	r0, r4
 800a61e:	d0e3      	beq.n	800a5e8 <_malloc_r+0x64>
 800a620:	1a21      	subs	r1, r4, r0
 800a622:	4630      	mov	r0, r6
 800a624:	f000 f962 	bl	800a8ec <_sbrk_r>
 800a628:	3001      	adds	r0, #1
 800a62a:	d1dd      	bne.n	800a5e8 <_malloc_r+0x64>
 800a62c:	e7cf      	b.n	800a5ce <_malloc_r+0x4a>
 800a62e:	bf00      	nop
 800a630:	20000458 	.word	0x20000458
 800a634:	2000045c 	.word	0x2000045c

0800a638 <__sfputc_r>:
 800a638:	6893      	ldr	r3, [r2, #8]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	b410      	push	{r4}
 800a640:	6093      	str	r3, [r2, #8]
 800a642:	da08      	bge.n	800a656 <__sfputc_r+0x1e>
 800a644:	6994      	ldr	r4, [r2, #24]
 800a646:	42a3      	cmp	r3, r4
 800a648:	db01      	blt.n	800a64e <__sfputc_r+0x16>
 800a64a:	290a      	cmp	r1, #10
 800a64c:	d103      	bne.n	800a656 <__sfputc_r+0x1e>
 800a64e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a652:	f000 b99f 	b.w	800a994 <__swbuf_r>
 800a656:	6813      	ldr	r3, [r2, #0]
 800a658:	1c58      	adds	r0, r3, #1
 800a65a:	6010      	str	r0, [r2, #0]
 800a65c:	7019      	strb	r1, [r3, #0]
 800a65e:	4608      	mov	r0, r1
 800a660:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <__sfputs_r>:
 800a666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a668:	4606      	mov	r6, r0
 800a66a:	460f      	mov	r7, r1
 800a66c:	4614      	mov	r4, r2
 800a66e:	18d5      	adds	r5, r2, r3
 800a670:	42ac      	cmp	r4, r5
 800a672:	d101      	bne.n	800a678 <__sfputs_r+0x12>
 800a674:	2000      	movs	r0, #0
 800a676:	e007      	b.n	800a688 <__sfputs_r+0x22>
 800a678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67c:	463a      	mov	r2, r7
 800a67e:	4630      	mov	r0, r6
 800a680:	f7ff ffda 	bl	800a638 <__sfputc_r>
 800a684:	1c43      	adds	r3, r0, #1
 800a686:	d1f3      	bne.n	800a670 <__sfputs_r+0xa>
 800a688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a68c <_vfiprintf_r>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	460d      	mov	r5, r1
 800a692:	b09d      	sub	sp, #116	; 0x74
 800a694:	4614      	mov	r4, r2
 800a696:	4698      	mov	r8, r3
 800a698:	4606      	mov	r6, r0
 800a69a:	b118      	cbz	r0, 800a6a4 <_vfiprintf_r+0x18>
 800a69c:	6983      	ldr	r3, [r0, #24]
 800a69e:	b90b      	cbnz	r3, 800a6a4 <_vfiprintf_r+0x18>
 800a6a0:	f7ff fad6 	bl	8009c50 <__sinit>
 800a6a4:	4b89      	ldr	r3, [pc, #548]	; (800a8cc <_vfiprintf_r+0x240>)
 800a6a6:	429d      	cmp	r5, r3
 800a6a8:	d11b      	bne.n	800a6e2 <_vfiprintf_r+0x56>
 800a6aa:	6875      	ldr	r5, [r6, #4]
 800a6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ae:	07d9      	lsls	r1, r3, #31
 800a6b0:	d405      	bmi.n	800a6be <_vfiprintf_r+0x32>
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	059a      	lsls	r2, r3, #22
 800a6b6:	d402      	bmi.n	800a6be <_vfiprintf_r+0x32>
 800a6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ba:	f7ff fb6c 	bl	8009d96 <__retarget_lock_acquire_recursive>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	071b      	lsls	r3, r3, #28
 800a6c2:	d501      	bpl.n	800a6c8 <_vfiprintf_r+0x3c>
 800a6c4:	692b      	ldr	r3, [r5, #16]
 800a6c6:	b9eb      	cbnz	r3, 800a704 <_vfiprintf_r+0x78>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f000 f9c6 	bl	800aa5c <__swsetup_r>
 800a6d0:	b1c0      	cbz	r0, 800a704 <_vfiprintf_r+0x78>
 800a6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6d4:	07dc      	lsls	r4, r3, #31
 800a6d6:	d50e      	bpl.n	800a6f6 <_vfiprintf_r+0x6a>
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	b01d      	add	sp, #116	; 0x74
 800a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e2:	4b7b      	ldr	r3, [pc, #492]	; (800a8d0 <_vfiprintf_r+0x244>)
 800a6e4:	429d      	cmp	r5, r3
 800a6e6:	d101      	bne.n	800a6ec <_vfiprintf_r+0x60>
 800a6e8:	68b5      	ldr	r5, [r6, #8]
 800a6ea:	e7df      	b.n	800a6ac <_vfiprintf_r+0x20>
 800a6ec:	4b79      	ldr	r3, [pc, #484]	; (800a8d4 <_vfiprintf_r+0x248>)
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	bf08      	it	eq
 800a6f2:	68f5      	ldreq	r5, [r6, #12]
 800a6f4:	e7da      	b.n	800a6ac <_vfiprintf_r+0x20>
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	0598      	lsls	r0, r3, #22
 800a6fa:	d4ed      	bmi.n	800a6d8 <_vfiprintf_r+0x4c>
 800a6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6fe:	f7ff fb4b 	bl	8009d98 <__retarget_lock_release_recursive>
 800a702:	e7e9      	b.n	800a6d8 <_vfiprintf_r+0x4c>
 800a704:	2300      	movs	r3, #0
 800a706:	9309      	str	r3, [sp, #36]	; 0x24
 800a708:	2320      	movs	r3, #32
 800a70a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a70e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a712:	2330      	movs	r3, #48	; 0x30
 800a714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8d8 <_vfiprintf_r+0x24c>
 800a718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a71c:	f04f 0901 	mov.w	r9, #1
 800a720:	4623      	mov	r3, r4
 800a722:	469a      	mov	sl, r3
 800a724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a728:	b10a      	cbz	r2, 800a72e <_vfiprintf_r+0xa2>
 800a72a:	2a25      	cmp	r2, #37	; 0x25
 800a72c:	d1f9      	bne.n	800a722 <_vfiprintf_r+0x96>
 800a72e:	ebba 0b04 	subs.w	fp, sl, r4
 800a732:	d00b      	beq.n	800a74c <_vfiprintf_r+0xc0>
 800a734:	465b      	mov	r3, fp
 800a736:	4622      	mov	r2, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	4630      	mov	r0, r6
 800a73c:	f7ff ff93 	bl	800a666 <__sfputs_r>
 800a740:	3001      	adds	r0, #1
 800a742:	f000 80aa 	beq.w	800a89a <_vfiprintf_r+0x20e>
 800a746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a748:	445a      	add	r2, fp
 800a74a:	9209      	str	r2, [sp, #36]	; 0x24
 800a74c:	f89a 3000 	ldrb.w	r3, [sl]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80a2 	beq.w	800a89a <_vfiprintf_r+0x20e>
 800a756:	2300      	movs	r3, #0
 800a758:	f04f 32ff 	mov.w	r2, #4294967295
 800a75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a760:	f10a 0a01 	add.w	sl, sl, #1
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	9307      	str	r3, [sp, #28]
 800a768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a76c:	931a      	str	r3, [sp, #104]	; 0x68
 800a76e:	4654      	mov	r4, sl
 800a770:	2205      	movs	r2, #5
 800a772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a776:	4858      	ldr	r0, [pc, #352]	; (800a8d8 <_vfiprintf_r+0x24c>)
 800a778:	f7f5 fd32 	bl	80001e0 <memchr>
 800a77c:	9a04      	ldr	r2, [sp, #16]
 800a77e:	b9d8      	cbnz	r0, 800a7b8 <_vfiprintf_r+0x12c>
 800a780:	06d1      	lsls	r1, r2, #27
 800a782:	bf44      	itt	mi
 800a784:	2320      	movmi	r3, #32
 800a786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a78a:	0713      	lsls	r3, r2, #28
 800a78c:	bf44      	itt	mi
 800a78e:	232b      	movmi	r3, #43	; 0x2b
 800a790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a794:	f89a 3000 	ldrb.w	r3, [sl]
 800a798:	2b2a      	cmp	r3, #42	; 0x2a
 800a79a:	d015      	beq.n	800a7c8 <_vfiprintf_r+0x13c>
 800a79c:	9a07      	ldr	r2, [sp, #28]
 800a79e:	4654      	mov	r4, sl
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	f04f 0c0a 	mov.w	ip, #10
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ac:	3b30      	subs	r3, #48	; 0x30
 800a7ae:	2b09      	cmp	r3, #9
 800a7b0:	d94e      	bls.n	800a850 <_vfiprintf_r+0x1c4>
 800a7b2:	b1b0      	cbz	r0, 800a7e2 <_vfiprintf_r+0x156>
 800a7b4:	9207      	str	r2, [sp, #28]
 800a7b6:	e014      	b.n	800a7e2 <_vfiprintf_r+0x156>
 800a7b8:	eba0 0308 	sub.w	r3, r0, r8
 800a7bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	46a2      	mov	sl, r4
 800a7c6:	e7d2      	b.n	800a76e <_vfiprintf_r+0xe2>
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	1d19      	adds	r1, r3, #4
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	9103      	str	r1, [sp, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bfbb      	ittet	lt
 800a7d4:	425b      	neglt	r3, r3
 800a7d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7da:	9307      	strge	r3, [sp, #28]
 800a7dc:	9307      	strlt	r3, [sp, #28]
 800a7de:	bfb8      	it	lt
 800a7e0:	9204      	strlt	r2, [sp, #16]
 800a7e2:	7823      	ldrb	r3, [r4, #0]
 800a7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7e6:	d10c      	bne.n	800a802 <_vfiprintf_r+0x176>
 800a7e8:	7863      	ldrb	r3, [r4, #1]
 800a7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ec:	d135      	bne.n	800a85a <_vfiprintf_r+0x1ce>
 800a7ee:	9b03      	ldr	r3, [sp, #12]
 800a7f0:	1d1a      	adds	r2, r3, #4
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	9203      	str	r2, [sp, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bfb8      	it	lt
 800a7fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7fe:	3402      	adds	r4, #2
 800a800:	9305      	str	r3, [sp, #20]
 800a802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8e8 <_vfiprintf_r+0x25c>
 800a806:	7821      	ldrb	r1, [r4, #0]
 800a808:	2203      	movs	r2, #3
 800a80a:	4650      	mov	r0, sl
 800a80c:	f7f5 fce8 	bl	80001e0 <memchr>
 800a810:	b140      	cbz	r0, 800a824 <_vfiprintf_r+0x198>
 800a812:	2340      	movs	r3, #64	; 0x40
 800a814:	eba0 000a 	sub.w	r0, r0, sl
 800a818:	fa03 f000 	lsl.w	r0, r3, r0
 800a81c:	9b04      	ldr	r3, [sp, #16]
 800a81e:	4303      	orrs	r3, r0
 800a820:	3401      	adds	r4, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a828:	482c      	ldr	r0, [pc, #176]	; (800a8dc <_vfiprintf_r+0x250>)
 800a82a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a82e:	2206      	movs	r2, #6
 800a830:	f7f5 fcd6 	bl	80001e0 <memchr>
 800a834:	2800      	cmp	r0, #0
 800a836:	d03f      	beq.n	800a8b8 <_vfiprintf_r+0x22c>
 800a838:	4b29      	ldr	r3, [pc, #164]	; (800a8e0 <_vfiprintf_r+0x254>)
 800a83a:	bb1b      	cbnz	r3, 800a884 <_vfiprintf_r+0x1f8>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	3307      	adds	r3, #7
 800a840:	f023 0307 	bic.w	r3, r3, #7
 800a844:	3308      	adds	r3, #8
 800a846:	9303      	str	r3, [sp, #12]
 800a848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84a:	443b      	add	r3, r7
 800a84c:	9309      	str	r3, [sp, #36]	; 0x24
 800a84e:	e767      	b.n	800a720 <_vfiprintf_r+0x94>
 800a850:	fb0c 3202 	mla	r2, ip, r2, r3
 800a854:	460c      	mov	r4, r1
 800a856:	2001      	movs	r0, #1
 800a858:	e7a5      	b.n	800a7a6 <_vfiprintf_r+0x11a>
 800a85a:	2300      	movs	r3, #0
 800a85c:	3401      	adds	r4, #1
 800a85e:	9305      	str	r3, [sp, #20]
 800a860:	4619      	mov	r1, r3
 800a862:	f04f 0c0a 	mov.w	ip, #10
 800a866:	4620      	mov	r0, r4
 800a868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a86c:	3a30      	subs	r2, #48	; 0x30
 800a86e:	2a09      	cmp	r2, #9
 800a870:	d903      	bls.n	800a87a <_vfiprintf_r+0x1ee>
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0c5      	beq.n	800a802 <_vfiprintf_r+0x176>
 800a876:	9105      	str	r1, [sp, #20]
 800a878:	e7c3      	b.n	800a802 <_vfiprintf_r+0x176>
 800a87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a87e:	4604      	mov	r4, r0
 800a880:	2301      	movs	r3, #1
 800a882:	e7f0      	b.n	800a866 <_vfiprintf_r+0x1da>
 800a884:	ab03      	add	r3, sp, #12
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	462a      	mov	r2, r5
 800a88a:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <_vfiprintf_r+0x258>)
 800a88c:	a904      	add	r1, sp, #16
 800a88e:	4630      	mov	r0, r6
 800a890:	f7fd ff2a 	bl	80086e8 <_printf_float>
 800a894:	4607      	mov	r7, r0
 800a896:	1c78      	adds	r0, r7, #1
 800a898:	d1d6      	bne.n	800a848 <_vfiprintf_r+0x1bc>
 800a89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a89c:	07d9      	lsls	r1, r3, #31
 800a89e:	d405      	bmi.n	800a8ac <_vfiprintf_r+0x220>
 800a8a0:	89ab      	ldrh	r3, [r5, #12]
 800a8a2:	059a      	lsls	r2, r3, #22
 800a8a4:	d402      	bmi.n	800a8ac <_vfiprintf_r+0x220>
 800a8a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8a8:	f7ff fa76 	bl	8009d98 <__retarget_lock_release_recursive>
 800a8ac:	89ab      	ldrh	r3, [r5, #12]
 800a8ae:	065b      	lsls	r3, r3, #25
 800a8b0:	f53f af12 	bmi.w	800a6d8 <_vfiprintf_r+0x4c>
 800a8b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8b6:	e711      	b.n	800a6dc <_vfiprintf_r+0x50>
 800a8b8:	ab03      	add	r3, sp, #12
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	462a      	mov	r2, r5
 800a8be:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <_vfiprintf_r+0x258>)
 800a8c0:	a904      	add	r1, sp, #16
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7fe f9b4 	bl	8008c30 <_printf_i>
 800a8c8:	e7e4      	b.n	800a894 <_vfiprintf_r+0x208>
 800a8ca:	bf00      	nop
 800a8cc:	0800b4dc 	.word	0x0800b4dc
 800a8d0:	0800b4fc 	.word	0x0800b4fc
 800a8d4:	0800b4bc 	.word	0x0800b4bc
 800a8d8:	0800b67c 	.word	0x0800b67c
 800a8dc:	0800b686 	.word	0x0800b686
 800a8e0:	080086e9 	.word	0x080086e9
 800a8e4:	0800a667 	.word	0x0800a667
 800a8e8:	0800b682 	.word	0x0800b682

0800a8ec <_sbrk_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4d06      	ldr	r5, [pc, #24]	; (800a908 <_sbrk_r+0x1c>)
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	f7f8 fed4 	bl	80036a4 <_sbrk>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d102      	bne.n	800a906 <_sbrk_r+0x1a>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	b103      	cbz	r3, 800a906 <_sbrk_r+0x1a>
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	2000065c 	.word	0x2000065c

0800a90c <__sread>:
 800a90c:	b510      	push	{r4, lr}
 800a90e:	460c      	mov	r4, r1
 800a910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a914:	f000 faa6 	bl	800ae64 <_read_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	bfab      	itete	ge
 800a91c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a91e:	89a3      	ldrhlt	r3, [r4, #12]
 800a920:	181b      	addge	r3, r3, r0
 800a922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a926:	bfac      	ite	ge
 800a928:	6563      	strge	r3, [r4, #84]	; 0x54
 800a92a:	81a3      	strhlt	r3, [r4, #12]
 800a92c:	bd10      	pop	{r4, pc}

0800a92e <__swrite>:
 800a92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a932:	461f      	mov	r7, r3
 800a934:	898b      	ldrh	r3, [r1, #12]
 800a936:	05db      	lsls	r3, r3, #23
 800a938:	4605      	mov	r5, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	4616      	mov	r6, r2
 800a93e:	d505      	bpl.n	800a94c <__swrite+0x1e>
 800a940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a944:	2302      	movs	r3, #2
 800a946:	2200      	movs	r2, #0
 800a948:	f000 f9f8 	bl	800ad3c <_lseek_r>
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a956:	81a3      	strh	r3, [r4, #12]
 800a958:	4632      	mov	r2, r6
 800a95a:	463b      	mov	r3, r7
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a962:	f000 b869 	b.w	800aa38 <_write_r>

0800a966 <__sseek>:
 800a966:	b510      	push	{r4, lr}
 800a968:	460c      	mov	r4, r1
 800a96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96e:	f000 f9e5 	bl	800ad3c <_lseek_r>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	bf15      	itete	ne
 800a978:	6560      	strne	r0, [r4, #84]	; 0x54
 800a97a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a97e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a982:	81a3      	strheq	r3, [r4, #12]
 800a984:	bf18      	it	ne
 800a986:	81a3      	strhne	r3, [r4, #12]
 800a988:	bd10      	pop	{r4, pc}

0800a98a <__sclose>:
 800a98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98e:	f000 b8f1 	b.w	800ab74 <_close_r>
	...

0800a994 <__swbuf_r>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	460e      	mov	r6, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	4605      	mov	r5, r0
 800a99c:	b118      	cbz	r0, 800a9a6 <__swbuf_r+0x12>
 800a99e:	6983      	ldr	r3, [r0, #24]
 800a9a0:	b90b      	cbnz	r3, 800a9a6 <__swbuf_r+0x12>
 800a9a2:	f7ff f955 	bl	8009c50 <__sinit>
 800a9a6:	4b21      	ldr	r3, [pc, #132]	; (800aa2c <__swbuf_r+0x98>)
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	d12b      	bne.n	800aa04 <__swbuf_r+0x70>
 800a9ac:	686c      	ldr	r4, [r5, #4]
 800a9ae:	69a3      	ldr	r3, [r4, #24]
 800a9b0:	60a3      	str	r3, [r4, #8]
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	071a      	lsls	r2, r3, #28
 800a9b6:	d52f      	bpl.n	800aa18 <__swbuf_r+0x84>
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	b36b      	cbz	r3, 800aa18 <__swbuf_r+0x84>
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	1ac0      	subs	r0, r0, r3
 800a9c2:	6963      	ldr	r3, [r4, #20]
 800a9c4:	b2f6      	uxtb	r6, r6
 800a9c6:	4283      	cmp	r3, r0
 800a9c8:	4637      	mov	r7, r6
 800a9ca:	dc04      	bgt.n	800a9d6 <__swbuf_r+0x42>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f000 f966 	bl	800aca0 <_fflush_r>
 800a9d4:	bb30      	cbnz	r0, 800aa24 <__swbuf_r+0x90>
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	60a3      	str	r3, [r4, #8]
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	6022      	str	r2, [r4, #0]
 800a9e2:	701e      	strb	r6, [r3, #0]
 800a9e4:	6963      	ldr	r3, [r4, #20]
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	4283      	cmp	r3, r0
 800a9ea:	d004      	beq.n	800a9f6 <__swbuf_r+0x62>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d506      	bpl.n	800aa00 <__swbuf_r+0x6c>
 800a9f2:	2e0a      	cmp	r6, #10
 800a9f4:	d104      	bne.n	800aa00 <__swbuf_r+0x6c>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	f000 f951 	bl	800aca0 <_fflush_r>
 800a9fe:	b988      	cbnz	r0, 800aa24 <__swbuf_r+0x90>
 800aa00:	4638      	mov	r0, r7
 800aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <__swbuf_r+0x9c>)
 800aa06:	429c      	cmp	r4, r3
 800aa08:	d101      	bne.n	800aa0e <__swbuf_r+0x7a>
 800aa0a:	68ac      	ldr	r4, [r5, #8]
 800aa0c:	e7cf      	b.n	800a9ae <__swbuf_r+0x1a>
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <__swbuf_r+0xa0>)
 800aa10:	429c      	cmp	r4, r3
 800aa12:	bf08      	it	eq
 800aa14:	68ec      	ldreq	r4, [r5, #12]
 800aa16:	e7ca      	b.n	800a9ae <__swbuf_r+0x1a>
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 f81e 	bl	800aa5c <__swsetup_r>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d0cb      	beq.n	800a9bc <__swbuf_r+0x28>
 800aa24:	f04f 37ff 	mov.w	r7, #4294967295
 800aa28:	e7ea      	b.n	800aa00 <__swbuf_r+0x6c>
 800aa2a:	bf00      	nop
 800aa2c:	0800b4dc 	.word	0x0800b4dc
 800aa30:	0800b4fc 	.word	0x0800b4fc
 800aa34:	0800b4bc 	.word	0x0800b4bc

0800aa38 <_write_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d07      	ldr	r5, [pc, #28]	; (800aa58 <_write_r+0x20>)
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	4608      	mov	r0, r1
 800aa40:	4611      	mov	r1, r2
 800aa42:	2200      	movs	r2, #0
 800aa44:	602a      	str	r2, [r5, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	f7f8 fddc 	bl	8003604 <_write>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_write_r+0x1e>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_write_r+0x1e>
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	2000065c 	.word	0x2000065c

0800aa5c <__swsetup_r>:
 800aa5c:	4b32      	ldr	r3, [pc, #200]	; (800ab28 <__swsetup_r+0xcc>)
 800aa5e:	b570      	push	{r4, r5, r6, lr}
 800aa60:	681d      	ldr	r5, [r3, #0]
 800aa62:	4606      	mov	r6, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	b125      	cbz	r5, 800aa72 <__swsetup_r+0x16>
 800aa68:	69ab      	ldr	r3, [r5, #24]
 800aa6a:	b913      	cbnz	r3, 800aa72 <__swsetup_r+0x16>
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f7ff f8ef 	bl	8009c50 <__sinit>
 800aa72:	4b2e      	ldr	r3, [pc, #184]	; (800ab2c <__swsetup_r+0xd0>)
 800aa74:	429c      	cmp	r4, r3
 800aa76:	d10f      	bne.n	800aa98 <__swsetup_r+0x3c>
 800aa78:	686c      	ldr	r4, [r5, #4]
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa80:	0719      	lsls	r1, r3, #28
 800aa82:	d42c      	bmi.n	800aade <__swsetup_r+0x82>
 800aa84:	06dd      	lsls	r5, r3, #27
 800aa86:	d411      	bmi.n	800aaac <__swsetup_r+0x50>
 800aa88:	2309      	movs	r3, #9
 800aa8a:	6033      	str	r3, [r6, #0]
 800aa8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa90:	81a3      	strh	r3, [r4, #12]
 800aa92:	f04f 30ff 	mov.w	r0, #4294967295
 800aa96:	e03e      	b.n	800ab16 <__swsetup_r+0xba>
 800aa98:	4b25      	ldr	r3, [pc, #148]	; (800ab30 <__swsetup_r+0xd4>)
 800aa9a:	429c      	cmp	r4, r3
 800aa9c:	d101      	bne.n	800aaa2 <__swsetup_r+0x46>
 800aa9e:	68ac      	ldr	r4, [r5, #8]
 800aaa0:	e7eb      	b.n	800aa7a <__swsetup_r+0x1e>
 800aaa2:	4b24      	ldr	r3, [pc, #144]	; (800ab34 <__swsetup_r+0xd8>)
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	bf08      	it	eq
 800aaa8:	68ec      	ldreq	r4, [r5, #12]
 800aaaa:	e7e6      	b.n	800aa7a <__swsetup_r+0x1e>
 800aaac:	0758      	lsls	r0, r3, #29
 800aaae:	d512      	bpl.n	800aad6 <__swsetup_r+0x7a>
 800aab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aab2:	b141      	cbz	r1, 800aac6 <__swsetup_r+0x6a>
 800aab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab8:	4299      	cmp	r1, r3
 800aaba:	d002      	beq.n	800aac2 <__swsetup_r+0x66>
 800aabc:	4630      	mov	r0, r6
 800aabe:	f7ff fd11 	bl	800a4e4 <_free_r>
 800aac2:	2300      	movs	r3, #0
 800aac4:	6363      	str	r3, [r4, #52]	; 0x34
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	2300      	movs	r3, #0
 800aad0:	6063      	str	r3, [r4, #4]
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f043 0308 	orr.w	r3, r3, #8
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	6923      	ldr	r3, [r4, #16]
 800aae0:	b94b      	cbnz	r3, 800aaf6 <__swsetup_r+0x9a>
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaec:	d003      	beq.n	800aaf6 <__swsetup_r+0x9a>
 800aaee:	4621      	mov	r1, r4
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f000 f959 	bl	800ada8 <__smakebuf_r>
 800aaf6:	89a0      	ldrh	r0, [r4, #12]
 800aaf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aafc:	f010 0301 	ands.w	r3, r0, #1
 800ab00:	d00a      	beq.n	800ab18 <__swsetup_r+0xbc>
 800ab02:	2300      	movs	r3, #0
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	6963      	ldr	r3, [r4, #20]
 800ab08:	425b      	negs	r3, r3
 800ab0a:	61a3      	str	r3, [r4, #24]
 800ab0c:	6923      	ldr	r3, [r4, #16]
 800ab0e:	b943      	cbnz	r3, 800ab22 <__swsetup_r+0xc6>
 800ab10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab14:	d1ba      	bne.n	800aa8c <__swsetup_r+0x30>
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	0781      	lsls	r1, r0, #30
 800ab1a:	bf58      	it	pl
 800ab1c:	6963      	ldrpl	r3, [r4, #20]
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	e7f4      	b.n	800ab0c <__swsetup_r+0xb0>
 800ab22:	2000      	movs	r0, #0
 800ab24:	e7f7      	b.n	800ab16 <__swsetup_r+0xba>
 800ab26:	bf00      	nop
 800ab28:	20000184 	.word	0x20000184
 800ab2c:	0800b4dc 	.word	0x0800b4dc
 800ab30:	0800b4fc 	.word	0x0800b4fc
 800ab34:	0800b4bc 	.word	0x0800b4bc

0800ab38 <__assert_func>:
 800ab38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab3a:	4614      	mov	r4, r2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4b09      	ldr	r3, [pc, #36]	; (800ab64 <__assert_func+0x2c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4605      	mov	r5, r0
 800ab44:	68d8      	ldr	r0, [r3, #12]
 800ab46:	b14c      	cbz	r4, 800ab5c <__assert_func+0x24>
 800ab48:	4b07      	ldr	r3, [pc, #28]	; (800ab68 <__assert_func+0x30>)
 800ab4a:	9100      	str	r1, [sp, #0]
 800ab4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab50:	4906      	ldr	r1, [pc, #24]	; (800ab6c <__assert_func+0x34>)
 800ab52:	462b      	mov	r3, r5
 800ab54:	f000 f8e0 	bl	800ad18 <fiprintf>
 800ab58:	f000 f9a3 	bl	800aea2 <abort>
 800ab5c:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <__assert_func+0x38>)
 800ab5e:	461c      	mov	r4, r3
 800ab60:	e7f3      	b.n	800ab4a <__assert_func+0x12>
 800ab62:	bf00      	nop
 800ab64:	20000184 	.word	0x20000184
 800ab68:	0800b68d 	.word	0x0800b68d
 800ab6c:	0800b69a 	.word	0x0800b69a
 800ab70:	0800b6c8 	.word	0x0800b6c8

0800ab74 <_close_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d06      	ldr	r5, [pc, #24]	; (800ab90 <_close_r+0x1c>)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	f7f8 fd5c 	bl	800363c <_close>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_close_r+0x1a>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_close_r+0x1a>
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	2000065c 	.word	0x2000065c

0800ab94 <__sflush_r>:
 800ab94:	898a      	ldrh	r2, [r1, #12]
 800ab96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	0710      	lsls	r0, r2, #28
 800ab9e:	460c      	mov	r4, r1
 800aba0:	d458      	bmi.n	800ac54 <__sflush_r+0xc0>
 800aba2:	684b      	ldr	r3, [r1, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	dc05      	bgt.n	800abb4 <__sflush_r+0x20>
 800aba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	dc02      	bgt.n	800abb4 <__sflush_r+0x20>
 800abae:	2000      	movs	r0, #0
 800abb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	d0f9      	beq.n	800abae <__sflush_r+0x1a>
 800abba:	2300      	movs	r3, #0
 800abbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abc0:	682f      	ldr	r7, [r5, #0]
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	d032      	beq.n	800ac2c <__sflush_r+0x98>
 800abc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	075a      	lsls	r2, r3, #29
 800abcc:	d505      	bpl.n	800abda <__sflush_r+0x46>
 800abce:	6863      	ldr	r3, [r4, #4]
 800abd0:	1ac0      	subs	r0, r0, r3
 800abd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abd4:	b10b      	cbz	r3, 800abda <__sflush_r+0x46>
 800abd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abd8:	1ac0      	subs	r0, r0, r3
 800abda:	2300      	movs	r3, #0
 800abdc:	4602      	mov	r2, r0
 800abde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abe0:	6a21      	ldr	r1, [r4, #32]
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b0      	blx	r6
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	d106      	bne.n	800abfa <__sflush_r+0x66>
 800abec:	6829      	ldr	r1, [r5, #0]
 800abee:	291d      	cmp	r1, #29
 800abf0:	d82c      	bhi.n	800ac4c <__sflush_r+0xb8>
 800abf2:	4a2a      	ldr	r2, [pc, #168]	; (800ac9c <__sflush_r+0x108>)
 800abf4:	40ca      	lsrs	r2, r1
 800abf6:	07d6      	lsls	r6, r2, #31
 800abf8:	d528      	bpl.n	800ac4c <__sflush_r+0xb8>
 800abfa:	2200      	movs	r2, #0
 800abfc:	6062      	str	r2, [r4, #4]
 800abfe:	04d9      	lsls	r1, r3, #19
 800ac00:	6922      	ldr	r2, [r4, #16]
 800ac02:	6022      	str	r2, [r4, #0]
 800ac04:	d504      	bpl.n	800ac10 <__sflush_r+0x7c>
 800ac06:	1c42      	adds	r2, r0, #1
 800ac08:	d101      	bne.n	800ac0e <__sflush_r+0x7a>
 800ac0a:	682b      	ldr	r3, [r5, #0]
 800ac0c:	b903      	cbnz	r3, 800ac10 <__sflush_r+0x7c>
 800ac0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac12:	602f      	str	r7, [r5, #0]
 800ac14:	2900      	cmp	r1, #0
 800ac16:	d0ca      	beq.n	800abae <__sflush_r+0x1a>
 800ac18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac1c:	4299      	cmp	r1, r3
 800ac1e:	d002      	beq.n	800ac26 <__sflush_r+0x92>
 800ac20:	4628      	mov	r0, r5
 800ac22:	f7ff fc5f 	bl	800a4e4 <_free_r>
 800ac26:	2000      	movs	r0, #0
 800ac28:	6360      	str	r0, [r4, #52]	; 0x34
 800ac2a:	e7c1      	b.n	800abb0 <__sflush_r+0x1c>
 800ac2c:	6a21      	ldr	r1, [r4, #32]
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b0      	blx	r6
 800ac34:	1c41      	adds	r1, r0, #1
 800ac36:	d1c7      	bne.n	800abc8 <__sflush_r+0x34>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0c4      	beq.n	800abc8 <__sflush_r+0x34>
 800ac3e:	2b1d      	cmp	r3, #29
 800ac40:	d001      	beq.n	800ac46 <__sflush_r+0xb2>
 800ac42:	2b16      	cmp	r3, #22
 800ac44:	d101      	bne.n	800ac4a <__sflush_r+0xb6>
 800ac46:	602f      	str	r7, [r5, #0]
 800ac48:	e7b1      	b.n	800abae <__sflush_r+0x1a>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac50:	81a3      	strh	r3, [r4, #12]
 800ac52:	e7ad      	b.n	800abb0 <__sflush_r+0x1c>
 800ac54:	690f      	ldr	r7, [r1, #16]
 800ac56:	2f00      	cmp	r7, #0
 800ac58:	d0a9      	beq.n	800abae <__sflush_r+0x1a>
 800ac5a:	0793      	lsls	r3, r2, #30
 800ac5c:	680e      	ldr	r6, [r1, #0]
 800ac5e:	bf08      	it	eq
 800ac60:	694b      	ldreq	r3, [r1, #20]
 800ac62:	600f      	str	r7, [r1, #0]
 800ac64:	bf18      	it	ne
 800ac66:	2300      	movne	r3, #0
 800ac68:	eba6 0807 	sub.w	r8, r6, r7
 800ac6c:	608b      	str	r3, [r1, #8]
 800ac6e:	f1b8 0f00 	cmp.w	r8, #0
 800ac72:	dd9c      	ble.n	800abae <__sflush_r+0x1a>
 800ac74:	6a21      	ldr	r1, [r4, #32]
 800ac76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac78:	4643      	mov	r3, r8
 800ac7a:	463a      	mov	r2, r7
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b0      	blx	r6
 800ac80:	2800      	cmp	r0, #0
 800ac82:	dc06      	bgt.n	800ac92 <__sflush_r+0xfe>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac8a:	81a3      	strh	r3, [r4, #12]
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	e78e      	b.n	800abb0 <__sflush_r+0x1c>
 800ac92:	4407      	add	r7, r0
 800ac94:	eba8 0800 	sub.w	r8, r8, r0
 800ac98:	e7e9      	b.n	800ac6e <__sflush_r+0xda>
 800ac9a:	bf00      	nop
 800ac9c:	20400001 	.word	0x20400001

0800aca0 <_fflush_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	690b      	ldr	r3, [r1, #16]
 800aca4:	4605      	mov	r5, r0
 800aca6:	460c      	mov	r4, r1
 800aca8:	b913      	cbnz	r3, 800acb0 <_fflush_r+0x10>
 800acaa:	2500      	movs	r5, #0
 800acac:	4628      	mov	r0, r5
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	b118      	cbz	r0, 800acba <_fflush_r+0x1a>
 800acb2:	6983      	ldr	r3, [r0, #24]
 800acb4:	b90b      	cbnz	r3, 800acba <_fflush_r+0x1a>
 800acb6:	f7fe ffcb 	bl	8009c50 <__sinit>
 800acba:	4b14      	ldr	r3, [pc, #80]	; (800ad0c <_fflush_r+0x6c>)
 800acbc:	429c      	cmp	r4, r3
 800acbe:	d11b      	bne.n	800acf8 <_fflush_r+0x58>
 800acc0:	686c      	ldr	r4, [r5, #4]
 800acc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0ef      	beq.n	800acaa <_fflush_r+0xa>
 800acca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800accc:	07d0      	lsls	r0, r2, #31
 800acce:	d404      	bmi.n	800acda <_fflush_r+0x3a>
 800acd0:	0599      	lsls	r1, r3, #22
 800acd2:	d402      	bmi.n	800acda <_fflush_r+0x3a>
 800acd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acd6:	f7ff f85e 	bl	8009d96 <__retarget_lock_acquire_recursive>
 800acda:	4628      	mov	r0, r5
 800acdc:	4621      	mov	r1, r4
 800acde:	f7ff ff59 	bl	800ab94 <__sflush_r>
 800ace2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ace4:	07da      	lsls	r2, r3, #31
 800ace6:	4605      	mov	r5, r0
 800ace8:	d4e0      	bmi.n	800acac <_fflush_r+0xc>
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	059b      	lsls	r3, r3, #22
 800acee:	d4dd      	bmi.n	800acac <_fflush_r+0xc>
 800acf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acf2:	f7ff f851 	bl	8009d98 <__retarget_lock_release_recursive>
 800acf6:	e7d9      	b.n	800acac <_fflush_r+0xc>
 800acf8:	4b05      	ldr	r3, [pc, #20]	; (800ad10 <_fflush_r+0x70>)
 800acfa:	429c      	cmp	r4, r3
 800acfc:	d101      	bne.n	800ad02 <_fflush_r+0x62>
 800acfe:	68ac      	ldr	r4, [r5, #8]
 800ad00:	e7df      	b.n	800acc2 <_fflush_r+0x22>
 800ad02:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <_fflush_r+0x74>)
 800ad04:	429c      	cmp	r4, r3
 800ad06:	bf08      	it	eq
 800ad08:	68ec      	ldreq	r4, [r5, #12]
 800ad0a:	e7da      	b.n	800acc2 <_fflush_r+0x22>
 800ad0c:	0800b4dc 	.word	0x0800b4dc
 800ad10:	0800b4fc 	.word	0x0800b4fc
 800ad14:	0800b4bc 	.word	0x0800b4bc

0800ad18 <fiprintf>:
 800ad18:	b40e      	push	{r1, r2, r3}
 800ad1a:	b503      	push	{r0, r1, lr}
 800ad1c:	4601      	mov	r1, r0
 800ad1e:	ab03      	add	r3, sp, #12
 800ad20:	4805      	ldr	r0, [pc, #20]	; (800ad38 <fiprintf+0x20>)
 800ad22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad26:	6800      	ldr	r0, [r0, #0]
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	f7ff fcaf 	bl	800a68c <_vfiprintf_r>
 800ad2e:	b002      	add	sp, #8
 800ad30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad34:	b003      	add	sp, #12
 800ad36:	4770      	bx	lr
 800ad38:	20000184 	.word	0x20000184

0800ad3c <_lseek_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_lseek_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f8 fc9d 	bl	800368a <_lseek>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_lseek_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_lseek_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	2000065c 	.word	0x2000065c

0800ad60 <__swhatbuf_r>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	460e      	mov	r6, r1
 800ad64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	b096      	sub	sp, #88	; 0x58
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	461d      	mov	r5, r3
 800ad70:	da07      	bge.n	800ad82 <__swhatbuf_r+0x22>
 800ad72:	2300      	movs	r3, #0
 800ad74:	602b      	str	r3, [r5, #0]
 800ad76:	89b3      	ldrh	r3, [r6, #12]
 800ad78:	061a      	lsls	r2, r3, #24
 800ad7a:	d410      	bmi.n	800ad9e <__swhatbuf_r+0x3e>
 800ad7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad80:	e00e      	b.n	800ada0 <__swhatbuf_r+0x40>
 800ad82:	466a      	mov	r2, sp
 800ad84:	f000 f894 	bl	800aeb0 <_fstat_r>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	dbf2      	blt.n	800ad72 <__swhatbuf_r+0x12>
 800ad8c:	9a01      	ldr	r2, [sp, #4]
 800ad8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad96:	425a      	negs	r2, r3
 800ad98:	415a      	adcs	r2, r3
 800ad9a:	602a      	str	r2, [r5, #0]
 800ad9c:	e7ee      	b.n	800ad7c <__swhatbuf_r+0x1c>
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	2000      	movs	r0, #0
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	b016      	add	sp, #88	; 0x58
 800ada6:	bd70      	pop	{r4, r5, r6, pc}

0800ada8 <__smakebuf_r>:
 800ada8:	898b      	ldrh	r3, [r1, #12]
 800adaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adac:	079d      	lsls	r5, r3, #30
 800adae:	4606      	mov	r6, r0
 800adb0:	460c      	mov	r4, r1
 800adb2:	d507      	bpl.n	800adc4 <__smakebuf_r+0x1c>
 800adb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	6123      	str	r3, [r4, #16]
 800adbc:	2301      	movs	r3, #1
 800adbe:	6163      	str	r3, [r4, #20]
 800adc0:	b002      	add	sp, #8
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	ab01      	add	r3, sp, #4
 800adc6:	466a      	mov	r2, sp
 800adc8:	f7ff ffca 	bl	800ad60 <__swhatbuf_r>
 800adcc:	9900      	ldr	r1, [sp, #0]
 800adce:	4605      	mov	r5, r0
 800add0:	4630      	mov	r0, r6
 800add2:	f7ff fbd7 	bl	800a584 <_malloc_r>
 800add6:	b948      	cbnz	r0, 800adec <__smakebuf_r+0x44>
 800add8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800addc:	059a      	lsls	r2, r3, #22
 800adde:	d4ef      	bmi.n	800adc0 <__smakebuf_r+0x18>
 800ade0:	f023 0303 	bic.w	r3, r3, #3
 800ade4:	f043 0302 	orr.w	r3, r3, #2
 800ade8:	81a3      	strh	r3, [r4, #12]
 800adea:	e7e3      	b.n	800adb4 <__smakebuf_r+0xc>
 800adec:	4b0d      	ldr	r3, [pc, #52]	; (800ae24 <__smakebuf_r+0x7c>)
 800adee:	62b3      	str	r3, [r6, #40]	; 0x28
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	6020      	str	r0, [r4, #0]
 800adf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf8:	81a3      	strh	r3, [r4, #12]
 800adfa:	9b00      	ldr	r3, [sp, #0]
 800adfc:	6163      	str	r3, [r4, #20]
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	6120      	str	r0, [r4, #16]
 800ae02:	b15b      	cbz	r3, 800ae1c <__smakebuf_r+0x74>
 800ae04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f000 f863 	bl	800aed4 <_isatty_r>
 800ae0e:	b128      	cbz	r0, 800ae1c <__smakebuf_r+0x74>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	f023 0303 	bic.w	r3, r3, #3
 800ae16:	f043 0301 	orr.w	r3, r3, #1
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	89a0      	ldrh	r0, [r4, #12]
 800ae1e:	4305      	orrs	r5, r0
 800ae20:	81a5      	strh	r5, [r4, #12]
 800ae22:	e7cd      	b.n	800adc0 <__smakebuf_r+0x18>
 800ae24:	08009be9 	.word	0x08009be9

0800ae28 <__ascii_mbtowc>:
 800ae28:	b082      	sub	sp, #8
 800ae2a:	b901      	cbnz	r1, 800ae2e <__ascii_mbtowc+0x6>
 800ae2c:	a901      	add	r1, sp, #4
 800ae2e:	b142      	cbz	r2, 800ae42 <__ascii_mbtowc+0x1a>
 800ae30:	b14b      	cbz	r3, 800ae46 <__ascii_mbtowc+0x1e>
 800ae32:	7813      	ldrb	r3, [r2, #0]
 800ae34:	600b      	str	r3, [r1, #0]
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	1e10      	subs	r0, r2, #0
 800ae3a:	bf18      	it	ne
 800ae3c:	2001      	movne	r0, #1
 800ae3e:	b002      	add	sp, #8
 800ae40:	4770      	bx	lr
 800ae42:	4610      	mov	r0, r2
 800ae44:	e7fb      	b.n	800ae3e <__ascii_mbtowc+0x16>
 800ae46:	f06f 0001 	mvn.w	r0, #1
 800ae4a:	e7f8      	b.n	800ae3e <__ascii_mbtowc+0x16>

0800ae4c <__malloc_lock>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__malloc_lock+0x8>)
 800ae4e:	f7fe bfa2 	b.w	8009d96 <__retarget_lock_acquire_recursive>
 800ae52:	bf00      	nop
 800ae54:	20000654 	.word	0x20000654

0800ae58 <__malloc_unlock>:
 800ae58:	4801      	ldr	r0, [pc, #4]	; (800ae60 <__malloc_unlock+0x8>)
 800ae5a:	f7fe bf9d 	b.w	8009d98 <__retarget_lock_release_recursive>
 800ae5e:	bf00      	nop
 800ae60:	20000654 	.word	0x20000654

0800ae64 <_read_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4d07      	ldr	r5, [pc, #28]	; (800ae84 <_read_r+0x20>)
 800ae68:	4604      	mov	r4, r0
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	2200      	movs	r2, #0
 800ae70:	602a      	str	r2, [r5, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	f7f8 fba9 	bl	80035ca <_read>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_read_r+0x1e>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_read_r+0x1e>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	2000065c 	.word	0x2000065c

0800ae88 <__ascii_wctomb>:
 800ae88:	b149      	cbz	r1, 800ae9e <__ascii_wctomb+0x16>
 800ae8a:	2aff      	cmp	r2, #255	; 0xff
 800ae8c:	bf85      	ittet	hi
 800ae8e:	238a      	movhi	r3, #138	; 0x8a
 800ae90:	6003      	strhi	r3, [r0, #0]
 800ae92:	700a      	strbls	r2, [r1, #0]
 800ae94:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae98:	bf98      	it	ls
 800ae9a:	2001      	movls	r0, #1
 800ae9c:	4770      	bx	lr
 800ae9e:	4608      	mov	r0, r1
 800aea0:	4770      	bx	lr

0800aea2 <abort>:
 800aea2:	b508      	push	{r3, lr}
 800aea4:	2006      	movs	r0, #6
 800aea6:	f000 f84d 	bl	800af44 <raise>
 800aeaa:	2001      	movs	r0, #1
 800aeac:	f7f8 fb83 	bl	80035b6 <_exit>

0800aeb0 <_fstat_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d07      	ldr	r5, [pc, #28]	; (800aed0 <_fstat_r+0x20>)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	4611      	mov	r1, r2
 800aebc:	602b      	str	r3, [r5, #0]
 800aebe:	f7f8 fbc9 	bl	8003654 <_fstat>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	d102      	bne.n	800aecc <_fstat_r+0x1c>
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	b103      	cbz	r3, 800aecc <_fstat_r+0x1c>
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	bd38      	pop	{r3, r4, r5, pc}
 800aece:	bf00      	nop
 800aed0:	2000065c 	.word	0x2000065c

0800aed4 <_isatty_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d06      	ldr	r5, [pc, #24]	; (800aef0 <_isatty_r+0x1c>)
 800aed8:	2300      	movs	r3, #0
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	602b      	str	r3, [r5, #0]
 800aee0:	f7f8 fbc8 	bl	8003674 <_isatty>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_isatty_r+0x1a>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_isatty_r+0x1a>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	2000065c 	.word	0x2000065c

0800aef4 <_raise_r>:
 800aef4:	291f      	cmp	r1, #31
 800aef6:	b538      	push	{r3, r4, r5, lr}
 800aef8:	4604      	mov	r4, r0
 800aefa:	460d      	mov	r5, r1
 800aefc:	d904      	bls.n	800af08 <_raise_r+0x14>
 800aefe:	2316      	movs	r3, #22
 800af00:	6003      	str	r3, [r0, #0]
 800af02:	f04f 30ff 	mov.w	r0, #4294967295
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af0a:	b112      	cbz	r2, 800af12 <_raise_r+0x1e>
 800af0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af10:	b94b      	cbnz	r3, 800af26 <_raise_r+0x32>
 800af12:	4620      	mov	r0, r4
 800af14:	f000 f830 	bl	800af78 <_getpid_r>
 800af18:	462a      	mov	r2, r5
 800af1a:	4601      	mov	r1, r0
 800af1c:	4620      	mov	r0, r4
 800af1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af22:	f000 b817 	b.w	800af54 <_kill_r>
 800af26:	2b01      	cmp	r3, #1
 800af28:	d00a      	beq.n	800af40 <_raise_r+0x4c>
 800af2a:	1c59      	adds	r1, r3, #1
 800af2c:	d103      	bne.n	800af36 <_raise_r+0x42>
 800af2e:	2316      	movs	r3, #22
 800af30:	6003      	str	r3, [r0, #0]
 800af32:	2001      	movs	r0, #1
 800af34:	e7e7      	b.n	800af06 <_raise_r+0x12>
 800af36:	2400      	movs	r4, #0
 800af38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af3c:	4628      	mov	r0, r5
 800af3e:	4798      	blx	r3
 800af40:	2000      	movs	r0, #0
 800af42:	e7e0      	b.n	800af06 <_raise_r+0x12>

0800af44 <raise>:
 800af44:	4b02      	ldr	r3, [pc, #8]	; (800af50 <raise+0xc>)
 800af46:	4601      	mov	r1, r0
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f7ff bfd3 	b.w	800aef4 <_raise_r>
 800af4e:	bf00      	nop
 800af50:	20000184 	.word	0x20000184

0800af54 <_kill_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	; (800af74 <_kill_r+0x20>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	4611      	mov	r1, r2
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	f7f8 fb18 	bl	8003596 <_kill>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	d102      	bne.n	800af70 <_kill_r+0x1c>
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	b103      	cbz	r3, 800af70 <_kill_r+0x1c>
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	bf00      	nop
 800af74:	2000065c 	.word	0x2000065c

0800af78 <_getpid_r>:
 800af78:	f7f8 bb05 	b.w	8003586 <_getpid>

0800af7c <_init>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr

0800af88 <_fini>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr
