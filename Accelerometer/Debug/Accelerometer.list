
Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba4  08003ba4  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba4  08003ba4  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          00000074  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcaf  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d6e  00000000  00000000  0002bdbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007f8  00000000  00000000  0002e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e106  00000000  00000000  0002ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc65  00000000  00000000  0004cd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af6c1  00000000  00000000  00058973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00108034  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002248  00000000  00000000  00108088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000dc 	.word	0x200000dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b4c 	.word	0x08003b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e0 	.word	0x200000e0
 80001c4:	08003b4c 	.word	0x08003b4c

080001c8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80001cc:	f001 fa32 	bl	8001634 <HAL_Init>

  /* Configure the system clock to 72 Mhz */
  SystemClock_Config();
 80001d0:	f000 f868 	bl	80002a4 <SystemClock_Config>

  /* Initialize LEDs and User_Button on STM32F3-Discovery ------------------*/
  BSP_LED_Init(LED4);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f000 fe85 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80001da:	2000      	movs	r0, #0
 80001dc:	f000 fe82 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80001e0:	2002      	movs	r0, #2
 80001e2:	f000 fe7f 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 80001e6:	2004      	movs	r0, #4
 80001e8:	f000 fe7c 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 80001ec:	2006      	movs	r0, #6
 80001ee:	f000 fe79 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 80001f2:	2007      	movs	r0, #7
 80001f4:	f000 fe76 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 80001f8:	2005      	movs	r0, #5
 80001fa:	f000 fe73 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80001fe:	2003      	movs	r0, #3
 8000200:	f000 fe70 	bl	8000ee4 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000204:	2101      	movs	r1, #1
 8000206:	2000      	movs	r0, #0
 8000208:	f000 ff6a 	bl	80010e0 <BSP_PB_Init>

  /* Toggle LEDs between each Test */
  while (!UserPressButton) Toggle_Leds();
 800020c:	e001      	b.n	8000212 <main+0x4a>
 800020e:	f000 f88d 	bl	800032c <Toggle_Leds>
 8000212:	4b21      	ldr	r3, [pc, #132]	; (8000298 <main+0xd0>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	b2db      	uxtb	r3, r3
 8000218:	2b00      	cmp	r3, #0
 800021a:	d0f8      	beq.n	800020e <main+0x46>
  BSP_LED_Off(LED3);
 800021c:	2000      	movs	r0, #0
 800021e:	f000 ff2b 	bl	8001078 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8000222:	2001      	movs	r0, #1
 8000224:	f000 ff28 	bl	8001078 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8000228:	2002      	movs	r0, #2
 800022a:	f000 ff25 	bl	8001078 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 800022e:	2003      	movs	r0, #3
 8000230:	f000 ff22 	bl	8001078 <BSP_LED_Off>

  /* 1. Start Test: Wait For User inputs -------------------------------------*/
  while (1)
  {
    UserPressButton = 0;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <main+0xd0>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
    BSP_examples[DemoIndex++].DemoFunc();
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <main+0xd4>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	1c5a      	adds	r2, r3, #1
 8000240:	b2d1      	uxtb	r1, r2
 8000242:	4a16      	ldr	r2, [pc, #88]	; (800029c <main+0xd4>)
 8000244:	7011      	strb	r1, [r2, #0]
 8000246:	4619      	mov	r1, r3
 8000248:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <main+0xd8>)
 800024a:	460b      	mov	r3, r1
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	1a5b      	subs	r3, r3, r1
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4798      	blx	r3

    /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0xd4>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <main+0x9e>
    {
      DemoIndex = 0;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <main+0xd4>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
    }
    /* Toggle LEDs between each Test */
    UserPressButton = 0;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <main+0xd0>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
    while (!UserPressButton) Toggle_Leds();
 800026c:	e001      	b.n	8000272 <main+0xaa>
 800026e:	f000 f85d 	bl	800032c <Toggle_Leds>
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <main+0xd0>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0f8      	beq.n	800026e <main+0xa6>
    BSP_LED_Off(LED3);
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fefb 	bl	8001078 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8000282:	2001      	movs	r0, #1
 8000284:	f000 fef8 	bl	8001078 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8000288:	2002      	movs	r0, #2
 800028a:	f000 fef5 	bl	8001078 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 800028e:	2003      	movs	r0, #3
 8000290:	f000 fef2 	bl	8001078 <BSP_LED_Off>
    UserPressButton = 0;
 8000294:	e7ce      	b.n	8000234 <main+0x6c>
 8000296:	bf00      	nop
 8000298:	200000f9 	.word	0x200000f9
 800029c:	200000f8 	.word	0x200000f8
 80002a0:	20000000 	.word	0x20000000

080002a4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  #ifdef USE_FULL_ASSERT
  uint32_t ret = HAL_OK;
  #endif /* USE_FULL_ASSERT */

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002aa:	2301      	movs	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if(ret != HAL_OK)
  {
    assert_failed((uint8_t *)__FILE__, __LINE__);
  }
#else
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fb2c 	bl	8002928 <HAL_RCC_OscConfig>
#endif /* USE_FULL_ASSERT */

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80002d0:	230f      	movs	r3, #15
 80002d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	2302      	movs	r3, #2
 80002d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(ret != HAL_OK)
  {
    assert_failed((uint8_t *)__FILE__, __LINE__);
  }
#else
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80002e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002ea:	2102      	movs	r1, #2
 80002ec:	4618      	mov	r0, r3
 80002ee:	f003 fa23 	bl	8003738 <HAL_RCC_ClockConfig>
#endif /* USE_FULL_ASSERT */
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	; 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	80fb      	strh	r3, [r7, #6]
  if (USER_BUTTON_PIN == GPIO_Pin)
 8000306:	88fb      	ldrh	r3, [r7, #6]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d109      	bne.n	8000320 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 800030c:	bf00      	nop
 800030e:	2000      	movs	r0, #0
 8000310:	f000 ff48 	bl	80011a4 <BSP_PB_GetState>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f9      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <HAL_GPIO_EXTI_Callback+0x2c>)
 800031c:	2201      	movs	r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
  }
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200000f9 	.word	0x200000f9

0800032c <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED3);
 8000330:	2000      	movs	r0, #0
 8000332:	f000 febb 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 8000336:	2064      	movs	r0, #100	; 0x64
 8000338:	f001 f9e2 	bl	8001700 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 800033c:	2001      	movs	r0, #1
 800033e:	f000 feb5 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 8000342:	2064      	movs	r0, #100	; 0x64
 8000344:	f001 f9dc 	bl	8001700 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 8000348:	2003      	movs	r0, #3
 800034a:	f000 feaf 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 800034e:	2064      	movs	r0, #100	; 0x64
 8000350:	f001 f9d6 	bl	8001700 <HAL_Delay>
    BSP_LED_Toggle(LED8);
 8000354:	2005      	movs	r0, #5
 8000356:	f000 fea9 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 800035a:	2064      	movs	r0, #100	; 0x64
 800035c:	f001 f9d0 	bl	8001700 <HAL_Delay>
    BSP_LED_Toggle(LED10);
 8000360:	2007      	movs	r0, #7
 8000362:	f000 fea3 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 8000366:	2064      	movs	r0, #100	; 0x64
 8000368:	f001 f9ca 	bl	8001700 <HAL_Delay>
    BSP_LED_Toggle(LED9);
 800036c:	2006      	movs	r0, #6
 800036e:	f000 fe9d 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 8000372:	2064      	movs	r0, #100	; 0x64
 8000374:	f001 f9c4 	bl	8001700 <HAL_Delay>
    BSP_LED_Toggle(LED7);
 8000378:	2004      	movs	r0, #4
 800037a:	f000 fe97 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 800037e:	2064      	movs	r0, #100	; 0x64
 8000380:	f001 f9be 	bl	8001700 <HAL_Delay>
    BSP_LED_Toggle(LED5);
 8000384:	2002      	movs	r0, #2
 8000386:	f000 fe91 	bl	80010ac <BSP_LED_Toggle>
    HAL_Delay(100);
 800038a:	2064      	movs	r0, #100	; 0x64
 800038c:	f001 f9b8 	bl	8001700 <HAL_Delay>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 8000398:	2007      	movs	r0, #7
 800039a:	f000 fe53 	bl	8001044 <BSP_LED_On>
    BSP_LED_On(LED3);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fe50 	bl	8001044 <BSP_LED_On>
    while(1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x10>
	...

080003a8 <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
  {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 80003ac:	f001 f86c 	bl	8001488 <BSP_ACCELERO_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 80003b6:	f7ff ffed 	bl	8000394 <Error_Handler>
  }
  
  UserPressButton = 0;
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <ACCELERO_MEMS_Test+0x30>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 80003c0:	e001      	b.n	80003c6 <ACCELERO_MEMS_Test+0x1e>
  {
    ACCELERO_ReadAcc();
 80003c2:	f000 f80b 	bl	80003dc <ACCELERO_ReadAcc>
  while(!UserPressButton)
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <ACCELERO_MEMS_Test+0x30>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f8      	beq.n	80003c2 <ACCELERO_MEMS_Test+0x1a>
  }
}  
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000f9 	.word	0x200000f9

080003dc <ACCELERO_ReadAcc>:

static void ACCELERO_ReadAcc(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
  int16_t buffer[3] = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval, zval = 0x00;
 80003ea:	2300      	movs	r3, #0
 80003ec:	81fb      	strh	r3, [r7, #14]
  
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 f90b 	bl	800160c <BSP_ACCELERO_GetXYZ>
 
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
 80003f6:	88bb      	ldrh	r3, [r7, #4]
 80003f8:	81bb      	strh	r3, [r7, #12]
  yval = buffer[1];
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	817b      	strh	r3, [r7, #10]
  zval = buffer[2];
 80003fe:	893b      	ldrh	r3, [r7, #8]
 8000400:	81fb      	strh	r3, [r7, #14]

  if(zval > ThresholdHigh)
 8000402:	4b44      	ldr	r3, [pc, #272]	; (8000514 <ACCELERO_ReadAcc+0x138>)
 8000404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000408:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800040c:	429a      	cmp	r2, r3
 800040e:	dd06      	ble.n	800041e <ACCELERO_ReadAcc+0x42>
  {
    /* LED10 On */
    BSP_LED_On(LED5);
 8000410:	2002      	movs	r0, #2
 8000412:	f000 fe17 	bl	8001044 <BSP_LED_On>
    HAL_Delay(10);
 8000416:	200a      	movs	r0, #10
 8000418:	f001 f972 	bl	8001700 <HAL_Delay>
 800041c:	e010      	b.n	8000440 <ACCELERO_ReadAcc+0x64>
  }
  else if(zval < ThresholdLow)
 800041e:	4b3e      	ldr	r3, [pc, #248]	; (8000518 <ACCELERO_ReadAcc+0x13c>)
 8000420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000424:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000428:	429a      	cmp	r2, r3
 800042a:	da06      	bge.n	800043a <ACCELERO_ReadAcc+0x5e>
  {
    /* LED3 On */
    BSP_LED_On(LED8);
 800042c:	2005      	movs	r0, #5
 800042e:	f000 fe09 	bl	8001044 <BSP_LED_On>
    HAL_Delay(10);
 8000432:	200a      	movs	r0, #10
 8000434:	f001 f964 	bl	8001700 <HAL_Delay>
 8000438:	e002      	b.n	8000440 <ACCELERO_ReadAcc+0x64>
  }
  else
  {
    HAL_Delay(10);
 800043a:	200a      	movs	r0, #10
 800043c:	f001 f960 	bl	8001700 <HAL_Delay>
  }
    
  if((ABS(xval))>(ABS(yval)))
 8000440:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000444:	2b00      	cmp	r3, #0
 8000446:	bfb8      	it	lt
 8000448:	425b      	neglt	r3, r3
 800044a:	b29a      	uxth	r2, r3
 800044c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000450:	2b00      	cmp	r3, #0
 8000452:	bfb8      	it	lt
 8000454:	425b      	neglt	r3, r3
 8000456:	b29b      	uxth	r3, r3
 8000458:	429a      	cmp	r2, r3
 800045a:	d91f      	bls.n	800049c <ACCELERO_ReadAcc+0xc0>
  {
    if(xval > ThresholdHigh)
 800045c:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <ACCELERO_ReadAcc+0x138>)
 800045e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000462:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000466:	429a      	cmp	r2, r3
 8000468:	dd06      	ble.n	8000478 <ACCELERO_ReadAcc+0x9c>
    { 
      /* LED10 On */
      BSP_LED_On(LED10);
 800046a:	2007      	movs	r0, #7
 800046c:	f000 fdea 	bl	8001044 <BSP_LED_On>
      HAL_Delay(10);
 8000470:	200a      	movs	r0, #10
 8000472:	f001 f945 	bl	8001700 <HAL_Delay>
 8000476:	e030      	b.n	80004da <ACCELERO_ReadAcc+0xfe>
    }
    else if(xval < ThresholdLow)
 8000478:	4b27      	ldr	r3, [pc, #156]	; (8000518 <ACCELERO_ReadAcc+0x13c>)
 800047a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800047e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000482:	429a      	cmp	r2, r3
 8000484:	da06      	bge.n	8000494 <ACCELERO_ReadAcc+0xb8>
    { 
      /* LED3 On */
      BSP_LED_On(LED3);
 8000486:	2000      	movs	r0, #0
 8000488:	f000 fddc 	bl	8001044 <BSP_LED_On>
      HAL_Delay(10);
 800048c:	200a      	movs	r0, #10
 800048e:	f001 f937 	bl	8001700 <HAL_Delay>
 8000492:	e022      	b.n	80004da <ACCELERO_ReadAcc+0xfe>
    }
    else
    { 
      HAL_Delay(10);
 8000494:	200a      	movs	r0, #10
 8000496:	f001 f933 	bl	8001700 <HAL_Delay>
 800049a:	e01e      	b.n	80004da <ACCELERO_ReadAcc+0xfe>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 800049c:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <ACCELERO_ReadAcc+0x13c>)
 800049e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004a2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	da06      	bge.n	80004b8 <ACCELERO_ReadAcc+0xdc>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 80004aa:	2003      	movs	r0, #3
 80004ac:	f000 fdca 	bl	8001044 <BSP_LED_On>
      HAL_Delay(10);
 80004b0:	200a      	movs	r0, #10
 80004b2:	f001 f925 	bl	8001700 <HAL_Delay>
 80004b6:	e010      	b.n	80004da <ACCELERO_ReadAcc+0xfe>
    }
    else if(yval > ThresholdHigh)
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <ACCELERO_ReadAcc+0x138>)
 80004ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	dd06      	ble.n	80004d4 <ACCELERO_ReadAcc+0xf8>
    {
      /* LED7 On */
      BSP_LED_On(LED7);
 80004c6:	2004      	movs	r0, #4
 80004c8:	f000 fdbc 	bl	8001044 <BSP_LED_On>
      HAL_Delay(10);
 80004cc:	200a      	movs	r0, #10
 80004ce:	f001 f917 	bl	8001700 <HAL_Delay>
 80004d2:	e002      	b.n	80004da <ACCELERO_ReadAcc+0xfe>
    } 
    else
  {	    
      HAL_Delay(10);
 80004d4:	200a      	movs	r0, #10
 80004d6:	f001 f913 	bl	8001700 <HAL_Delay>
    }
  } 
  
     BSP_LED_Off(LED3);
 80004da:	2000      	movs	r0, #0
 80004dc:	f000 fdcc 	bl	8001078 <BSP_LED_Off>
     BSP_LED_Off(LED6);
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 fdc9 	bl	8001078 <BSP_LED_Off>
     BSP_LED_Off(LED7);
 80004e6:	2004      	movs	r0, #4
 80004e8:	f000 fdc6 	bl	8001078 <BSP_LED_Off>
     BSP_LED_Off(LED4);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 fdc3 	bl	8001078 <BSP_LED_Off>
     BSP_LED_Off(LED10);
 80004f2:	2007      	movs	r0, #7
 80004f4:	f000 fdc0 	bl	8001078 <BSP_LED_Off>
     BSP_LED_Off(LED8);
 80004f8:	2005      	movs	r0, #5
 80004fa:	f000 fdbd 	bl	8001078 <BSP_LED_Off>
     BSP_LED_Off(LED9);
 80004fe:	2006      	movs	r0, #6
 8000500:	f000 fdba 	bl	8001078 <BSP_LED_Off>
     BSP_LED_Off(LED5);
 8000504:	2002      	movs	r0, #2
 8000506:	f000 fdb7 	bl	8001078 <BSP_LED_Off>
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000003c 	.word	0x2000003c
 8000518:	2000003e 	.word	0x2000003e

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_MspInit+0x44>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000552:	2007      	movs	r0, #7
 8000554:	f001 f9c8 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_I2C_MspInit+0x7c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d127      	bne.n	80005d6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_I2C_MspInit+0x80>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <HAL_I2C_MspInit+0x80>)
 800058c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_I2C_MspInit+0x80>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800059e:	23c0      	movs	r3, #192	; 0xc0
 80005a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a2:	2312      	movs	r3, #18
 80005a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ae:	2304      	movs	r3, #4
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <HAL_I2C_MspInit+0x84>)
 80005ba:	f001 f9d7 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_I2C_MspInit+0x80>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_I2C_MspInit+0x80>)
 80005c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_I2C_MspInit+0x80>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	; 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40005400 	.word	0x40005400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400

080005ec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <HAL_I2C_MspDeInit+0x38>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d10d      	bne.n	800061a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_I2C_MspDeInit+0x3c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <HAL_I2C_MspDeInit+0x3c>)
 8000604:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000608:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <HAL_I2C_MspDeInit+0x40>)
 800060e:	f001 fb27 	bl	8001c60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_I2C_MspDeInit+0x40>)
 8000616:	f001 fb23 	bl	8001c60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40005400 	.word	0x40005400
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000684:	f001 f81c 	bl	80016c0 <HAL_IncTick>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8000690:	2001      	movs	r0, #1
 8000692:	f001 fc0b 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemInit+0x84>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <SystemInit+0x84>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <SystemInit+0x88>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <SystemInit+0x88>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemInit+0x88>)
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	4918      	ldr	r1, [pc, #96]	; (8000724 <SystemInit+0x88>)
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <SystemInit+0x8c>)
 80006c4:	4013      	ands	r3, r2
 80006c6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <SystemInit+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <SystemInit+0x88>)
 80006ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <SystemInit+0x88>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <SystemInit+0x88>)
 80006de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <SystemInit+0x88>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <SystemInit+0x88>)
 80006ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ee:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <SystemInit+0x88>)
 80006f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <SystemInit+0x88>)
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <SystemInit+0x88>)
 80006fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000700:	4908      	ldr	r1, [pc, #32]	; (8000724 <SystemInit+0x88>)
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <SystemInit+0x90>)
 8000704:	4013      	ands	r3, r2
 8000706:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <SystemInit+0x88>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <SystemInit+0x84>)
 8000710:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000714:	609a      	str	r2, [r3, #8]
#endif
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	40021000 	.word	0x40021000
 8000728:	f87fc00c 	.word	0xf87fc00c
 800072c:	ff00fccc 	.word	0xff00fccc

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490e      	ldr	r1, [pc, #56]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0b      	ldr	r4, [pc, #44]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075a:	f7ff ff9f 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075e:	f003 f9d1 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fd31 	bl	80001c8 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000768:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000774:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8000778:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 800077c:	20000150 	.word	0x20000150

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>

08000782 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000790:	f000 fddc 	bl	800134c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	461a      	mov	r2, r3
 800079c:	2120      	movs	r1, #32
 800079e:	2032      	movs	r0, #50	; 0x32
 80007a0:	f000 fe4c 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	461a      	mov	r2, r3
 80007ac:	2123      	movs	r1, #35	; 0x23
 80007ae:	2032      	movs	r0, #50	; 0x32
 80007b0:	f000 fe44 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80007d4:	f000 fdba 	bl	800134c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80007d8:	210f      	movs	r1, #15
 80007da:	2032      	movs	r0, #50	; 0x32
 80007dc:	f000 fe41 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80007f4:	2124      	movs	r1, #36	; 0x24
 80007f6:	2032      	movs	r0, #50	; 0x32
 80007f8:	f000 fe33 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000806:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	461a      	mov	r2, r3
 800080c:	2124      	movs	r1, #36	; 0x24
 800080e:	2032      	movs	r0, #50	; 0x32
 8000810:	f000 fe14 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000826:	2121      	movs	r1, #33	; 0x21
 8000828:	2032      	movs	r0, #50	; 0x32
 800082a:	f000 fe1a 	bl	8001462 <COMPASSACCELERO_IO_Read>
 800082e:	4603      	mov	r3, r0
 8000830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	f003 030c 	and.w	r3, r3, #12
 8000838:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800083a:	7bfa      	ldrb	r2, [r7, #15]
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4313      	orrs	r3, r2
 8000840:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	461a      	mov	r2, r3
 8000846:	2121      	movs	r1, #33	; 0x21
 8000848:	2032      	movs	r0, #50	; 0x32
 800084a:	f000 fdf7 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000860:	2121      	movs	r1, #33	; 0x21
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f000 fdfd 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f023 0308 	bic.w	r3, r3, #8
 8000872:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000874:	7bfa      	ldrb	r2, [r7, #15]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4313      	orrs	r3, r2
 800087a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	461a      	mov	r2, r3
 8000880:	2121      	movs	r1, #33	; 0x21
 8000882:	2032      	movs	r0, #50	; 0x32
 8000884:	f000 fdda 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000898:	2300      	movs	r3, #0
 800089a:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80008a0:	2301      	movs	r3, #1
 80008a2:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80008a4:	2123      	movs	r1, #35	; 0x23
 80008a6:	2032      	movs	r0, #50	; 0x32
 80008a8:	f000 fddb 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80008ac:	4603      	mov	r3, r0
 80008ae:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80008b0:	2124      	movs	r1, #36	; 0x24
 80008b2:	2032      	movs	r0, #50	; 0x32
 80008b4:	f000 fdd5 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80008b8:	4603      	mov	r3, r0
 80008ba:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80008bc:	2128      	movs	r1, #40	; 0x28
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f000 fdcf 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80008ca:	2129      	movs	r1, #41	; 0x29
 80008cc:	2032      	movs	r0, #50	; 0x32
 80008ce:	f000 fdc8 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80008d8:	212a      	movs	r1, #42	; 0x2a
 80008da:	2032      	movs	r0, #50	; 0x32
 80008dc:	f000 fdc1 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80008e6:	212b      	movs	r1, #43	; 0x2b
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f000 fdba 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80008f4:	212c      	movs	r1, #44	; 0x2c
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f000 fdb3 	bl	8001462 <COMPASSACCELERO_IO_Read>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000902:	212d      	movs	r1, #45	; 0x2d
 8000904:	2032      	movs	r0, #50	; 0x32
 8000906:	f000 fdac 	bl	8001462 <COMPASSACCELERO_IO_Read>
 800090a:	4603      	mov	r3, r0
 800090c:	b25b      	sxtb	r3, r3
 800090e:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000910:	7d3b      	ldrb	r3, [r7, #20]
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	2b00      	cmp	r3, #0
 8000918:	d126      	bne.n	8000968 <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 800091a:	2300      	movs	r3, #0
 800091c:	77fb      	strb	r3, [r7, #31]
 800091e:	e01f      	b.n	8000960 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000920:	7ffb      	ldrb	r3, [r7, #31]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	3301      	adds	r3, #1
 8000926:	f107 0220 	add.w	r2, r7, #32
 800092a:	4413      	add	r3, r2
 800092c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000930:	b29b      	uxth	r3, r3
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b29a      	uxth	r2, r3
 8000936:	7ffb      	ldrb	r3, [r7, #31]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	f107 0120 	add.w	r1, r7, #32
 800093e:	440b      	add	r3, r1
 8000940:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	b29a      	uxth	r2, r3
 800094a:	7ffb      	ldrb	r3, [r7, #31]
 800094c:	b212      	sxth	r2, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	f107 0120 	add.w	r1, r7, #32
 8000954:	440b      	add	r3, r1
 8000956:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800095a:	7ffb      	ldrb	r3, [r7, #31]
 800095c:	3301      	adds	r3, #1
 800095e:	77fb      	strb	r3, [r7, #31]
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d9dc      	bls.n	8000920 <LSM303AGR_AccReadXYZ+0x90>
 8000966:	e025      	b.n	80009b4 <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
 800096c:	e01f      	b.n	80009ae <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	f107 0220 	add.w	r2, r7, #32
 8000976:	4413      	add	r3, r2
 8000978:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800097c:	b29b      	uxth	r3, r3
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	b29a      	uxth	r2, r3
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	3301      	adds	r3, #1
 8000988:	f107 0120 	add.w	r1, r7, #32
 800098c:	440b      	add	r3, r1
 800098e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000992:	b29b      	uxth	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b29a      	uxth	r2, r3
 8000998:	7ffb      	ldrb	r3, [r7, #31]
 800099a:	b212      	sxth	r2, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	f107 0120 	add.w	r1, r7, #32
 80009a2:	440b      	add	r3, r1
 80009a4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	3301      	adds	r3, #1
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d9dc      	bls.n	800096e <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80009b4:	7d3b      	ldrb	r3, [r7, #20]
 80009b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009ba:	2b30      	cmp	r3, #48	; 0x30
 80009bc:	d013      	beq.n	80009e6 <LSM303AGR_AccReadXYZ+0x156>
 80009be:	2b30      	cmp	r3, #48	; 0x30
 80009c0:	dc14      	bgt.n	80009ec <LSM303AGR_AccReadXYZ+0x15c>
 80009c2:	2b20      	cmp	r3, #32
 80009c4:	d00c      	beq.n	80009e0 <LSM303AGR_AccReadXYZ+0x150>
 80009c6:	2b20      	cmp	r3, #32
 80009c8:	dc10      	bgt.n	80009ec <LSM303AGR_AccReadXYZ+0x15c>
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <LSM303AGR_AccReadXYZ+0x144>
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d003      	beq.n	80009da <LSM303AGR_AccReadXYZ+0x14a>
 80009d2:	e00b      	b.n	80009ec <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80009d4:	2301      	movs	r3, #1
 80009d6:	77bb      	strb	r3, [r7, #30]
    break;
 80009d8:	e008      	b.n	80009ec <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80009da:	2302      	movs	r3, #2
 80009dc:	77bb      	strb	r3, [r7, #30]
    break;
 80009de:	e005      	b.n	80009ec <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80009e0:	2304      	movs	r3, #4
 80009e2:	77bb      	strb	r3, [r7, #30]
    break;
 80009e4:	e002      	b.n	80009ec <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80009e6:	230c      	movs	r3, #12
 80009e8:	77bb      	strb	r3, [r7, #30]
    break;
 80009ea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	77fb      	strb	r3, [r7, #31]
 80009f0:	e015      	b.n	8000a1e <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	f107 0220 	add.w	r2, r7, #32
 80009fa:	4413      	add	r3, r2
 80009fc:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	7fbb      	ldrb	r3, [r7, #30]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	fb12 f303 	smulbb	r3, r2, r3
 8000a0a:	b299      	uxth	r1, r3
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	b20a      	sxth	r2, r1
 8000a16:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000a18:	7ffb      	ldrb	r3, [r7, #31]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	77fb      	strb	r3, [r7, #31]
 8000a1e:	7ffb      	ldrb	r3, [r7, #31]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d9e6      	bls.n	80009f2 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000a3c:	2121      	movs	r1, #33	; 0x21
 8000a3e:	2032      	movs	r0, #50	; 0x32
 8000a40:	f000 fd0f 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	f023 0304 	bic.w	r3, r3, #4
 8000a4e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000a50:	7bfa      	ldrb	r2, [r7, #15]
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	2121      	movs	r1, #33	; 0x21
 8000a5e:	2032      	movs	r0, #50	; 0x32
 8000a60:	f000 fcec 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8000a7a:	2122      	movs	r1, #34	; 0x22
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f000 fcf0 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000a82:	4603      	mov	r3, r0
 8000a84:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8000a86:	7bfa      	ldrb	r2, [r7, #15]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	461a      	mov	r2, r3
 8000a92:	2122      	movs	r1, #34	; 0x22
 8000a94:	2032      	movs	r0, #50	; 0x32
 8000a96:	f000 fcd1 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000ab0:	2138      	movs	r1, #56	; 0x38
 8000ab2:	2032      	movs	r0, #50	; 0x32
 8000ab4:	f000 fcd5 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000abc:	7bfa      	ldrb	r2, [r7, #15]
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2138      	movs	r1, #56	; 0x38
 8000aca:	2032      	movs	r0, #50	; 0x32
 8000acc:	f000 fcb6 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	213a      	movs	r1, #58	; 0x3a
 8000ada:	2032      	movs	r0, #50	; 0x32
 8000adc:	f000 fcae 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	213b      	movs	r1, #59	; 0x3b
 8000aea:	2032      	movs	r0, #50	; 0x32
 8000aec:	f000 fca6 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	461a      	mov	r2, r3
 8000af4:	213c      	movs	r1, #60	; 0x3c
 8000af6:	2032      	movs	r0, #50	; 0x32
 8000af8:	f000 fca0 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000afc:	2332      	movs	r3, #50	; 0x32
 8000afe:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	461a      	mov	r2, r3
 8000b04:	213d      	movs	r1, #61	; 0x3d
 8000b06:	2032      	movs	r0, #50	; 0x32
 8000b08:	f000 fc98 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000b18:	f000 fc62 	bl	80013e0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000b1c:	2080      	movs	r0, #128	; 0x80
 8000b1e:	f7ff ffa5 	bl	8000a6c <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000b22:	2004      	movs	r0, #4
 8000b24:	f7ff ff83 	bl	8000a2e <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f7ff ffba 	bl	8000aa2 <LSM303AGR_AccClickITEnable>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000b40:	f000 fc04 	bl	800134c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	2032      	movs	r0, #50	; 0x32
 8000b50:	f000 fc74 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2123      	movs	r1, #35	; 0x23
 8000b5e:	2032      	movs	r0, #50	; 0x32
 8000b60:	f000 fc6c 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000b80:	2300      	movs	r3, #0
 8000b82:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000b84:	f000 fbe2 	bl	800134c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000b88:	210f      	movs	r1, #15
 8000b8a:	2032      	movs	r0, #50	; 0x32
 8000b8c:	f000 fc69 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000ba4:	2124      	movs	r1, #36	; 0x24
 8000ba6:	2032      	movs	r0, #50	; 0x32
 8000ba8:	f000 fc5b 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bb6:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2124      	movs	r1, #36	; 0x24
 8000bbe:	2032      	movs	r0, #50	; 0x32
 8000bc0:	f000 fc3c 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000bd6:	2121      	movs	r1, #33	; 0x21
 8000bd8:	2032      	movs	r0, #50	; 0x32
 8000bda:	f000 fc42 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000bea:	7bfa      	ldrb	r2, [r7, #15]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2121      	movs	r1, #33	; 0x21
 8000bf8:	2032      	movs	r0, #50	; 0x32
 8000bfa:	f000 fc1f 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000c10:	2121      	movs	r1, #33	; 0x21
 8000c12:	2032      	movs	r0, #50	; 0x32
 8000c14:	f000 fc25 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	f023 0308 	bic.w	r3, r3, #8
 8000c22:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2121      	movs	r1, #33	; 0x21
 8000c32:	2032      	movs	r0, #50	; 0x32
 8000c34:	f000 fc02 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000c48:	2300      	movs	r3, #0
 8000c4a:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000c50:	2301      	movs	r3, #1
 8000c52:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000c54:	2123      	movs	r1, #35	; 0x23
 8000c56:	2032      	movs	r0, #50	; 0x32
 8000c58:	f000 fc03 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000c60:	2124      	movs	r1, #36	; 0x24
 8000c62:	2032      	movs	r0, #50	; 0x32
 8000c64:	f000 fbfd 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000c6c:	2128      	movs	r1, #40	; 0x28
 8000c6e:	2032      	movs	r0, #50	; 0x32
 8000c70:	f000 fbf7 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000c7a:	2129      	movs	r1, #41	; 0x29
 8000c7c:	2032      	movs	r0, #50	; 0x32
 8000c7e:	f000 fbf0 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000c88:	212a      	movs	r1, #42	; 0x2a
 8000c8a:	2032      	movs	r0, #50	; 0x32
 8000c8c:	f000 fbe9 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000c96:	212b      	movs	r1, #43	; 0x2b
 8000c98:	2032      	movs	r0, #50	; 0x32
 8000c9a:	f000 fbe2 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000ca4:	212c      	movs	r1, #44	; 0x2c
 8000ca6:	2032      	movs	r0, #50	; 0x32
 8000ca8:	f000 fbdb 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000cb2:	212d      	movs	r1, #45	; 0x2d
 8000cb4:	2032      	movs	r0, #50	; 0x32
 8000cb6:	f000 fbd4 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000cc0:	7d3b      	ldrb	r3, [r7, #20]
 8000cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d126      	bne.n	8000d18 <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	77fb      	strb	r3, [r7, #31]
 8000cce:	e01f      	b.n	8000d10 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000cd0:	7ffb      	ldrb	r3, [r7, #31]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f107 0220 	add.w	r2, r7, #32
 8000cda:	4413      	add	r3, r2
 8000cdc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	7ffb      	ldrb	r3, [r7, #31]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	f107 0120 	add.w	r1, r7, #32
 8000cee:	440b      	add	r3, r1
 8000cf0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	b212      	sxth	r2, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	f107 0120 	add.w	r1, r7, #32
 8000d04:	440b      	add	r3, r1
 8000d06:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000d0a:	7ffb      	ldrb	r3, [r7, #31]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	77fb      	strb	r3, [r7, #31]
 8000d10:	7ffb      	ldrb	r3, [r7, #31]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d9dc      	bls.n	8000cd0 <LSM303DLHC_AccReadXYZ+0x90>
 8000d16:	e025      	b.n	8000d64 <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	77fb      	strb	r3, [r7, #31]
 8000d1c:	e01f      	b.n	8000d5e <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	f107 0220 	add.w	r2, r7, #32
 8000d26:	4413      	add	r3, r2
 8000d28:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	7ffb      	ldrb	r3, [r7, #31]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	3301      	adds	r3, #1
 8000d38:	f107 0120 	add.w	r1, r7, #32
 8000d3c:	440b      	add	r3, r1
 8000d3e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7ffb      	ldrb	r3, [r7, #31]
 8000d4a:	b212      	sxth	r2, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	f107 0120 	add.w	r1, r7, #32
 8000d52:	440b      	add	r3, r1
 8000d54:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000d58:	7ffb      	ldrb	r3, [r7, #31]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	77fb      	strb	r3, [r7, #31]
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d9dc      	bls.n	8000d1e <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000d64:	7d3b      	ldrb	r3, [r7, #20]
 8000d66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d6a:	2b30      	cmp	r3, #48	; 0x30
 8000d6c:	d013      	beq.n	8000d96 <LSM303DLHC_AccReadXYZ+0x156>
 8000d6e:	2b30      	cmp	r3, #48	; 0x30
 8000d70:	dc14      	bgt.n	8000d9c <LSM303DLHC_AccReadXYZ+0x15c>
 8000d72:	2b20      	cmp	r3, #32
 8000d74:	d00c      	beq.n	8000d90 <LSM303DLHC_AccReadXYZ+0x150>
 8000d76:	2b20      	cmp	r3, #32
 8000d78:	dc10      	bgt.n	8000d9c <LSM303DLHC_AccReadXYZ+0x15c>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <LSM303DLHC_AccReadXYZ+0x144>
 8000d7e:	2b10      	cmp	r3, #16
 8000d80:	d003      	beq.n	8000d8a <LSM303DLHC_AccReadXYZ+0x14a>
 8000d82:	e00b      	b.n	8000d9c <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000d84:	2301      	movs	r3, #1
 8000d86:	77bb      	strb	r3, [r7, #30]
    break;
 8000d88:	e008      	b.n	8000d9c <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	77bb      	strb	r3, [r7, #30]
    break;
 8000d8e:	e005      	b.n	8000d9c <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000d90:	2304      	movs	r3, #4
 8000d92:	77bb      	strb	r3, [r7, #30]
    break;
 8000d94:	e002      	b.n	8000d9c <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000d96:	230c      	movs	r3, #12
 8000d98:	77bb      	strb	r3, [r7, #30]
    break;
 8000d9a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	77fb      	strb	r3, [r7, #31]
 8000da0:	e015      	b.n	8000dce <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000da2:	7ffb      	ldrb	r3, [r7, #31]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	f107 0220 	add.w	r2, r7, #32
 8000daa:	4413      	add	r3, r2
 8000dac:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	7fbb      	ldrb	r3, [r7, #30]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	fb12 f303 	smulbb	r3, r2, r3
 8000dba:	b299      	uxth	r1, r3
 8000dbc:	7ffb      	ldrb	r3, [r7, #31]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b20a      	sxth	r2, r1
 8000dc6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000dc8:	7ffb      	ldrb	r3, [r7, #31]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	77fb      	strb	r3, [r7, #31]
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d9e6      	bls.n	8000da2 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000dec:	2121      	movs	r1, #33	; 0x21
 8000dee:	2032      	movs	r0, #50	; 0x32
 8000df0:	f000 fb37 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	f023 0304 	bic.w	r3, r3, #4
 8000dfe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2121      	movs	r1, #33	; 0x21
 8000e0e:	2032      	movs	r0, #50	; 0x32
 8000e10:	f000 fb14 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000e2a:	2122      	movs	r1, #34	; 0x22
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f000 fb18 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	461a      	mov	r2, r3
 8000e42:	2122      	movs	r1, #34	; 0x22
 8000e44:	2032      	movs	r0, #50	; 0x32
 8000e46:	f000 faf9 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000e60:	2138      	movs	r1, #56	; 0x38
 8000e62:	2032      	movs	r0, #50	; 0x32
 8000e64:	f000 fafd 	bl	8001462 <COMPASSACCELERO_IO_Read>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000e6c:	7bfa      	ldrb	r2, [r7, #15]
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	461a      	mov	r2, r3
 8000e78:	2138      	movs	r1, #56	; 0x38
 8000e7a:	2032      	movs	r0, #50	; 0x32
 8000e7c:	f000 fade 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000e80:	230a      	movs	r3, #10
 8000e82:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	461a      	mov	r2, r3
 8000e88:	213a      	movs	r1, #58	; 0x3a
 8000e8a:	2032      	movs	r0, #50	; 0x32
 8000e8c:	f000 fad6 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000e90:	2305      	movs	r3, #5
 8000e92:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	461a      	mov	r2, r3
 8000e98:	213b      	movs	r1, #59	; 0x3b
 8000e9a:	2032      	movs	r0, #50	; 0x32
 8000e9c:	f000 face 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	213c      	movs	r1, #60	; 0x3c
 8000ea6:	2032      	movs	r0, #50	; 0x32
 8000ea8:	f000 fac8 	bl	800143c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000eac:	2332      	movs	r3, #50	; 0x32
 8000eae:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	213d      	movs	r1, #61	; 0x3d
 8000eb6:	2032      	movs	r0, #50	; 0x32
 8000eb8:	f000 fac0 	bl	800143c <COMPASSACCELERO_IO_Write>
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000ec8:	f000 fa8a 	bl	80013e0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8000ecc:	2080      	movs	r0, #128	; 0x80
 8000ece:	f7ff ffa5 	bl	8000e1c <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000ed2:	2004      	movs	r0, #4
 8000ed4:	f7ff ff83 	bl	8000dde <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff ffba 	bl	8000e52 <LSM303DLHC_AccClickITEnable>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b090      	sub	sp, #64	; 0x40
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10c      	bne.n	8000f0e <BSP_LED_Init+0x2a>
 8000ef4:	4b50      	ldr	r3, [pc, #320]	; (8001038 <BSP_LED_Init+0x154>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a4f      	ldr	r2, [pc, #316]	; (8001038 <BSP_LED_Init+0x154>)
 8000efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000efe:	6153      	str	r3, [r2, #20]
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <BSP_LED_Init+0x154>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0c:	e06e      	b.n	8000fec <BSP_LED_Init+0x108>
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d10c      	bne.n	8000f2e <BSP_LED_Init+0x4a>
 8000f14:	4b48      	ldr	r3, [pc, #288]	; (8001038 <BSP_LED_Init+0x154>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	4a47      	ldr	r2, [pc, #284]	; (8001038 <BSP_LED_Init+0x154>)
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1e:	6153      	str	r3, [r2, #20]
 8000f20:	4b45      	ldr	r3, [pc, #276]	; (8001038 <BSP_LED_Init+0x154>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	e05e      	b.n	8000fec <BSP_LED_Init+0x108>
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d10c      	bne.n	8000f4e <BSP_LED_Init+0x6a>
 8000f34:	4b40      	ldr	r3, [pc, #256]	; (8001038 <BSP_LED_Init+0x154>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	4a3f      	ldr	r2, [pc, #252]	; (8001038 <BSP_LED_Init+0x154>)
 8000f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3e:	6153      	str	r3, [r2, #20]
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <BSP_LED_Init+0x154>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	e04e      	b.n	8000fec <BSP_LED_Init+0x108>
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d10c      	bne.n	8000f6e <BSP_LED_Init+0x8a>
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <BSP_LED_Init+0x154>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	4a37      	ldr	r2, [pc, #220]	; (8001038 <BSP_LED_Init+0x154>)
 8000f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5e:	6153      	str	r3, [r2, #20]
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <BSP_LED_Init+0x154>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	e03e      	b.n	8000fec <BSP_LED_Init+0x108>
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d10c      	bne.n	8000f8e <BSP_LED_Init+0xaa>
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <BSP_LED_Init+0x154>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <BSP_LED_Init+0x154>)
 8000f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7e:	6153      	str	r3, [r2, #20]
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <BSP_LED_Init+0x154>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	e02e      	b.n	8000fec <BSP_LED_Init+0x108>
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d10c      	bne.n	8000fae <BSP_LED_Init+0xca>
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <BSP_LED_Init+0x154>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <BSP_LED_Init+0x154>)
 8000f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9e:	6153      	str	r3, [r2, #20]
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <BSP_LED_Init+0x154>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	e01e      	b.n	8000fec <BSP_LED_Init+0x108>
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b06      	cmp	r3, #6
 8000fb2:	d10c      	bne.n	8000fce <BSP_LED_Init+0xea>
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <BSP_LED_Init+0x154>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <BSP_LED_Init+0x154>)
 8000fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbe:	6153      	str	r3, [r2, #20]
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <BSP_LED_Init+0x154>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	e00e      	b.n	8000fec <BSP_LED_Init+0x108>
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d10b      	bne.n	8000fec <BSP_LED_Init+0x108>
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <BSP_LED_Init+0x154>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <BSP_LED_Init+0x154>)
 8000fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fde:	6153      	str	r3, [r2, #20]
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <BSP_LED_Init+0x154>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <BSP_LED_Init+0x158>)
 8000ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <BSP_LED_Init+0x15c>)
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fcab 	bl	800196c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <BSP_LED_Init+0x15c>)
 800101a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <BSP_LED_Init+0x158>)
 8001022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	f000 ff0d 	bl	8001e48 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	3740      	adds	r7, #64	; 0x40
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	08003b74 	.word	0x08003b74
 8001040:	200000ac 	.word	0x200000ac

08001044 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <BSP_LED_On+0x2c>)
 8001052:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <BSP_LED_On+0x30>)
 800105a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	f000 fef1 	bl	8001e48 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000ac 	.word	0x200000ac
 8001074:	08003b74 	.word	0x08003b74

08001078 <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <BSP_LED_Off+0x2c>)
 8001086:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <BSP_LED_Off+0x30>)
 800108e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	f000 fed7 	bl	8001e48 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000ac 	.word	0x200000ac
 80010a8:	08003b74 	.word	0x08003b74

080010ac <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <BSP_LED_Toggle+0x2c>)
 80010ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4906      	ldr	r1, [pc, #24]	; (80010dc <BSP_LED_Toggle+0x30>)
 80010c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4610      	mov	r0, r2
 80010ca:	f000 fed5 	bl	8001e78 <HAL_GPIO_TogglePin>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000ac 	.word	0x200000ac
 80010dc:	08003b74 	.word	0x08003b74

080010e0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10b      	bne.n	800110e <BSP_PB_Init+0x2e>
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <BSP_PB_Init+0xbc>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a28      	ldr	r2, [pc, #160]	; (800119c <BSP_PB_Init+0xbc>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <BSP_PB_Init+0xbc>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <BSP_PB_Init+0xbc>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a22      	ldr	r2, [pc, #136]	; (800119c <BSP_PB_Init+0xbc>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <BSP_PB_Init+0xbc>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d111      	bne.n	8001150 <BSP_PB_Init+0x70>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800112c:	2301      	movs	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <BSP_PB_Init+0xc0>)
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	f107 0214 	add.w	r2, r7, #20
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fc0e 	bl	800196c <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d11e      	bne.n	8001194 <BSP_PB_Init+0xb4>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001156:	2301      	movs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001162:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001166:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <BSP_PB_Init+0xc0>)
 800116c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001170:	f107 0214 	add.w	r2, r7, #20
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fbf8 	bl	800196c <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800117c:	2306      	movs	r3, #6
 800117e:	b25b      	sxtb	r3, r3
 8001180:	2200      	movs	r2, #0
 8001182:	210f      	movs	r1, #15
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fbba 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800118a:	2306      	movs	r3, #6
 800118c:	b25b      	sxtb	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fbd1 	bl	8001936 <HAL_NVIC_EnableIRQ>
  }
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	200000cc 	.word	0x200000cc

080011a4 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <BSP_PB_GetState+0x28>)
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fe2c 	bl	8001e18 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000cc 	.word	0x200000cc

080011d0 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <I2Cx_MspInit+0x60>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <I2Cx_MspInit+0x60>)
 80011de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e2:	6153      	str	r3, [r2, #20]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <I2Cx_MspInit+0x60>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 80011f0:	23c0      	movs	r3, #192	; 0xc0
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001200:	2304      	movs	r3, #4
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	480a      	ldr	r0, [pc, #40]	; (8001234 <I2Cx_MspInit+0x64>)
 800120c:	f000 fbae 	bl	800196c <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <I2Cx_MspInit+0x60>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <I2Cx_MspInit+0x60>)
 8001216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121a:	61d3      	str	r3, [r2, #28]
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <I2Cx_MspInit+0x60>)
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400

08001238 <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800123c:	4811      	ldr	r0, [pc, #68]	; (8001284 <I2Cx_Init+0x4c>)
 800123e:	f001 f939 	bl	80024b4 <HAL_I2C_GetState>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d11a      	bne.n	800127e <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <I2Cx_Init+0x4c>)
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <I2Cx_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <I2Cx_Init+0x4c>)
 8001250:	2232      	movs	r2, #50	; 0x32
 8001252:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <I2Cx_Init+0x4c>)
 8001256:	2201      	movs	r2, #1
 8001258:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <I2Cx_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <I2Cx_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <I2Cx_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <I2Cx_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <I2Cx_Init+0x4c>)
 8001274:	f7ff ffac 	bl	80011d0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <I2Cx_Init+0x4c>)
 800127a:	f000 fe2f 	bl	8001edc <HAL_I2C_Init>
  }
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000fc 	.word	0x200000fc
 8001288:	40005400 	.word	0x40005400

0800128c <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	717b      	strb	r3, [r7, #5]
 800129a:	4613      	mov	r3, r2
 800129c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <I2Cx_WriteData+0x48>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	88f9      	ldrh	r1, [r7, #6]
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	2301      	movs	r3, #1
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <I2Cx_WriteData+0x4c>)
 80012ba:	f000 fecd 	bl	8002058 <HAL_I2C_Mem_Write>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80012c8:	f000 f834 	bl	8001334 <I2Cx_Error>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000d0 	.word	0x200000d0
 80012d8:	200000fc 	.word	0x200000fc

080012dc <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af04      	add	r7, sp, #16
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	80fb      	strh	r3, [r7, #6]
 80012e8:	4613      	mov	r3, r2
 80012ea:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80012f4:	797b      	ldrb	r3, [r7, #5]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <I2Cx_ReadData+0x50>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	88f9      	ldrh	r1, [r7, #6]
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030e 	add.w	r3, r7, #14
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <I2Cx_ReadData+0x54>)
 800130e:	f000 ffb7 	bl	8002280 <HAL_I2C_Mem_Read>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800131c:	f000 f80a 	bl	8001334 <I2Cx_Error>
  
  }
  return value;
 8001320:	7bbb      	ldrb	r3, [r7, #14]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000d0 	.word	0x200000d0
 8001330:	200000fc 	.word	0x200000fc

08001334 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <I2Cx_Error+0x14>)
 800133a:	f000 fe5e 	bl	8001ffa <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800133e:	f7ff ff7b 	bl	8001238 <I2Cx_Init>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000fc 	.word	0x200000fc

0800134c <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <COMPASSACCELERO_IO_Init+0x8c>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001382:	2304      	movs	r3, #4
 8001384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	4619      	mov	r1, r3
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <COMPASSACCELERO_IO_Init+0x90>)
 800139a:	f000 fae7 	bl	800196c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 800139e:	2200      	movs	r2, #0
 80013a0:	210f      	movs	r1, #15
 80013a2:	2008      	movs	r0, #8
 80013a4:	f000 faab 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 80013a8:	2008      	movs	r0, #8
 80013aa:	f000 fac4 	bl	8001936 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80013ae:	2330      	movs	r3, #48	; 0x30
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <COMPASSACCELERO_IO_Init+0x90>)
 80013c6:	f000 fad1 	bl	800196c <HAL_GPIO_Init>
  
  I2Cx_Init();
 80013ca:	f7ff ff35 	bl	8001238 <I2Cx_Init>
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48001000 	.word	0x48001000

080013e0 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80013ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80013fe:	2330      	movs	r3, #48	; 0x30
 8001400:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001402:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4808      	ldr	r0, [pc, #32]	; (8001438 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001416:	f000 faa9 	bl	800196c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800141a:	2200      	movs	r2, #0
 800141c:	210f      	movs	r1, #15
 800141e:	200a      	movs	r0, #10
 8001420:	f000 fa6d 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001424:	200a      	movs	r0, #10
 8001426:	f000 fa86 	bl	8001936 <HAL_NVIC_EnableIRQ>
  
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	48001000 	.word	0x48001000

0800143c <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	460b      	mov	r3, r1
 8001448:	717b      	strb	r3, [r7, #5]
 800144a:	4613      	mov	r3, r2
 800144c:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800144e:	793a      	ldrb	r2, [r7, #4]
 8001450:	7979      	ldrb	r1, [r7, #5]
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff19 	bl	800128c <I2Cx_WriteData>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	460a      	mov	r2, r1
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001472:	797a      	ldrb	r2, [r7, #5]
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff2f 	bl	80012dc <I2Cx_ReadData>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001492:	2300      	movs	r3, #0
 8001494:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <BSP_ACCELERO_Init+0x178>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4798      	blx	r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b33      	cmp	r3, #51	; 0x33
 80014a8:	d14f      	bne.n	800154a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80014aa:	4b56      	ldr	r3, [pc, #344]	; (8001604 <BSP_ACCELERO_Init+0x17c>)
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <BSP_ACCELERO_Init+0x178>)
 80014ae:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80014b4:	2340      	movs	r3, #64	; 0x40
 80014b6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80014b8:	2307      	movs	r3, #7
 80014ba:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80014bc:	2300      	movs	r3, #0
 80014be:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 80014c0:	2300      	movs	r3, #0
 80014c2:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 80014c4:	2300      	movs	r3, #0
 80014c6:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 80014c8:	2308      	movs	r3, #8
 80014ca:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80014cc:	7b3a      	ldrb	r2, [r7, #12]
 80014ce:	7b7b      	ldrb	r3, [r7, #13]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	8abb      	ldrh	r3, [r7, #20]
 80014de:	4313      	orrs	r3, r2
 80014e0:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80014e2:	7c3a      	ldrb	r2, [r7, #16]
 80014e4:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	7cbb      	ldrb	r3, [r7, #18]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
 8001502:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001504:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <BSP_ACCELERO_Init+0x17c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	8aba      	ldrh	r2, [r7, #20]
 800150c:	4610      	mov	r0, r2
 800150e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8001514:	2310      	movs	r3, #16
 8001516:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001520:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001522:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001524:	4313      	orrs	r3, r2
 8001526:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001528:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800152a:	4313      	orrs	r3, r2
 800152c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800152e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001530:	4313      	orrs	r3, r2
 8001532:	b2db      	uxtb	r3, r3
 8001534:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <BSP_ACCELERO_Init+0x17c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	8aba      	ldrh	r2, [r7, #20]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	4610      	mov	r0, r2
 8001542:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	75fb      	strb	r3, [r7, #23]
 8001548:	e054      	b.n	80015f4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <BSP_ACCELERO_Init+0x180>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4798      	blx	r3
 8001550:	4603      	mov	r3, r0
 8001552:	2b33      	cmp	r3, #51	; 0x33
 8001554:	d14e      	bne.n	80015f4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <BSP_ACCELERO_Init+0x17c>)
 8001558:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <BSP_ACCELERO_Init+0x180>)
 800155a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800155c:	2300      	movs	r3, #0
 800155e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8001560:	2340      	movs	r3, #64	; 0x40
 8001562:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8001564:	2307      	movs	r3, #7
 8001566:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8001568:	2300      	movs	r3, #0
 800156a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800156c:	2300      	movs	r3, #0
 800156e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8001570:	2300      	movs	r3, #0
 8001572:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8001574:	2308      	movs	r3, #8
 8001576:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001578:	7b3a      	ldrb	r2, [r7, #12]
 800157a:	7b7b      	ldrb	r3, [r7, #13]
 800157c:	4313      	orrs	r3, r2
 800157e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001580:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001582:	4313      	orrs	r3, r2
 8001584:	b2db      	uxtb	r3, r3
 8001586:	b29a      	uxth	r2, r3
 8001588:	8abb      	ldrh	r3, [r7, #20]
 800158a:	4313      	orrs	r3, r2
 800158c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800158e:	7c3a      	ldrb	r2, [r7, #16]
 8001590:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001592:	4313      	orrs	r3, r2
 8001594:	b2da      	uxtb	r2, r3
 8001596:	7cbb      	ldrb	r3, [r7, #18]
 8001598:	4313      	orrs	r3, r2
 800159a:	b2da      	uxtb	r2, r3
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	4313      	orrs	r3, r2
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <BSP_ACCELERO_Init+0x17c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	8aba      	ldrh	r2, [r7, #20]
 80015b8:	4610      	mov	r0, r2
 80015ba:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 80015c0:	2310      	movs	r3, #16
 80015c2:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80015cc:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80015ce:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80015d4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80015da:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80015dc:	4313      	orrs	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <BSP_ACCELERO_Init+0x17c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	8aba      	ldrh	r2, [r7, #20]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	4610      	mov	r0, r2
 80015ee:	4798      	blx	r3

    ret = ACCELERO_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000078 	.word	0x20000078
 8001604:	20000148 	.word	0x20000148
 8001608:	20000044 	.word	0x20000044

0800160c <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <BSP_ACCELERO_GetXYZ+0x24>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <BSP_ACCELERO_GetXYZ+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
  }
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000148 	.word	0x20000148

08001634 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x28>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f94f 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7fe ff64 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f967 	bl	8001952 <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f92f 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000040 	.word	0x20000040
 80016b8:	200000d8 	.word	0x200000d8
 80016bc:	200000d4 	.word	0x200000d4

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200000d8 	.word	0x200000d8
 80016e4:	2000014c 	.word	0x2000014c

080016e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	2000014c 	.word	0x2000014c

08001700 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000d8 	.word	0x200000d8

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	e154      	b.n	8001c26 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8146 	beq.w	8001c20 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d005      	beq.n	80019ac <HAL_GPIO_Init+0x40>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d130      	bne.n	8001a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e2:	2201      	movs	r2, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 0201 	and.w	r2, r3, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d017      	beq.n	8001a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d123      	bne.n	8001a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	08da      	lsrs	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	6939      	ldr	r1, [r7, #16]
 8001a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0203 	and.w	r2, r3, #3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80a0 	beq.w	8001c20 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae0:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001af8:	4a53      	ldr	r2, [pc, #332]	; (8001c48 <HAL_GPIO_Init+0x2dc>)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b22:	d019      	beq.n	8001b58 <HAL_GPIO_Init+0x1ec>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a49      	ldr	r2, [pc, #292]	; (8001c4c <HAL_GPIO_Init+0x2e0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <HAL_GPIO_Init+0x1e8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a48      	ldr	r2, [pc, #288]	; (8001c50 <HAL_GPIO_Init+0x2e4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <HAL_GPIO_Init+0x1e4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <HAL_GPIO_Init+0x2e8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_GPIO_Init+0x1e0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <HAL_GPIO_Init+0x2ec>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_GPIO_Init+0x1dc>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e008      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b48:	2305      	movs	r3, #5
 8001b4a:	e006      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e004      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	f002 0203 	and.w	r2, r2, #3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4093      	lsls	r3, r2
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6a:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_GPIO_Init+0x2dc>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bc6:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c1a:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f aea3 	bne.w	800197c <HAL_GPIO_Init+0x10>
  }
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	48001000 	.word	0x48001000
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c6e:	e0b8      	b.n	8001de2 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c70:	2201      	movs	r2, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80ab 	beq.w	8001ddc <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c86:	4a5e      	ldr	r2, [pc, #376]	; (8001e00 <HAL_GPIO_DeInit+0x1a0>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cae:	d019      	beq.n	8001ce4 <HAL_GPIO_DeInit+0x84>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_GPIO_DeInit+0x1a4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d013      	beq.n	8001ce0 <HAL_GPIO_DeInit+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <HAL_GPIO_DeInit+0x1a8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00d      	beq.n	8001cdc <HAL_GPIO_DeInit+0x7c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_GPIO_DeInit+0x1ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d007      	beq.n	8001cd8 <HAL_GPIO_DeInit+0x78>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_DeInit+0x1b0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_GPIO_DeInit+0x74>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e008      	b.n	8001ce6 <HAL_GPIO_DeInit+0x86>
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_DeInit+0x86>
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e004      	b.n	8001ce6 <HAL_GPIO_DeInit+0x86>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_DeInit+0x86>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_GPIO_DeInit+0x86>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	f002 0203 	and.w	r2, r2, #3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d132      	bne.n	8001d5c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4945      	ldr	r1, [pc, #276]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4941      	ldr	r1, [pc, #260]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d12:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	493e      	ldr	r1, [pc, #248]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001d20:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	493a      	ldr	r1, [pc, #232]	; (8001e14 <HAL_GPIO_DeInit+0x1b4>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d3e:	4a30      	ldr	r2, [pc, #192]	; (8001e00 <HAL_GPIO_DeInit+0x1a0>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	482c      	ldr	r0, [pc, #176]	; (8001e00 <HAL_GPIO_DeInit+0x1a0>)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	400a      	ands	r2, r1
 8001d56:	3302      	adds	r3, #2
 8001d58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2103      	movs	r1, #3
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	08d2      	lsrs	r2, r2, #3
 8001d92:	4019      	ands	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2103      	movs	r1, #3
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	2101      	movs	r1, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2103      	movs	r1, #3
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3301      	adds	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f47f af40 	bne.w	8001c70 <HAL_GPIO_DeInit+0x10>
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000
 8001e04:	48000400 	.word	0x48000400
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	48000c00 	.word	0x48000c00
 8001e10:	48001000 	.word	0x48001000
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43d9      	mvns	r1, r3
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	400b      	ands	r3, r1
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fa16 	bl	80002fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e081      	b.n	8001ff2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fb2e 	bl	8000564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	e006      	b.n	8001f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d104      	bne.n	8001f76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69d9      	ldr	r1, [r3, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e021      	b.n	8002050 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7fe fae1 	bl	80005ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	4608      	mov	r0, r1
 8002062:	4611      	mov	r1, r2
 8002064:	461a      	mov	r2, r3
 8002066:	4603      	mov	r3, r0
 8002068:	817b      	strh	r3, [r7, #10]
 800206a:	460b      	mov	r3, r1
 800206c:	813b      	strh	r3, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	f040 80f9 	bne.w	8002272 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_I2C_Mem_Write+0x34>
 8002086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0ed      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_I2C_Mem_Write+0x4e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0e6      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ae:	f7ff fb1b 	bl	80016e8 <HAL_GetTick>
 80020b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2319      	movs	r3, #25
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fad1 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d1      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2221      	movs	r2, #33	; 0x21
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2240      	movs	r2, #64	; 0x40
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f8:	88f8      	ldrh	r0, [r7, #6]
 80020fa:	893a      	ldrh	r2, [r7, #8]
 80020fc:	8979      	ldrh	r1, [r7, #10]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4603      	mov	r3, r0
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f9e1 	bl	80024d0 <I2C_RequestMemoryWrite>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0a9      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2bff      	cmp	r3, #255	; 0xff
 8002128:	d90e      	bls.n	8002148 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	b2da      	uxtb	r2, r3
 8002136:	8979      	ldrh	r1, [r7, #10]
 8002138:	2300      	movs	r3, #0
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fbc3 	bl	80028cc <I2C_TransferConfig>
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	b2da      	uxtb	r2, r3
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	2300      	movs	r3, #0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fbb2 	bl	80028cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fabb 	bl	80026e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e07b      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d034      	beq.n	8002220 <HAL_I2C_Mem_Write+0x1c8>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d130      	bne.n	8002220 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	2200      	movs	r2, #0
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fa4d 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e04d      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2bff      	cmp	r3, #255	; 0xff
 80021e0:	d90e      	bls.n	8002200 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	8979      	ldrh	r1, [r7, #10]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fb67 	bl	80028cc <I2C_TransferConfig>
 80021fe:	e00f      	b.n	8002220 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	b2da      	uxtb	r2, r3
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	2300      	movs	r3, #0
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fb56 	bl	80028cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d19e      	bne.n	8002168 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fa9a 	bl	8002768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e01a      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2220      	movs	r2, #32
 8002244:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_I2C_Mem_Write+0x224>)
 8002252:	400b      	ands	r3, r1
 8002254:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002272:	2302      	movs	r3, #2
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	fe00e800 	.word	0xfe00e800

08002280 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4603      	mov	r3, r0
 8002290:	817b      	strh	r3, [r7, #10]
 8002292:	460b      	mov	r3, r1
 8002294:	813b      	strh	r3, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f040 80fd 	bne.w	80024a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x34>
 80022ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0f1      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Mem_Read+0x4e>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0ea      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022d6:	f7ff fa07 	bl	80016e8 <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2319      	movs	r3, #25
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f9bd 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0d5      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2222      	movs	r2, #34	; 0x22
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2240      	movs	r2, #64	; 0x40
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a3a      	ldr	r2, [r7, #32]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002320:	88f8      	ldrh	r0, [r7, #6]
 8002322:	893a      	ldrh	r2, [r7, #8]
 8002324:	8979      	ldrh	r1, [r7, #10]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	4603      	mov	r3, r0
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f921 	bl	8002578 <I2C_RequestMemoryRead>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0ad      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2bff      	cmp	r3, #255	; 0xff
 8002350:	d90e      	bls.n	8002370 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	22ff      	movs	r2, #255	; 0xff
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	b2da      	uxtb	r2, r3
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <HAL_I2C_Mem_Read+0x22c>)
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 faaf 	bl	80028cc <I2C_TransferConfig>
 800236e:	e00f      	b.n	8002390 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	b2da      	uxtb	r2, r3
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_I2C_Mem_Read+0x22c>)
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa9e 	bl	80028cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	2200      	movs	r2, #0
 8002398:	2104      	movs	r1, #4
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f964 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07c      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d034      	beq.n	8002450 <HAL_I2C_Mem_Read+0x1d0>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d130      	bne.n	8002450 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f935 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e04d      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	d90e      	bls.n	8002430 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fa4f 	bl	80028cc <I2C_TransferConfig>
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa3e 	bl	80028cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d19a      	bne.n	8002390 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f982 	bl	8002768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01a      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2220      	movs	r2, #32
 8002474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_I2C_Mem_Read+0x230>)
 8002482:	400b      	ands	r3, r1
 8002484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	80002400 	.word	0x80002400
 80024b0:	fe00e800 	.word	0xfe00e800

080024b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c2:	b2db      	uxtb	r3, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <I2C_RequestMemoryWrite+0xa4>)
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f9e7 	bl	80028cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	69b9      	ldr	r1, [r7, #24]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f8f0 	bl	80026e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e02c      	b.n	800256c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002518:	893b      	ldrh	r3, [r7, #8]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
 8002522:	e015      	b.n	8002550 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002524:	893b      	ldrh	r3, [r7, #8]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	b29b      	uxth	r3, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8d6 	bl	80026e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e012      	b.n	800256c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002546:	893b      	ldrh	r3, [r7, #8]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2200      	movs	r2, #0
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f884 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	80002000 	.word	0x80002000

08002578 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4603      	mov	r3, r0
 8002588:	817b      	strh	r3, [r7, #10]
 800258a:	460b      	mov	r3, r1
 800258c:	813b      	strh	r3, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	8979      	ldrh	r1, [r7, #10]
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <I2C_RequestMemoryRead+0xa4>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2300      	movs	r3, #0
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f994 	bl	80028cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f89d 	bl	80026e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e02c      	b.n	8002612 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d105      	bne.n	80025ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025be:	893b      	ldrh	r3, [r7, #8]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
 80025c8:	e015      	b.n	80025f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025ca:	893b      	ldrh	r3, [r7, #8]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f883 	bl	80026e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e012      	b.n	8002612 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ec:	893b      	ldrh	r3, [r7, #8]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f831 	bl	8002668 <I2C_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	80002000 	.word	0x80002000

08002620 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d007      	beq.n	800265c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	619a      	str	r2, [r3, #24]
  }
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002678:	e022      	b.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d01e      	beq.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7ff f831 	bl	80016e8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d113      	bne.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e00f      	b.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d0cd      	beq.n	800267a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026f4:	e02c      	b.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f870 	bl	80027e0 <I2C_IsAcknowledgeFailed>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e02a      	b.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d01e      	beq.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7fe ffe9 	bl	80016e8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d113      	bne.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e007      	b.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d1cb      	bne.n	80026f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002774:	e028      	b.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f830 	bl	80027e0 <I2C_IsAcknowledgeFailed>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e026      	b.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278a:	f7fe ffad 	bl	80016e8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	429a      	cmp	r2, r3
 8002798:	d302      	bcc.n	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d113      	bne.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e007      	b.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d1cf      	bne.n	8002776 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d161      	bne.n	80028be <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002808:	d02b      	beq.n	8002862 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002818:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281a:	e022      	b.n	8002862 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d01e      	beq.n	8002862 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002824:	f7fe ff60 	bl	80016e8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d302      	bcc.n	800283a <I2C_IsAcknowledgeFailed+0x5a>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d113      	bne.n	8002862 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e02e      	b.n	80028c0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b20      	cmp	r3, #32
 800286e:	d1d5      	bne.n	800281c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2210      	movs	r2, #16
 8002876:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2220      	movs	r2, #32
 800287e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fecd 	bl	8002620 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <I2C_IsAcknowledgeFailed+0xe8>)
 8002892:	400b      	ands	r3, r1
 8002894:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	fe00e800 	.word	0xfe00e800

080028cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	817b      	strh	r3, [r7, #10]
 80028da:	4613      	mov	r3, r2
 80028dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	0d5b      	lsrs	r3, r3, #21
 80028e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <I2C_TransferConfig+0x58>)
 80028ee:	430b      	orrs	r3, r1
 80028f0:	43db      	mvns	r3, r3
 80028f2:	ea02 0103 	and.w	r1, r2, r3
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028fc:	7a7b      	ldrb	r3, [r7, #9]
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	431a      	orrs	r2, r3
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	03ff63ff 	.word	0x03ff63ff

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800292e:	af00      	add	r7, sp, #0
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f000 bef4 	b.w	800372a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 816a 	beq.w	8002c26 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002952:	4bb3      	ldr	r3, [pc, #716]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d00c      	beq.n	8002978 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800295e:	4bb0      	ldr	r3, [pc, #704]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d159      	bne.n	8002a1e <HAL_RCC_OscConfig+0xf6>
 800296a:	4bad      	ldr	r3, [pc, #692]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002976:	d152      	bne.n	8002a1e <HAL_RCC_OscConfig+0xf6>
 8002978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800298c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_OscConfig+0x82>
 80029a4:	4b9e      	ldr	r3, [pc, #632]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0xae>
 80029aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029d2:	4b93      	ldr	r3, [pc, #588]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029e2:	fa92 f2a2 	rbit	r2, r2
 80029e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029ee:	fab2 f282 	clz	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f002 021f 	and.w	r2, r2, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 810c 	beq.w	8002c24 <HAL_RCC_OscConfig+0x2fc>
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 8106 	bne.w	8002c24 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f000 be86 	b.w	800372a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x110>
 8002a2a:	4b7d      	ldr	r3, [pc, #500]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7c      	ldr	r2, [pc, #496]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e030      	b.n	8002a9a <HAL_RCC_OscConfig+0x172>
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x134>
 8002a42:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b74      	ldr	r3, [pc, #464]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a73      	ldr	r2, [pc, #460]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01e      	b.n	8002a9a <HAL_RCC_OscConfig+0x172>
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCC_OscConfig+0x15a>
 8002a68:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6c      	ldr	r2, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a69      	ldr	r2, [pc, #420]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e00b      	b.n	8002a9a <HAL_RCC_OscConfig+0x172>
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a66      	ldr	r2, [pc, #408]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b64      	ldr	r3, [pc, #400]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a63      	ldr	r2, [pc, #396]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a9a:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f023 020f 	bic.w	r2, r3, #15
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	495d      	ldr	r1, [pc, #372]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d059      	beq.n	8002b6c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fe16 	bl	80016e8 <HAL_GetTick>
 8002abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fe11 	bl	80016e8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d902      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f000 be29 	b.w	800372a <HAL_RCC_OscConfig+0xe02>
 8002ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002adc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002aec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_OscConfig+0x1e2>
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x20e>
 8002b0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b0e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b22:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b26:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b3a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b3e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b42:	fa92 f2a2 	rbit	r2, r2
 8002b46:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b4a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f042 0220 	orr.w	r2, r2, #32
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f002 021f 	and.w	r2, r2, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ab      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x19a>
 8002b6a:	e05c      	b.n	8002c26 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fdbc 	bl	80016e8 <HAL_GetTick>
 8002b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b76:	f7fe fdb7 	bl	80016e8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d902      	bls.n	8002b8c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	f000 bdcf 	b.w	800372a <HAL_RCC_OscConfig+0xe02>
 8002b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b90:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ba0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x296>
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x2c2>
 8002bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bda:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_RCC_OscConfig+0x2f8>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002bf2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bfe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c02:	fab2 f282 	clz	r2, r2
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f042 0220 	orr.w	r2, r2, #32
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f002 021f 	and.w	r2, r2, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ab      	bne.n	8002b76 <HAL_RCC_OscConfig+0x24e>
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_OscConfig+0x2fe>
 8002c20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 816f 	beq.w	8002f14 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c36:	4bd0      	ldr	r3, [pc, #832]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c42:	4bcd      	ldr	r3, [pc, #820]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d16c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x400>
 8002c4e:	4bca      	ldr	r3, [pc, #808]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d166      	bne.n	8002d28 <HAL_RCC_OscConfig+0x400>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c6c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <HAL_RCC_OscConfig+0x362>
 8002c84:	4bbc      	ldr	r3, [pc, #752]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	e013      	b.n	8002cb2 <HAL_RCC_OscConfig+0x38a>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ca2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cae:	4bb2      	ldr	r3, [pc, #712]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cb8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cbc:	fa92 f2a2 	rbit	r2, r2
 8002cc0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cc4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f042 0220 	orr.w	r2, r2, #32
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f002 021f 	and.w	r2, r2, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x3cc>
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 bd1b 	b.w	800372a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4ba0      	ldr	r3, [pc, #640]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	21f8      	movs	r1, #248	; 0xf8
 8002d04:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d0c:	fa91 f1a1 	rbit	r1, r1
 8002d10:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d14:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d18:	fab1 f181 	clz	r1, r1
 8002d1c:	b2c9      	uxtb	r1, r1
 8002d1e:	408b      	lsls	r3, r1
 8002d20:	4995      	ldr	r1, [pc, #596]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e0f5      	b.n	8002f14 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8085 	beq.w	8002e3e <HAL_RCC_OscConfig+0x516>
 8002d34:	2301      	movs	r3, #1
 8002d36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fcc2 	bl	80016e8 <HAL_GetTick>
 8002d64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fcbd 	bl	80016e8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d902      	bls.n	8002d80 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	f000 bcd5 	b.w	800372a <HAL_RCC_OscConfig+0xe02>
 8002d80:	2302      	movs	r3, #2
 8002d82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HAL_RCC_OscConfig+0x488>
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	e013      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4b0>
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002dc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002dd4:	4b68      	ldr	r3, [pc, #416]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002dde:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002de2:	fa92 f2a2 	rbit	r2, r2
 8002de6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002dea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002dee:	fab2 f282 	clz	r2, r2
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f042 0220 	orr.w	r2, r2, #32
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	f002 021f 	and.w	r2, r2, #31
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0af      	beq.n	8002d6a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	21f8      	movs	r1, #248	; 0xf8
 8002e1a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e22:	fa91 f1a1 	rbit	r1, r1
 8002e26:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e2a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e2e:	fab1 f181 	clz	r1, r1
 8002e32:	b2c9      	uxtb	r1, r1
 8002e34:	408b      	lsls	r3, r1
 8002e36:	4950      	ldr	r1, [pc, #320]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e06a      	b.n	8002f14 <HAL_RCC_OscConfig+0x5ec>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	461a      	mov	r2, r3
 8002e66:	2300      	movs	r3, #0
 8002e68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fc3d 	bl	80016e8 <HAL_GetTick>
 8002e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e74:	f7fe fc38 	bl	80016e8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d902      	bls.n	8002e8a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	f000 bc50 	b.w	800372a <HAL_RCC_OscConfig+0xe02>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_OscConfig+0x592>
 8002eb4:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	e013      	b.n	8002ee2 <HAL_RCC_OscConfig+0x5ba>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ecc:	2302      	movs	r3, #2
 8002ece:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ed2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_RCC_OscConfig+0x650>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ee8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ef4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1af      	bne.n	8002e74 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80da 	beq.w	80030d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d069      	beq.n	8003002 <HAL_RCC_OscConfig+0x6da>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_OscConfig+0x654>)
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	2301      	movs	r3, #1
 8002f56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7fe fbc6 	bl	80016e8 <HAL_GetTick>
 8002f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f60:	e00e      	b.n	8002f80 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fbc1 	bl	80016e8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d906      	bls.n	8002f80 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e3d9      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	10908120 	.word	0x10908120
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f96:	2202      	movs	r2, #2
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	fa93 f2a3 	rbit	r2, r3
 8002fa4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fae:	2202      	movs	r2, #2
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	4ba5      	ldr	r3, [pc, #660]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8002fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fca:	2102      	movs	r1, #2
 8002fcc:	6019      	str	r1, [r3, #0]
 8002fce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f1a3 	rbit	r1, r3
 8002fd8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fdc:	6019      	str	r1, [r3, #0]
  return result;
 8002fde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0b0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x63a>
 8003000:	e06a      	b.n	80030d8 <HAL_RCC_OscConfig+0x7b0>
 8003002:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003018:	601a      	str	r2, [r3, #0]
  return result;
 800301a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800301e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	4b8c      	ldr	r3, [pc, #560]	; (800325c <HAL_RCC_OscConfig+0x934>)
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	461a      	mov	r2, r3
 8003030:	2300      	movs	r3, #0
 8003032:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe fb58 	bl	80016e8 <HAL_GetTick>
 8003038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	e009      	b.n	8003052 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303e:	f7fe fb53 	bl	80016e8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e36b      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
 8003052:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003056:	2202      	movs	r2, #2
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800306e:	2202      	movs	r2, #2
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003086:	2202      	movs	r2, #2
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003098:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309a:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 800309c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030a2:	2102      	movs	r1, #2
 80030a4:	6019      	str	r1, [r3, #0]
 80030a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f1a3 	rbit	r1, r3
 80030b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030b4:	6019      	str	r1, [r3, #0]
  return result;
 80030b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2101      	movs	r1, #1
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1b2      	bne.n	800303e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8158 	beq.w	8003398 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d112      	bne.n	8003120 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b57      	ldr	r3, [pc, #348]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f107 0308 	add.w	r3, r7, #8
 8003118:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <HAL_RCC_OscConfig+0x938>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11a      	bne.n	8003162 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312c:	4b4c      	ldr	r3, [pc, #304]	; (8003260 <HAL_RCC_OscConfig+0x938>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_RCC_OscConfig+0x938>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003138:	f7fe fad6 	bl	80016e8 <HAL_GetTick>
 800313c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	e009      	b.n	8003156 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7fe fad1 	bl	80016e8 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e2e9      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b42      	ldr	r3, [pc, #264]	; (8003260 <HAL_RCC_OscConfig+0x938>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ef      	beq.n	8003142 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x852>
 800316c:	4b3a      	ldr	r3, [pc, #232]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4a39      	ldr	r2, [pc, #228]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6213      	str	r3, [r2, #32]
 8003178:	e02f      	b.n	80031da <HAL_RCC_OscConfig+0x8b2>
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10c      	bne.n	800319e <HAL_RCC_OscConfig+0x876>
 8003184:	4b34      	ldr	r3, [pc, #208]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a33      	ldr	r2, [pc, #204]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	e01d      	b.n	80031da <HAL_RCC_OscConfig+0x8b2>
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x89a>
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x8b2>
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a24      	ldr	r2, [pc, #144]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a21      	ldr	r2, [pc, #132]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d06b      	beq.n	80032bc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e4:	f7fe fa80 	bl	80016e8 <HAL_GetTick>
 80031e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00b      	b.n	8003206 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fa7b 	bl	80016e8 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e291      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
 8003206:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003222:	2202      	movs	r2, #2
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003234:	601a      	str	r2, [r3, #0]
  return result;
 8003236:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800323a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f043 0302 	orr.w	r3, r3, #2
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d109      	bne.n	8003264 <HAL_RCC_OscConfig+0x93c>
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <HAL_RCC_OscConfig+0x930>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	e014      	b.n	8003280 <HAL_RCC_OscConfig+0x958>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	10908120 	.word	0x10908120
 8003260:	40007000 	.word	0x40007000
 8003264:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003268:	2202      	movs	r2, #2
 800326a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	4bbb      	ldr	r3, [pc, #748]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003284:	2102      	movs	r1, #2
 8003286:	6011      	str	r1, [r2, #0]
 8003288:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	fa92 f1a2 	rbit	r1, r2
 8003292:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003296:	6011      	str	r1, [r2, #0]
  return result;
 8003298:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	fab2 f282 	clz	r2, r2
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f002 021f 	and.w	r2, r2, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d099      	beq.n	80031ee <HAL_RCC_OscConfig+0x8c6>
 80032ba:	e063      	b.n	8003384 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032bc:	f7fe fa14 	bl	80016e8 <HAL_GetTick>
 80032c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	e00b      	b.n	80032de <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fa0f 	bl	80016e8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e225      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
 80032de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032fa:	2202      	movs	r2, #2
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800330c:	601a      	str	r2, [r3, #0]
  return result;
 800330e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003312:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d102      	bne.n	800332e <HAL_RCC_OscConfig+0xa06>
 8003328:	4b90      	ldr	r3, [pc, #576]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	e00d      	b.n	800334a <HAL_RCC_OscConfig+0xa22>
 800332e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003332:	2202      	movs	r2, #2
 8003334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800334e:	2102      	movs	r1, #2
 8003350:	6011      	str	r1, [r2, #0]
 8003352:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	fa92 f1a2 	rbit	r1, r2
 800335c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003360:	6011      	str	r1, [r2, #0]
  return result;
 8003362:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	fab2 f282 	clz	r2, r2
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	f002 021f 	and.w	r2, r2, #31
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1a0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003384:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003388:	2b01      	cmp	r3, #1
 800338a:	d105      	bne.n	8003398 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338c:	4b77      	ldr	r3, [pc, #476]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4a76      	ldr	r2, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 8003392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003396:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 81c2 	beq.w	8003728 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	4b71      	ldr	r3, [pc, #452]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	f000 819c 	beq.w	80036ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	f040 8114 	bne.w	80035e6 <HAL_RCC_OscConfig+0xcbe>
 80033be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	fa93 f2a3 	rbit	r2, r3
 80033d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033d6:	601a      	str	r2, [r3, #0]
  return result;
 80033d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	461a      	mov	r2, r3
 80033f0:	2300      	movs	r3, #0
 80033f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe f978 	bl	80016e8 <HAL_GetTick>
 80033f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fc:	e009      	b.n	8003412 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fe f973 	bl	80016e8 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e18b      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
 8003412:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	fa93 f2a3 	rbit	r2, r3
 8003426:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800342a:	601a      	str	r2, [r3, #0]
  return result;
 800342c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003430:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <HAL_RCC_OscConfig+0xb24>
 8003446:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	e01b      	b.n	8003484 <HAL_RCC_OscConfig+0xb5c>
 800344c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	fa93 f2a3 	rbit	r2, r3
 8003460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800346a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4b3a      	ldr	r3, [pc, #232]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003488:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800348c:	6011      	str	r1, [r2, #0]
 800348e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	fa92 f1a2 	rbit	r1, r2
 8003498:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800349c:	6011      	str	r1, [r2, #0]
  return result;
 800349e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	f042 0220 	orr.w	r2, r2, #32
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	f002 021f 	and.w	r2, r2, #31
 80034b4:	2101      	movs	r1, #1
 80034b6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d19e      	bne.n	80033fe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4b2a      	ldr	r3, [pc, #168]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	4925      	ldr	r1, [pc, #148]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
 80034dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034f4:	601a      	str	r2, [r3, #0]
  return result;
 80034f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003506:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	461a      	mov	r2, r3
 800350e:	2301      	movs	r3, #1
 8003510:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe f8e9 	bl	80016e8 <HAL_GetTick>
 8003516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800351a:	e009      	b.n	8003530 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe f8e4 	bl	80016e8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0fc      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
 8003530:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fa93 f2a3 	rbit	r2, r3
 8003544:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003548:	601a      	str	r2, [r3, #0]
  return result;
 800354a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800354e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <HAL_RCC_OscConfig+0xc48>
 8003564:	4b01      	ldr	r3, [pc, #4]	; (800356c <HAL_RCC_OscConfig+0xc44>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	e01e      	b.n	80035a8 <HAL_RCC_OscConfig+0xc80>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fa93 f2a3 	rbit	r2, r3
 8003584:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800358e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_RCC_OscConfig+0xe0c>)
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	fa92 f1a2 	rbit	r1, r2
 80035bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035c0:	6011      	str	r1, [r2, #0]
  return result;
 80035c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	fab2 f282 	clz	r2, r2
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f042 0220 	orr.w	r2, r2, #32
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f002 021f 	and.w	r2, r2, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d09b      	beq.n	800351c <HAL_RCC_OscConfig+0xbf4>
 80035e4:	e0a0      	b.n	8003728 <HAL_RCC_OscConfig+0xe00>
 80035e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035fe:	601a      	str	r2, [r3, #0]
  return result;
 8003600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003604:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe f864 	bl	80016e8 <HAL_GetTick>
 8003620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003624:	e009      	b.n	800363a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe f85f 	bl	80016e8 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e077      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
 800363a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800363e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	fa93 f2a3 	rbit	r2, r3
 800364e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003652:	601a      	str	r2, [r3, #0]
  return result;
 8003654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003658:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_RCC_OscConfig+0xd4c>
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCC_OscConfig+0xe0c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0xd84>
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800367c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f107 0320 	add.w	r3, r7, #32
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	fa93 f2a3 	rbit	r2, r3
 8003688:	f107 031c 	add.w	r3, r7, #28
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f107 0318 	add.w	r3, r7, #24
 8003692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f107 0318 	add.w	r3, r7, #24
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <HAL_RCC_OscConfig+0xe0c>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f107 0210 	add.w	r2, r7, #16
 80036b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	f107 0210 	add.w	r2, r7, #16
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	fa92 f1a2 	rbit	r1, r2
 80036c0:	f107 020c 	add.w	r2, r7, #12
 80036c4:	6011      	str	r1, [r2, #0]
  return result;
 80036c6:	f107 020c 	add.w	r2, r7, #12
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f042 0220 	orr.w	r2, r2, #32
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f002 021f 	and.w	r2, r2, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d19e      	bne.n	8003626 <HAL_RCC_OscConfig+0xcfe>
 80036e8:	e01e      	b.n	8003728 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e018      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_RCC_OscConfig+0xe0c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003700:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	429a      	cmp	r2, r3
 8003710:	d108      	bne.n	8003724 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003712:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003716:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800371a:	1d3b      	adds	r3, r7, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000

08003738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b09e      	sub	sp, #120	; 0x78
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e162      	b.n	8003a16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003750:	4b90      	ldr	r3, [pc, #576]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d910      	bls.n	8003780 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b8d      	ldr	r3, [pc, #564]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	498b      	ldr	r1, [pc, #556]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b89      	ldr	r3, [pc, #548]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e14a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b82      	ldr	r3, [pc, #520]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	497f      	ldr	r1, [pc, #508]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80dc 	beq.w	8003964 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d13c      	bne.n	800382e <HAL_RCC_ClockConfig+0xf6>
 80037b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d102      	bne.n	80037de <HAL_RCC_ClockConfig+0xa6>
 80037d8:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	e00f      	b.n	80037fe <HAL_RCC_ClockConfig+0xc6>
 80037de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	667b      	str	r3, [r7, #100]	; 0x64
 80037ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f0:	663b      	str	r3, [r7, #96]	; 0x60
 80037f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037fa:	4b67      	ldr	r3, [pc, #412]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003802:	65ba      	str	r2, [r7, #88]	; 0x58
 8003804:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003806:	fa92 f2a2 	rbit	r2, r2
 800380a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800380c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800380e:	fab2 f282 	clz	r2, r2
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f042 0220 	orr.w	r2, r2, #32
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f002 021f 	and.w	r2, r2, #31
 800381e:	2101      	movs	r1, #1
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d17b      	bne.n	8003922 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0f3      	b.n	8003a16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d13c      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x178>
 8003836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HAL_RCC_ClockConfig+0x128>
 800385a:	4b4f      	ldr	r3, [pc, #316]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	e00f      	b.n	8003880 <HAL_RCC_ClockConfig+0x148>
 8003860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
 800386e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003872:	643b      	str	r3, [r7, #64]	; 0x40
 8003874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387c:	4b46      	ldr	r3, [pc, #280]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003884:	63ba      	str	r2, [r7, #56]	; 0x38
 8003886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003888:	fa92 f2a2 	rbit	r2, r2
 800388c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800388e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f002 021f 	and.w	r2, r2, #31
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d13a      	bne.n	8003922 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b2      	b.n	8003a16 <HAL_RCC_ClockConfig+0x2de>
 80038b0:	2302      	movs	r3, #2
 80038b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d102      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x1a0>
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	e00d      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1bc>
 80038d8:	2302      	movs	r3, #2
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	2302      	movs	r3, #2
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2202      	movs	r2, #2
 80038f6:	61ba      	str	r2, [r7, #24]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	fa92 f2a2 	rbit	r2, r2
 80038fe:	617a      	str	r2, [r7, #20]
  return result;
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	fab2 f282 	clz	r2, r2
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f002 021f 	and.w	r2, r2, #31
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f202 	lsl.w	r2, r1, r2
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e079      	b.n	8003a16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	491a      	ldr	r1, [pc, #104]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fd fed8 	bl	80016e8 <HAL_GetTick>
 8003938:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fd fed4 	bl	80016e8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e061      	b.n	8003a16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d214      	bcs.n	800399c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4906      	ldr	r1, [pc, #24]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_RCC_ClockConfig+0x25c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e040      	b.n	8003a16 <HAL_RCC_ClockConfig+0x2de>
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_RCC_ClockConfig+0x2e8>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	491a      	ldr	r1, [pc, #104]	; (8003a20 <HAL_RCC_ClockConfig+0x2e8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_RCC_ClockConfig+0x2e8>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4912      	ldr	r1, [pc, #72]	; (8003a20 <HAL_RCC_ClockConfig+0x2e8>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039da:	f000 f829 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039de:	4601      	mov	r1, r0
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_RCC_ClockConfig+0x2e8>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e8:	22f0      	movs	r2, #240	; 0xf0
 80039ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	fa92 f2a2 	rbit	r2, r2
 80039f2:	60fa      	str	r2, [r7, #12]
  return result;
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	fab2 f282 	clz	r2, r2
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	40d3      	lsrs	r3, r2
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x2ec>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	fa21 f303 	lsr.w	r3, r1, r3
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <HAL_RCC_ClockConfig+0x2f0>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_RCC_ClockConfig+0x2f4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fe26 	bl	8001660 <HAL_InitTick>
  
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3778      	adds	r7, #120	; 0x78
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08003b64 	.word	0x08003b64
 8003a28:	20000040 	.word	0x20000040
 8003a2c:	200000d4 	.word	0x200000d4

08003a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b08b      	sub	sp, #44	; 0x2c
 8003a34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x30>
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x36>
 8003a5e:	e03c      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a62:	623b      	str	r3, [r7, #32]
      break;
 8003a64:	e03c      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	fa92 f2a2 	rbit	r2, r2
 8003a78:	607a      	str	r2, [r7, #4]
  return result;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	40d3      	lsrs	r3, r2
 8003a84:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a8a:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	220f      	movs	r2, #15
 8003a94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	fa92 f2a2 	rbit	r2, r2
 8003a9c:	60fa      	str	r2, [r7, #12]
  return result;
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	fab2 f282 	clz	r2, r2
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	40d3      	lsrs	r3, r2
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ab8:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac8:	e004      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	623b      	str	r3, [r7, #32]
      break;
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003adc:	623b      	str	r3, [r7, #32]
      break;
 8003ade:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	372c      	adds	r7, #44	; 0x2c
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	007a1200 	.word	0x007a1200
 8003af8:	08003b84 	.word	0x08003b84
 8003afc:	08003b94 	.word	0x08003b94
 8003b00:	003d0900 	.word	0x003d0900

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f000 f818 	bl	8003b4c <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08003ba4 	.word	0x08003ba4
 8003b40:	08003ba4 	.word	0x08003ba4
 8003b44:	08003ba4 	.word	0x08003ba4
 8003b48:	08003ba8 	.word	0x08003ba8

08003b4c <_init>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr

08003b58 <_fini>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr
