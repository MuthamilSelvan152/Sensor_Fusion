
Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b4  080057b4  00020144  2**0
                  CONTENTS
  4 .ARM          00000000  080057b4  080057b4  00020144  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b4  080057b4  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  080057bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
 10 .bss          0000018c  20000144  20000144  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d0  200002d0  00020144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132e1  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f72  00000000  00000000  00033455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  000363c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb8  00000000  00000000  000370f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eda6  00000000  00000000  00037cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d50  00000000  00000000  00056a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b266b  00000000  00000000  000697a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011be11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032f4  00000000  00000000  0011be64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000144 	.word	0x20000144
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800575c 	.word	0x0800575c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000148 	.word	0x20000148
 80001c4:	0800575c 	.word	0x0800575c

080001c8 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 80001d6:	f001 fa6f 	bl	80016b8 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80001da:	88fb      	ldrh	r3, [r7, #6]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80001e0:	f107 030f 	add.w	r3, r7, #15
 80001e4:	2201      	movs	r2, #1
 80001e6:	2120      	movs	r1, #32
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 faab 	bl	8001744 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80001f8:	f107 030f 	add.w	r3, r7, #15
 80001fc:	2201      	movs	r2, #1
 80001fe:	2123      	movs	r1, #35	; 0x23
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fa9f 	bl	8001744 <GYRO_IO_Write>
}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 800020e:	b480      	push	{r7}
 8000210:	af00      	add	r7, sp, #0
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000222:	f001 fa49 	bl	80016b8 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2201      	movs	r2, #1
 800022a:	210f      	movs	r1, #15
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fabb 	bl	80017a8 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000232:	79fb      	ldrb	r3, [r7, #7]
}
 8000234:	4618      	mov	r0, r3
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	2124      	movs	r1, #36	; 0x24
 8000248:	4618      	mov	r0, r3
 800024a:	f001 faad 	bl	80017a8 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000254:	b2db      	uxtb	r3, r3
 8000256:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	2201      	movs	r2, #1
 800025c:	2124      	movs	r1, #36	; 0x24
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fa70 	bl	8001744 <GYRO_IO_Write>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000276:	2300      	movs	r3, #0
 8000278:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	b2db      	uxtb	r3, r3
 800027e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000280:	f107 030f 	add.w	r3, r7, #15
 8000284:	2201      	movs	r2, #1
 8000286:	2120      	movs	r1, #32
 8000288:	4618      	mov	r0, r3
 800028a:	f001 fa5b 	bl	8001744 <GYRO_IO_Write>
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af00      	add	r7, sp, #0
 800029c:	4603      	mov	r3, r0
 800029e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80002a0:	2300      	movs	r3, #0
 80002a2:	73fb      	strb	r3, [r7, #15]
 80002a4:	2300      	movs	r3, #0
 80002a6:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80002a8:	f107 030f 	add.w	r3, r7, #15
 80002ac:	2201      	movs	r2, #1
 80002ae:	2130      	movs	r1, #48	; 0x30
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fa79 	bl	80017a8 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80002b6:	f107 030e 	add.w	r3, r7, #14
 80002ba:	2201      	movs	r2, #1
 80002bc:	2122      	movs	r1, #34	; 0x22
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fa72 	bl	80017a8 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
 80002c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	121b      	asrs	r3, r3, #8
 80002d4:	b25a      	sxtb	r2, r3
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	4313      	orrs	r3, r2
 80002dc:	b25b      	sxtb	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80002e2:	7bbb      	ldrb	r3, [r7, #14]
 80002e4:	f023 0320 	bic.w	r3, r3, #32
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80002ec:	88fb      	ldrh	r3, [r7, #6]
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	7bbb      	ldrb	r3, [r7, #14]
 80002f2:	4313      	orrs	r3, r2
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80002f8:	f107 030f 	add.w	r3, r7, #15
 80002fc:	2201      	movs	r2, #1
 80002fe:	2130      	movs	r1, #48	; 0x30
 8000300:	4618      	mov	r0, r3
 8000302:	f001 fa1f 	bl	8001744 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000306:	f107 030e 	add.w	r3, r7, #14
 800030a:	2201      	movs	r2, #1
 800030c:	2122      	movs	r1, #34	; 0x22
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fa18 	bl	8001744 <GYRO_IO_Write>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000326:	f107 030f 	add.w	r3, r7, #15
 800032a:	2201      	movs	r2, #1
 800032c:	2122      	movs	r1, #34	; 0x22
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fa3a 	bl	80017a8 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d10a      	bne.n	8000350 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 800033a:	7bfb      	ldrb	r3, [r7, #15]
 800033c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000340:	b2db      	uxtb	r3, r3
 8000342:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800034a:	b2db      	uxtb	r3, r3
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e00c      	b.n	800036a <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d109      	bne.n	800036a <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	f023 0308 	bic.w	r3, r3, #8
 800035c:	b2db      	uxtb	r3, r3
 800035e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	b2db      	uxtb	r3, r3
 8000368:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800036a:	f107 030f 	add.w	r3, r7, #15
 800036e:	2201      	movs	r2, #1
 8000370:	2122      	movs	r1, #34	; 0x22
 8000372:	4618      	mov	r0, r3
 8000374:	f001 f9e6 	bl	8001744 <GYRO_IO_Write>
}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800038a:	f107 030f 	add.w	r3, r7, #15
 800038e:	2201      	movs	r2, #1
 8000390:	2122      	movs	r1, #34	; 0x22
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fa08 	bl	80017a8 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d107      	bne.n	80003ae <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	73fb      	strb	r3, [r7, #15]
 80003ac:	e009      	b.n	80003c2 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d106      	bne.n	80003c2 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	f023 0308 	bic.w	r3, r3, #8
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 80003be:	7bfb      	ldrb	r3, [r7, #15]
 80003c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80003c2:	f107 030f 	add.w	r3, r7, #15
 80003c6:	2201      	movs	r2, #1
 80003c8:	2122      	movs	r1, #34	; 0x22
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 f9ba 	bl	8001744 <GYRO_IO_Write>
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80003e2:	f107 030f 	add.w	r3, r7, #15
 80003e6:	2201      	movs	r2, #1
 80003e8:	2121      	movs	r1, #33	; 0x21
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 f9dc 	bl	80017a8 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80003fa:	7bfa      	ldrb	r2, [r7, #15]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4313      	orrs	r3, r2
 8000400:	b2db      	uxtb	r3, r3
 8000402:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000404:	f107 030f 	add.w	r3, r7, #15
 8000408:	2201      	movs	r2, #1
 800040a:	2121      	movs	r1, #33	; 0x21
 800040c:	4618      	mov	r0, r3
 800040e:	f001 f999 	bl	8001744 <GYRO_IO_Write>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	4603      	mov	r3, r0
 8000422:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000424:	f107 030f 	add.w	r3, r7, #15
 8000428:	2201      	movs	r2, #1
 800042a:	2124      	movs	r1, #36	; 0x24
 800042c:	4618      	mov	r0, r3
 800042e:	f001 f9bb 	bl	80017a8 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	f023 0310 	bic.w	r3, r3, #16
 8000438:	b2db      	uxtb	r3, r3
 800043a:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 800043c:	7bfa      	ldrb	r2, [r7, #15]
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4313      	orrs	r3, r2
 8000442:	b2db      	uxtb	r3, r3
 8000444:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000446:	f107 030f 	add.w	r3, r7, #15
 800044a:	2201      	movs	r2, #1
 800044c:	2124      	movs	r1, #36	; 0x24
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f978 	bl	8001744 <GYRO_IO_Write>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
 8000468:	2300      	movs	r3, #0
 800046a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800047a:	f04f 0300 	mov.w	r3, #0
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000484:	f107 030f 	add.w	r3, r7, #15
 8000488:	2201      	movs	r2, #1
 800048a:	2123      	movs	r1, #35	; 0x23
 800048c:	4618      	mov	r0, r3
 800048e:	f001 f98b 	bl	80017a8 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	2206      	movs	r2, #6
 8000498:	2128      	movs	r1, #40	; 0x28
 800049a:	4618      	mov	r0, r3
 800049c:	f001 f984 	bl	80017a8 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d126      	bne.n	80004f8 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	623b      	str	r3, [r7, #32]
 80004ae:	e01f      	b.n	80004f0 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 80004b0:	6a3b      	ldr	r3, [r7, #32]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	3301      	adds	r3, #1
 80004b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80004ba:	4413      	add	r3, r2
 80004bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	021b      	lsls	r3, r3, #8
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	6a3b      	ldr	r3, [r7, #32]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80004ce:	440b      	add	r3, r1
 80004d0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4413      	add	r3, r2
 80004d8:	b29b      	uxth	r3, r3
 80004da:	b21a      	sxth	r2, r3
 80004dc:	6a3b      	ldr	r3, [r7, #32]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80004e4:	440b      	add	r3, r1
 80004e6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80004ea:	6a3b      	ldr	r3, [r7, #32]
 80004ec:	3301      	adds	r3, #1
 80004ee:	623b      	str	r3, [r7, #32]
 80004f0:	6a3b      	ldr	r3, [r7, #32]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	dddc      	ble.n	80004b0 <I3G4250D_ReadXYZAngRate+0x54>
 80004f6:	e025      	b.n	8000544 <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
 80004fc:	e01f      	b.n	800053e <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000506:	4413      	add	r3, r2
 8000508:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800050c:	b29b      	uxth	r3, r3
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	b29a      	uxth	r2, r3
 8000512:	6a3b      	ldr	r3, [r7, #32]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	3301      	adds	r3, #1
 8000518:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800051c:	440b      	add	r3, r1
 800051e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000522:	b29b      	uxth	r3, r3
 8000524:	4413      	add	r3, r2
 8000526:	b29b      	uxth	r3, r3
 8000528:	b21a      	sxth	r2, r3
 800052a:	6a3b      	ldr	r3, [r7, #32]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000532:	440b      	add	r3, r1
 8000534:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000538:	6a3b      	ldr	r3, [r7, #32]
 800053a:	3301      	adds	r3, #1
 800053c:	623b      	str	r3, [r7, #32]
 800053e:	6a3b      	ldr	r3, [r7, #32]
 8000540:	2b02      	cmp	r3, #2
 8000542:	dddc      	ble.n	80004fe <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800054a:	2b20      	cmp	r3, #32
 800054c:	d00c      	beq.n	8000568 <I3G4250D_ReadXYZAngRate+0x10c>
 800054e:	2b20      	cmp	r3, #32
 8000550:	dc0d      	bgt.n	800056e <I3G4250D_ReadXYZAngRate+0x112>
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <I3G4250D_ReadXYZAngRate+0x100>
 8000556:	2b10      	cmp	r3, #16
 8000558:	d003      	beq.n	8000562 <I3G4250D_ReadXYZAngRate+0x106>
 800055a:	e008      	b.n	800056e <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <I3G4250D_ReadXYZAngRate+0x158>)
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000560:	e005      	b.n	800056e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <I3G4250D_ReadXYZAngRate+0x15c>)
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000566:	e002      	b.n	800056e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <I3G4250D_ReadXYZAngRate+0x160>)
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800056c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
 8000572:	e017      	b.n	80005a4 <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800057c:	4413      	add	r3, r2
 800057e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800059a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800059e:	6a3b      	ldr	r3, [r7, #32]
 80005a0:	3301      	adds	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	dde4      	ble.n	8000574 <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	3728      	adds	r7, #40	; 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	410c0000 	.word	0x410c0000
 80005b8:	418c0000 	.word	0x418c0000
 80005bc:	428c0000 	.word	0x428c0000

080005c0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80005ce:	f001 f873 	bl	80016b8 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80005d8:	f107 030f 	add.w	r3, r7, #15
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f8af 	bl	8001744 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80005f0:	f107 030f 	add.w	r3, r7, #15
 80005f4:	2201      	movs	r2, #1
 80005f6:	2123      	movs	r1, #35	; 0x23
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f8a3 	bl	8001744 <GYRO_IO_Write>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800061a:	f001 f84d 	bl	80016b8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2201      	movs	r2, #1
 8000622:	210f      	movs	r1, #15
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f8bf 	bl	80017a8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800062a:	79fb      	ldrb	r3, [r7, #7]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	2201      	movs	r2, #1
 800063e:	2124      	movs	r1, #36	; 0x24
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f8b1 	bl	80017a8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800064c:	b2db      	uxtb	r3, r3
 800064e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2201      	movs	r2, #1
 8000654:	2124      	movs	r1, #36	; 0x24
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f874 	bl	8001744 <GYRO_IO_Write>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000678:	f107 030f 	add.w	r3, r7, #15
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f85f 	bl	8001744 <GYRO_IO_Write>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
 800069c:	2300      	movs	r3, #0
 800069e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80006a0:	f107 030f 	add.w	r3, r7, #15
 80006a4:	2201      	movs	r2, #1
 80006a6:	2130      	movs	r1, #48	; 0x30
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f87d 	bl	80017a8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80006ae:	f107 030e 	add.w	r3, r7, #14
 80006b2:	2201      	movs	r2, #1
 80006b4:	2122      	movs	r1, #34	; 0x22
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f876 	bl	80017a8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	121b      	asrs	r3, r3, #8
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	f023 0320 	bic.w	r3, r3, #32
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80006f0:	f107 030f 	add.w	r3, r7, #15
 80006f4:	2201      	movs	r2, #1
 80006f6:	2130      	movs	r1, #48	; 0x30
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f823 	bl	8001744 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80006fe:	f107 030e 	add.w	r3, r7, #14
 8000702:	2201      	movs	r2, #1
 8000704:	2122      	movs	r1, #34	; 0x22
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f81c 	bl	8001744 <GYRO_IO_Write>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800071e:	f107 030f 	add.w	r3, r7, #15
 8000722:	2201      	movs	r2, #1
 8000724:	2122      	movs	r1, #34	; 0x22
 8000726:	4618      	mov	r0, r3
 8000728:	f001 f83e 	bl	80017a8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d10a      	bne.n	8000748 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000738:	b2db      	uxtb	r3, r3
 800073a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e00c      	b.n	8000762 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d109      	bne.n	8000762 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	f023 0308 	bic.w	r3, r3, #8
 8000754:	b2db      	uxtb	r3, r3
 8000756:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	b2db      	uxtb	r3, r3
 8000760:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	2201      	movs	r2, #1
 8000768:	2122      	movs	r1, #34	; 0x22
 800076a:	4618      	mov	r0, r3
 800076c:	f000 ffea 	bl	8001744 <GYRO_IO_Write>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000782:	f107 030f 	add.w	r3, r7, #15
 8000786:	2201      	movs	r2, #1
 8000788:	2122      	movs	r1, #34	; 0x22
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f80c 	bl	80017a8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d107      	bne.n	80007a6 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800079c:	b2db      	uxtb	r3, r3
 800079e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e009      	b.n	80007ba <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d106      	bne.n	80007ba <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f023 0308 	bic.w	r3, r3, #8
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80007ba:	f107 030f 	add.w	r3, r7, #15
 80007be:	2201      	movs	r2, #1
 80007c0:	2122      	movs	r1, #34	; 0x22
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 ffbe 	bl	8001744 <GYRO_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80007da:	f107 030f 	add.w	r3, r7, #15
 80007de:	2201      	movs	r2, #1
 80007e0:	2121      	movs	r1, #33	; 0x21
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 ffe0 	bl	80017a8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80007fc:	f107 030f 	add.w	r3, r7, #15
 8000800:	2201      	movs	r2, #1
 8000802:	2121      	movs	r1, #33	; 0x21
 8000804:	4618      	mov	r0, r3
 8000806:	f000 ff9d 	bl	8001744 <GYRO_IO_Write>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800081c:	f107 030f 	add.w	r3, r7, #15
 8000820:	2201      	movs	r2, #1
 8000822:	2124      	movs	r1, #36	; 0x24
 8000824:	4618      	mov	r0, r3
 8000826:	f000 ffbf 	bl	80017a8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	f023 0310 	bic.w	r3, r3, #16
 8000830:	b2db      	uxtb	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000834:	7bfa      	ldrb	r2, [r7, #15]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4313      	orrs	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800083e:	f107 030f 	add.w	r3, r7, #15
 8000842:	2201      	movs	r2, #1
 8000844:	2124      	movs	r1, #36	; 0x24
 8000846:	4618      	mov	r0, r3
 8000848:	f000 ff7c 	bl	8001744 <GYRO_IO_Write>
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	2300      	movs	r3, #0
 8000862:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000872:	f04f 0300 	mov.w	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800087c:	f107 030f 	add.w	r3, r7, #15
 8000880:	2201      	movs	r2, #1
 8000882:	2123      	movs	r1, #35	; 0x23
 8000884:	4618      	mov	r0, r3
 8000886:	f000 ff8f 	bl	80017a8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800088a:	f107 0318 	add.w	r3, r7, #24
 800088e:	2206      	movs	r2, #6
 8000890:	2128      	movs	r1, #40	; 0x28
 8000892:	4618      	mov	r0, r3
 8000894:	f000 ff88 	bl	80017a8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d126      	bne.n	80008f0 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
 80008a6:	e01f      	b.n	80008e8 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	3301      	adds	r3, #1
 80008ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008b2:	4413      	add	r3, r2
 80008b4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b29a      	uxth	r2, r3
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008c6:	440b      	add	r3, r1
 80008c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	4413      	add	r3, r2
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008dc:	440b      	add	r3, r1
 80008de:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	3301      	adds	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	dddc      	ble.n	80008a8 <L3GD20_ReadXYZAngRate+0x54>
 80008ee:	e025      	b.n	800093c <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
 80008f4:	e01f      	b.n	8000936 <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008fe:	4413      	add	r3, r2
 8000900:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000904:	b29b      	uxth	r3, r3
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	3301      	adds	r3, #1
 8000910:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000914:	440b      	add	r3, r1
 8000916:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800091a:	b29b      	uxth	r3, r3
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	b21a      	sxth	r2, r3
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800092a:	440b      	add	r3, r1
 800092c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	3301      	adds	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	2b02      	cmp	r3, #2
 800093a:	dddc      	ble.n	80008f6 <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000942:	2b20      	cmp	r3, #32
 8000944:	d00c      	beq.n	8000960 <L3GD20_ReadXYZAngRate+0x10c>
 8000946:	2b20      	cmp	r3, #32
 8000948:	dc0d      	bgt.n	8000966 <L3GD20_ReadXYZAngRate+0x112>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <L3GD20_ReadXYZAngRate+0x100>
 800094e:	2b10      	cmp	r3, #16
 8000950:	d003      	beq.n	800095a <L3GD20_ReadXYZAngRate+0x106>
 8000952:	e008      	b.n	8000966 <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <L3GD20_ReadXYZAngRate+0x158>)
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000958:	e005      	b.n	8000966 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <L3GD20_ReadXYZAngRate+0x15c>)
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800095e:	e002      	b.n	8000966 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <L3GD20_ReadXYZAngRate+0x160>)
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000964:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	e017      	b.n	800099c <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000974:	4413      	add	r3, r2
 8000976:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800097a:	ee07 3a90 	vmov	s15, r3
 800097e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800098e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000992:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	3301      	adds	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	dde4      	ble.n	800096c <L3GD20_ReadXYZAngRate+0x118>
  }
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	410c0000 	.word	0x410c0000
 80009b0:	418c0000 	.word	0x418c0000
 80009b4:	428c0000 	.word	0x428c0000

080009b8 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80009c6:	f000 ff29 	bl	800181c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	461a      	mov	r2, r3
 80009d2:	2120      	movs	r1, #32
 80009d4:	2032      	movs	r0, #50	; 0x32
 80009d6:	f000 ff99 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	461a      	mov	r2, r3
 80009e2:	2123      	movs	r1, #35	; 0x23
 80009e4:	2032      	movs	r0, #50	; 0x32
 80009e6:	f000 ff91 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000a0a:	f000 ff07 	bl	800181c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000a0e:	210f      	movs	r1, #15
 8000a10:	2032      	movs	r0, #50	; 0x32
 8000a12:	f000 ff8e 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000a2a:	2124      	movs	r1, #36	; 0x24
 8000a2c:	2032      	movs	r0, #50	; 0x32
 8000a2e:	f000 ff80 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a3c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	461a      	mov	r2, r3
 8000a42:	2124      	movs	r1, #36	; 0x24
 8000a44:	2032      	movs	r0, #50	; 0x32
 8000a46:	f000 ff61 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b084      	sub	sp, #16
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000a5c:	2121      	movs	r1, #33	; 0x21
 8000a5e:	2032      	movs	r0, #50	; 0x32
 8000a60:	f000 ff67 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	f003 030c 	and.w	r3, r3, #12
 8000a6e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000a70:	7bfa      	ldrb	r2, [r7, #15]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2121      	movs	r1, #33	; 0x21
 8000a7e:	2032      	movs	r0, #50	; 0x32
 8000a80:	f000 ff44 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000a96:	2121      	movs	r1, #33	; 0x21
 8000a98:	2032      	movs	r0, #50	; 0x32
 8000a9a:	f000 ff4a 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	f023 0308 	bic.w	r3, r3, #8
 8000aa8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000aaa:	7bfa      	ldrb	r2, [r7, #15]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2121      	movs	r1, #33	; 0x21
 8000ab8:	2032      	movs	r0, #50	; 0x32
 8000aba:	f000 ff27 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b088      	sub	sp, #32
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000ace:	2300      	movs	r3, #0
 8000ad0:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000ada:	2123      	movs	r1, #35	; 0x23
 8000adc:	2032      	movs	r0, #50	; 0x32
 8000ade:	f000 ff28 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000ae6:	2124      	movs	r1, #36	; 0x24
 8000ae8:	2032      	movs	r0, #50	; 0x32
 8000aea:	f000 ff22 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000aee:	4603      	mov	r3, r0
 8000af0:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000af2:	2128      	movs	r1, #40	; 0x28
 8000af4:	2032      	movs	r0, #50	; 0x32
 8000af6:	f000 ff1c 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000b00:	2129      	movs	r1, #41	; 0x29
 8000b02:	2032      	movs	r0, #50	; 0x32
 8000b04:	f000 ff15 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000b0e:	212a      	movs	r1, #42	; 0x2a
 8000b10:	2032      	movs	r0, #50	; 0x32
 8000b12:	f000 ff0e 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000b1c:	212b      	movs	r1, #43	; 0x2b
 8000b1e:	2032      	movs	r0, #50	; 0x32
 8000b20:	f000 ff07 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000b2a:	212c      	movs	r1, #44	; 0x2c
 8000b2c:	2032      	movs	r0, #50	; 0x32
 8000b2e:	f000 ff00 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000b38:	212d      	movs	r1, #45	; 0x2d
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f000 fef9 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000b46:	7d3b      	ldrb	r3, [r7, #20]
 8000b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d126      	bne.n	8000b9e <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	77fb      	strb	r3, [r7, #31]
 8000b54:	e01f      	b.n	8000b96 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000b56:	7ffb      	ldrb	r3, [r7, #31]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	f107 0220 	add.w	r2, r7, #32
 8000b60:	4413      	add	r3, r2
 8000b62:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	7ffb      	ldrb	r3, [r7, #31]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	f107 0120 	add.w	r1, r7, #32
 8000b74:	440b      	add	r3, r1
 8000b76:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	7ffb      	ldrb	r3, [r7, #31]
 8000b82:	b212      	sxth	r2, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	f107 0120 	add.w	r1, r7, #32
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000b90:	7ffb      	ldrb	r3, [r7, #31]
 8000b92:	3301      	adds	r3, #1
 8000b94:	77fb      	strb	r3, [r7, #31]
 8000b96:	7ffb      	ldrb	r3, [r7, #31]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d9dc      	bls.n	8000b56 <LSM303AGR_AccReadXYZ+0x90>
 8000b9c:	e025      	b.n	8000bea <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	77fb      	strb	r3, [r7, #31]
 8000ba2:	e01f      	b.n	8000be4 <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000ba4:	7ffb      	ldrb	r3, [r7, #31]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	f107 0220 	add.w	r2, r7, #32
 8000bac:	4413      	add	r3, r2
 8000bae:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	7ffb      	ldrb	r3, [r7, #31]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f107 0120 	add.w	r1, r7, #32
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	7ffb      	ldrb	r3, [r7, #31]
 8000bd0:	b212      	sxth	r2, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	f107 0120 	add.w	r1, r7, #32
 8000bd8:	440b      	add	r3, r1
 8000bda:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000bde:	7ffb      	ldrb	r3, [r7, #31]
 8000be0:	3301      	adds	r3, #1
 8000be2:	77fb      	strb	r3, [r7, #31]
 8000be4:	7ffb      	ldrb	r3, [r7, #31]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d9dc      	bls.n	8000ba4 <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000bea:	7d3b      	ldrb	r3, [r7, #20]
 8000bec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000bf0:	2b30      	cmp	r3, #48	; 0x30
 8000bf2:	d013      	beq.n	8000c1c <LSM303AGR_AccReadXYZ+0x156>
 8000bf4:	2b30      	cmp	r3, #48	; 0x30
 8000bf6:	dc14      	bgt.n	8000c22 <LSM303AGR_AccReadXYZ+0x15c>
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d00c      	beq.n	8000c16 <LSM303AGR_AccReadXYZ+0x150>
 8000bfc:	2b20      	cmp	r3, #32
 8000bfe:	dc10      	bgt.n	8000c22 <LSM303AGR_AccReadXYZ+0x15c>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <LSM303AGR_AccReadXYZ+0x144>
 8000c04:	2b10      	cmp	r3, #16
 8000c06:	d003      	beq.n	8000c10 <LSM303AGR_AccReadXYZ+0x14a>
 8000c08:	e00b      	b.n	8000c22 <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	77bb      	strb	r3, [r7, #30]
    break;
 8000c0e:	e008      	b.n	8000c22 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8000c10:	2302      	movs	r3, #2
 8000c12:	77bb      	strb	r3, [r7, #30]
    break;
 8000c14:	e005      	b.n	8000c22 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8000c16:	2304      	movs	r3, #4
 8000c18:	77bb      	strb	r3, [r7, #30]
    break;
 8000c1a:	e002      	b.n	8000c22 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	77bb      	strb	r3, [r7, #30]
    break;
 8000c20:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	77fb      	strb	r3, [r7, #31]
 8000c26:	e015      	b.n	8000c54 <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000c28:	7ffb      	ldrb	r3, [r7, #31]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	f107 0220 	add.w	r2, r7, #32
 8000c30:	4413      	add	r3, r2
 8000c32:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	7fbb      	ldrb	r3, [r7, #30]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	fb12 f303 	smulbb	r3, r2, r3
 8000c40:	b299      	uxth	r1, r3
 8000c42:	7ffb      	ldrb	r3, [r7, #31]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b20a      	sxth	r2, r1
 8000c4c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000c4e:	7ffb      	ldrb	r3, [r7, #31]
 8000c50:	3301      	adds	r3, #1
 8000c52:	77fb      	strb	r3, [r7, #31]
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d9e6      	bls.n	8000c28 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000c72:	2121      	movs	r1, #33	; 0x21
 8000c74:	2032      	movs	r0, #50	; 0x32
 8000c76:	f000 fe5c 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f023 0304 	bic.w	r3, r3, #4
 8000c84:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	461a      	mov	r2, r3
 8000c92:	2121      	movs	r1, #33	; 0x21
 8000c94:	2032      	movs	r0, #50	; 0x32
 8000c96:	f000 fe39 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8000cb0:	2122      	movs	r1, #34	; 0x22
 8000cb2:	2032      	movs	r0, #50	; 0x32
 8000cb4:	f000 fe3d 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8000cbc:	7bfa      	ldrb	r2, [r7, #15]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2122      	movs	r1, #34	; 0x22
 8000cca:	2032      	movs	r0, #50	; 0x32
 8000ccc:	f000 fe1e 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000ce6:	2138      	movs	r1, #56	; 0x38
 8000ce8:	2032      	movs	r0, #50	; 0x32
 8000cea:	f000 fe22 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	2138      	movs	r1, #56	; 0x38
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f000 fe03 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000d06:	230a      	movs	r3, #10
 8000d08:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	213a      	movs	r1, #58	; 0x3a
 8000d10:	2032      	movs	r0, #50	; 0x32
 8000d12:	f000 fdfb 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000d16:	2305      	movs	r3, #5
 8000d18:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	213b      	movs	r1, #59	; 0x3b
 8000d20:	2032      	movs	r0, #50	; 0x32
 8000d22:	f000 fdf3 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	213c      	movs	r1, #60	; 0x3c
 8000d2c:	2032      	movs	r0, #50	; 0x32
 8000d2e:	f000 fded 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000d32:	2332      	movs	r3, #50	; 0x32
 8000d34:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	213d      	movs	r1, #61	; 0x3d
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f000 fde5 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000d4e:	f000 fdaf 	bl	80018b0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	f7ff ffa5 	bl	8000ca2 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f7ff ff83 	bl	8000c64 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000d5e:	2010      	movs	r0, #16
 8000d60:	f7ff ffba 	bl	8000cd8 <LSM303AGR_AccClickITEnable>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000d76:	f000 fd51 	bl	800181c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	461a      	mov	r2, r3
 8000d82:	2120      	movs	r1, #32
 8000d84:	2032      	movs	r0, #50	; 0x32
 8000d86:	f000 fdc1 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	461a      	mov	r2, r3
 8000d92:	2123      	movs	r1, #35	; 0x23
 8000d94:	2032      	movs	r0, #50	; 0x32
 8000d96:	f000 fdb9 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000dba:	f000 fd2f 	bl	800181c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	2032      	movs	r0, #50	; 0x32
 8000dc2:	f000 fdb6 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000dda:	2124      	movs	r1, #36	; 0x24
 8000ddc:	2032      	movs	r0, #50	; 0x32
 8000dde:	f000 fda8 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dec:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	461a      	mov	r2, r3
 8000df2:	2124      	movs	r1, #36	; 0x24
 8000df4:	2032      	movs	r0, #50	; 0x32
 8000df6:	f000 fd89 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000e0c:	2121      	movs	r1, #33	; 0x21
 8000e0e:	2032      	movs	r0, #50	; 0x32
 8000e10:	f000 fd8f 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2121      	movs	r1, #33	; 0x21
 8000e2e:	2032      	movs	r0, #50	; 0x32
 8000e30:	f000 fd6c 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000e46:	2121      	movs	r1, #33	; 0x21
 8000e48:	2032      	movs	r0, #50	; 0x32
 8000e4a:	f000 fd72 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	f023 0308 	bic.w	r3, r3, #8
 8000e58:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	461a      	mov	r2, r3
 8000e66:	2121      	movs	r1, #33	; 0x21
 8000e68:	2032      	movs	r0, #50	; 0x32
 8000e6a:	f000 fd4f 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b088      	sub	sp, #32
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000e7e:	2300      	movs	r3, #0
 8000e80:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000e86:	2301      	movs	r3, #1
 8000e88:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000e8a:	2123      	movs	r1, #35	; 0x23
 8000e8c:	2032      	movs	r0, #50	; 0x32
 8000e8e:	f000 fd50 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000e92:	4603      	mov	r3, r0
 8000e94:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000e96:	2124      	movs	r1, #36	; 0x24
 8000e98:	2032      	movs	r0, #50	; 0x32
 8000e9a:	f000 fd4a 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000ea2:	2128      	movs	r1, #40	; 0x28
 8000ea4:	2032      	movs	r0, #50	; 0x32
 8000ea6:	f000 fd44 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000eb0:	2129      	movs	r1, #41	; 0x29
 8000eb2:	2032      	movs	r0, #50	; 0x32
 8000eb4:	f000 fd3d 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000ebe:	212a      	movs	r1, #42	; 0x2a
 8000ec0:	2032      	movs	r0, #50	; 0x32
 8000ec2:	f000 fd36 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000ecc:	212b      	movs	r1, #43	; 0x2b
 8000ece:	2032      	movs	r0, #50	; 0x32
 8000ed0:	f000 fd2f 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000eda:	212c      	movs	r1, #44	; 0x2c
 8000edc:	2032      	movs	r0, #50	; 0x32
 8000ede:	f000 fd28 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000ee8:	212d      	movs	r1, #45	; 0x2d
 8000eea:	2032      	movs	r0, #50	; 0x32
 8000eec:	f000 fd21 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000ef6:	7d3b      	ldrb	r3, [r7, #20]
 8000ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d126      	bne.n	8000f4e <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	77fb      	strb	r3, [r7, #31]
 8000f04:	e01f      	b.n	8000f46 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000f06:	7ffb      	ldrb	r3, [r7, #31]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f107 0220 	add.w	r2, r7, #32
 8000f10:	4413      	add	r3, r2
 8000f12:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	f107 0120 	add.w	r1, r7, #32
 8000f24:	440b      	add	r3, r1
 8000f26:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	7ffb      	ldrb	r3, [r7, #31]
 8000f32:	b212      	sxth	r2, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	f107 0120 	add.w	r1, r7, #32
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000f40:	7ffb      	ldrb	r3, [r7, #31]
 8000f42:	3301      	adds	r3, #1
 8000f44:	77fb      	strb	r3, [r7, #31]
 8000f46:	7ffb      	ldrb	r3, [r7, #31]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d9dc      	bls.n	8000f06 <LSM303DLHC_AccReadXYZ+0x90>
 8000f4c:	e025      	b.n	8000f9a <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	77fb      	strb	r3, [r7, #31]
 8000f52:	e01f      	b.n	8000f94 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000f54:	7ffb      	ldrb	r3, [r7, #31]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f107 0220 	add.w	r2, r7, #32
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	7ffb      	ldrb	r3, [r7, #31]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f107 0120 	add.w	r1, r7, #32
 8000f72:	440b      	add	r3, r1
 8000f74:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
 8000f80:	b212      	sxth	r2, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	f107 0120 	add.w	r1, r7, #32
 8000f88:	440b      	add	r3, r1
 8000f8a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	3301      	adds	r3, #1
 8000f92:	77fb      	strb	r3, [r7, #31]
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d9dc      	bls.n	8000f54 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000f9a:	7d3b      	ldrb	r3, [r7, #20]
 8000f9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fa0:	2b30      	cmp	r3, #48	; 0x30
 8000fa2:	d013      	beq.n	8000fcc <LSM303DLHC_AccReadXYZ+0x156>
 8000fa4:	2b30      	cmp	r3, #48	; 0x30
 8000fa6:	dc14      	bgt.n	8000fd2 <LSM303DLHC_AccReadXYZ+0x15c>
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d00c      	beq.n	8000fc6 <LSM303DLHC_AccReadXYZ+0x150>
 8000fac:	2b20      	cmp	r3, #32
 8000fae:	dc10      	bgt.n	8000fd2 <LSM303DLHC_AccReadXYZ+0x15c>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <LSM303DLHC_AccReadXYZ+0x144>
 8000fb4:	2b10      	cmp	r3, #16
 8000fb6:	d003      	beq.n	8000fc0 <LSM303DLHC_AccReadXYZ+0x14a>
 8000fb8:	e00b      	b.n	8000fd2 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	77bb      	strb	r3, [r7, #30]
    break;
 8000fbe:	e008      	b.n	8000fd2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	77bb      	strb	r3, [r7, #30]
    break;
 8000fc4:	e005      	b.n	8000fd2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	77bb      	strb	r3, [r7, #30]
    break;
 8000fca:	e002      	b.n	8000fd2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	77bb      	strb	r3, [r7, #30]
    break;
 8000fd0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	77fb      	strb	r3, [r7, #31]
 8000fd6:	e015      	b.n	8001004 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	f107 0220 	add.w	r2, r7, #32
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	7fbb      	ldrb	r3, [r7, #30]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	fb12 f303 	smulbb	r3, r2, r3
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b20a      	sxth	r2, r1
 8000ffc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	3301      	adds	r3, #1
 8001002:	77fb      	strb	r3, [r7, #31]
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d9e6      	bls.n	8000fd8 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001022:	2121      	movs	r1, #33	; 0x21
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f000 fc84 	bl	8001932 <COMPASSACCELERO_IO_Read>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f023 0304 	bic.w	r3, r3, #4
 8001034:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4313      	orrs	r3, r2
 800103c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	461a      	mov	r2, r3
 8001042:	2121      	movs	r1, #33	; 0x21
 8001044:	2032      	movs	r0, #50	; 0x32
 8001046:	f000 fc61 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001060:	2122      	movs	r1, #34	; 0x22
 8001062:	2032      	movs	r0, #50	; 0x32
 8001064:	f000 fc65 	bl	8001932 <COMPASSACCELERO_IO_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4313      	orrs	r3, r2
 8001072:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	461a      	mov	r2, r3
 8001078:	2122      	movs	r1, #34	; 0x22
 800107a:	2032      	movs	r0, #50	; 0x32
 800107c:	f000 fc46 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001096:	2138      	movs	r1, #56	; 0x38
 8001098:	2032      	movs	r0, #50	; 0x32
 800109a:	f000 fc4a 	bl	8001932 <COMPASSACCELERO_IO_Read>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	461a      	mov	r2, r3
 80010ae:	2138      	movs	r1, #56	; 0x38
 80010b0:	2032      	movs	r0, #50	; 0x32
 80010b2:	f000 fc2b 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80010b6:	230a      	movs	r3, #10
 80010b8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	461a      	mov	r2, r3
 80010be:	213a      	movs	r1, #58	; 0x3a
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f000 fc23 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80010c6:	2305      	movs	r3, #5
 80010c8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	461a      	mov	r2, r3
 80010ce:	213b      	movs	r1, #59	; 0x3b
 80010d0:	2032      	movs	r0, #50	; 0x32
 80010d2:	f000 fc1b 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	461a      	mov	r2, r3
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	2032      	movs	r0, #50	; 0x32
 80010de:	f000 fc15 	bl	800190c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80010e2:	2332      	movs	r3, #50	; 0x32
 80010e4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	461a      	mov	r2, r3
 80010ea:	213d      	movs	r1, #61	; 0x3d
 80010ec:	2032      	movs	r0, #50	; 0x32
 80010ee:	f000 fc0d 	bl	800190c <COMPASSACCELERO_IO_Write>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80010fe:	f000 fbd7 	bl	80018b0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001102:	2080      	movs	r0, #128	; 0x80
 8001104:	f7ff ffa5 	bl	8001052 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001108:	2004      	movs	r0, #4
 800110a:	f7ff ff83 	bl	8001014 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800110e:	2010      	movs	r0, #16
 8001110:	f7ff ffba 	bl	8001088 <LSM303DLHC_AccClickITEnable>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	; 0x40
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <BSP_LED_Init+0x2a>
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <BSP_LED_Init+0x154>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	4a4f      	ldr	r2, [pc, #316]	; (800126c <BSP_LED_Init+0x154>)
 800112e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001132:	6153      	str	r3, [r2, #20]
 8001134:	4b4d      	ldr	r3, [pc, #308]	; (800126c <BSP_LED_Init+0x154>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	e06e      	b.n	8001220 <BSP_LED_Init+0x108>
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d10c      	bne.n	8001162 <BSP_LED_Init+0x4a>
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <BSP_LED_Init+0x154>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	4a47      	ldr	r2, [pc, #284]	; (800126c <BSP_LED_Init+0x154>)
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001152:	6153      	str	r3, [r2, #20]
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <BSP_LED_Init+0x154>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	e05e      	b.n	8001220 <BSP_LED_Init+0x108>
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d10c      	bne.n	8001182 <BSP_LED_Init+0x6a>
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <BSP_LED_Init+0x154>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	4a3f      	ldr	r2, [pc, #252]	; (800126c <BSP_LED_Init+0x154>)
 800116e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001172:	6153      	str	r3, [r2, #20]
 8001174:	4b3d      	ldr	r3, [pc, #244]	; (800126c <BSP_LED_Init+0x154>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	e04e      	b.n	8001220 <BSP_LED_Init+0x108>
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d10c      	bne.n	80011a2 <BSP_LED_Init+0x8a>
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <BSP_LED_Init+0x154>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	4a37      	ldr	r2, [pc, #220]	; (800126c <BSP_LED_Init+0x154>)
 800118e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001192:	6153      	str	r3, [r2, #20]
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <BSP_LED_Init+0x154>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	e03e      	b.n	8001220 <BSP_LED_Init+0x108>
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d10c      	bne.n	80011c2 <BSP_LED_Init+0xaa>
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <BSP_LED_Init+0x154>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	4a2f      	ldr	r2, [pc, #188]	; (800126c <BSP_LED_Init+0x154>)
 80011ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b2:	6153      	str	r3, [r2, #20]
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <BSP_LED_Init+0x154>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	e02e      	b.n	8001220 <BSP_LED_Init+0x108>
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d10c      	bne.n	80011e2 <BSP_LED_Init+0xca>
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <BSP_LED_Init+0x154>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <BSP_LED_Init+0x154>)
 80011ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d2:	6153      	str	r3, [r2, #20]
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <BSP_LED_Init+0x154>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	e01e      	b.n	8001220 <BSP_LED_Init+0x108>
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b06      	cmp	r3, #6
 80011e6:	d10c      	bne.n	8001202 <BSP_LED_Init+0xea>
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <BSP_LED_Init+0x154>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	4a1f      	ldr	r2, [pc, #124]	; (800126c <BSP_LED_Init+0x154>)
 80011ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f2:	6153      	str	r3, [r2, #20]
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <BSP_LED_Init+0x154>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	e00e      	b.n	8001220 <BSP_LED_Init+0x108>
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d10b      	bne.n	8001220 <BSP_LED_Init+0x108>
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <BSP_LED_Init+0x154>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <BSP_LED_Init+0x154>)
 800120e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001212:	6153      	str	r3, [r2, #20]
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <BSP_LED_Init+0x154>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <BSP_LED_Init+0x158>)
 8001224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122e:	2301      	movs	r3, #1
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <BSP_LED_Init+0x15c>)
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f001 faf1 	bl	800282c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <BSP_LED_Init+0x15c>)
 800124e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <BSP_LED_Init+0x158>)
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	f001 fd53 	bl	8002d08 <HAL_GPIO_WritePin>
}
 8001262:	bf00      	nop
 8001264:	3740      	adds	r7, #64	; 0x40
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	08005774 	.word	0x08005774
 8001274:	200000d0 	.word	0x200000d0

08001278 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <BSP_LED_On+0x2c>)
 8001286:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <BSP_LED_On+0x30>)
 800128e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001292:	2201      	movs	r2, #1
 8001294:	4619      	mov	r1, r3
 8001296:	f001 fd37 	bl	8002d08 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000d0 	.word	0x200000d0
 80012a8:	08005774 	.word	0x08005774

080012ac <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <BSP_LED_Off+0x2c>)
 80012ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <BSP_LED_Off+0x30>)
 80012c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	f001 fd1d 	bl	8002d08 <HAL_GPIO_WritePin>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000d0 	.word	0x200000d0
 80012dc:	08005774 	.word	0x08005774

080012e0 <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <BSP_LED_Toggle+0x2c>)
 80012ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4906      	ldr	r1, [pc, #24]	; (8001310 <BSP_LED_Toggle+0x30>)
 80012f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f001 fd1b 	bl	8002d38 <HAL_GPIO_TogglePin>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000d0 	.word	0x200000d0
 8001310:	08005774 	.word	0x08005774

08001314 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	4613      	mov	r3, r2
 8001322:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10b      	bne.n	8001342 <BSP_PB_Init+0x2e>
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <BSP_PB_Init+0xbc>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <BSP_PB_Init+0xbc>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <BSP_PB_Init+0xbc>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <BSP_PB_Init+0xbc>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <BSP_PB_Init+0xbc>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <BSP_PB_Init+0xbc>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <BSP_PB_Init+0x70>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001360:	2301      	movs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <BSP_PB_Init+0xc0>)
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	f107 0214 	add.w	r2, r7, #20
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fa54 	bl	800282c <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d11e      	bne.n	80013c8 <BSP_PB_Init+0xb4>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001396:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <BSP_PB_Init+0xc0>)
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	f107 0214 	add.w	r2, r7, #20
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fa3e 	bl	800282c <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80013b0:	2306      	movs	r3, #6
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	2200      	movs	r2, #0
 80013b6:	210f      	movs	r1, #15
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fa00 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80013be:	2306      	movs	r3, #6
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fa17 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	200000f0 	.word	0x200000f0

080013d8 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <BSP_PB_GetState+0x28>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 fc72 	bl	8002cd8 <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200000f0 	.word	0x200000f0

08001404 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <I2Cx_MspInit+0x60>)
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <I2Cx_MspInit+0x60>)
 8001412:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001416:	6153      	str	r3, [r2, #20]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <I2Cx_MspInit+0x60>)
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8001424:	23c0      	movs	r3, #192	; 0xc0
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001434:	2304      	movs	r3, #4
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <I2Cx_MspInit+0x64>)
 8001440:	f001 f9f4 	bl	800282c <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <I2Cx_MspInit+0x60>)
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <I2Cx_MspInit+0x60>)
 800144a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144e:	61d3      	str	r3, [r2, #28]
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <I2Cx_MspInit+0x60>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400

0800146c <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001470:	4811      	ldr	r0, [pc, #68]	; (80014b8 <I2Cx_Init+0x4c>)
 8001472:	f001 ff7f 	bl	8003374 <HAL_I2C_GetState>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d11a      	bne.n	80014b2 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <I2Cx_Init+0x4c>)
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <I2Cx_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <I2Cx_Init+0x4c>)
 8001484:	2232      	movs	r2, #50	; 0x32
 8001486:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <I2Cx_Init+0x4c>)
 800148a:	2201      	movs	r2, #1
 800148c:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <I2Cx_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <I2Cx_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <I2Cx_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <I2Cx_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80014a6:	4804      	ldr	r0, [pc, #16]	; (80014b8 <I2Cx_Init+0x4c>)
 80014a8:	f7ff ffac 	bl	8001404 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <I2Cx_Init+0x4c>)
 80014ae:	f001 fc75 	bl	8002d9c <HAL_I2C_Init>
  }
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200001c4 	.word	0x200001c4
 80014bc:	40005400 	.word	0x40005400

080014c0 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af04      	add	r7, sp, #16
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
 80014ca:	460b      	mov	r3, r1
 80014cc:	717b      	strb	r3, [r7, #5]
 80014ce:	4613      	mov	r3, r2
 80014d0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80014d6:	797b      	ldrb	r3, [r7, #5]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <I2Cx_WriteData+0x48>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	88f9      	ldrh	r1, [r7, #6]
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2301      	movs	r3, #1
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <I2Cx_WriteData+0x4c>)
 80014ee:	f001 fd13 	bl	8002f18 <HAL_I2C_Mem_Write>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80014fc:	f000 f834 	bl	8001568 <I2Cx_Error>
  }
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200000f8 	.word	0x200000f8
 800150c:	200001c4 	.word	0x200001c4

08001510 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af04      	add	r7, sp, #16
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	80fb      	strh	r3, [r7, #6]
 800151c:	4613      	mov	r3, r2
 800151e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <I2Cx_ReadData+0x50>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	88f9      	ldrh	r1, [r7, #6]
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	f107 030e 	add.w	r3, r7, #14
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <I2Cx_ReadData+0x54>)
 8001542:	f001 fdfd 	bl	8003140 <HAL_I2C_Mem_Read>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001550:	f000 f80a 	bl	8001568 <I2Cx_Error>
  
  }
  return value;
 8001554:	7bbb      	ldrb	r3, [r7, #14]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000f8 	.word	0x200000f8
 8001564:	200001c4 	.word	0x200001c4

08001568 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <I2Cx_Error+0x14>)
 800156e:	f001 fca4 	bl	8002eba <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001572:	f7ff ff7b 	bl	800146c <I2Cx_Init>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001c4 	.word	0x200001c4

08001580 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001584:	481a      	ldr	r0, [pc, #104]	; (80015f0 <SPIx_Init+0x70>)
 8001586:	f003 ff4b 	bl	8005420 <HAL_SPI_GetState>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d12c      	bne.n	80015ea <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <SPIx_Init+0x70>)
 8001592:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <SPIx_Init+0x74>)
 8001594:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <SPIx_Init+0x70>)
 8001598:	2218      	movs	r2, #24
 800159a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <SPIx_Init+0x70>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <SPIx_Init+0x70>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <SPIx_Init+0x70>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <SPIx_Init+0x70>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <SPIx_Init+0x70>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <SPIx_Init+0x70>)
 80015bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015c0:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <SPIx_Init+0x70>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <SPIx_Init+0x70>)
 80015ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ce:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <SPIx_Init+0x70>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SPIx_Init+0x70>)
 80015d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015dc:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <SPIx_Init+0x70>)
 80015e0:	f000 f836 	bl	8001650 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <SPIx_Init+0x70>)
 80015e6:	f003 fc35 	bl	8004e54 <HAL_SPI_Init>
  }
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000160 	.word	0x20000160
 80015f4:	40013000 	.word	0x40013000

080015f8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <SPIx_WriteRead+0x38>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f107 020f 	add.w	r2, r7, #15
 800160e:	1df9      	adds	r1, r7, #7
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <SPIx_WriteRead+0x3c>)
 8001616:	f003 fcf0 	bl	8004ffa <HAL_SPI_TransmitReceive>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001620:	f000 f80a 	bl	8001638 <SPIx_Error>
  }
  
  return receivedbyte;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000f4 	.word	0x200000f4
 8001634:	20000160 	.word	0x20000160

08001638 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <SPIx_Error+0x14>)
 800163e:	f003 fcb4 	bl	8004faa <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8001642:	f7ff ff9d 	bl	8001580 <SPIx_Init>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000160 	.word	0x20000160

08001650 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <SPIx_MspInit+0x64>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <SPIx_MspInit+0x64>)
 800165e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <SPIx_MspInit+0x64>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SPIx_MspInit+0x64>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <SPIx_MspInit+0x64>)
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167a:	6153      	str	r3, [r2, #20]
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <SPIx_MspInit+0x64>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001688:	23e0      	movs	r3, #224	; 0xe0
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001698:	2305      	movs	r3, #5
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f001 f8c1 	bl	800282c <HAL_GPIO_Init>
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <GYRO_IO_Init+0x84>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <GYRO_IO_Init+0x84>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <GYRO_IO_Init+0x84>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80016d6:	2308      	movs	r3, #8
 80016d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	4619      	mov	r1, r3
 80016ec:	4814      	ldr	r0, [pc, #80]	; (8001740 <GYRO_IO_Init+0x88>)
 80016ee:	f001 f89d 	bl	800282c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80016f2:	2201      	movs	r2, #1
 80016f4:	2108      	movs	r1, #8
 80016f6:	4812      	ldr	r0, [pc, #72]	; (8001740 <GYRO_IO_Init+0x88>)
 80016f8:	f001 fb06 	bl	8002d08 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <GYRO_IO_Init+0x84>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <GYRO_IO_Init+0x84>)
 8001702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001706:	6153      	str	r3, [r2, #20]
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <GYRO_IO_Init+0x84>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001714:	2303      	movs	r3, #3
 8001716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <GYRO_IO_Init+0x88>)
 800172c:	f001 f87e 	bl	800282c <HAL_GPIO_Init>
  
  SPIx_Init();
 8001730:	f7ff ff26 	bl	8001580 <SPIx_Init>
}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	48001000 	.word	0x48001000

08001744 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
 8001750:	4613      	mov	r3, r2
 8001752:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001754:	883b      	ldrh	r3, [r7, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d903      	bls.n	8001762 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001760:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001762:	2200      	movs	r2, #0
 8001764:	2108      	movs	r1, #8
 8001766:	480f      	ldr	r0, [pc, #60]	; (80017a4 <GYRO_IO_Write+0x60>)
 8001768:	f001 face 	bl	8002d08 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff42 	bl	80015f8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001774:	e00a      	b.n	800178c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff3c 	bl	80015f8 <SPIx_WriteRead>
    NumByteToWrite--;
 8001780:	883b      	ldrh	r3, [r7, #0]
 8001782:	3b01      	subs	r3, #1
 8001784:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f1      	bne.n	8001776 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001792:	2201      	movs	r2, #1
 8001794:	2108      	movs	r1, #8
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <GYRO_IO_Write+0x60>)
 8001798:	f001 fab6 	bl	8002d08 <HAL_GPIO_WritePin>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	48001000 	.word	0x48001000

080017a8 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
 80017b4:	4613      	mov	r3, r2
 80017b6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80017b8:	883b      	ldrh	r3, [r7, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d904      	bls.n	80017c8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80017c4:	70fb      	strb	r3, [r7, #3]
 80017c6:	e003      	b.n	80017d0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ce:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80017d0:	2200      	movs	r2, #0
 80017d2:	2108      	movs	r1, #8
 80017d4:	4810      	ldr	r0, [pc, #64]	; (8001818 <GYRO_IO_Read+0x70>)
 80017d6:	f001 fa97 	bl	8002d08 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff0b 	bl	80015f8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80017e2:	e00c      	b.n	80017fe <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff07 	bl	80015f8 <SPIx_WriteRead>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80017f2:	883b      	ldrh	r3, [r7, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3301      	adds	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80017fe:	883b      	ldrh	r3, [r7, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ef      	bne.n	80017e4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001804:	2201      	movs	r2, #1
 8001806:	2108      	movs	r1, #8
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <GYRO_IO_Read+0x70>)
 800180a:	f001 fa7d 	bl	8002d08 <HAL_GPIO_WritePin>
}  
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	48001000 	.word	0x48001000

0800181c <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <COMPASSACCELERO_IO_Init+0x8c>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <COMPASSACCELERO_IO_Init+0x8c>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001852:	2304      	movs	r3, #4
 8001854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4619      	mov	r1, r3
 8001868:	4810      	ldr	r0, [pc, #64]	; (80018ac <COMPASSACCELERO_IO_Init+0x90>)
 800186a:	f000 ffdf 	bl	800282c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 800186e:	2200      	movs	r2, #0
 8001870:	210f      	movs	r1, #15
 8001872:	2008      	movs	r0, #8
 8001874:	f000 ffa3 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8001878:	2008      	movs	r0, #8
 800187a:	f000 ffbc 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800187e:	2330      	movs	r3, #48	; 0x30
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <COMPASSACCELERO_IO_Init+0x90>)
 8001896:	f000 ffc9 	bl	800282c <HAL_GPIO_Init>
  
  I2Cx_Init();
 800189a:	f7ff fde7 	bl	800146c <I2Cx_Init>
}
 800189e:	bf00      	nop
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48001000 	.word	0x48001000

080018b0 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80018bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c0:	6153      	str	r3, [r2, #20]
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80018ce:	2330      	movs	r3, #48	; 0x30
 80018d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80018d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4808      	ldr	r0, [pc, #32]	; (8001908 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80018e6:	f000 ffa1 	bl	800282c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80018ea:	2200      	movs	r2, #0
 80018ec:	210f      	movs	r1, #15
 80018ee:	200a      	movs	r0, #10
 80018f0:	f000 ff65 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f000 ff7e 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	48001000 	.word	0x48001000

0800190c <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	460b      	mov	r3, r1
 8001918:	717b      	strb	r3, [r7, #5]
 800191a:	4613      	mov	r3, r2
 800191c:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800191e:	793a      	ldrb	r2, [r7, #4]
 8001920:	7979      	ldrb	r1, [r7, #5]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fdcb 	bl	80014c0 <I2Cx_WriteData>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	460a      	mov	r2, r1
 800193c:	80fb      	strh	r3, [r7, #6]
 800193e:	4613      	mov	r3, r2
 8001940:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001942:	797a      	ldrb	r2, [r7, #5]
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fde1 	bl	8001510 <I2Cx_ReadData>
 800194e:	4603      	mov	r3, r0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001962:	2300      	movs	r3, #0
 8001964:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <BSP_ACCELERO_Init+0x178>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4798      	blx	r3
 8001974:	4603      	mov	r3, r0
 8001976:	2b33      	cmp	r3, #51	; 0x33
 8001978:	d14f      	bne.n	8001a1a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800197a:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <BSP_ACCELERO_Init+0x17c>)
 800197c:	4a54      	ldr	r2, [pc, #336]	; (8001ad0 <BSP_ACCELERO_Init+0x178>)
 800197e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8001980:	2300      	movs	r3, #0
 8001982:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8001984:	2340      	movs	r3, #64	; 0x40
 8001986:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8001988:	2307      	movs	r3, #7
 800198a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 800198c:	2300      	movs	r3, #0
 800198e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8001990:	2300      	movs	r3, #0
 8001992:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8001994:	2300      	movs	r3, #0
 8001996:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8001998:	2308      	movs	r3, #8
 800199a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800199c:	7b3a      	ldrb	r2, [r7, #12]
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80019a4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	8abb      	ldrh	r3, [r7, #20]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80019b2:	7c3a      	ldrb	r2, [r7, #16]
 80019b4:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	7cbb      	ldrb	r3, [r7, #18]
 80019bc:	4313      	orrs	r3, r2
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80019d4:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <BSP_ACCELERO_Init+0x17c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	8aba      	ldrh	r2, [r7, #20]
 80019dc:	4610      	mov	r0, r2
 80019de:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80019e4:	2310      	movs	r3, #16
 80019e6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80019f0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80019f2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80019f8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001a06:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <BSP_ACCELERO_Init+0x17c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	8aba      	ldrh	r2, [r7, #20]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	4610      	mov	r0, r2
 8001a12:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	75fb      	strb	r3, [r7, #23]
 8001a18:	e054      	b.n	8001ac4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <BSP_ACCELERO_Init+0x180>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4798      	blx	r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b33      	cmp	r3, #51	; 0x33
 8001a24:	d14e      	bne.n	8001ac4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <BSP_ACCELERO_Init+0x17c>)
 8001a28:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <BSP_ACCELERO_Init+0x180>)
 8001a2a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8001a30:	2340      	movs	r3, #64	; 0x40
 8001a32:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8001a34:	2307      	movs	r3, #7
 8001a36:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8001a40:	2300      	movs	r3, #0
 8001a42:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8001a44:	2308      	movs	r3, #8
 8001a46:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001a48:	7b3a      	ldrb	r2, [r7, #12]
 8001a4a:	7b7b      	ldrb	r3, [r7, #13]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	8abb      	ldrh	r3, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001a5e:	7c3a      	ldrb	r2, [r7, #16]
 8001a60:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	7cbb      	ldrb	r3, [r7, #18]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <BSP_ACCELERO_Init+0x17c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	8aba      	ldrh	r2, [r7, #20]
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8001a90:	2310      	movs	r3, #16
 8001a92:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001a9c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001a9e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001aa4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <BSP_ACCELERO_Init+0x17c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	8aba      	ldrh	r2, [r7, #20]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	4610      	mov	r0, r2
 8001abe:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000009c 	.word	0x2000009c
 8001ad4:	20000210 	.word	0x20000210
 8001ad8:	20000068 	.word	0x20000068

08001adc <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8001aea:	2300      	movs	r3, #0
 8001aec:	703b      	strb	r3, [r7, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <BSP_GYRO_Init+0x160>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4798      	blx	r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	2bd4      	cmp	r3, #212	; 0xd4
 8001afc:	d005      	beq.n	8001b0a <BSP_GYRO_Init+0x2e>
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <BSP_GYRO_Init+0x160>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4798      	blx	r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	2bd5      	cmp	r3, #213	; 0xd5
 8001b08:	d146      	bne.n	8001b98 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <BSP_GYRO_Init+0x160>)
 8001b0e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001b10:	2308      	movs	r3, #8
 8001b12:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8001b1c:	2330      	movs	r3, #48	; 0x30
 8001b1e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001b20:	2300      	movs	r3, #0
 8001b22:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001b24:	2300      	movs	r3, #0
 8001b26:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001b2c:	793a      	ldrb	r2, [r7, #4]
 8001b2e:	797b      	ldrb	r3, [r7, #5]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001b34:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001b42:	7a3a      	ldrb	r2, [r7, #8]
 8001b44:	7a7b      	ldrb	r3, [r7, #9]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8001b4a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	89bb      	ldrh	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	89ba      	ldrh	r2, [r7, #12]
 8001b64:	4610      	mov	r0, r2
 8001b66:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8001b70:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001b72:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	89ba      	ldrh	r2, [r7, #12]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	4610      	mov	r0, r2
 8001b86:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	2010      	movs	r0, #16
 8001b90:	4798      	blx	r3

    ret = GYRO_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e04b      	b.n	8001c30 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <BSP_GYRO_Init+0x168>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4798      	blx	r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2bd3      	cmp	r3, #211	; 0xd3
 8001ba2:	d145      	bne.n	8001c30 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001ba6:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <BSP_GYRO_Init+0x168>)
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8001baa:	2308      	movs	r3, #8
 8001bac:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8001bb6:	2330      	movs	r3, #48	; 0x30
 8001bb8:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001bc6:	793a      	ldrb	r2, [r7, #4]
 8001bc8:	797b      	ldrb	r3, [r7, #5]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001bce:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001bdc:	7a3a      	ldrb	r2, [r7, #8]
 8001bde:	7a7b      	ldrb	r3, [r7, #9]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8001be4:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	89bb      	ldrh	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	89ba      	ldrh	r2, [r7, #12]
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8001c02:	2300      	movs	r3, #0
 8001c04:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8001c0a:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001c0c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	89ba      	ldrh	r2, [r7, #12]
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <BSP_GYRO_Init+0x164>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	2010      	movs	r0, #16
 8001c2a:	4798      	blx	r3

    ret = GYRO_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000034 	.word	0x20000034
 8001c40:	20000214 	.word	0x20000214
 8001c44:	20000000 	.word	0x20000000

08001c48 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <BSP_GYRO_GetXYZ+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <BSP_GYRO_GetXYZ+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	4798      	blx	r3
  }
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000214 	.word	0x20000214

08001c70 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4a3f      	ldr	r2, [pc, #252]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c90:	6153      	str	r3, [r2, #20]
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4a39      	ldr	r2, [pc, #228]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001ca4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ca8:	6153      	str	r3, [r2, #20]
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cc0:	6153      	str	r3, [r2, #20]
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	4a2d      	ldr	r2, [pc, #180]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	6153      	str	r3, [r2, #20]
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6153      	str	r3, [r2, #20]
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <MX_GPIO_Init+0x118>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001d04:	4821      	ldr	r0, [pc, #132]	; (8001d8c <MX_GPIO_Init+0x11c>)
 8001d06:	f000 ffff 	bl	8002d08 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001d0a:	2337      	movs	r3, #55	; 0x37
 8001d0c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481b      	ldr	r0, [pc, #108]	; (8001d8c <MX_GPIO_Init+0x11c>)
 8001d20:	f000 fd84 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001d24:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001d28:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4813      	ldr	r0, [pc, #76]	; (8001d8c <MX_GPIO_Init+0x11c>)
 8001d3e:	f000 fd75 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d42:	2301      	movs	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f000 fd68 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001d5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001d6e:	230e      	movs	r3, #14
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7c:	f000 fd56 	bl	800282c <HAL_GPIO_Init>

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48001000 	.word	0x48001000

08001d90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <MX_I2C1_Init+0x78>)
 8001d98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <MX_I2C1_Init+0x7c>)
 8001d9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dca:	480e      	ldr	r0, [pc, #56]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dcc:	f000 ffe6 	bl	8002d9c <HAL_I2C_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dd6:	f000 f997 	bl	8002108 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dde:	f001 fd03 	bl	80037e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001de8:	f000 f98e 	bl	8002108 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dec:	2100      	movs	r1, #0
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001df0:	f001 fd45 	bl	800387e <HAL_I2CEx_ConfigDigitalFilter>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dfa:	f000 f985 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000021c 	.word	0x2000021c
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	2000090e 	.word	0x2000090e

08001e10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_I2C_MspInit+0x7c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d127      	bne.n	8001e82 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_I2C_MspInit+0x80>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_I2C_MspInit+0x80>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6153      	str	r3, [r2, #20]
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_I2C_MspInit+0x80>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001e4a:	23c0      	movs	r3, #192	; 0xc0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4e:	2312      	movs	r3, #18
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <HAL_I2C_MspInit+0x84>)
 8001e66:	f000 fce1 	bl	800282c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_I2C_MspInit+0x80>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_I2C_MspInit+0x80>)
 8001e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_I2C_MspInit+0x80>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48000400 	.word	0x48000400

08001e98 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_I2C_MspDeInit+0x38>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_I2C_MspDeInit+0x3c>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_I2C_MspDeInit+0x3c>)
 8001eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eb4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <HAL_I2C_MspDeInit+0x40>)
 8001eba:	f000 fe31 	bl	8002b20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_I2C_MspDeInit+0x40>)
 8001ec2:	f000 fe2d 	bl	8002b20 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48000400 	.word	0x48000400

08001edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee0:	f000 fb08 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee4:	f000 f86e 	bl	8001fc4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee8:	f7ff fec2 	bl	8001c70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eec:	f7ff ff50 	bl	8001d90 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001ef0:	f000 f9d2 	bl	8002298 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED4);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff f90f 	bl	8001118 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff f90c 	bl	8001118 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8001f00:	2002      	movs	r0, #2
 8001f02:	f7ff f909 	bl	8001118 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 8001f06:	2004      	movs	r0, #4
 8001f08:	f7ff f906 	bl	8001118 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 8001f0c:	2006      	movs	r0, #6
 8001f0e:	f7ff f903 	bl	8001118 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f7ff f900 	bl	8001118 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 8001f18:	2005      	movs	r0, #5
 8001f1a:	f7ff f8fd 	bl	8001118 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f7ff f8fa 	bl	8001118 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001f24:	2101      	movs	r1, #1
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff f9f4 	bl	8001314 <BSP_PB_Init>

  while (!UserPressButton) Toggle_Leds();
 8001f2c:	e001      	b.n	8001f32 <main+0x56>
 8001f2e:	f000 f8b7 	bl	80020a0 <Toggle_Leds>
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <main+0xdc>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f8      	beq.n	8001f2e <main+0x52>
  BSP_LED_Off(LED3);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff f9b5 	bl	80012ac <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff f9b2 	bl	80012ac <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f7ff f9af 	bl	80012ac <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f7ff f9ac 	bl	80012ac <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UserPressButton = 0;
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <main+0xdc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
	  BSP_examples[DemoIndex++].DemoFunc();
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <main+0xe0>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	b2d1      	uxtb	r1, r2
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <main+0xe0>)
 8001f64:	7011      	strb	r1, [r2, #0]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <main+0xe4>)
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	1a5b      	subs	r3, r3, r1
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4798      	blx	r3

	  /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
	  if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <main+0xe0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <main+0xaa>
	  {
		DemoIndex = 0;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <main+0xe0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
	  }
	  /* Toggle LEDs between each Test */
	  UserPressButton = 0;
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <main+0xdc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	  while (!UserPressButton) Toggle_Leds();
 8001f8c:	e001      	b.n	8001f92 <main+0xb6>
 8001f8e:	f000 f887 	bl	80020a0 <Toggle_Leds>
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <main+0xdc>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f8      	beq.n	8001f8e <main+0xb2>
	  BSP_LED_Off(LED3);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff f985 	bl	80012ac <BSP_LED_Off>
	  BSP_LED_Off(LED4);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff f982 	bl	80012ac <BSP_LED_Off>
	  BSP_LED_Off(LED5);
 8001fa8:	2002      	movs	r0, #2
 8001faa:	f7ff f97f 	bl	80012ac <BSP_LED_Off>
	  BSP_LED_Off(LED6);
 8001fae:	2003      	movs	r0, #3
 8001fb0:	f7ff f97c 	bl	80012ac <BSP_LED_Off>
	  UserPressButton = 0;
 8001fb4:	e7ce      	b.n	8001f54 <main+0x78>
 8001fb6:	bf00      	nop
 8001fb8:	20000219 	.word	0x20000219
 8001fbc:	20000218 	.word	0x20000218
 8001fc0:	200000fc 	.word	0x200000fc

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b09e      	sub	sp, #120	; 0x78
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fce:	2228      	movs	r2, #40	; 0x28
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fbba 	bl	800574c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	223c      	movs	r2, #60	; 0x3c
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fbac 	bl	800574c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ffc:	2310      	movs	r3, #16
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002000:	2302      	movs	r3, #2
 8002002:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002004:	2300      	movs	r3, #0
 8002006:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002008:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fc80 	bl	8003918 <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800201e:	f000 f873 	bl	8002108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002026:	2302      	movs	r3, #2
 8002028:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800202e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800203c:	2101      	movs	r1, #1
 800203e:	4618      	mov	r0, r3
 8002040:	f002 fb72 	bl	8004728 <HAL_RCC_ClockConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800204a:	f000 f85d 	bl	8002108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800204e:	2320      	movs	r3, #32
 8002050:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	4618      	mov	r0, r3
 800205a:	f002 fd4b 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002064:	f000 f850 	bl	8002108 <Error_Handler>
  }
}
 8002068:	bf00      	nop
 800206a:	3778      	adds	r7, #120	; 0x78
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
  if (USER_BUTTON_PIN == GPIO_Pin)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d109      	bne.n	8002094 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 8002080:	bf00      	nop
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff f9a8 	bl	80013d8 <BSP_PB_GetState>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f9      	bne.n	8002082 <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 800208e:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
  }
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000219 	.word	0x20000219

080020a0 <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED3);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff f91b 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020aa:	2064      	movs	r0, #100	; 0x64
 80020ac:	f000 fa88 	bl	80025c0 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7ff f915 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020b6:	2064      	movs	r0, #100	; 0x64
 80020b8:	f000 fa82 	bl	80025c0 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 80020bc:	2003      	movs	r0, #3
 80020be:	f7ff f90f 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020c2:	2064      	movs	r0, #100	; 0x64
 80020c4:	f000 fa7c 	bl	80025c0 <HAL_Delay>
    BSP_LED_Toggle(LED8);
 80020c8:	2005      	movs	r0, #5
 80020ca:	f7ff f909 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020ce:	2064      	movs	r0, #100	; 0x64
 80020d0:	f000 fa76 	bl	80025c0 <HAL_Delay>
    BSP_LED_Toggle(LED10);
 80020d4:	2007      	movs	r0, #7
 80020d6:	f7ff f903 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020da:	2064      	movs	r0, #100	; 0x64
 80020dc:	f000 fa70 	bl	80025c0 <HAL_Delay>
    BSP_LED_Toggle(LED9);
 80020e0:	2006      	movs	r0, #6
 80020e2:	f7ff f8fd 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020e6:	2064      	movs	r0, #100	; 0x64
 80020e8:	f000 fa6a 	bl	80025c0 <HAL_Delay>
    BSP_LED_Toggle(LED7);
 80020ec:	2004      	movs	r0, #4
 80020ee:	f7ff f8f7 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020f2:	2064      	movs	r0, #100	; 0x64
 80020f4:	f000 fa64 	bl	80025c0 <HAL_Delay>
    BSP_LED_Toggle(LED5);
 80020f8:	2002      	movs	r0, #2
 80020fa:	f7ff f8f1 	bl	80012e0 <BSP_LED_Toggle>
    HAL_Delay(100);
 80020fe:	2064      	movs	r0, #100	; 0x64
 8002100:	f000 fa5e 	bl	80025c0 <HAL_Delay>
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 800210c:	2007      	movs	r0, #7
 800210e:	f7ff f8b3 	bl	8001278 <BSP_LED_On>
    BSP_LED_On(LED3);
 8002112:	2000      	movs	r0, #0
 8002114:	f7ff f8b0 	bl	8001278 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
}
 800211a:	bf00      	nop
  __disable_irq();
  while (1)
 800211c:	e7fe      	b.n	800211c <Error_Handler+0x14>
	...

08002120 <GYRO_MEMS_Test>:
  *   MEMS peripheral.
  * @param None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002124:	f7ff fc18 	bl	8001958 <BSP_ACCELERO_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <GYRO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 800212e:	f7ff ffeb 	bl	8002108 <Error_Handler>
  }
  
  UserPressButton = 0;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <GYRO_MEMS_Test+0x30>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002138:	e001      	b.n	800213e <GYRO_MEMS_Test+0x1e>
  {
    GYRO_ReadAng();
 800213a:	f000 f80b 	bl	8002154 <GYRO_ReadAng>
  while(!UserPressButton)
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <GYRO_MEMS_Test+0x30>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f8      	beq.n	800213a <GYRO_MEMS_Test+0x1a>
  }
}  
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000219 	.word	0x20000219

08002154 <GYRO_ReadAng>:

static void GYRO_ReadAng(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
  /* Gyroscope variable */
  float Buffer[3];
  float Xval,Yval = 0x00;
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  /* Init Gyroscope Mems */
  if(BSP_GYRO_Init() != HAL_OK)
 8002160:	f7ff fcbc 	bl	8001adc <BSP_GYRO_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <GYRO_ReadAng+0x1a>
  {
    /* Initialization Error */
    Error_Handler(); 
 800216a:	f7ff ffcd 	bl	8002108 <Error_Handler>
  }

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fd69 	bl	8001c48 <BSP_GYRO_GetXYZ>
     
  /* Update autoreload and capture compare registers value*/
  Xval = ABS((Buffer[0]));
 8002176:	edd7 7a01 	vldr	s15, [r7, #4]
 800217a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	d504      	bpl.n	800218e <GYRO_ReadAng+0x3a>
 8002184:	edd7 7a01 	vldr	s15, [r7, #4]
 8002188:	eef1 7a67 	vneg.f32	s15, s15
 800218c:	e001      	b.n	8002192 <GYRO_ReadAng+0x3e>
 800218e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002192:	edc7 7a04 	vstr	s15, [r7, #16]
  Yval = ABS((Buffer[1])); 
 8002196:	edd7 7a02 	vldr	s15, [r7, #8]
 800219a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	d504      	bpl.n	80021ae <GYRO_ReadAng+0x5a>
 80021a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80021a8:	eef1 7a67 	vneg.f32	s15, s15
 80021ac:	e001      	b.n	80021b2 <GYRO_ReadAng+0x5e>
 80021ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80021b2:	edc7 7a05 	vstr	s15, [r7, #20]
      
  if(Xval>Yval)
 80021b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80021ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80021be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	dd23      	ble.n	8002210 <GYRO_ReadAng+0xbc>
   {
    if(Buffer[0] > 5000.0f)
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002290 <GYRO_ReadAng+0x13c>
 80021d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	dd06      	ble.n	80021e8 <GYRO_ReadAng+0x94>
     { 
        /* LD10 On */
        BSP_LED_On(LED10);
 80021da:	2007      	movs	r0, #7
 80021dc:	f7ff f84c 	bl	8001278 <BSP_LED_On>
        HAL_Delay(10);
 80021e0:	200a      	movs	r0, #10
 80021e2:	f000 f9ed 	bl	80025c0 <HAL_Delay>
 80021e6:	e036      	b.n	8002256 <GYRO_ReadAng+0x102>
     }
     else if(Buffer[0] < -5000.0f)
 80021e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ec:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002294 <GYRO_ReadAng+0x140>
 80021f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d506      	bpl.n	8002208 <GYRO_ReadAng+0xb4>
     { 
        /* LED3 On */
        BSP_LED_On(LED3);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff f83c 	bl	8001278 <BSP_LED_On>
        HAL_Delay(10);
 8002200:	200a      	movs	r0, #10
 8002202:	f000 f9dd 	bl	80025c0 <HAL_Delay>
 8002206:	e026      	b.n	8002256 <GYRO_ReadAng+0x102>
     }      
    else
    { 
      HAL_Delay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f000 f9d9 	bl	80025c0 <HAL_Delay>
 800220e:	e022      	b.n	8002256 <GYRO_ReadAng+0x102>
    }
   }
  else
   {
    if(Buffer[1] < -5000.0f)
 8002210:	edd7 7a02 	vldr	s15, [r7, #8]
 8002214:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002294 <GYRO_ReadAng+0x140>
 8002218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	d506      	bpl.n	8002230 <GYRO_ReadAng+0xdc>
     {
        /* LD6 on */
        BSP_LED_On(LED6);           
 8002222:	2003      	movs	r0, #3
 8002224:	f7ff f828 	bl	8001278 <BSP_LED_On>
        HAL_Delay(10);
 8002228:	200a      	movs	r0, #10
 800222a:	f000 f9c9 	bl	80025c0 <HAL_Delay>
 800222e:	e012      	b.n	8002256 <GYRO_ReadAng+0x102>
     }
    else if(Buffer[1] > 5000.0f)
 8002230:	edd7 7a02 	vldr	s15, [r7, #8]
 8002234:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002290 <GYRO_ReadAng+0x13c>
 8002238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	dd06      	ble.n	8002250 <GYRO_ReadAng+0xfc>
     {
        /* LD7 On */
        BSP_LED_On(LED7);        
 8002242:	2004      	movs	r0, #4
 8002244:	f7ff f818 	bl	8001278 <BSP_LED_On>
	HAL_Delay(10);
 8002248:	200a      	movs	r0, #10
 800224a:	f000 f9b9 	bl	80025c0 <HAL_Delay>
 800224e:	e002      	b.n	8002256 <GYRO_ReadAng+0x102>
     }     
        else
        { 
            HAL_Delay(10);
 8002250:	200a      	movs	r0, #10
 8002252:	f000 f9b5 	bl	80025c0 <HAL_Delay>
        }  	
      } 
    BSP_LED_Off(LED3);
 8002256:	2000      	movs	r0, #0
 8002258:	f7ff f828 	bl	80012ac <BSP_LED_Off>
    BSP_LED_Off(LED6);
 800225c:	2003      	movs	r0, #3
 800225e:	f7ff f825 	bl	80012ac <BSP_LED_Off>
    BSP_LED_Off(LED7);
 8002262:	2004      	movs	r0, #4
 8002264:	f7ff f822 	bl	80012ac <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8002268:	2001      	movs	r0, #1
 800226a:	f7ff f81f 	bl	80012ac <BSP_LED_Off>
    BSP_LED_Off(LED10);
 800226e:	2007      	movs	r0, #7
 8002270:	f7ff f81c 	bl	80012ac <BSP_LED_Off>
    BSP_LED_Off(LED8);
 8002274:	2005      	movs	r0, #5
 8002276:	f7ff f819 	bl	80012ac <BSP_LED_Off>
    BSP_LED_Off(LED9);
 800227a:	2006      	movs	r0, #6
 800227c:	f7ff f816 	bl	80012ac <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8002280:	2002      	movs	r0, #2
 8002282:	f7ff f813 	bl	80012ac <BSP_LED_Off>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	459c4000 	.word	0x459c4000
 8002294:	c59c4000 	.word	0xc59c4000

08002298 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <MX_SPI1_Init+0x74>)
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <MX_SPI1_Init+0x78>)
 80022a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <MX_SPI1_Init+0x74>)
 80022a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <MX_SPI1_Init+0x74>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <MX_SPI1_Init+0x74>)
 80022b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <MX_SPI1_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <MX_SPI1_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_SPI1_Init+0x74>)
 80022c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <MX_SPI1_Init+0x74>)
 80022ce:	2210      	movs	r2, #16
 80022d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_SPI1_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <MX_SPI1_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <MX_SPI1_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <MX_SPI1_Init+0x74>)
 80022e6:	2207      	movs	r2, #7
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <MX_SPI1_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <MX_SPI1_Init+0x74>)
 80022f2:	2208      	movs	r2, #8
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_SPI1_Init+0x74>)
 80022f8:	f002 fdac 	bl	8004e54 <HAL_SPI_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002302:	f7ff ff01 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000268 	.word	0x20000268
 8002310:	40013000 	.word	0x40013000

08002314 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_SPI_MspInit+0x7c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d128      	bne.n	8002388 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_SPI_MspInit+0x80>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_SPI_MspInit+0x80>)
 800233c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002340:	6193      	str	r3, [r2, #24]
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_SPI_MspInit+0x80>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_SPI_MspInit+0x80>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_SPI_MspInit+0x80>)
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	6153      	str	r3, [r2, #20]
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_SPI_MspInit+0x80>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002366:	23e0      	movs	r3, #224	; 0xe0
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002376:	2305      	movs	r3, #5
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	f000 fa52 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013000 	.word	0x40013000
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_SPI_MspDeInit+0x30>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10a      	bne.n	80023c0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_SPI_MspDeInit+0x34>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_SPI_MspDeInit+0x34>)
 80023b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023b4:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 80023b6:	21e0      	movs	r1, #224	; 0xe0
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023bc:	f000 fbb0 	bl	8002b20 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40013000 	.word	0x40013000
 80023cc:	40021000 	.word	0x40021000

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_MspInit+0x44>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_MspInit+0x44>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6193      	str	r3, [r2, #24]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_MspInit+0x44>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_MspInit+0x44>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_MspInit+0x44>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_MspInit+0x44>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002406:	2007      	movs	r0, #7
 8002408:	f000 f9ce 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241c:	e7fe      	b.n	800241c <NMI_Handler+0x4>

0800241e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <MemManage_Handler+0x4>

0800242a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x4>

08002436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002464:	f000 f88c 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8002470:	2001      	movs	r0, #1
 8002472:	f000 fc7b 	bl	8002d6c <HAL_GPIO_EXTI_IRQHandler>
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x20>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <SystemInit+0x20>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <LoopForever+0x6>)
  ldr r1, =_edata
 80024a6:	490e      	ldr	r1, [pc, #56]	; (80024e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <LoopForever+0xe>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024bc:	4c0b      	ldr	r4, [pc, #44]	; (80024ec <LoopForever+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ca:	f7ff ffd7 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ce:	f003 f919 	bl	8005704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024d2:	f7ff fd03 	bl	8001edc <main>

080024d6 <LoopForever>:

LoopForever:
    b LoopForever
 80024d6:	e7fe      	b.n	80024d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 80024e4:	080057bc 	.word	0x080057bc
  ldr r2, =_sbss
 80024e8:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 80024ec:	200002d0 	.word	0x200002d0

080024f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC1_2_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_Init+0x28>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_Init+0x28>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f94f 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f808 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff ff5e 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000

08002520 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x54>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f967 	bl	8002812 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f92f 	bl	80027be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x5c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000138 	.word	0x20000138
 8002578:	20000140 	.word	0x20000140
 800257c:	2000013c 	.word	0x2000013c

08002580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000140 	.word	0x20000140
 80025a4:	200002cc 	.word	0x200002cc

080025a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	200002cc 	.word	0x200002cc

080025c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000140 	.word	0x20000140

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff29 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff3e 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff8e 	bl	80026fc <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5d 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff31 	bl	800266c <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa2 	bl	8002764 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283a:	e154      	b.n	8002ae6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8146 	beq.w	8002ae0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d005      	beq.n	800286c <HAL_GPIO_Init+0x40>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d130      	bne.n	80028ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0201 	and.w	r2, r3, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d017      	beq.n	800290a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d123      	bne.n	800295e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	08da      	lsrs	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3208      	adds	r2, #8
 800291e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0203 	and.w	r2, r3, #3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80a0 	beq.w	8002ae0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a0:	4b58      	ldr	r3, [pc, #352]	; (8002b04 <HAL_GPIO_Init+0x2d8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_GPIO_Init+0x2d8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2d8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b8:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <HAL_GPIO_Init+0x2dc>)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e2:	d019      	beq.n	8002a18 <HAL_GPIO_Init+0x1ec>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_GPIO_Init+0x2e0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_GPIO_Init+0x1e8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00d      	beq.n	8002a10 <HAL_GPIO_Init+0x1e4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <HAL_GPIO_Init+0x1e0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_GPIO_Init+0x1dc>
 8002a04:	2304      	movs	r3, #4
 8002a06:	e008      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a08:	2305      	movs	r3, #5
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2a:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_GPIO_Init+0x2dc>)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5c:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a86:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ada:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f aea3 	bne.w	800283c <HAL_GPIO_Init+0x10>
  }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	48001000 	.word	0x48001000
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b2e:	e0b8      	b.n	8002ca2 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b30:	2201      	movs	r2, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80ab 	beq.w	8002c9c <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b46:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <HAL_GPIO_DeInit+0x1a0>)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b6e:	d019      	beq.n	8002ba4 <HAL_GPIO_DeInit+0x84>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a54      	ldr	r2, [pc, #336]	; (8002cc4 <HAL_GPIO_DeInit+0x1a4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <HAL_GPIO_DeInit+0x80>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a53      	ldr	r2, [pc, #332]	; (8002cc8 <HAL_GPIO_DeInit+0x1a8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00d      	beq.n	8002b9c <HAL_GPIO_DeInit+0x7c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_GPIO_DeInit+0x1ac>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <HAL_GPIO_DeInit+0x78>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a51      	ldr	r2, [pc, #324]	; (8002cd0 <HAL_GPIO_DeInit+0x1b0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_GPIO_DeInit+0x74>
 8002b90:	2304      	movs	r3, #4
 8002b92:	e008      	b.n	8002ba6 <HAL_GPIO_DeInit+0x86>
 8002b94:	2305      	movs	r3, #5
 8002b96:	e006      	b.n	8002ba6 <HAL_GPIO_DeInit+0x86>
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e004      	b.n	8002ba6 <HAL_GPIO_DeInit+0x86>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e002      	b.n	8002ba6 <HAL_GPIO_DeInit+0x86>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_GPIO_DeInit+0x86>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	f002 0203 	and.w	r2, r2, #3
 8002bac:	0092      	lsls	r2, r2, #2
 8002bae:	4093      	lsls	r3, r2
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d132      	bne.n	8002c1c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4945      	ldr	r1, [pc, #276]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bc4:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4941      	ldr	r1, [pc, #260]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002bd2:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	493e      	ldr	r1, [pc, #248]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002be0:	4b3c      	ldr	r3, [pc, #240]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	493a      	ldr	r1, [pc, #232]	; (8002cd4 <HAL_GPIO_DeInit+0x1b4>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002bfe:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <HAL_GPIO_DeInit+0x1a0>)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	482c      	ldr	r0, [pc, #176]	; (8002cc0 <HAL_GPIO_DeInit+0x1a0>)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	400a      	ands	r2, r1
 8002c16:	3302      	adds	r3, #2
 8002c18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2103      	movs	r1, #3
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	08d2      	lsrs	r2, r2, #3
 8002c52:	4019      	ands	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2103      	movs	r1, #3
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	2101      	movs	r1, #1
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	401a      	ands	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2103      	movs	r1, #3
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	401a      	ands	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f47f af40 	bne.w	8002b30 <HAL_GPIO_DeInit+0x10>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	48000400 	.word	0x48000400
 8002cc8:	48000800 	.word	0x48000800
 8002ccc:	48000c00 	.word	0x48000c00
 8002cd0:	48001000 	.word	0x48001000
 8002cd4:	40010400 	.word	0x40010400

08002cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e001      	b.n	8002cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d24:	e002      	b.n	8002d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43d9      	mvns	r1, r3
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	400b      	ands	r3, r1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f970 	bl	8002070 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e081      	b.n	8002eb2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff f824 	bl	8001e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	e006      	b.n	8002e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d104      	bne.n	8002e36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e021      	b.n	8002f10 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe ffd7 	bl	8001e98 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	813b      	strh	r3, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	f040 80f9 	bne.w	8003132 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_I2C_Mem_Write+0x34>
 8002f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0ed      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_Mem_Write+0x4e>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0e6      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f6e:	f7ff fb1b 	bl	80025a8 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fad1 	bl	8003528 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0d1      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2221      	movs	r2, #33	; 0x21
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fb8:	88f8      	ldrh	r0, [r7, #6]
 8002fba:	893a      	ldrh	r2, [r7, #8]
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f9e1 	bl	8003390 <I2C_RequestMemoryWrite>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0a9      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	d90e      	bls.n	8003008 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fbc3 	bl	800378c <I2C_TransferConfig>
 8003006:	e00f      	b.n	8003028 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fbb2 	bl	800378c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fabb 	bl	80035a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e07b      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d034      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	d130      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2200      	movs	r2, #0
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa4d 	bl	8003528 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e04d      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2bff      	cmp	r3, #255	; 0xff
 80030a0:	d90e      	bls.n	80030c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fb67 	bl	800378c <I2C_TransferConfig>
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fb56 	bl	800378c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d19e      	bne.n	8003028 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa9a 	bl	8003628 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e01a      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2220      	movs	r2, #32
 8003104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_I2C_Mem_Write+0x224>)
 8003112:	400b      	ands	r3, r1
 8003114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 80fd 	bne.w	8003362 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_I2C_Mem_Read+0x34>
 800316e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0f1      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_I2C_Mem_Read+0x4e>
 800318a:	2302      	movs	r3, #2
 800318c:	e0ea      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003196:	f7ff fa07 	bl	80025a8 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2319      	movs	r3, #25
 80031a2:	2201      	movs	r2, #1
 80031a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f9bd 	bl	8003528 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d5      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2222      	movs	r2, #34	; 0x22
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e0:	88f8      	ldrh	r0, [r7, #6]
 80031e2:	893a      	ldrh	r2, [r7, #8]
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4603      	mov	r3, r0
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f921 	bl	8003438 <I2C_RequestMemoryRead>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0ad      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d90e      	bls.n	8003230 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22ff      	movs	r2, #255	; 0xff
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	b2da      	uxtb	r2, r3
 800321e:	8979      	ldrh	r1, [r7, #10]
 8003220:	4b52      	ldr	r3, [pc, #328]	; (800336c <HAL_I2C_Mem_Read+0x22c>)
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 faaf 	bl	800378c <I2C_TransferConfig>
 800322e:	e00f      	b.n	8003250 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_I2C_Mem_Read+0x22c>)
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fa9e 	bl	800378c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	2200      	movs	r2, #0
 8003258:	2104      	movs	r1, #4
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f964 	bl	8003528 <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07c      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d034      	beq.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d130      	bne.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f935 	bl	8003528 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04d      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d90e      	bls.n	80032f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	8979      	ldrh	r1, [r7, #10]
 80032e0:	2300      	movs	r3, #0
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fa4f 	bl	800378c <I2C_TransferConfig>
 80032ee:	e00f      	b.n	8003310 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fa3e 	bl	800378c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d19a      	bne.n	8003250 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f982 	bl	8003628 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e01a      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2220      	movs	r2, #32
 8003334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_I2C_Mem_Read+0x230>)
 8003342:	400b      	ands	r3, r1
 8003344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	80002400 	.word	0x80002400
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003382:	b2db      	uxtb	r3, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	8979      	ldrh	r1, [r7, #10]
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <I2C_RequestMemoryWrite+0xa4>)
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f9e7 	bl	800378c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	69b9      	ldr	r1, [r7, #24]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8f0 	bl	80035a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e02c      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
 80033e2:	e015      	b.n	8003410 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8d6 	bl	80035a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e012      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003406:	893b      	ldrh	r3, [r7, #8]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f884 	bl	8003528 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	80002000 	.word	0x80002000

08003438 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4603      	mov	r3, r0
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	460b      	mov	r3, r1
 800344c:	813b      	strh	r3, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	8979      	ldrh	r1, [r7, #10]
 8003458:	4b20      	ldr	r3, [pc, #128]	; (80034dc <I2C_RequestMemoryRead+0xa4>)
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2300      	movs	r3, #0
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f994 	bl	800378c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	69b9      	ldr	r1, [r7, #24]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f89d 	bl	80035a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e02c      	b.n	80034d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800347e:	893b      	ldrh	r3, [r7, #8]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
 8003488:	e015      	b.n	80034b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800348a:	893b      	ldrh	r3, [r7, #8]
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	b29b      	uxth	r3, r3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f883 	bl	80035a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e012      	b.n	80034d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ac:	893b      	ldrh	r3, [r7, #8]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2200      	movs	r2, #0
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f831 	bl	8003528 <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	80002000 	.word	0x80002000

080034e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d103      	bne.n	80034fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d007      	beq.n	800351c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	619a      	str	r2, [r3, #24]
  }
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003538:	e022      	b.n	8003580 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d01e      	beq.n	8003580 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003542:	f7ff f831 	bl	80025a8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d302      	bcc.n	8003558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d113      	bne.n	8003580 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e00f      	b.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	429a      	cmp	r2, r3
 800359c:	d0cd      	beq.n	800353a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035b4:	e02c      	b.n	8003610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f870 	bl	80036a0 <I2C_IsAcknowledgeFailed>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e02a      	b.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d01e      	beq.n	8003610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fe ffe9 	bl	80025a8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d113      	bne.n	8003610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e007      	b.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b02      	cmp	r3, #2
 800361c:	d1cb      	bne.n	80035b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003634:	e028      	b.n	8003688 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f830 	bl	80036a0 <I2C_IsAcknowledgeFailed>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e026      	b.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364a:	f7fe ffad 	bl	80025a8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d113      	bne.n	8003688 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d1cf      	bne.n	8003636 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d161      	bne.n	800377e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036c8:	d02b      	beq.n	8003722 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036da:	e022      	b.n	8003722 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d01e      	beq.n	8003722 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e4:	f7fe ff60 	bl	80025a8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d302      	bcc.n	80036fa <I2C_IsAcknowledgeFailed+0x5a>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d113      	bne.n	8003722 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e02e      	b.n	8003780 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b20      	cmp	r3, #32
 800372e:	d1d5      	bne.n	80036dc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2220      	movs	r2, #32
 800373e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fecd 	bl	80034e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <I2C_IsAcknowledgeFailed+0xe8>)
 8003752:	400b      	ands	r3, r1
 8003754:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f043 0204 	orr.w	r2, r3, #4
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	fe00e800 	.word	0xfe00e800

0800378c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	4613      	mov	r3, r2
 800379c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	0d5b      	lsrs	r3, r3, #21
 80037a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <I2C_TransferConfig+0x58>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	43db      	mvns	r3, r3
 80037b2:	ea02 0103 	and.w	r1, r2, r3
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037bc:	7a7b      	ldrb	r3, [r7, #9]
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	03ff63ff 	.word	0x03ff63ff

080037e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d138      	bne.n	8003870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003808:	2302      	movs	r3, #2
 800380a:	e032      	b.n	8003872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800383a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	d139      	bne.n	8003908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800389e:	2302      	movs	r3, #2
 80038a0:	e033      	b.n	800390a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2224      	movs	r2, #36	; 0x24
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800391e:	af00      	add	r7, sp, #0
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f000 bef4 	b.w	800471a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 816a 	beq.w	8003c16 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003942:	4bb3      	ldr	r3, [pc, #716]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b04      	cmp	r3, #4
 800394c:	d00c      	beq.n	8003968 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800394e:	4bb0      	ldr	r3, [pc, #704]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d159      	bne.n	8003a0e <HAL_RCC_OscConfig+0xf6>
 800395a:	4bad      	ldr	r3, [pc, #692]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003966:	d152      	bne.n	8003a0e <HAL_RCC_OscConfig+0xf6>
 8003968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800396c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800397c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d102      	bne.n	800399a <HAL_RCC_OscConfig+0x82>
 8003994:	4b9e      	ldr	r3, [pc, #632]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	e015      	b.n	80039c6 <HAL_RCC_OscConfig+0xae>
 800399a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800399e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80039ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80039b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80039c2:	4b93      	ldr	r3, [pc, #588]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80039ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80039d2:	fa92 f2a2 	rbit	r2, r2
 80039d6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80039da:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80039de:	fab2 f282 	clz	r2, r2
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	f042 0220 	orr.w	r2, r2, #32
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	f002 021f 	and.w	r2, r2, #31
 80039ee:	2101      	movs	r1, #1
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 810c 	beq.w	8003c14 <HAL_RCC_OscConfig+0x2fc>
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 8106 	bne.w	8003c14 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f000 be86 	b.w	800471a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x110>
 8003a1a:	4b7d      	ldr	r3, [pc, #500]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7c      	ldr	r2, [pc, #496]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e030      	b.n	8003a8a <HAL_RCC_OscConfig+0x172>
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x134>
 8003a32:	4b77      	ldr	r3, [pc, #476]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a76      	ldr	r2, [pc, #472]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b74      	ldr	r3, [pc, #464]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a73      	ldr	r2, [pc, #460]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01e      	b.n	8003a8a <HAL_RCC_OscConfig+0x172>
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x15a>
 8003a58:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6c      	ldr	r2, [pc, #432]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x172>
 8003a72:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b64      	ldr	r3, [pc, #400]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a63      	ldr	r2, [pc, #396]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a8a:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	495d      	ldr	r1, [pc, #372]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d059      	beq.n	8003b5c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fd7e 	bl	80025a8 <HAL_GetTick>
 8003aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab2:	f7fe fd79 	bl	80025a8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d902      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	f000 be29 	b.w	800471a <HAL_RCC_OscConfig+0xe02>
 8003ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003acc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003adc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d102      	bne.n	8003afa <HAL_RCC_OscConfig+0x1e2>
 8003af4:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x20e>
 8003afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003afe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b16:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003b22:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003b2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b32:	fa92 f2a2 	rbit	r2, r2
 8003b36:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003b3a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003b3e:	fab2 f282 	clz	r2, r2
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	f042 0220 	orr.w	r2, r2, #32
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	f002 021f 	and.w	r2, r2, #31
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ab      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x19a>
 8003b5a:	e05c      	b.n	8003c16 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fd24 	bl	80025a8 <HAL_GetTick>
 8003b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b66:	f7fe fd1f 	bl	80025a8 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d902      	bls.n	8003b7c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	f000 bdcf 	b.w	800471a <HAL_RCC_OscConfig+0xe02>
 8003b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_OscConfig+0x296>
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	e015      	b.n	8003bda <HAL_RCC_OscConfig+0x2c2>
 8003bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003bca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_RCC_OscConfig+0x2f8>)
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bde:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003be2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003be6:	fa92 f2a2 	rbit	r2, r2
 8003bea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003bee:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003bf2:	fab2 f282 	clz	r2, r2
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	f042 0220 	orr.w	r2, r2, #32
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	f002 021f 	and.w	r2, r2, #31
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1ab      	bne.n	8003b66 <HAL_RCC_OscConfig+0x24e>
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_OscConfig+0x2fe>
 8003c10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 816f 	beq.w	8003f04 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c26:	4bd0      	ldr	r3, [pc, #832]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c32:	4bcd      	ldr	r3, [pc, #820]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d16c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x400>
 8003c3e:	4bca      	ldr	r3, [pc, #808]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d166      	bne.n	8003d18 <HAL_RCC_OscConfig+0x400>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <HAL_RCC_OscConfig+0x362>
 8003c74:	4bbc      	ldr	r3, [pc, #752]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	e013      	b.n	8003ca2 <HAL_RCC_OscConfig+0x38a>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c80:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c9e:	4bb2      	ldr	r3, [pc, #712]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003ca8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cac:	fa92 f2a2 	rbit	r2, r2
 8003cb0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003cb4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003cb8:	fab2 f282 	clz	r2, r2
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	f002 021f 	and.w	r2, r2, #31
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x3cc>
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f000 bd1b 	b.w	800471a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4ba0      	ldr	r3, [pc, #640]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	21f8      	movs	r1, #248	; 0xf8
 8003cf4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003cfc:	fa91 f1a1 	rbit	r1, r1
 8003d00:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003d04:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003d08:	fab1 f181 	clz	r1, r1
 8003d0c:	b2c9      	uxtb	r1, r1
 8003d0e:	408b      	lsls	r3, r1
 8003d10:	4995      	ldr	r1, [pc, #596]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e0f5      	b.n	8003f04 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8085 	beq.w	8003e2e <HAL_RCC_OscConfig+0x516>
 8003d24:	2301      	movs	r3, #1
 8003d26:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe fc2a 	bl	80025a8 <HAL_GetTick>
 8003d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fc25 	bl	80025a8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	f000 bcd5 	b.w	800471a <HAL_RCC_OscConfig+0xe02>
 8003d70:	2302      	movs	r3, #2
 8003d72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d82:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_OscConfig+0x488>
 8003d9a:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	e013      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4b0>
 8003da0:	2302      	movs	r3, #2
 8003da2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003db2:	2302      	movs	r3, #2
 8003db4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003db8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003dc4:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003dce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003dd2:	fa92 f2a2 	rbit	r2, r2
 8003dd6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003dda:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003dde:	fab2 f282 	clz	r2, r2
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	f042 0220 	orr.w	r2, r2, #32
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	f002 021f 	and.w	r2, r2, #31
 8003dee:	2101      	movs	r1, #1
 8003df0:	fa01 f202 	lsl.w	r2, r1, r2
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0af      	beq.n	8003d5a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	21f8      	movs	r1, #248	; 0xf8
 8003e0a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e12:	fa91 f1a1 	rbit	r1, r1
 8003e16:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003e1a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003e1e:	fab1 f181 	clz	r1, r1
 8003e22:	b2c9      	uxtb	r1, r1
 8003e24:	408b      	lsls	r3, r1
 8003e26:	4950      	ldr	r1, [pc, #320]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e06a      	b.n	8003f04 <HAL_RCC_OscConfig+0x5ec>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	461a      	mov	r2, r3
 8003e56:	2300      	movs	r3, #0
 8003e58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fe fba5 	bl	80025a8 <HAL_GetTick>
 8003e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fe fba0 	bl	80025a8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d902      	bls.n	8003e7a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	f000 bc50 	b.w	800471a <HAL_RCC_OscConfig+0xe02>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d102      	bne.n	8003eaa <HAL_RCC_OscConfig+0x592>
 8003ea4:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	e013      	b.n	8003ed2 <HAL_RCC_OscConfig+0x5ba>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ec2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ec6:	fa93 f3a3 	rbit	r3, r3
 8003eca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ece:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <HAL_RCC_OscConfig+0x650>)
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ed8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ee4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1af      	bne.n	8003e64 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80da 	beq.w	80040c8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d069      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_OscConfig+0x654>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	461a      	mov	r2, r3
 8003f44:	2301      	movs	r3, #1
 8003f46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f48:	f7fe fb2e 	bl	80025a8 <HAL_GetTick>
 8003f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f50:	e00e      	b.n	8003f70 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fe fb29 	bl	80025a8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d906      	bls.n	8003f70 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e3d9      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	10908120 	.word	0x10908120
 8003f70:	2302      	movs	r3, #2
 8003f72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f86:	2202      	movs	r2, #2
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f2a3 	rbit	r2, r3
 8003f94:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fa93 f2a3 	rbit	r2, r3
 8003fac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003fb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	4ba5      	ldr	r3, [pc, #660]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 8003fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003fba:	2102      	movs	r1, #2
 8003fbc:	6019      	str	r1, [r3, #0]
 8003fbe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fa93 f1a3 	rbit	r1, r3
 8003fc8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fcc:	6019      	str	r1, [r3, #0]
  return result;
 8003fce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0b0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x63a>
 8003ff0:	e06a      	b.n	80040c8 <HAL_RCC_OscConfig+0x7b0>
 8003ff2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004008:	601a      	str	r2, [r3, #0]
  return result;
 800400a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800400e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	4b8c      	ldr	r3, [pc, #560]	; (800424c <HAL_RCC_OscConfig+0x934>)
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	461a      	mov	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004024:	f7fe fac0 	bl	80025a8 <HAL_GetTick>
 8004028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	e009      	b.n	8004042 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402e:	f7fe fabb 	bl	80025a8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e36b      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
 8004042:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004046:	2202      	movs	r2, #2
 8004048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	fa93 f2a3 	rbit	r2, r3
 8004054:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800405e:	2202      	movs	r2, #2
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	fa93 f2a3 	rbit	r2, r3
 800406c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004076:	2202      	movs	r2, #2
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	fa93 f2a3 	rbit	r2, r3
 8004084:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004088:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408a:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 800408c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800408e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004092:	2102      	movs	r1, #2
 8004094:	6019      	str	r1, [r3, #0]
 8004096:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f1a3 	rbit	r1, r3
 80040a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040a4:	6019      	str	r1, [r3, #0]
  return result;
 80040a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	2101      	movs	r1, #1
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1b2      	bne.n	800402e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8158 	beq.w	8004388 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040de:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d112      	bne.n	8004110 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	4b57      	ldr	r3, [pc, #348]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4a56      	ldr	r2, [pc, #344]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	61d3      	str	r3, [r2, #28]
 80040f6:	4b54      	ldr	r3, [pc, #336]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f107 0308 	add.w	r3, r7, #8
 8004108:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <HAL_RCC_OscConfig+0x938>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d11a      	bne.n	8004152 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411c:	4b4c      	ldr	r3, [pc, #304]	; (8004250 <HAL_RCC_OscConfig+0x938>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a4b      	ldr	r2, [pc, #300]	; (8004250 <HAL_RCC_OscConfig+0x938>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004128:	f7fe fa3e 	bl	80025a8 <HAL_GetTick>
 800412c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004130:	e009      	b.n	8004146 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004132:	f7fe fa39 	bl	80025a8 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	; 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e2e9      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	4b42      	ldr	r3, [pc, #264]	; (8004250 <HAL_RCC_OscConfig+0x938>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ef      	beq.n	8004132 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x852>
 800415c:	4b3a      	ldr	r3, [pc, #232]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4a39      	ldr	r2, [pc, #228]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6213      	str	r3, [r2, #32]
 8004168:	e02f      	b.n	80041ca <HAL_RCC_OscConfig+0x8b2>
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10c      	bne.n	800418e <HAL_RCC_OscConfig+0x876>
 8004174:	4b34      	ldr	r3, [pc, #208]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	4a33      	ldr	r2, [pc, #204]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	6213      	str	r3, [r2, #32]
 8004180:	4b31      	ldr	r3, [pc, #196]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	4a30      	ldr	r2, [pc, #192]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 8004186:	f023 0304 	bic.w	r3, r3, #4
 800418a:	6213      	str	r3, [r2, #32]
 800418c:	e01d      	b.n	80041ca <HAL_RCC_OscConfig+0x8b2>
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b05      	cmp	r3, #5
 8004196:	d10c      	bne.n	80041b2 <HAL_RCC_OscConfig+0x89a>
 8004198:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 800419e:	f043 0304 	orr.w	r3, r3, #4
 80041a2:	6213      	str	r3, [r2, #32]
 80041a4:	4b28      	ldr	r3, [pc, #160]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4a27      	ldr	r2, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6213      	str	r3, [r2, #32]
 80041b0:	e00b      	b.n	80041ca <HAL_RCC_OscConfig+0x8b2>
 80041b2:	4b25      	ldr	r3, [pc, #148]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4a24      	ldr	r2, [pc, #144]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6213      	str	r3, [r2, #32]
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4a21      	ldr	r2, [pc, #132]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d06b      	beq.n	80042ac <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d4:	f7fe f9e8 	bl	80025a8 <HAL_GetTick>
 80041d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00b      	b.n	80041f6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe f9e3 	bl	80025a8 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e291      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
 80041f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80041fa:	2202      	movs	r2, #2
 80041fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	fa93 f2a3 	rbit	r2, r3
 8004208:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004212:	2202      	movs	r2, #2
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	fa93 f2a3 	rbit	r2, r3
 8004220:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004224:	601a      	str	r2, [r3, #0]
  return result;
 8004226:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800422a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422c:	fab3 f383 	clz	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d109      	bne.n	8004254 <HAL_RCC_OscConfig+0x93c>
 8004240:	4b01      	ldr	r3, [pc, #4]	; (8004248 <HAL_RCC_OscConfig+0x930>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	e014      	b.n	8004270 <HAL_RCC_OscConfig+0x958>
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	10908120 	.word	0x10908120
 8004250:	40007000 	.word	0x40007000
 8004254:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004258:	2202      	movs	r2, #2
 800425a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	fa93 f2a3 	rbit	r2, r3
 8004266:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	4bbb      	ldr	r3, [pc, #748]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004274:	2102      	movs	r1, #2
 8004276:	6011      	str	r1, [r2, #0]
 8004278:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	fa92 f1a2 	rbit	r1, r2
 8004282:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004286:	6011      	str	r1, [r2, #0]
  return result;
 8004288:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	fab2 f282 	clz	r2, r2
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f002 021f 	and.w	r2, r2, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d099      	beq.n	80041de <HAL_RCC_OscConfig+0x8c6>
 80042aa:	e063      	b.n	8004374 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fe f97c 	bl	80025a8 <HAL_GetTick>
 80042b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b4:	e00b      	b.n	80042ce <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fe f977 	bl	80025a8 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e225      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
 80042ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042d2:	2202      	movs	r2, #2
 80042d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	fa93 f2a3 	rbit	r2, r3
 80042e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042ea:	2202      	movs	r2, #2
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	fa93 f2a3 	rbit	r2, r3
 80042f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80042fc:	601a      	str	r2, [r3, #0]
  return result;
 80042fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004302:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d102      	bne.n	800431e <HAL_RCC_OscConfig+0xa06>
 8004318:	4b90      	ldr	r3, [pc, #576]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	e00d      	b.n	800433a <HAL_RCC_OscConfig+0xa22>
 800431e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004322:	2202      	movs	r2, #2
 8004324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	fa93 f2a3 	rbit	r2, r3
 8004330:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	4b89      	ldr	r3, [pc, #548]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800433e:	2102      	movs	r1, #2
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	fa92 f1a2 	rbit	r1, r2
 800434c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004350:	6011      	str	r1, [r2, #0]
  return result;
 8004352:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	fab2 f282 	clz	r2, r2
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	f002 021f 	and.w	r2, r2, #31
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f202 	lsl.w	r2, r1, r2
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1a0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004374:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437c:	4b77      	ldr	r3, [pc, #476]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	4a76      	ldr	r2, [pc, #472]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004386:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 81c2 	beq.w	8004718 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004394:	4b71      	ldr	r3, [pc, #452]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	f000 819c 	beq.w	80046da <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	f040 8114 	bne.w	80045d6 <HAL_RCC_OscConfig+0xcbe>
 80043ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fa93 f2a3 	rbit	r2, r3
 80043c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043c6:	601a      	str	r2, [r3, #0]
  return result;
 80043c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ce:	fab3 f383 	clz	r3, r3
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	461a      	mov	r2, r3
 80043e0:	2300      	movs	r3, #0
 80043e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fe f8e0 	bl	80025a8 <HAL_GetTick>
 80043e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ec:	e009      	b.n	8004402 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fe f8db 	bl	80025a8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e18b      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
 8004402:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800440a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	fa93 f2a3 	rbit	r2, r3
 8004416:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800441a:	601a      	str	r2, [r3, #0]
  return result;
 800441c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004420:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d102      	bne.n	800443c <HAL_RCC_OscConfig+0xb24>
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	e01b      	b.n	8004474 <HAL_RCC_OscConfig+0xb5c>
 800443c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	fa93 f2a3 	rbit	r2, r3
 8004450:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800445a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	fa93 f2a3 	rbit	r2, r3
 800446a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	4b3a      	ldr	r3, [pc, #232]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004478:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	fa92 f1a2 	rbit	r1, r2
 8004488:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800448c:	6011      	str	r1, [r2, #0]
  return result;
 800448e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	fab2 f282 	clz	r2, r2
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	f042 0220 	orr.w	r2, r2, #32
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	f002 021f 	and.w	r2, r2, #31
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f202 	lsl.w	r2, r1, r2
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d19e      	bne.n	80043ee <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	430b      	orrs	r3, r1
 80044c6:	4925      	ldr	r1, [pc, #148]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
 80044cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	fa93 f2a3 	rbit	r2, r3
 80044e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044e4:	601a      	str	r2, [r3, #0]
  return result;
 80044e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044ea:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	2301      	movs	r3, #1
 8004500:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fe f851 	bl	80025a8 <HAL_GetTick>
 8004506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450a:	e009      	b.n	8004520 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe f84c 	bl	80025a8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0fc      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
 8004520:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	fa93 f2a3 	rbit	r2, r3
 8004534:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004538:	601a      	str	r2, [r3, #0]
  return result;
 800453a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800453e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	b2db      	uxtb	r3, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0xc48>
 8004554:	4b01      	ldr	r3, [pc, #4]	; (800455c <HAL_RCC_OscConfig+0xc44>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	e01e      	b.n	8004598 <HAL_RCC_OscConfig+0xc80>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	fa93 f2a3 	rbit	r2, r3
 8004574:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800457e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	fa93 f2a3 	rbit	r2, r3
 800458e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	4b63      	ldr	r3, [pc, #396]	; (8004724 <HAL_RCC_OscConfig+0xe0c>)
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800459c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045a0:	6011      	str	r1, [r2, #0]
 80045a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	fa92 f1a2 	rbit	r1, r2
 80045ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80045b0:	6011      	str	r1, [r2, #0]
  return result;
 80045b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	fab2 f282 	clz	r2, r2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	f042 0220 	orr.w	r2, r2, #32
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	f002 021f 	and.w	r2, r2, #31
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f202 	lsl.w	r2, r1, r2
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d09b      	beq.n	800450c <HAL_RCC_OscConfig+0xbf4>
 80045d4:	e0a0      	b.n	8004718 <HAL_RCC_OscConfig+0xe00>
 80045d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	fa93 f2a3 	rbit	r2, r3
 80045ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ee:	601a      	str	r2, [r3, #0]
  return result;
 80045f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd ffcc 	bl	80025a8 <HAL_GetTick>
 8004610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004614:	e009      	b.n	800462a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f7fd ffc7 	bl	80025a8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e077      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
 800462a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800462e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004642:	601a      	str	r2, [r3, #0]
  return result;
 8004644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d102      	bne.n	8004664 <HAL_RCC_OscConfig+0xd4c>
 800465e:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCC_OscConfig+0xe0c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	e01b      	b.n	800469c <HAL_RCC_OscConfig+0xd84>
 8004664:	f107 0320 	add.w	r3, r7, #32
 8004668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800466c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f107 0320 	add.w	r3, r7, #32
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	fa93 f2a3 	rbit	r2, r3
 8004678:	f107 031c 	add.w	r3, r7, #28
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f107 0318 	add.w	r3, r7, #24
 8004682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f107 0318 	add.w	r3, r7, #24
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	fa93 f2a3 	rbit	r2, r3
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	4b22      	ldr	r3, [pc, #136]	; (8004724 <HAL_RCC_OscConfig+0xe0c>)
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f107 0210 	add.w	r2, r7, #16
 80046a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	f107 0210 	add.w	r2, r7, #16
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	fa92 f1a2 	rbit	r1, r2
 80046b0:	f107 020c 	add.w	r2, r7, #12
 80046b4:	6011      	str	r1, [r2, #0]
  return result;
 80046b6:	f107 020c 	add.w	r2, r7, #12
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	fab2 f282 	clz	r2, r2
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	f042 0220 	orr.w	r2, r2, #32
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	f002 021f 	and.w	r2, r2, #31
 80046cc:	2101      	movs	r1, #1
 80046ce:	fa01 f202 	lsl.w	r2, r1, r2
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d19e      	bne.n	8004616 <HAL_RCC_OscConfig+0xcfe>
 80046d8:	e01e      	b.n	8004718 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e018      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <HAL_RCC_OscConfig+0xe0c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80046f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d108      	bne.n	8004714 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004702:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000

08004728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b09e      	sub	sp, #120	; 0x78
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e162      	b.n	8004a06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b90      	ldr	r3, [pc, #576]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b8d      	ldr	r3, [pc, #564]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 0207 	bic.w	r2, r3, #7
 8004756:	498b      	ldr	r1, [pc, #556]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b89      	ldr	r3, [pc, #548]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e14a      	b.n	8004a06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477c:	4b82      	ldr	r3, [pc, #520]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	497f      	ldr	r1, [pc, #508]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80dc 	beq.w	8004954 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d13c      	bne.n	800481e <HAL_RCC_ClockConfig+0xf6>
 80047a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d102      	bne.n	80047ce <HAL_RCC_ClockConfig+0xa6>
 80047c8:	4b6f      	ldr	r3, [pc, #444]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	e00f      	b.n	80047ee <HAL_RCC_ClockConfig+0xc6>
 80047ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	667b      	str	r3, [r7, #100]	; 0x64
 80047dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e0:	663b      	str	r3, [r7, #96]	; 0x60
 80047e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e4:	fa93 f3a3 	rbit	r3, r3
 80047e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ea:	4b67      	ldr	r3, [pc, #412]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80047f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047f6:	fa92 f2a2 	rbit	r2, r2
 80047fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80047fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047fe:	fab2 f282 	clz	r2, r2
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	f042 0220 	orr.w	r2, r2, #32
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	f002 021f 	and.w	r2, r2, #31
 800480e:	2101      	movs	r1, #1
 8004810:	fa01 f202 	lsl.w	r2, r1, r2
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d17b      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0f3      	b.n	8004a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d13c      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x178>
 8004826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d102      	bne.n	8004850 <HAL_RCC_ClockConfig+0x128>
 800484a:	4b4f      	ldr	r3, [pc, #316]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	e00f      	b.n	8004870 <HAL_RCC_ClockConfig+0x148>
 8004850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
 800485e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004862:	643b      	str	r3, [r7, #64]	; 0x40
 8004864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486c:	4b46      	ldr	r3, [pc, #280]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004874:	63ba      	str	r2, [r7, #56]	; 0x38
 8004876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004878:	fa92 f2a2 	rbit	r2, r2
 800487c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800487e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004880:	fab2 f282 	clz	r2, r2
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	f042 0220 	orr.w	r2, r2, #32
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	f002 021f 	and.w	r2, r2, #31
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f202 	lsl.w	r2, r1, r2
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13a      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0b2      	b.n	8004a06 <HAL_RCC_ClockConfig+0x2de>
 80048a0:	2302      	movs	r3, #2
 80048a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x1a0>
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	e00d      	b.n	80048e4 <HAL_RCC_ClockConfig+0x1bc>
 80048c8:	2302      	movs	r3, #2
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	2302      	movs	r3, #2
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	fa93 f3a3 	rbit	r3, r3
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	4b29      	ldr	r3, [pc, #164]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2202      	movs	r2, #2
 80048e6:	61ba      	str	r2, [r7, #24]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	fa92 f2a2 	rbit	r2, r2
 80048ee:	617a      	str	r2, [r7, #20]
  return result;
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	fab2 f282 	clz	r2, r2
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	f042 0220 	orr.w	r2, r2, #32
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	f002 021f 	and.w	r2, r2, #31
 8004902:	2101      	movs	r1, #1
 8004904:	fa01 f202 	lsl.w	r2, r1, r2
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e079      	b.n	8004a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004912:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	491a      	ldr	r1, [pc, #104]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004924:	f7fd fe40 	bl	80025a8 <HAL_GetTick>
 8004928:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	e00a      	b.n	8004942 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492c:	f7fd fe3c 	bl	80025a8 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e061      	b.n	8004a06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 020c 	and.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	429a      	cmp	r2, r3
 8004952:	d1eb      	bne.n	800492c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d214      	bcs.n	800498c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 0207 	bic.w	r2, r3, #7
 800496a:	4906      	ldr	r1, [pc, #24]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e040      	b.n	8004a06 <HAL_RCC_ClockConfig+0x2de>
 8004984:	40022000 	.word	0x40022000
 8004988:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <HAL_RCC_ClockConfig+0x2e8>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	491a      	ldr	r1, [pc, #104]	; (8004a10 <HAL_RCC_ClockConfig+0x2e8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <HAL_RCC_ClockConfig+0x2e8>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4912      	ldr	r1, [pc, #72]	; (8004a10 <HAL_RCC_ClockConfig+0x2e8>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049ca:	f000 f829 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049ce:	4601      	mov	r1, r0
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <HAL_RCC_ClockConfig+0x2e8>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d8:	22f0      	movs	r2, #240	; 0xf0
 80049da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	fa92 f2a2 	rbit	r2, r2
 80049e2:	60fa      	str	r2, [r7, #12]
  return result;
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	fab2 f282 	clz	r2, r2
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	40d3      	lsrs	r3, r2
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x2ec>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	fa21 f303 	lsr.w	r3, r1, r3
 80049f6:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <HAL_RCC_ClockConfig+0x2f0>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049fa:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <HAL_RCC_ClockConfig+0x2f4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd fd8e 	bl	8002520 <HAL_InitTick>
  
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3778      	adds	r7, #120	; 0x78
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	08005784 	.word	0x08005784
 8004a18:	20000138 	.word	0x20000138
 8004a1c:	2000013c 	.word	0x2000013c

08004a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b08b      	sub	sp, #44	; 0x2c
 8004a24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a3a:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x30>
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x36>
 8004a4e:	e03c      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a52:	623b      	str	r3, [r7, #32]
      break;
 8004a54:	e03c      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004a5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004a60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	fa92 f2a2 	rbit	r2, r2
 8004a68:	607a      	str	r2, [r7, #4]
  return result;
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	fab2 f282 	clz	r2, r2
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	40d3      	lsrs	r3, r2
 8004a74:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	220f      	movs	r2, #15
 8004a84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	fa92 f2a2 	rbit	r2, r2
 8004a8c:	60fa      	str	r2, [r7, #12]
  return result;
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	fab2 f282 	clz	r2, r2
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	40d3      	lsrs	r3, r2
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a9a:	5cd3      	ldrb	r3, [r2, r3]
 8004a9c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	623b      	str	r3, [r7, #32]
      break;
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004acc:	623b      	str	r3, [r7, #32]
      break;
 8004ace:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	372c      	adds	r7, #44	; 0x2c
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	007a1200 	.word	0x007a1200
 8004ae8:	08005794 	.word	0x08005794
 8004aec:	080057a4 	.word	0x080057a4
 8004af0:	003d0900 	.word	0x003d0900

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b092      	sub	sp, #72	; 0x48
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 80d4 	beq.w	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b18:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10e      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b24:	4b4b      	ldr	r3, [pc, #300]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4a4a      	ldr	r2, [pc, #296]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	61d3      	str	r3, [r2, #28]
 8004b30:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b42:	4b45      	ldr	r3, [pc, #276]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d118      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4e:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a41      	ldr	r2, [pc, #260]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fd25 	bl	80025a8 <HAL_GetTick>
 8004b5e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b62:	f7fd fd21 	bl	80025a8 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b64      	cmp	r3, #100	; 0x64
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e169      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b80:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8084 	beq.w	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d07c      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bba:	fab3 f383 	clz	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2301      	movs	r3, #1
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	461a      	mov	r2, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04b      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c02:	f7fd fcd1 	bl	80025a8 <HAL_GetTick>
 8004c06:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fd fccd 	bl	80025a8 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e113      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004c20:	2302      	movs	r3, #2
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	623b      	str	r3, [r7, #32]
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	fa93 f3a3 	rbit	r3, r3
 8004c36:	61fb      	str	r3, [r7, #28]
  return result;
 8004c38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3a:	fab3 f383 	clz	r3, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f043 0302 	orr.w	r3, r3, #2
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d108      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c4e:	4b01      	ldr	r3, [pc, #4]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	e00d      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	10908100 	.word	0x10908100
 8004c60:	2302      	movs	r3, #2
 8004c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	4b78      	ldr	r3, [pc, #480]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2202      	movs	r2, #2
 8004c72:	613a      	str	r2, [r7, #16]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	fa92 f2a2 	rbit	r2, r2
 8004c7a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	fab2 f282 	clz	r2, r2
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	f002 021f 	and.w	r2, r2, #31
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f202 	lsl.w	r2, r1, r2
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0b7      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c9a:	4b6d      	ldr	r3, [pc, #436]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	496a      	ldr	r1, [pc, #424]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb4:	4b66      	ldr	r3, [pc, #408]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4a65      	ldr	r2, [pc, #404]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ccc:	4b60      	ldr	r3, [pc, #384]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	f023 0203 	bic.w	r2, r3, #3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	495d      	ldr	r1, [pc, #372]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cea:	4b59      	ldr	r3, [pc, #356]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4956      	ldr	r1, [pc, #344]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d08:	4b51      	ldr	r3, [pc, #324]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	494e      	ldr	r1, [pc, #312]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d26:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f023 0210 	bic.w	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4947      	ldr	r1, [pc, #284]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d44:	4b42      	ldr	r3, [pc, #264]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	493f      	ldr	r1, [pc, #252]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d62:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f023 0220 	bic.w	r2, r3, #32
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4938      	ldr	r1, [pc, #224]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d80:	4b33      	ldr	r3, [pc, #204]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	4930      	ldr	r1, [pc, #192]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d9e:	4b2c      	ldr	r3, [pc, #176]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	4929      	ldr	r1, [pc, #164]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dbc:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4921      	ldr	r1, [pc, #132]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	491a      	ldr	r1, [pc, #104]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	4912      	ldr	r1, [pc, #72]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	490b      	ldr	r1, [pc, #44]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	4903      	ldr	r1, [pc, #12]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3748      	adds	r7, #72	; 0x48
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000

08004e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e09d      	b.n	8004fa2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e76:	d009      	beq.n	8004e8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	61da      	str	r2, [r3, #28]
 8004e7e:	e005      	b.n	8004e8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fa34 	bl	8002314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ecc:	d902      	bls.n	8004ed4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e002      	b.n	8004eda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ee2:	d007      	beq.n	8004ef4 <HAL_SPI_Init+0xa0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eec:	d002      	beq.n	8004ef4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	ea42 0103 	orr.w	r1, r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	f003 0204 	and.w	r2, r3, #4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f70:	ea42 0103 	orr.w	r1, r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e01a      	b.n	8004ff2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fd f9df 	bl	8002398 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b08a      	sub	sp, #40	; 0x28
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005008:	2301      	movs	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x26>
 800501c:	2302      	movs	r3, #2
 800501e:	e1fb      	b.n	8005418 <HAL_SPI_TransmitReceive+0x41e>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005028:	f7fd fabe 	bl	80025a8 <HAL_GetTick>
 800502c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005034:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005044:	7efb      	ldrb	r3, [r7, #27]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d00e      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x6e>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005050:	d106      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x66>
 800505a:	7efb      	ldrb	r3, [r7, #27]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005060:	2302      	movs	r3, #2
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005066:	e1cd      	b.n	8005404 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_SPI_TransmitReceive+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_TransmitReceive+0x80>
 8005074:	887b      	ldrh	r3, [r7, #2]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005080:	e1c0      	b.n	8005404 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b04      	cmp	r3, #4
 800508c:	d003      	beq.n	8005096 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2205      	movs	r2, #5
 8005092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	887a      	ldrh	r2, [r7, #2]
 80050a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	887a      	ldrh	r2, [r7, #2]
 80050ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	887a      	ldrh	r2, [r7, #2]
 80050bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	887a      	ldrh	r2, [r7, #2]
 80050c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d8:	d802      	bhi.n	80050e0 <HAL_SPI_TransmitReceive+0xe6>
 80050da:	8a3b      	ldrh	r3, [r7, #16]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d908      	bls.n	80050f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	e007      	b.n	8005102 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005100:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d007      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005128:	d97c      	bls.n	8005224 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x13e>
 8005132:	8a7b      	ldrh	r3, [r7, #18]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d169      	bne.n	800520c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	1c9a      	adds	r2, r3, #2
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515c:	e056      	b.n	800520c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b02      	cmp	r3, #2
 800516a:	d11b      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x1aa>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_SPI_TransmitReceive+0x1aa>
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2b01      	cmp	r3, #1
 800517a:	d113      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	881a      	ldrh	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	1c9a      	adds	r2, r3, #2
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d11c      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x1f2>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	b292      	uxth	r2, r2
 80051ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051e8:	2301      	movs	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051ec:	f7fd f9dc 	bl	80025a8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d807      	bhi.n	800520c <HAL_SPI_TransmitReceive+0x212>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d003      	beq.n	800520c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800520a:	e0fb      	b.n	8005404 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1a3      	bne.n	800515e <HAL_SPI_TransmitReceive+0x164>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d19d      	bne.n	800515e <HAL_SPI_TransmitReceive+0x164>
 8005222:	e0df      	b.n	80053e4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x23a>
 800522c:	8a7b      	ldrh	r3, [r7, #18]
 800522e:	2b01      	cmp	r3, #1
 8005230:	f040 80cb 	bne.w	80053ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d912      	bls.n	8005264 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	881a      	ldrh	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	1c9a      	adds	r2, r3, #2
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b02      	subs	r3, #2
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005262:	e0b2      	b.n	80053ca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	7812      	ldrb	r2, [r2, #0]
 8005270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528a:	e09e      	b.n	80053ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d134      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x30a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02f      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x30a>
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d12c      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d912      	bls.n	80052da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	881a      	ldrh	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b02      	subs	r3, #2
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052d8:	e012      	b.n	8005300 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	7812      	ldrb	r2, [r2, #0]
 80052e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b01      	cmp	r3, #1
 8005310:	d148      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0x3aa>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d042      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d923      	bls.n	8005372 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	b292      	uxth	r2, r2
 8005336:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b02      	subs	r3, #2
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d81f      	bhi.n	80053a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800536e:	605a      	str	r2, [r3, #4]
 8005370:	e016      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f103 020c 	add.w	r2, r3, #12
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053a0:	2301      	movs	r3, #1
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053a4:	f7fd f900 	bl	80025a8 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d803      	bhi.n	80053bc <HAL_SPI_TransmitReceive+0x3c2>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d102      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x3c8>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80053c8:	e01c      	b.n	8005404 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f47f af5b 	bne.w	800528c <HAL_SPI_TransmitReceive+0x292>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f47f af54 	bne.w	800528c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f945 	bl	8005678 <SPI_EndRxTxTransaction>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2220      	movs	r2, #32
 80053fe:	661a      	str	r2, [r3, #96]	; 0x60
 8005400:	e000      	b.n	8005404 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005418:	4618      	mov	r0, r3
 800541a:	3728      	adds	r7, #40	; 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800542e:	b2db      	uxtb	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800544c:	f7fd f8ac 	bl	80025a8 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	4413      	add	r3, r2
 800545a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800545c:	f7fd f8a4 	bl	80025a8 <HAL_GetTick>
 8005460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005462:	4b39      	ldr	r3, [pc, #228]	; (8005548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	015b      	lsls	r3, r3, #5
 8005468:	0d1b      	lsrs	r3, r3, #20
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005472:	e054      	b.n	800551e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d050      	beq.n	800551e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800547c:	f7fd f894 	bl	80025a8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	429a      	cmp	r2, r3
 800548a:	d902      	bls.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d13d      	bne.n	800550e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d111      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d004      	beq.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d107      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d10f      	bne.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e017      	b.n	800553e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	3b01      	subs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	429a      	cmp	r2, r3
 800553a:	d19b      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000138 	.word	0x20000138

0800554c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800555e:	f7fd f823 	bl	80025a8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	4413      	add	r3, r2
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800556e:	f7fd f81b 	bl	80025a8 <HAL_GetTick>
 8005572:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800557c:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	00da      	lsls	r2, r3, #3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	0d1b      	lsrs	r3, r3, #20
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005594:	e060      	b.n	8005658 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800559c:	d107      	bne.n	80055ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d050      	beq.n	8005658 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055b6:	f7fc fff7 	bl	80025a8 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d902      	bls.n	80055cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d13d      	bne.n	8005648 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055e4:	d111      	bne.n	800560a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ee:	d004      	beq.n	80055fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d107      	bne.n	800560a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005612:	d10f      	bne.n	8005634 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005632:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e010      	b.n	800566a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	3b01      	subs	r3, #1
 8005656:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d196      	bne.n	8005596 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3728      	adds	r7, #40	; 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000138 	.word	0x20000138

08005678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2200      	movs	r2, #0
 800568c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff ff5b 	bl	800554c <SPI_WaitFifoStateUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e027      	b.n	80056fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2180      	movs	r1, #128	; 0x80
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff fec0 	bl	800543c <SPI_WaitFlagStateUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c6:	f043 0220 	orr.w	r2, r3, #32
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e014      	b.n	80056fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff34 	bl	800554c <SPI_WaitFifoStateUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e000      	b.n	80056fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <__libc_init_array>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	4d0d      	ldr	r5, [pc, #52]	; (800573c <__libc_init_array+0x38>)
 8005708:	4c0d      	ldr	r4, [pc, #52]	; (8005740 <__libc_init_array+0x3c>)
 800570a:	1b64      	subs	r4, r4, r5
 800570c:	10a4      	asrs	r4, r4, #2
 800570e:	2600      	movs	r6, #0
 8005710:	42a6      	cmp	r6, r4
 8005712:	d109      	bne.n	8005728 <__libc_init_array+0x24>
 8005714:	4d0b      	ldr	r5, [pc, #44]	; (8005744 <__libc_init_array+0x40>)
 8005716:	4c0c      	ldr	r4, [pc, #48]	; (8005748 <__libc_init_array+0x44>)
 8005718:	f000 f820 	bl	800575c <_init>
 800571c:	1b64      	subs	r4, r4, r5
 800571e:	10a4      	asrs	r4, r4, #2
 8005720:	2600      	movs	r6, #0
 8005722:	42a6      	cmp	r6, r4
 8005724:	d105      	bne.n	8005732 <__libc_init_array+0x2e>
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	f855 3b04 	ldr.w	r3, [r5], #4
 800572c:	4798      	blx	r3
 800572e:	3601      	adds	r6, #1
 8005730:	e7ee      	b.n	8005710 <__libc_init_array+0xc>
 8005732:	f855 3b04 	ldr.w	r3, [r5], #4
 8005736:	4798      	blx	r3
 8005738:	3601      	adds	r6, #1
 800573a:	e7f2      	b.n	8005722 <__libc_init_array+0x1e>
 800573c:	080057b4 	.word	0x080057b4
 8005740:	080057b4 	.word	0x080057b4
 8005744:	080057b4 	.word	0x080057b4
 8005748:	080057b8 	.word	0x080057b8

0800574c <memset>:
 800574c:	4402      	add	r2, r0
 800574e:	4603      	mov	r3, r0
 8005750:	4293      	cmp	r3, r2
 8005752:	d100      	bne.n	8005756 <memset+0xa>
 8005754:	4770      	bx	lr
 8005756:	f803 1b01 	strb.w	r1, [r3], #1
 800575a:	e7f9      	b.n	8005750 <memset+0x4>

0800575c <_init>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr

08005768 <_fini>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr
