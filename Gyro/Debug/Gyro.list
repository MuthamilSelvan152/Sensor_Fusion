
Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009984  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009b18  08009b18  00019b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f64  08009f64  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  08009f64  08009f64  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f64  08009f64  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08009f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020354  2**0
                  CONTENTS
 10 .bss          000002a0  20000354  20000354  00020354  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005f4  200005f4  00020354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a5cb  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b88  00000000  00000000  0003a94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  0003e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f18  00000000  00000000  0003f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d0b  00000000  00000000  000404c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001840e  00000000  00000000  000611cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8c53  00000000  00000000  000795d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013222c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005228  00000000  00000000  00132280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009afc 	.word	0x08009afc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	08009afc 	.word	0x08009afc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000bb6:	f001 fa6f 	bl	8002098 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 faab 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000bd8:	f107 030f 	add.w	r3, r7, #15
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2123      	movs	r1, #35	; 0x23
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fa9f 	bl	8002124 <GYRO_IO_Write>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000c02:	f001 fa49 	bl	8002098 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2201      	movs	r2, #1
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fabb 	bl	8002188 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	2124      	movs	r1, #36	; 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 faad 	bl	8002188 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2124      	movs	r1, #36	; 0x24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fa70 	bl	8002124 <GYRO_IO_Write>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fa5b 	bl	8002124 <GYRO_IO_Write>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000c88:	f107 030f 	add.w	r3, r7, #15
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2130      	movs	r1, #48	; 0x30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fa79 	bl	8002188 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000c96:	f107 030e 	add.w	r3, r7, #14
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2122      	movs	r1, #34	; 0x22
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fa72 	bl	8002188 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	121b      	asrs	r3, r3, #8
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	f023 0320 	bic.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000cd8:	f107 030f 	add.w	r3, r7, #15
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2130      	movs	r1, #48	; 0x30
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fa1f 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000ce6:	f107 030e 	add.w	r3, r7, #14
 8000cea:	2201      	movs	r2, #1
 8000cec:	2122      	movs	r1, #34	; 0x22
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fa18 	bl	8002124 <GYRO_IO_Write>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2122      	movs	r1, #34	; 0x22
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fa3a 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e00c      	b.n	8000d4a <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d109      	bne.n	8000d4a <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f023 0308 	bic.w	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d4a:	f107 030f 	add.w	r3, r7, #15
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2122      	movs	r1, #34	; 0x22
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f9e6 	bl	8002124 <GYRO_IO_Write>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d6a:	f107 030f 	add.w	r3, r7, #15
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2122      	movs	r1, #34	; 0x22
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fa08 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e009      	b.n	8000da2 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0308 	bic.w	r3, r3, #8
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000da2:	f107 030f 	add.w	r3, r7, #15
 8000da6:	2201      	movs	r2, #1
 8000da8:	2122      	movs	r1, #34	; 0x22
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f9ba 	bl	8002124 <GYRO_IO_Write>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2121      	movs	r1, #33	; 0x21
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 f9dc 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	2201      	movs	r2, #1
 8000dea:	2121      	movs	r1, #33	; 0x21
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f999 	bl	8002124 <GYRO_IO_Write>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e04:	f107 030f 	add.w	r3, r7, #15
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2124      	movs	r1, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f9bb 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f023 0310 	bic.w	r3, r3, #16
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e26:	f107 030f 	add.w	r3, r7, #15
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2124      	movs	r1, #36	; 0x24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f978 	bl	8002124 <GYRO_IO_Write>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000e64:	f107 030f 	add.w	r3, r7, #15
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2123      	movs	r1, #35	; 0x23
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f98b 	bl	8002188 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2206      	movs	r2, #6
 8000e78:	2128      	movs	r1, #40	; 0x28
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f984 	bl	8002188 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d126      	bne.n	8000ed8 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
 8000e8e:	e01f      	b.n	8000ed0 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	3301      	adds	r3, #1
 8000e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eae:	440b      	add	r3, r1
 8000eb0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	dddc      	ble.n	8000e90 <I3G4250D_ReadXYZAngRate+0x54>
 8000ed6:	e025      	b.n	8000f24 <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	e01f      	b.n	8000f1e <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000efc:	440b      	add	r3, r1
 8000efe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f12:	440b      	add	r3, r1
 8000f14:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	dddc      	ble.n	8000ede <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f2a:	2b20      	cmp	r3, #32
 8000f2c:	d00c      	beq.n	8000f48 <I3G4250D_ReadXYZAngRate+0x10c>
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	dc0d      	bgt.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d003      	beq.n	8000f42 <I3G4250D_ReadXYZAngRate+0x106>
 8000f3a:	e008      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <I3G4250D_ReadXYZAngRate+0x158>)
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f40:	e005      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <I3G4250D_ReadXYZAngRate+0x15c>)
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f46:	e002      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <I3G4250D_ReadXYZAngRate+0x160>)
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f4c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	e017      	b.n	8000f84 <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	3301      	adds	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	dde4      	ble.n	8000f54 <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	410c0000 	.word	0x410c0000
 8000f98:	418c0000 	.word	0x418c0000
 8000f9c:	428c0000 	.word	0x428c0000

08000fa0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000fae:	f001 f873 	bl	8002098 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000fb8:	f107 030f 	add.w	r3, r7, #15
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 f8af 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000fd0:	f107 030f 	add.w	r3, r7, #15
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2123      	movs	r1, #35	; 0x23
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f8a3 	bl	8002124 <GYRO_IO_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ffa:	f001 f84d 	bl	8002098 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	2201      	movs	r2, #1
 8001002:	210f      	movs	r1, #15
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f8bf 	bl	8002188 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	2201      	movs	r2, #1
 800101e:	2124      	movs	r1, #36	; 0x24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f8b1 	bl	8002188 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102c:	b2db      	uxtb	r3, r3
 800102e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	2124      	movs	r1, #36	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f874 	bl	8002124 <GYRO_IO_Write>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001058:	f107 030f 	add.w	r3, r7, #15
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f85f 	bl	8002124 <GYRO_IO_Write>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	2300      	movs	r3, #0
 800107e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f87d 	bl	8002188 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	2201      	movs	r2, #1
 8001094:	2122      	movs	r1, #34	; 0x22
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f876 	bl	8002188 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	121b      	asrs	r3, r3, #8
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	f023 0320 	bic.w	r3, r3, #32
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	2130      	movs	r1, #48	; 0x30
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f823 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80010de:	f107 030e 	add.w	r3, r7, #14
 80010e2:	2201      	movs	r2, #1
 80010e4:	2122      	movs	r1, #34	; 0x22
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 f81c 	bl	8002124 <GYRO_IO_Write>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	2201      	movs	r2, #1
 8001104:	2122      	movs	r1, #34	; 0x22
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f83e 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10a      	bne.n	8001128 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e00c      	b.n	8001142 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d109      	bne.n	8001142 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f023 0308 	bic.w	r3, r3, #8
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001142:	f107 030f 	add.w	r3, r7, #15
 8001146:	2201      	movs	r2, #1
 8001148:	2122      	movs	r1, #34	; 0x22
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ffea 	bl	8002124 <GYRO_IO_Write>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001162:	f107 030f 	add.w	r3, r7, #15
 8001166:	2201      	movs	r2, #1
 8001168:	2122      	movs	r1, #34	; 0x22
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f80c 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e009      	b.n	800119a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f023 0308 	bic.w	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	2201      	movs	r2, #1
 80011a0:	2122      	movs	r1, #34	; 0x22
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ffbe 	bl	8002124 <GYRO_IO_Write>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011ba:	f107 030f 	add.w	r3, r7, #15
 80011be:	2201      	movs	r2, #1
 80011c0:	2121      	movs	r1, #33	; 0x21
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffe0 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011dc:	f107 030f 	add.w	r3, r7, #15
 80011e0:	2201      	movs	r2, #1
 80011e2:	2121      	movs	r1, #33	; 0x21
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ff9d 	bl	8002124 <GYRO_IO_Write>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	2201      	movs	r2, #1
 8001202:	2124      	movs	r1, #36	; 0x24
 8001204:	4618      	mov	r0, r3
 8001206:	f000 ffbf 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0310 	bic.w	r3, r3, #16
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4313      	orrs	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	2201      	movs	r2, #1
 8001224:	2124      	movs	r1, #36	; 0x24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ff7c 	bl	8002124 <GYRO_IO_Write>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	2300      	movs	r3, #0
 8001242:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800125c:	f107 030f 	add.w	r3, r7, #15
 8001260:	2201      	movs	r2, #1
 8001262:	2123      	movs	r1, #35	; 0x23
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ff8f 	bl	8002188 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	2206      	movs	r2, #6
 8001270:	2128      	movs	r1, #40	; 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f000 ff88 	bl	8002188 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d126      	bne.n	80012d0 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	e01f      	b.n	80012c8 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	3301      	adds	r3, #1
 800128e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001292:	4413      	add	r3, r2
 8001294:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001298:	b29b      	uxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a6:	440b      	add	r3, r1
 80012a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012bc:	440b      	add	r3, r1
 80012be:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	dddc      	ble.n	8001288 <L3GD20_ReadXYZAngRate+0x54>
 80012ce:	e025      	b.n	800131c <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	e01f      	b.n	8001316 <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012de:	4413      	add	r3, r2
 80012e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	3301      	adds	r3, #1
 80012f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012f4:	440b      	add	r3, r1
 80012f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21a      	sxth	r2, r3
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800130a:	440b      	add	r3, r1
 800130c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	3301      	adds	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	2b02      	cmp	r3, #2
 800131a:	dddc      	ble.n	80012d6 <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001322:	2b20      	cmp	r3, #32
 8001324:	d00c      	beq.n	8001340 <L3GD20_ReadXYZAngRate+0x10c>
 8001326:	2b20      	cmp	r3, #32
 8001328:	dc0d      	bgt.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <L3GD20_ReadXYZAngRate+0x100>
 800132e:	2b10      	cmp	r3, #16
 8001330:	d003      	beq.n	800133a <L3GD20_ReadXYZAngRate+0x106>
 8001332:	e008      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <L3GD20_ReadXYZAngRate+0x158>)
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001338:	e005      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <L3GD20_ReadXYZAngRate+0x15c>)
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800133e:	e002      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <L3GD20_ReadXYZAngRate+0x160>)
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001344:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	e017      	b.n	800137c <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001354:	4413      	add	r3, r2
 8001356:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	3301      	adds	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b02      	cmp	r3, #2
 8001380:	dde4      	ble.n	800134c <L3GD20_ReadXYZAngRate+0x118>
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	410c0000 	.word	0x410c0000
 8001390:	418c0000 	.word	0x418c0000
 8001394:	428c0000 	.word	0x428c0000

08001398 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80013a6:	f000 ff29 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2120      	movs	r1, #32
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f000 ff99 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	461a      	mov	r2, r3
 80013c2:	2123      	movs	r1, #35	; 0x23
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f000 ff91 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80013ea:	f000 ff07 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80013ee:	210f      	movs	r1, #15
 80013f0:	2032      	movs	r0, #50	; 0x32
 80013f2:	f000 ff8e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800140a:	2124      	movs	r1, #36	; 0x24
 800140c:	2032      	movs	r0, #50	; 0x32
 800140e:	f000 ff80 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	461a      	mov	r2, r3
 8001422:	2124      	movs	r1, #36	; 0x24
 8001424:	2032      	movs	r0, #50	; 0x32
 8001426:	f000 ff61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800143c:	2121      	movs	r1, #33	; 0x21
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f000 ff67 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4313      	orrs	r3, r2
 8001456:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	461a      	mov	r2, r3
 800145c:	2121      	movs	r1, #33	; 0x21
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f000 ff44 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001476:	2121      	movs	r1, #33	; 0x21
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f000 ff4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f023 0308 	bic.w	r3, r3, #8
 8001488:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4313      	orrs	r3, r2
 8001490:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	461a      	mov	r2, r3
 8001496:	2121      	movs	r1, #33	; 0x21
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 ff27 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b088      	sub	sp, #32
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80014ae:	2300      	movs	r3, #0
 80014b0:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80014ba:	2123      	movs	r1, #35	; 0x23
 80014bc:	2032      	movs	r0, #50	; 0x32
 80014be:	f000 ff28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80014c6:	2124      	movs	r1, #36	; 0x24
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f000 ff22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80014d2:	2128      	movs	r1, #40	; 0x28
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f000 ff1c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014da:	4603      	mov	r3, r0
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80014e0:	2129      	movs	r1, #41	; 0x29
 80014e2:	2032      	movs	r0, #50	; 0x32
 80014e4:	f000 ff15 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80014ee:	212a      	movs	r1, #42	; 0x2a
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f000 ff0e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80014fc:	212b      	movs	r1, #43	; 0x2b
 80014fe:	2032      	movs	r0, #50	; 0x32
 8001500:	f000 ff07 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	b25b      	sxtb	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f000 ff00 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001512:	4603      	mov	r3, r0
 8001514:	b25b      	sxtb	r3, r3
 8001516:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001518:	212d      	movs	r1, #45	; 0x2d
 800151a:	2032      	movs	r0, #50	; 0x32
 800151c:	f000 fef9 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	b25b      	sxtb	r3, r3
 8001524:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001526:	7d3b      	ldrb	r3, [r7, #20]
 8001528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d126      	bne.n	800157e <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
 8001534:	e01f      	b.n	8001576 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3301      	adds	r3, #1
 800153c:	f107 0220 	add.w	r2, r7, #32
 8001540:	4413      	add	r3, r2
 8001542:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b29a      	uxth	r2, r3
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	f107 0120 	add.w	r1, r7, #32
 8001554:	440b      	add	r3, r1
 8001556:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	b212      	sxth	r2, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	f107 0120 	add.w	r1, r7, #32
 800156a:	440b      	add	r3, r1
 800156c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3301      	adds	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d9dc      	bls.n	8001536 <LSM303AGR_AccReadXYZ+0x90>
 800157c:	e025      	b.n	80015ca <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	77fb      	strb	r3, [r7, #31]
 8001582:	e01f      	b.n	80015c4 <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	f107 0220 	add.w	r2, r7, #32
 800158c:	4413      	add	r3, r2
 800158e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	3301      	adds	r3, #1
 800159e:	f107 0120 	add.w	r1, r7, #32
 80015a2:	440b      	add	r3, r1
 80015a4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	b212      	sxth	r2, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	f107 0120 	add.w	r1, r7, #32
 80015b8:	440b      	add	r3, r1
 80015ba:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80015be:	7ffb      	ldrb	r3, [r7, #31]
 80015c0:	3301      	adds	r3, #1
 80015c2:	77fb      	strb	r3, [r7, #31]
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d9dc      	bls.n	8001584 <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80015ca:	7d3b      	ldrb	r3, [r7, #20]
 80015cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015d0:	2b30      	cmp	r3, #48	; 0x30
 80015d2:	d013      	beq.n	80015fc <LSM303AGR_AccReadXYZ+0x156>
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	dc14      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d00c      	beq.n	80015f6 <LSM303AGR_AccReadXYZ+0x150>
 80015dc:	2b20      	cmp	r3, #32
 80015de:	dc10      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <LSM303AGR_AccReadXYZ+0x144>
 80015e4:	2b10      	cmp	r3, #16
 80015e6:	d003      	beq.n	80015f0 <LSM303AGR_AccReadXYZ+0x14a>
 80015e8:	e00b      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77bb      	strb	r3, [r7, #30]
    break;
 80015ee:	e008      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80015f0:	2302      	movs	r3, #2
 80015f2:	77bb      	strb	r3, [r7, #30]
    break;
 80015f4:	e005      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80015f6:	2304      	movs	r3, #4
 80015f8:	77bb      	strb	r3, [r7, #30]
    break;
 80015fa:	e002      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80015fc:	230c      	movs	r3, #12
 80015fe:	77bb      	strb	r3, [r7, #30]
    break;
 8001600:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	e015      	b.n	8001634 <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	f107 0220 	add.w	r2, r7, #32
 8001610:	4413      	add	r3, r2
 8001612:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001616:	b29a      	uxth	r2, r3
 8001618:	7fbb      	ldrb	r3, [r7, #30]
 800161a:	b29b      	uxth	r3, r3
 800161c:	fb12 f303 	smulbb	r3, r2, r3
 8001620:	b299      	uxth	r1, r3
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b20a      	sxth	r2, r1
 800162c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	3301      	adds	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d9e6      	bls.n	8001608 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001652:	2121      	movs	r1, #33	; 0x21
 8001654:	2032      	movs	r0, #50	; 0x32
 8001656:	f000 fe5c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4313      	orrs	r3, r2
 800166c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	461a      	mov	r2, r3
 8001672:	2121      	movs	r1, #33	; 0x21
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 fe39 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001690:	2122      	movs	r1, #34	; 0x22
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f000 fe3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2122      	movs	r1, #34	; 0x22
 80016aa:	2032      	movs	r0, #50	; 0x32
 80016ac:	f000 fe1e 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80016c6:	2138      	movs	r1, #56	; 0x38
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 fe22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	461a      	mov	r2, r3
 80016de:	2138      	movs	r1, #56	; 0x38
 80016e0:	2032      	movs	r0, #50	; 0x32
 80016e2:	f000 fe03 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80016e6:	230a      	movs	r3, #10
 80016e8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	461a      	mov	r2, r3
 80016ee:	213a      	movs	r1, #58	; 0x3a
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f000 fdfb 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80016f6:	2305      	movs	r3, #5
 80016f8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	461a      	mov	r2, r3
 80016fe:	213b      	movs	r1, #59	; 0x3b
 8001700:	2032      	movs	r0, #50	; 0x32
 8001702:	f000 fdf3 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	461a      	mov	r2, r3
 800170a:	213c      	movs	r1, #60	; 0x3c
 800170c:	2032      	movs	r0, #50	; 0x32
 800170e:	f000 fded 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	461a      	mov	r2, r3
 800171a:	213d      	movs	r1, #61	; 0x3d
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f000 fde5 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800172e:	f000 fdaf 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001732:	2080      	movs	r0, #128	; 0x80
 8001734:	f7ff ffa5 	bl	8001682 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001738:	2004      	movs	r0, #4
 800173a:	f7ff ff83 	bl	8001644 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff ffba 	bl	80016b8 <LSM303AGR_AccClickITEnable>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001756:	f000 fd51 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	461a      	mov	r2, r3
 8001762:	2120      	movs	r1, #32
 8001764:	2032      	movs	r0, #50	; 0x32
 8001766:	f000 fdc1 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	461a      	mov	r2, r3
 8001772:	2123      	movs	r1, #35	; 0x23
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f000 fdb9 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800179a:	f000 fd2f 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800179e:	210f      	movs	r1, #15
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f000 fdb6 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80017ba:	2124      	movs	r1, #36	; 0x24
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f000 fda8 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017cc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2124      	movs	r1, #36	; 0x24
 80017d4:	2032      	movs	r0, #50	; 0x32
 80017d6:	f000 fd89 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80017ec:	2121      	movs	r1, #33	; 0x21
 80017ee:	2032      	movs	r0, #50	; 0x32
 80017f0:	f000 fd8f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4313      	orrs	r3, r2
 8001806:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	461a      	mov	r2, r3
 800180c:	2121      	movs	r1, #33	; 0x21
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f000 fd6c 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001826:	2121      	movs	r1, #33	; 0x21
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f000 fd72 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f023 0308 	bic.w	r3, r3, #8
 8001838:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4313      	orrs	r3, r2
 8001840:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	461a      	mov	r2, r3
 8001846:	2121      	movs	r1, #33	; 0x21
 8001848:	2032      	movs	r0, #50	; 0x32
 800184a:	f000 fd4f 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800185e:	2300      	movs	r3, #0
 8001860:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001866:	2301      	movs	r3, #1
 8001868:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800186a:	2123      	movs	r1, #35	; 0x23
 800186c:	2032      	movs	r0, #50	; 0x32
 800186e:	f000 fd50 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001872:	4603      	mov	r3, r0
 8001874:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001876:	2124      	movs	r1, #36	; 0x24
 8001878:	2032      	movs	r0, #50	; 0x32
 800187a:	f000 fd4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800187e:	4603      	mov	r3, r0
 8001880:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001882:	2128      	movs	r1, #40	; 0x28
 8001884:	2032      	movs	r0, #50	; 0x32
 8001886:	f000 fd44 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800188a:	4603      	mov	r3, r0
 800188c:	b25b      	sxtb	r3, r3
 800188e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001890:	2129      	movs	r1, #41	; 0x29
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f000 fd3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001898:	4603      	mov	r3, r0
 800189a:	b25b      	sxtb	r3, r3
 800189c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800189e:	212a      	movs	r1, #42	; 0x2a
 80018a0:	2032      	movs	r0, #50	; 0x32
 80018a2:	f000 fd36 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80018ac:	212b      	movs	r1, #43	; 0x2b
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f000 fd2f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	2032      	movs	r0, #50	; 0x32
 80018be:	f000 fd28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80018c8:	212d      	movs	r1, #45	; 0x2d
 80018ca:	2032      	movs	r0, #50	; 0x32
 80018cc:	f000 fd21 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80018d6:	7d3b      	ldrb	r3, [r7, #20]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d126      	bne.n	800192e <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
 80018e4:	e01f      	b.n	8001926 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	3301      	adds	r3, #1
 80018ec:	f107 0220 	add.w	r2, r7, #32
 80018f0:	4413      	add	r3, r2
 80018f2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	f107 0120 	add.w	r1, r7, #32
 8001904:	440b      	add	r3, r1
 8001906:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4413      	add	r3, r2
 800190e:	b29a      	uxth	r2, r3
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	b212      	sxth	r2, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f107 0120 	add.w	r1, r7, #32
 800191a:	440b      	add	r3, r1
 800191c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	3301      	adds	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d9dc      	bls.n	80018e6 <LSM303DLHC_AccReadXYZ+0x90>
 800192c:	e025      	b.n	800197a <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	77fb      	strb	r3, [r7, #31]
 8001932:	e01f      	b.n	8001974 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	f107 0220 	add.w	r2, r7, #32
 800193c:	4413      	add	r3, r2
 800193e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	3301      	adds	r3, #1
 800194e:	f107 0120 	add.w	r1, r7, #32
 8001952:	440b      	add	r3, r1
 8001954:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4413      	add	r3, r2
 800195c:	b29a      	uxth	r2, r3
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	b212      	sxth	r2, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	f107 0120 	add.w	r1, r7, #32
 8001968:	440b      	add	r3, r1
 800196a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	3301      	adds	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d9dc      	bls.n	8001934 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800197a:	7d3b      	ldrb	r3, [r7, #20]
 800197c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001980:	2b30      	cmp	r3, #48	; 0x30
 8001982:	d013      	beq.n	80019ac <LSM303DLHC_AccReadXYZ+0x156>
 8001984:	2b30      	cmp	r3, #48	; 0x30
 8001986:	dc14      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001988:	2b20      	cmp	r3, #32
 800198a:	d00c      	beq.n	80019a6 <LSM303DLHC_AccReadXYZ+0x150>
 800198c:	2b20      	cmp	r3, #32
 800198e:	dc10      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <LSM303DLHC_AccReadXYZ+0x144>
 8001994:	2b10      	cmp	r3, #16
 8001996:	d003      	beq.n	80019a0 <LSM303DLHC_AccReadXYZ+0x14a>
 8001998:	e00b      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800199a:	2301      	movs	r3, #1
 800199c:	77bb      	strb	r3, [r7, #30]
    break;
 800199e:	e008      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80019a0:	2302      	movs	r3, #2
 80019a2:	77bb      	strb	r3, [r7, #30]
    break;
 80019a4:	e005      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80019a6:	2304      	movs	r3, #4
 80019a8:	77bb      	strb	r3, [r7, #30]
    break;
 80019aa:	e002      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80019ac:	230c      	movs	r3, #12
 80019ae:	77bb      	strb	r3, [r7, #30]
    break;
 80019b0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	e015      	b.n	80019e4 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	f107 0220 	add.w	r2, r7, #32
 80019c0:	4413      	add	r3, r2
 80019c2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	7fbb      	ldrb	r3, [r7, #30]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	fb12 f303 	smulbb	r3, r2, r3
 80019d0:	b299      	uxth	r1, r3
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	b20a      	sxth	r2, r1
 80019dc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	3301      	adds	r3, #1
 80019e2:	77fb      	strb	r3, [r7, #31]
 80019e4:	7ffb      	ldrb	r3, [r7, #31]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d9e6      	bls.n	80019b8 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001a02:	2121      	movs	r1, #33	; 0x21
 8001a04:	2032      	movs	r0, #50	; 0x32
 8001a06:	f000 fc84 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2121      	movs	r1, #33	; 0x21
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f000 fc61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001a40:	2122      	movs	r1, #34	; 0x22
 8001a42:	2032      	movs	r0, #50	; 0x32
 8001a44:	f000 fc65 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	461a      	mov	r2, r3
 8001a58:	2122      	movs	r1, #34	; 0x22
 8001a5a:	2032      	movs	r0, #50	; 0x32
 8001a5c:	f000 fc46 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001a76:	2138      	movs	r1, #56	; 0x38
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f000 fc4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2138      	movs	r1, #56	; 0x38
 8001a90:	2032      	movs	r0, #50	; 0x32
 8001a92:	f000 fc2b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a96:	230a      	movs	r3, #10
 8001a98:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	213a      	movs	r1, #58	; 0x3a
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f000 fc23 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	461a      	mov	r2, r3
 8001aae:	213b      	movs	r1, #59	; 0x3b
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f000 fc1b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	213c      	movs	r1, #60	; 0x3c
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f000 fc15 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001ac2:	2332      	movs	r3, #50	; 0x32
 8001ac4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	213d      	movs	r1, #61	; 0x3d
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f000 fc0d 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001ade:	f000 fbd7 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001ae2:	2080      	movs	r0, #128	; 0x80
 8001ae4:	f7ff ffa5 	bl	8001a32 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7ff ff83 	bl	80019f4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001aee:	2010      	movs	r0, #16
 8001af0:	f7ff ffba 	bl	8001a68 <LSM303DLHC_AccClickITEnable>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10c      	bne.n	8001b22 <BSP_LED_Init+0x2a>
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6153      	str	r3, [r2, #20]
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	e06e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10c      	bne.n	8001b42 <BSP_LED_Init+0x4a>
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6153      	str	r3, [r2, #20]
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	e05e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d10c      	bne.n	8001b62 <BSP_LED_Init+0x6a>
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b52:	6153      	str	r3, [r2, #20]
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	e04e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d10c      	bne.n	8001b82 <BSP_LED_Init+0x8a>
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b72:	6153      	str	r3, [r2, #20]
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e03e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d10c      	bne.n	8001ba2 <BSP_LED_Init+0xaa>
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	6153      	str	r3, [r2, #20]
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	e02e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d10c      	bne.n	8001bc2 <BSP_LED_Init+0xca>
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <BSP_LED_Init+0x154>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb2:	6153      	str	r3, [r2, #20]
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	e01e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b06      	cmp	r3, #6
 8001bc6:	d10c      	bne.n	8001be2 <BSP_LED_Init+0xea>
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6153      	str	r3, [r2, #20]
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	e00e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d10b      	bne.n	8001c00 <BSP_LED_Init+0x108>
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6153      	str	r3, [r2, #20]
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fe2d 	bl	8003884 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f002 f88f 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8001c42:	bf00      	nop
 8001c44:	3740      	adds	r7, #64	; 0x40
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08009b3c 	.word	0x08009b3c
 8001c54:	200000d0 	.word	0x200000d0

08001c58 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <BSP_LED_On+0x2c>)
 8001c66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <BSP_LED_On+0x30>)
 8001c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	f002 f873 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000d0 	.word	0x200000d0
 8001c88:	08009b3c 	.word	0x08009b3c

08001c8c <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <BSP_LED_Off+0x2c>)
 8001c9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <BSP_LED_Off+0x30>)
 8001ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f002 f859 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200000d0 	.word	0x200000d0
 8001cbc:	08009b3c 	.word	0x08009b3c

08001cc0 <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <BSP_LED_Toggle+0x2c>)
 8001cce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <BSP_LED_Toggle+0x30>)
 8001cd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f002 f857 	bl	8003d90 <HAL_GPIO_TogglePin>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000d0 	.word	0x200000d0
 8001cf0:	08009b3c 	.word	0x08009b3c

08001cf4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <BSP_PB_Init+0x2e>
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <BSP_PB_Init+0x70>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	f107 0214 	add.w	r2, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fd90 	bl	8003884 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d11e      	bne.n	8001da8 <BSP_PB_Init+0xb4>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	f107 0214 	add.w	r2, r7, #20
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 fd7a 	bl	8003884 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001d90:	2306      	movs	r3, #6
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	210f      	movs	r1, #15
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fd3c 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001d9e:	2306      	movs	r3, #6
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fd53 	bl	800384e <HAL_NVIC_EnableIRQ>
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	200000f0 	.word	0x200000f0

08001db8 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <BSP_PB_GetState+0x28>)
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 ffae 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000f0 	.word	0x200000f0

08001de4 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df6:	6153      	str	r3, [r2, #20]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001e14:	2304      	movs	r3, #4
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <I2Cx_MspInit+0x64>)
 8001e20:	f001 fd30 	bl	8003884 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	61d3      	str	r3, [r2, #28]
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e52:	f002 fabb 	bl	80043cc <HAL_I2C_GetState>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11a      	bne.n	8001e92 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <I2Cx_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e64:	2232      	movs	r2, #50	; 0x32
 8001e66:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e86:	4804      	ldr	r0, [pc, #16]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e88:	f7ff ffac 	bl	8001de4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e8e:	f001 ffb1 	bl	8003df4 <HAL_I2C_Init>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200003d4 	.word	0x200003d4
 8001e9c:	40005400 	.word	0x40005400

08001ea0 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	717b      	strb	r3, [r7, #5]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <I2Cx_WriteData+0x48>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	88f9      	ldrh	r1, [r7, #6]
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <I2Cx_WriteData+0x4c>)
 8001ece:	f002 f84f 	bl	8003f70 <HAL_I2C_Mem_Write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001edc:	f000 f834 	bl	8001f48 <I2Cx_Error>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200000f8 	.word	0x200000f8
 8001eec:	200003d4 	.word	0x200003d4

08001ef0 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460a      	mov	r2, r1
 8001efa:	80fb      	strh	r3, [r7, #6]
 8001efc:	4613      	mov	r3, r2
 8001efe:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001f08:	797b      	ldrb	r3, [r7, #5]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <I2Cx_ReadData+0x50>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	88f9      	ldrh	r1, [r7, #6]
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	f107 030e 	add.w	r3, r7, #14
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4808      	ldr	r0, [pc, #32]	; (8001f44 <I2Cx_ReadData+0x54>)
 8001f22:	f002 f939 	bl	8004198 <HAL_I2C_Mem_Read>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001f30:	f000 f80a 	bl	8001f48 <I2Cx_Error>
  
  }
  return value;
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000f8 	.word	0x200000f8
 8001f44:	200003d4 	.word	0x200003d4

08001f48 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <I2Cx_Error+0x14>)
 8001f4e:	f001 ffe0 	bl	8003f12 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001f52:	f7ff ff7b 	bl	8001e4c <I2Cx_Init>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003d4 	.word	0x200003d4

08001f60 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f64:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <SPIx_Init+0x70>)
 8001f66:	f004 fad7 	bl	8006518 <HAL_SPI_GetState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d12c      	bne.n	8001fca <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <SPIx_Init+0x70>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <SPIx_Init+0x74>)
 8001f74:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <SPIx_Init+0x70>)
 8001f78:	2218      	movs	r2, #24
 8001f7a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <SPIx_Init+0x70>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <SPIx_Init+0x70>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <SPIx_Init+0x70>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <SPIx_Init+0x70>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <SPIx_Init+0x70>)
 8001f96:	2207      	movs	r2, #7
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <SPIx_Init+0x70>)
 8001f9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa0:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <SPIx_Init+0x70>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <SPIx_Init+0x70>)
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fbc:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc0:	f000 f836 	bl	8002030 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc6:	f003 ffc1 	bl	8005f4c <HAL_SPI_Init>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000370 	.word	0x20000370
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SPIx_WriteRead+0x38>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f107 020f 	add.w	r2, r7, #15
 8001fee:	1df9      	adds	r1, r7, #7
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <SPIx_WriteRead+0x3c>)
 8001ff6:	f004 f87c 	bl	80060f2 <HAL_SPI_TransmitReceive>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002000:	f000 f80a 	bl	8002018 <SPIx_Error>
  }
  
  return receivedbyte;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200000f4 	.word	0x200000f4
 8002014:	20000370 	.word	0x20000370

08002018 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <SPIx_Error+0x14>)
 800201e:	f004 f840 	bl	80060a2 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8002022:	f7ff ff9d 	bl	8001f60 <SPIx_Init>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000370 	.word	0x20000370

08002030 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <SPIx_MspInit+0x64>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <SPIx_MspInit+0x64>)
 800203e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <SPIx_MspInit+0x64>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <SPIx_MspInit+0x64>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <SPIx_MspInit+0x64>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	6153      	str	r3, [r2, #20]
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <SPIx_MspInit+0x64>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002068:	23e0      	movs	r3, #224	; 0xe0
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002078:	2305      	movs	r3, #5
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f001 fbfd 	bl	8003884 <HAL_GPIO_Init>
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <GYRO_IO_Init+0x84>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <GYRO_IO_Init+0x84>)
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	6153      	str	r3, [r2, #20]
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <GYRO_IO_Init+0x84>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80020b6:	2308      	movs	r3, #8
 80020b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4619      	mov	r1, r3
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <GYRO_IO_Init+0x88>)
 80020ce:	f001 fbd9 	bl	8003884 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80020d2:	2201      	movs	r2, #1
 80020d4:	2108      	movs	r1, #8
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <GYRO_IO_Init+0x88>)
 80020d8:	f001 fe42 	bl	8003d60 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <GYRO_IO_Init+0x84>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <GYRO_IO_Init+0x84>)
 80020e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e6:	6153      	str	r3, [r2, #20]
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <GYRO_IO_Init+0x84>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80020f4:	2303      	movs	r3, #3
 80020f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <GYRO_IO_Init+0x88>)
 800210c:	f001 fbba 	bl	8003884 <HAL_GPIO_Init>
  
  SPIx_Init();
 8002110:	f7ff ff26 	bl	8001f60 <SPIx_Init>
}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	48001000 	.word	0x48001000

08002124 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
 8002130:	4613      	mov	r3, r2
 8002132:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002134:	883b      	ldrh	r3, [r7, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d903      	bls.n	8002142 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002140:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002142:	2200      	movs	r2, #0
 8002144:	2108      	movs	r1, #8
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <GYRO_IO_Write+0x60>)
 8002148:	f001 fe0a 	bl	8003d60 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff42 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002154:	e00a      	b.n	800216c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff3c 	bl	8001fd8 <SPIx_WriteRead>
    NumByteToWrite--;
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800216c:	883b      	ldrh	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f1      	bne.n	8002156 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002172:	2201      	movs	r2, #1
 8002174:	2108      	movs	r1, #8
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <GYRO_IO_Write+0x60>)
 8002178:	f001 fdf2 	bl	8003d60 <HAL_GPIO_WritePin>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	48001000 	.word	0x48001000

08002188 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	4613      	mov	r3, r2
 8002196:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002198:	883b      	ldrh	r3, [r7, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d904      	bls.n	80021a8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80021a4:	70fb      	strb	r3, [r7, #3]
 80021a6:	e003      	b.n	80021b0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ae:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80021b0:	2200      	movs	r2, #0
 80021b2:	2108      	movs	r1, #8
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021b6:	f001 fdd3 	bl	8003d60 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff0b 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80021c2:	e00c      	b.n	80021de <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff ff07 	bl	8001fd8 <SPIx_WriteRead>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80021d2:	883b      	ldrh	r3, [r7, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ef      	bne.n	80021c4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80021e4:	2201      	movs	r2, #1
 80021e6:	2108      	movs	r1, #8
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021ea:	f001 fdb9 	bl	8003d60 <HAL_GPIO_WritePin>
}  
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	48001000 	.word	0x48001000

080021fc <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220c:	6153      	str	r3, [r2, #20]
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002224:	6153      	str	r3, [r2, #20]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002232:	2304      	movs	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	4619      	mov	r1, r3
 8002248:	4810      	ldr	r0, [pc, #64]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 800224a:	f001 fb1b 	bl	8003884 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 800224e:	2200      	movs	r2, #0
 8002250:	210f      	movs	r1, #15
 8002252:	2008      	movs	r0, #8
 8002254:	f001 fadf 	bl	8003816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8002258:	2008      	movs	r0, #8
 800225a:	f001 faf8 	bl	800384e <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800225e:	2330      	movs	r3, #48	; 0x30
 8002260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 8002276:	f001 fb05 	bl	8003884 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800227a:	f7ff fde7 	bl	8001e4c <I2Cx_Init>
}
 800227e:	bf00      	nop
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	48001000 	.word	0x48001000

08002290 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800229c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a0:	6153      	str	r3, [r2, #20]
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80022ae:	2330      	movs	r3, #48	; 0x30
 80022b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80022b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022c6:	f001 fadd 	bl	8003884 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80022ca:	2200      	movs	r2, #0
 80022cc:	210f      	movs	r1, #15
 80022ce:	200a      	movs	r0, #10
 80022d0:	f001 faa1 	bl	8003816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80022d4:	200a      	movs	r0, #10
 80022d6:	f001 faba 	bl	800384e <HAL_NVIC_EnableIRQ>
  
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48001000 	.word	0x48001000

080022ec <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
 80022f6:	460b      	mov	r3, r1
 80022f8:	717b      	strb	r3, [r7, #5]
 80022fa:	4613      	mov	r3, r2
 80022fc:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80022fe:	793a      	ldrb	r2, [r7, #4]
 8002300:	7979      	ldrb	r1, [r7, #5]
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdcb 	bl	8001ea0 <I2Cx_WriteData>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	460a      	mov	r2, r1
 800231c:	80fb      	strh	r3, [r7, #6]
 800231e:	4613      	mov	r3, r2
 8002320:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002322:	797a      	ldrb	r2, [r7, #5]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fde1 	bl	8001ef0 <I2Cx_ReadData>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002342:	2300      	movs	r3, #0
 8002344:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800234e:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4798      	blx	r3
 8002354:	4603      	mov	r3, r0
 8002356:	2b33      	cmp	r3, #51	; 0x33
 8002358:	d14f      	bne.n	80023fa <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 800235e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002360:	2300      	movs	r3, #0
 8002362:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002368:	2307      	movs	r3, #7
 800236a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 800236c:	2300      	movs	r3, #0
 800236e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002370:	2300      	movs	r3, #0
 8002372:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002374:	2300      	movs	r3, #0
 8002376:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002378:	2308      	movs	r3, #8
 800237a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800237c:	7b3a      	ldrb	r2, [r7, #12]
 800237e:	7b7b      	ldrb	r3, [r7, #13]
 8002380:	4313      	orrs	r3, r2
 8002382:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002384:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002386:	4313      	orrs	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	8abb      	ldrh	r3, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002392:	7c3a      	ldrb	r2, [r7, #16]
 8002394:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002396:	4313      	orrs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	7cbb      	ldrb	r3, [r7, #18]
 800239c:	4313      	orrs	r3, r2
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023a8:	b21a      	sxth	r2, r3
 80023aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	8aba      	ldrh	r2, [r7, #20]
 80023bc:	4610      	mov	r0, r2
 80023be:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80023c4:	2310      	movs	r3, #16
 80023c6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80023d2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80023d8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023da:	4313      	orrs	r3, r2
 80023dc:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80023de:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	8aba      	ldrh	r2, [r7, #20]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	4610      	mov	r0, r2
 80023f2:	4798      	blx	r3

    ret = ACCELERO_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	e054      	b.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4798      	blx	r3
 8002400:	4603      	mov	r3, r0
 8002402:	2b33      	cmp	r3, #51	; 0x33
 8002404:	d14e      	bne.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 800240a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800240c:	2300      	movs	r3, #0
 800240e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002414:	2307      	movs	r3, #7
 8002416:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002418:	2300      	movs	r3, #0
 800241a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800241c:	2300      	movs	r3, #0
 800241e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002420:	2300      	movs	r3, #0
 8002422:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002424:	2308      	movs	r3, #8
 8002426:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002428:	7b3a      	ldrb	r2, [r7, #12]
 800242a:	7b7b      	ldrb	r3, [r7, #13]
 800242c:	4313      	orrs	r3, r2
 800242e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002430:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002432:	4313      	orrs	r3, r2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	b29a      	uxth	r2, r3
 8002438:	8abb      	ldrh	r3, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800243e:	7c3a      	ldrb	r2, [r7, #16]
 8002440:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002442:	4313      	orrs	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	7cbb      	ldrb	r3, [r7, #18]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	4313      	orrs	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002454:	b21a      	sxth	r2, r3
 8002456:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	b21b      	sxth	r3, r3
 800245e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	8aba      	ldrh	r2, [r7, #20]
 8002468:	4610      	mov	r0, r2
 800246a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002470:	2310      	movs	r3, #16
 8002472:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800247c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800247e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002480:	4313      	orrs	r3, r2
 8002482:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002484:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800248a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800248c:	4313      	orrs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	8aba      	ldrh	r2, [r7, #20]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3

    ret = ACCELERO_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000009c 	.word	0x2000009c
 80024b4:	20000420 	.word	0x20000420
 80024b8:	20000068 	.word	0x20000068

080024bc <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000420 	.word	0x20000420

080024e4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80024ee:	2300      	movs	r3, #0
 80024f0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80024f2:	2300      	movs	r3, #0
 80024f4:	703b      	strb	r3, [r7, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80024fa:	4b52      	ldr	r3, [pc, #328]	; (8002644 <BSP_GYRO_Init+0x160>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4798      	blx	r3
 8002500:	4603      	mov	r3, r0
 8002502:	2bd4      	cmp	r3, #212	; 0xd4
 8002504:	d005      	beq.n	8002512 <BSP_GYRO_Init+0x2e>
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4798      	blx	r3
 800250c:	4603      	mov	r3, r0
 800250e:	2bd5      	cmp	r3, #213	; 0xd5
 8002510:	d146      	bne.n	80025a0 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002516:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002518:	2308      	movs	r3, #8
 800251a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800251c:	2300      	movs	r3, #0
 800251e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002520:	2307      	movs	r3, #7
 8002522:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002524:	2330      	movs	r3, #48	; 0x30
 8002526:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002528:	2300      	movs	r3, #0
 800252a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800252c:	2300      	movs	r3, #0
 800252e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_250;
 8002530:	2300      	movs	r3, #0
 8002532:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002534:	793a      	ldrb	r2, [r7, #4]
 8002536:	797b      	ldrb	r3, [r7, #5]
 8002538:	4313      	orrs	r3, r2
 800253a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800253c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800253e:	4313      	orrs	r3, r2
 8002540:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002542:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002544:	4313      	orrs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800254a:	7a3a      	ldrb	r2, [r7, #8]
 800254c:	7a7b      	ldrb	r3, [r7, #9]
 800254e:	4313      	orrs	r3, r2
 8002550:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002552:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002554:	4313      	orrs	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b29a      	uxth	r2, r3
 800255e:	89bb      	ldrh	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002564:	4b38      	ldr	r3, [pc, #224]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	89ba      	ldrh	r2, [r7, #12]
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE;
 8002570:	2320      	movs	r3, #32
 8002572:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_9;
 8002574:	2309      	movs	r3, #9
 8002576:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002578:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800257a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800257c:	4313      	orrs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	89ba      	ldrh	r2, [r7, #12]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2010      	movs	r0, #16
 8002598:	4798      	blx	r3

    ret = GYRO_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e04b      	b.n	8002638 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <BSP_GYRO_Init+0x168>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4798      	blx	r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	2bd3      	cmp	r3, #211	; 0xd3
 80025aa:	d145      	bne.n	8002638 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <BSP_GYRO_Init+0x164>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <BSP_GYRO_Init+0x168>)
 80025b0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80025b2:	2308      	movs	r3, #8
 80025b4:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80025ba:	2307      	movs	r3, #7
 80025bc:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80025be:	2330      	movs	r3, #48	; 0x30
 80025c0:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80025c2:	2300      	movs	r3, #0
 80025c4:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80025c6:	2300      	movs	r3, #0
 80025c8:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80025ca:	2310      	movs	r3, #16
 80025cc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025ce:	793a      	ldrb	r2, [r7, #4]
 80025d0:	797b      	ldrb	r3, [r7, #5]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025d6:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025de:	4313      	orrs	r3, r2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025e4:	7a3a      	ldrb	r2, [r7, #8]
 80025e6:	7a7b      	ldrb	r3, [r7, #9]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80025ec:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	89bb      	ldrh	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	89ba      	ldrh	r2, [r7, #12]
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800260a:	2300      	movs	r3, #0
 800260c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800260e:	2300      	movs	r3, #0
 8002610:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002612:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002614:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002616:	4313      	orrs	r3, r2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <BSP_GYRO_Init+0x164>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	89ba      	ldrh	r2, [r7, #12]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4610      	mov	r0, r2
 8002628:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <BSP_GYRO_Init+0x164>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	2010      	movs	r0, #16
 8002632:	4798      	blx	r3

    ret = GYRO_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000034 	.word	0x20000034
 8002648:	20000424 	.word	0x20000424
 800264c:	20000000 	.word	0x20000000

08002650 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000424 	.word	0x20000424

08002678 <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f, -0.0052635f, -0.0068811f, 0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.00688114, -0.0052635f};

void FIRFilter_Init(FIRFilter * fir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	/* Clear the buffer */
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e009      	b.n	800269a <FIRFilter_Init+0x22>
	{
		fir->buf[n] = 0.0f;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3301      	adds	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d9f2      	bls.n	8002686 <FIRFilter_Init+0xe>
	}

	/* Reset Buffer index */
	fir->bufIndex = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	/* Clear the output */
	fir->out = 0.0f;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <IIRFilter_Init>:
 */

#include "IIRFilter.h"

void IIRFilter_Init(IIRFilter * filt, float alpha, float beta)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80026c8:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->alpha = alpha;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
	filt->beta = beta;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]
	filt->out = 0;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <IIRFilter_Update>:

float IIRFilter_Update(IIRFilter * filt, float input)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	ed87 0a00 	vstr	s0, [r7]
	/* y[n] = alpha*x[n] - beta*y[n-1] */
	return filt->out = filt->alpha*input - filt->beta * filt->out;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	edd7 7a00 	vldr	s15, [r7]
 8002702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	edd3 6a01 	vldr	s13, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	ee07 3a90 	vmov	s15, r3
}
 8002728:	eeb0 0a67 	vmov.f32	s0, s15
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <RCFilter_Init>:
 *      Author: 123
 */
#include "RCFilter.h"

void RCFilter_Init(RCFilter * Filt,float cutoff_Freq, float sampleTime)
{
 8002736:	b480      	push	{r7}
 8002738:	b087      	sub	sp, #28
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002742:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute RC for cutOff_Freq */
	float RC = 1.0f / (2*PI*cutoff_Freq);
 8002746:	edd7 7a02 	vldr	s15, [r7, #8]
 800274a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800274e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Compute first order LPF coefficients */
	Filt->coeff[0] = sampleTime / (sampleTime + RC);
 800275e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002762:	edd7 7a05 	vldr	s15, [r7, #20]
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	edd7 6a01 	vldr	s13, [r7, #4]
 800276e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	edc3 7a00 	vstr	s15, [r3]
	Filt->coeff[1] = RC / (sampleTime + RC);
 8002778:	ed97 7a01 	vldr	s14, [r7, #4]
 800277c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002784:	edd7 6a05 	vldr	s13, [r7, #20]
 8002788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	Filt->out[0] = 0.0f;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
	Filt->out[1] = 0.0f;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027c6:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4a3f      	ldr	r2, [pc, #252]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027d0:	6153      	str	r3, [r2, #20]
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027e8:	6153      	str	r3, [r2, #20]
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	4a33      	ldr	r2, [pc, #204]	; (80028c8 <MX_GPIO_Init+0x118>)
 80027fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002800:	6153      	str	r3, [r2, #20]
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <MX_GPIO_Init+0x118>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <MX_GPIO_Init+0x118>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4a2d      	ldr	r2, [pc, #180]	; (80028c8 <MX_GPIO_Init+0x118>)
 8002814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002818:	6153      	str	r3, [r2, #20]
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <MX_GPIO_Init+0x118>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <MX_GPIO_Init+0x118>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4a27      	ldr	r2, [pc, #156]	; (80028c8 <MX_GPIO_Init+0x118>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6153      	str	r3, [r2, #20]
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <MX_GPIO_Init+0x118>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800283e:	2200      	movs	r2, #0
 8002840:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002844:	4821      	ldr	r0, [pc, #132]	; (80028cc <MX_GPIO_Init+0x11c>)
 8002846:	f001 fa8b 	bl	8003d60 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800284a:	2337      	movs	r3, #55	; 0x37
 800284c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800284e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	481b      	ldr	r0, [pc, #108]	; (80028cc <MX_GPIO_Init+0x11c>)
 8002860:	f001 f810 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002864:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002868:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286a:	2301      	movs	r3, #1
 800286c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	4813      	ldr	r0, [pc, #76]	; (80028cc <MX_GPIO_Init+0x11c>)
 800287e:	f001 f801 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002882:	2301      	movs	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002898:	f000 fff4 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800289c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80028ae:	230e      	movs	r3, #14
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028bc:	f000 ffe2 	bl	8003884 <HAL_GPIO_Init>

}
 80028c0:	bf00      	nop
 80028c2:	3728      	adds	r7, #40	; 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	48001000 	.word	0x48001000

080028d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <MX_I2C1_Init+0x74>)
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <MX_I2C1_Init+0x78>)
 80028d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <MX_I2C1_Init+0x74>)
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <MX_I2C1_Init+0x7c>)
 80028de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <MX_I2C1_Init+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <MX_I2C1_Init+0x74>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <MX_I2C1_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_I2C1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <MX_I2C1_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_I2C1_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_I2C1_Init+0x74>)
 8002906:	2200      	movs	r2, #0
 8002908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800290a:	480e      	ldr	r0, [pc, #56]	; (8002944 <MX_I2C1_Init+0x74>)
 800290c:	f001 fa72 	bl	8003df4 <HAL_I2C_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002916:	f000 f9c9 	bl	8002cac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800291a:	2100      	movs	r1, #0
 800291c:	4809      	ldr	r0, [pc, #36]	; (8002944 <MX_I2C1_Init+0x74>)
 800291e:	f001 ff8f 	bl	8004840 <HAL_I2CEx_ConfigAnalogFilter>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002928:	f000 f9c0 	bl	8002cac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800292c:	2100      	movs	r1, #0
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <MX_I2C1_Init+0x74>)
 8002930:	f001 ffd1 	bl	80048d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800293a:	f000 f9b7 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000438 	.word	0x20000438
 8002948:	40005400 	.word	0x40005400
 800294c:	2000090e 	.word	0x2000090e

08002950 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_I2C_MspInit+0x7c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d127      	bne.n	80029c2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_I2C_MspInit+0x80>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_I2C_MspInit+0x80>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297c:	6153      	str	r3, [r2, #20]
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_I2C_MspInit+0x80>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800298a:	23c0      	movs	r3, #192	; 0xc0
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298e:	2312      	movs	r3, #18
 8002990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800299a:	2304      	movs	r3, #4
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	480b      	ldr	r0, [pc, #44]	; (80029d4 <HAL_I2C_MspInit+0x84>)
 80029a6:	f000 ff6d 	bl	8003884 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_I2C_MspInit+0x80>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_I2C_MspInit+0x80>)
 80029b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b4:	61d3      	str	r3, [r2, #28]
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_I2C_MspInit+0x80>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40005400 	.word	0x40005400
 80029d0:	40021000 	.word	0x40021000
 80029d4:	48000400 	.word	0x48000400

080029d8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_I2C_MspDeInit+0x38>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10d      	bne.n	8002a06 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_I2C_MspDeInit+0x3c>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_I2C_MspDeInit+0x3c>)
 80029f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029f4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 80029f6:	2140      	movs	r1, #64	; 0x40
 80029f8:	4807      	ldr	r0, [pc, #28]	; (8002a18 <HAL_I2C_MspDeInit+0x40>)
 80029fa:	f001 f8bd 	bl	8003b78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <HAL_I2C_MspDeInit+0x40>)
 8002a02:	f001 f8b9 	bl	8003b78 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40005400 	.word	0x40005400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	48000400 	.word	0x48000400

08002a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a20:	f000 fd94 	bl	800354c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a24:	f000 f88c 	bl	8002b40 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a28:	f7ff fec2 	bl	80027b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002a2c:	f7ff ff50 	bl	80028d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a30:	f000 fb26 	bl	8003080 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a34:	f000 fcec 	bl	8003410 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED4);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff f85d 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff f85a 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8002a44:	2002      	movs	r0, #2
 8002a46:	f7ff f857 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 8002a4a:	2004      	movs	r0, #4
 8002a4c:	f7ff f854 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 8002a50:	2006      	movs	r0, #6
 8002a52:	f7ff f851 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 8002a56:	2007      	movs	r0, #7
 8002a58:	f7ff f84e 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 8002a5c:	2005      	movs	r0, #5
 8002a5e:	f7ff f84b 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8002a62:	2003      	movs	r0, #3
 8002a64:	f7ff f848 	bl	8001af8 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002a68:	2101      	movs	r1, #1
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7ff f942 	bl	8001cf4 <BSP_PB_Init>

  while (!UserPressButton) Toggle_Leds();
 8002a70:	e001      	b.n	8002a76 <main+0x5a>
 8002a72:	f000 f8d5 	bl	8002c20 <Toggle_Leds>
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <main+0x100>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f8      	beq.n	8002a72 <main+0x56>
  BSP_LED_Off(LED3);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff f903 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7ff f900 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f7ff f8fd 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8002a92:	2003      	movs	r0, #3
 8002a94:	f7ff f8fa 	bl	8001c8c <BSP_LED_Off>

  /* Initialize RC Filters */
  RCFilter_Init(&Acc_RC_LPF, 5.0f, 0.01f);
 8002a98:	eddf 0a21 	vldr	s1, [pc, #132]	; 8002b20 <main+0x104>
 8002a9c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002aa0:	4820      	ldr	r0, [pc, #128]	; (8002b24 <main+0x108>)
 8002aa2:	f7ff fe48 	bl	8002736 <RCFilter_Init>

  FIRFilter_Init(&Acc_FIR_LPF);
 8002aa6:	4820      	ldr	r0, [pc, #128]	; (8002b28 <main+0x10c>)
 8002aa8:	f7ff fde6 	bl	8002678 <FIRFilter_Init>

  IIRFilter_Init(&Acc_IIR_LPF, IIR_ALPHA, IIR_BETA);
 8002aac:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8002b2c <main+0x110>
 8002ab0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002b30 <main+0x114>
 8002ab4:	481f      	ldr	r0, [pc, #124]	; (8002b34 <main+0x118>)
 8002ab6:	f7ff fe01 	bl	80026bc <IIRFilter_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1,data,7,HAL_MAX_DELAY);

	  UserPressButton = 0;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <main+0x100>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
	  BSP_examples[DemoIndex++].DemoFunc();
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <main+0x11c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	b2d1      	uxtb	r1, r2
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <main+0x11c>)
 8002aca:	7011      	strb	r1, [r2, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <main+0x120>)
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a5b      	subs	r3, r3, r1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4798      	blx	r3

	  /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
	  if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <main+0x11c>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d902      	bls.n	8002aec <main+0xd0>
	  {
		DemoIndex = 0;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <main+0x11c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
	  }
	  /* Toggle LEDs between each Test */
	  UserPressButton = 0;
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <main+0x100>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
	  while (!UserPressButton) Toggle_Leds();
 8002af2:	e001      	b.n	8002af8 <main+0xdc>
 8002af4:	f000 f894 	bl	8002c20 <Toggle_Leds>
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <main+0x100>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f8      	beq.n	8002af4 <main+0xd8>
	  BSP_LED_Off(LED3);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7ff f8c2 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED4);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7ff f8bf 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED5);
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f7ff f8bc 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED6);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f7ff f8b9 	bl	8001c8c <BSP_LED_Off>
	  UserPressButton = 0;
 8002b1a:	e7ce      	b.n	8002aba <main+0x9e>
 8002b1c:	20000429 	.word	0x20000429
 8002b20:	3c23d70a 	.word	0x3c23d70a
 8002b24:	200004a0 	.word	0x200004a0
 8002b28:	200004b0 	.word	0x200004b0
 8002b2c:	3e4ccccd 	.word	0x3e4ccccd
 8002b30:	3f99999a 	.word	0x3f99999a
 8002b34:	20000494 	.word	0x20000494
 8002b38:	20000428 	.word	0x20000428
 8002b3c:	200000fc 	.word	0x200000fc

08002b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b09e      	sub	sp, #120	; 0x78
 8002b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b4a:	2228      	movs	r2, #40	; 0x28
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fae4 	bl	800711c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b64:	463b      	mov	r3, r7
 8002b66:	223c      	movs	r2, #60	; 0x3c
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 fad6 	bl	800711c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b70:	2302      	movs	r3, #2
 8002b72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b74:	2301      	movs	r3, #1
 8002b76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b78:	2310      	movs	r3, #16
 8002b7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b80:	2300      	movs	r3, #0
 8002b82:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002b84:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002b88:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 feee 	bl	8004970 <HAL_RCC_OscConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b9a:	f000 f887 	bl	8002cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fde0 	bl	8005780 <HAL_RCC_ClockConfig>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002bc6:	f000 f871 	bl	8002cac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002bca:	2321      	movs	r3, #33	; 0x21
 8002bcc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 f807 	bl	8005bec <HAL_RCCEx_PeriphCLKConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002be4:	f000 f862 	bl	8002cac <Error_Handler>
  }
}
 8002be8:	bf00      	nop
 8002bea:	3778      	adds	r7, #120	; 0x78
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
  if (USER_BUTTON_PIN == GPIO_Pin)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d109      	bne.n	8002c14 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 8002c00:	bf00      	nop
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7ff f8d8 	bl	8001db8 <BSP_PB_GetState>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8002c0e:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000429 	.word	0x20000429

08002c20 <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED3);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff f84b 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c2a:	2064      	movs	r0, #100	; 0x64
 8002c2c:	f000 fcf4 	bl	8003618 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f7ff f845 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c36:	2064      	movs	r0, #100	; 0x64
 8002c38:	f000 fcee 	bl	8003618 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f7ff f83f 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c42:	2064      	movs	r0, #100	; 0x64
 8002c44:	f000 fce8 	bl	8003618 <HAL_Delay>
    BSP_LED_Toggle(LED8);
 8002c48:	2005      	movs	r0, #5
 8002c4a:	f7ff f839 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c4e:	2064      	movs	r0, #100	; 0x64
 8002c50:	f000 fce2 	bl	8003618 <HAL_Delay>
    BSP_LED_Toggle(LED10);
 8002c54:	2007      	movs	r0, #7
 8002c56:	f7ff f833 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c5a:	2064      	movs	r0, #100	; 0x64
 8002c5c:	f000 fcdc 	bl	8003618 <HAL_Delay>
    BSP_LED_Toggle(LED9);
 8002c60:	2006      	movs	r0, #6
 8002c62:	f7ff f82d 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	f000 fcd6 	bl	8003618 <HAL_Delay>
    BSP_LED_Toggle(LED7);
 8002c6c:	2004      	movs	r0, #4
 8002c6e:	f7ff f827 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c72:	2064      	movs	r0, #100	; 0x64
 8002c74:	f000 fcd0 	bl	8003618 <HAL_Delay>
    BSP_LED_Toggle(LED5);
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f7ff f821 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002c7e:	2064      	movs	r0, #100	; 0x64
 8002c80:	f000 fcca 	bl	8003618 <HAL_Delay>
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <__io_putchar>:


int __io_putchar(int ch)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t *)&ch , 1 , 0xFFFF);
 8002c90:	1d39      	adds	r1, r7, #4
 8002c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c96:	2201      	movs	r2, #1
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <__io_putchar+0x20>)
 8002c9a:	f003 fdfd 	bl	8006898 <HAL_UART_Transmit>
	return ch;
 8002c9e:	687b      	ldr	r3, [r7, #4]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	2000055c 	.word	0x2000055c

08002cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 8002cb0:	2007      	movs	r0, #7
 8002cb2:	f7fe ffd1 	bl	8001c58 <BSP_LED_On>
    BSP_LED_On(LED3);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe ffce 	bl	8001c58 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cbc:	b672      	cpsid	i
}
 8002cbe:	bf00      	nop
  __disable_irq();
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <Error_Handler+0x14>
	...

08002cc4 <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
  {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002cc8:	f7ff fb36 	bl	8002338 <BSP_ACCELERO_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002cd2:	f7ff ffeb 	bl	8002cac <Error_Handler>
  }
  
  UserPressButton = 0;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <ACCELERO_MEMS_Test+0x30>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002cdc:	e001      	b.n	8002ce2 <ACCELERO_MEMS_Test+0x1e>
  {
    ACCELERO_ReadAcc();
 8002cde:	f000 f80b 	bl	8002cf8 <ACCELERO_ReadAcc>
  while(!UserPressButton)
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <ACCELERO_MEMS_Test+0x30>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f8      	beq.n	8002cde <ACCELERO_MEMS_Test+0x1a>
  }
}  
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000429 	.word	0x20000429

08002cf8 <ACCELERO_ReadAcc>:

static void ACCELERO_ReadAcc(void)
{
 8002cf8:	b5b0      	push	{r4, r5, r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
  int16_t buffer[3] = {0};
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	81fb      	strh	r3, [r7, #14]
  
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fbd5 	bl	80024bc <BSP_ACCELERO_GetXYZ>
 
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
 8002d12:	88bb      	ldrh	r3, [r7, #4]
 8002d14:	81bb      	strh	r3, [r7, #12]
  yval = buffer[1];
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	81fb      	strh	r3, [r7, #14]
  //printf("x: %.3f m/s^2 \t y: %.3f m/s^2 \t z: %.3f m/s^2 \r\n",
		  //0.061035*buffer[0]*9.81/1000, 0.061035*buffer[1]*9.81/1000, 0.061035*buffer[2]*9.81/1000);

 // RCFilter_Update(&Acc_RC_LPF,xval);
 // FIRFilter_Update(&Acc_FIR_LPF, xval);
  IIRFilter_Update(&Acc_IIR_LPF, xval);
 8002d1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d26:	eeb0 0a67 	vmov.f32	s0, s15
 8002d2a:	485d      	ldr	r0, [pc, #372]	; (8002ea0 <ACCELERO_ReadAcc+0x1a8>)
 8002d2c:	f7ff fcde 	bl	80026ec <IIRFilter_Update>
  //printf(" %.3f, %.3f , %.3f \r\n",
  		 // 0.061035*buffer[0]*9.81/1000, 0.061035*buffer[1]*9.81/1000, 0.061035*buffer[2]*9.81/1000);

  printf(" %.3f, %.3f\r\n",
    		  0.061035*buffer[0]*9.81/1000, 0.061035*Acc_IIR_LPF.out*9.81/1000);
 8002d30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fbf5 	bl	8000524 <__aeabi_i2d>
 8002d3a:	a355      	add	r3, pc, #340	; (adr r3, 8002e90 <ACCELERO_ReadAcc+0x198>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fc5a 	bl	80005f8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	a352      	add	r3, pc, #328	; (adr r3, 8002e98 <ACCELERO_ReadAcc+0x1a0>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fc51 	bl	80005f8 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
  printf(" %.3f, %.3f\r\n",
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <ACCELERO_ReadAcc+0x1ac>)
 8002d64:	f7fd fd72 	bl	800084c <__aeabi_ddiv>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
    		  0.061035*buffer[0]*9.81/1000, 0.061035*Acc_IIR_LPF.out*9.81/1000);
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <ACCELERO_ReadAcc+0x1a8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fbe7 	bl	8000548 <__aeabi_f2d>
 8002d7a:	a345      	add	r3, pc, #276	; (adr r3, 8002e90 <ACCELERO_ReadAcc+0x198>)
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f7fd fc3a 	bl	80005f8 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	a342      	add	r3, pc, #264	; (adr r3, 8002e98 <ACCELERO_ReadAcc+0x1a0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fc31 	bl	80005f8 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
  printf(" %.3f, %.3f\r\n",
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <ACCELERO_ReadAcc+0x1ac>)
 8002da4:	f7fd fd52 	bl	800084c <__aeabi_ddiv>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	e9cd 2300 	strd	r2, r3, [sp]
 8002db0:	4622      	mov	r2, r4
 8002db2:	462b      	mov	r3, r5
 8002db4:	483c      	ldr	r0, [pc, #240]	; (8002ea8 <ACCELERO_ReadAcc+0x1b0>)
 8002db6:	f004 fe23 	bl	8007a00 <iprintf>


  //HAL_Delay(500);

  if((ABS(xval))>(ABS(yval)))
 8002dba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bfb8      	it	lt
 8002dc2:	425b      	neglt	r3, r3
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bfb8      	it	lt
 8002dce:	425b      	neglt	r3, r3
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d91f      	bls.n	8002e16 <ACCELERO_ReadAcc+0x11e>
  {
    if(xval > ThresholdHigh)
 8002dd6:	4b35      	ldr	r3, [pc, #212]	; (8002eac <ACCELERO_ReadAcc+0x1b4>)
 8002dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ddc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dd06      	ble.n	8002df2 <ACCELERO_ReadAcc+0xfa>
    { 
      /* LED10 On */
      BSP_LED_On(LED10);
 8002de4:	2007      	movs	r0, #7
 8002de6:	f7fe ff37 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002dea:	200a      	movs	r0, #10
 8002dec:	f000 fc14 	bl	8003618 <HAL_Delay>
 8002df0:	e030      	b.n	8002e54 <ACCELERO_ReadAcc+0x15c>
    }
    else if(xval < ThresholdLow)
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <ACCELERO_ReadAcc+0x1b8>)
 8002df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	da06      	bge.n	8002e0e <ACCELERO_ReadAcc+0x116>
    { 
      /* LED3 On */
      BSP_LED_On(LED3);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe ff29 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002e06:	200a      	movs	r0, #10
 8002e08:	f000 fc06 	bl	8003618 <HAL_Delay>
 8002e0c:	e022      	b.n	8002e54 <ACCELERO_ReadAcc+0x15c>
    }
    else
    { 
      HAL_Delay(10);
 8002e0e:	200a      	movs	r0, #10
 8002e10:	f000 fc02 	bl	8003618 <HAL_Delay>
 8002e14:	e01e      	b.n	8002e54 <ACCELERO_ReadAcc+0x15c>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <ACCELERO_ReadAcc+0x1b8>)
 8002e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	da06      	bge.n	8002e32 <ACCELERO_ReadAcc+0x13a>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f7fe ff17 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002e2a:	200a      	movs	r0, #10
 8002e2c:	f000 fbf4 	bl	8003618 <HAL_Delay>
 8002e30:	e010      	b.n	8002e54 <ACCELERO_ReadAcc+0x15c>
    }
    else if(yval > ThresholdHigh)
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <ACCELERO_ReadAcc+0x1b4>)
 8002e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dd06      	ble.n	8002e4e <ACCELERO_ReadAcc+0x156>
    {
      /* LED7 On */
      BSP_LED_On(LED7);
 8002e40:	2004      	movs	r0, #4
 8002e42:	f7fe ff09 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002e46:	200a      	movs	r0, #10
 8002e48:	f000 fbe6 	bl	8003618 <HAL_Delay>
 8002e4c:	e002      	b.n	8002e54 <ACCELERO_ReadAcc+0x15c>
    } 
    else
  {	    
      HAL_Delay(10);
 8002e4e:	200a      	movs	r0, #10
 8002e50:	f000 fbe2 	bl	8003618 <HAL_Delay>
    }
  } 
  
     BSP_LED_Off(LED3);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fe ff19 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED6);
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f7fe ff16 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED7);
 8002e60:	2004      	movs	r0, #4
 8002e62:	f7fe ff13 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED4);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f7fe ff10 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED10);
 8002e6c:	2007      	movs	r0, #7
 8002e6e:	f7fe ff0d 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED8);
 8002e72:	2005      	movs	r0, #5
 8002e74:	f7fe ff0a 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED9);
 8002e78:	2006      	movs	r0, #6
 8002e7a:	f7fe ff07 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED5);
 8002e7e:	2002      	movs	r0, #2
 8002e80:	f7fe ff04 	bl	8001c8c <BSP_LED_Off>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8c:	f3af 8000 	nop.w
 8002e90:	c1d29dc7 	.word	0xc1d29dc7
 8002e94:	3faf3ffa 	.word	0x3faf3ffa
 8002e98:	51eb851f 	.word	0x51eb851f
 8002e9c:	40239eb8 	.word	0x40239eb8
 8002ea0:	20000494 	.word	0x20000494
 8002ea4:	408f4000 	.word	0x408f4000
 8002ea8:	08009b18 	.word	0x08009b18
 8002eac:	20000174 	.word	0x20000174
 8002eb0:	20000176 	.word	0x20000176

08002eb4 <GYRO_MEMS_Test>:
  *   MEMS peripheral.
  * @param None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002eb8:	f7ff fa3e 	bl	8002338 <BSP_ACCELERO_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <GYRO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002ec2:	f7ff fef3 	bl	8002cac <Error_Handler>
  }
  
  UserPressButton = 0;
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <GYRO_MEMS_Test+0x30>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002ecc:	e001      	b.n	8002ed2 <GYRO_MEMS_Test+0x1e>
  {
    GYRO_ReadAng();
 8002ece:	f000 f80b 	bl	8002ee8 <GYRO_ReadAng>
  while(!UserPressButton)
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <GYRO_MEMS_Test+0x30>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f8      	beq.n	8002ece <GYRO_MEMS_Test+0x1a>
  }
}  
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000429 	.word	0x20000429

08002ee8 <GYRO_ReadAng>:

static void GYRO_ReadAng(void)
{
 8002ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002eec:	b08a      	sub	sp, #40	; 0x28
 8002eee:	af04      	add	r7, sp, #16
  /* Gyroscope variable */
  float Buffer[3];
  float Xval,Yval,Zval = 0x00;
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Init Gyroscope Mems */
  if(BSP_GYRO_Init() != HAL_OK)
 8002ef6:	f7ff faf5 	bl	80024e4 <BSP_GYRO_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <GYRO_ReadAng+0x1c>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002f00:	f7ff fed4 	bl	8002cac <Error_Handler>
  }

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
 8002f04:	463b      	mov	r3, r7
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fba2 	bl	8002650 <BSP_GYRO_GetXYZ>
     
  /* Update autoreload and capture compare registers value*/
  Xval = Buffer[0];
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	613b      	str	r3, [r7, #16]
  Yval = Buffer[1];
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	60fb      	str	r3, [r7, #12]
  Zval = Buffer[2];
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	617b      	str	r3, [r7, #20]
  /* dps */
  printf("%.3f, %.3f, %.3f \r\n",
		  L3GD20_SENSITIVITY_250DPS*Xval/1000, L3GD20_SENSITIVITY_250DPS*Yval/1000,
 8002f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800306c <GYRO_ReadAng+0x184>
 8002f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f24:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003070 <GYRO_ReadAng+0x188>
 8002f28:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 8002f2c:	ee16 0a90 	vmov	r0, s13
 8002f30:	f7fd fb0a 	bl	8000548 <__aeabi_f2d>
 8002f34:	4680      	mov	r8, r0
 8002f36:	4689      	mov	r9, r1
		  L3GD20_SENSITIVITY_250DPS*Xval/1000, L3GD20_SENSITIVITY_250DPS*Yval/1000,
 8002f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f3c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800306c <GYRO_ReadAng+0x184>
 8002f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f44:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003070 <GYRO_ReadAng+0x188>
 8002f48:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 8002f4c:	ee16 0a90 	vmov	r0, s13
 8002f50:	f7fd fafa 	bl	8000548 <__aeabi_f2d>
 8002f54:	4604      	mov	r4, r0
 8002f56:	460d      	mov	r5, r1
		  L3GD20_SENSITIVITY_250DPS*Zval/1000);
 8002f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f5c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800306c <GYRO_ReadAng+0x184>
 8002f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f64:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003070 <GYRO_ReadAng+0x188>
 8002f68:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 8002f6c:	ee16 0a90 	vmov	r0, s13
 8002f70:	f7fd faea 	bl	8000548 <__aeabi_f2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f7c:	e9cd 4500 	strd	r4, r5, [sp]
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	483b      	ldr	r0, [pc, #236]	; (8003074 <GYRO_ReadAng+0x18c>)
 8002f86:	f004 fd3b 	bl	8007a00 <iprintf>
  HAL_Delay(20);
 8002f8a:	2014      	movs	r0, #20
 8002f8c:	f000 fb44 	bl	8003618 <HAL_Delay>
      
  if(Xval>Yval)
 8002f90:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	dd23      	ble.n	8002fea <GYRO_ReadAng+0x102>
   {
    if(Buffer[0] > 5000.0f)
 8002fa2:	edd7 7a00 	vldr	s15, [r7]
 8002fa6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003078 <GYRO_ReadAng+0x190>
 8002faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	dd06      	ble.n	8002fc2 <GYRO_ReadAng+0xda>
     { 
        /* LD10 On */
        BSP_LED_On(LED10);
 8002fb4:	2007      	movs	r0, #7
 8002fb6:	f7fe fe4f 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8002fba:	200a      	movs	r0, #10
 8002fbc:	f000 fb2c 	bl	8003618 <HAL_Delay>
 8002fc0:	e036      	b.n	8003030 <GYRO_ReadAng+0x148>
     }
     else if(Buffer[0] < -5000.0f)
 8002fc2:	edd7 7a00 	vldr	s15, [r7]
 8002fc6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800307c <GYRO_ReadAng+0x194>
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d506      	bpl.n	8002fe2 <GYRO_ReadAng+0xfa>
     { 
        /* LED3 On */
        BSP_LED_On(LED3);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fe fe3f 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8002fda:	200a      	movs	r0, #10
 8002fdc:	f000 fb1c 	bl	8003618 <HAL_Delay>
 8002fe0:	e026      	b.n	8003030 <GYRO_ReadAng+0x148>
     }      
    else
    { 
      HAL_Delay(10);
 8002fe2:	200a      	movs	r0, #10
 8002fe4:	f000 fb18 	bl	8003618 <HAL_Delay>
 8002fe8:	e022      	b.n	8003030 <GYRO_ReadAng+0x148>
    }
   }
  else
   {
    if(Buffer[1] < -5000.0f)
 8002fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800307c <GYRO_ReadAng+0x194>
 8002ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	d506      	bpl.n	800300a <GYRO_ReadAng+0x122>
     {
        /* LD6 on */
        BSP_LED_On(LED6);           
 8002ffc:	2003      	movs	r0, #3
 8002ffe:	f7fe fe2b 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8003002:	200a      	movs	r0, #10
 8003004:	f000 fb08 	bl	8003618 <HAL_Delay>
 8003008:	e012      	b.n	8003030 <GYRO_ReadAng+0x148>
     }
    else if(Buffer[1] > 5000.0f)
 800300a:	edd7 7a01 	vldr	s15, [r7, #4]
 800300e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003078 <GYRO_ReadAng+0x190>
 8003012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301a:	dd06      	ble.n	800302a <GYRO_ReadAng+0x142>
     {
        /* LD7 On */
        BSP_LED_On(LED7);        
 800301c:	2004      	movs	r0, #4
 800301e:	f7fe fe1b 	bl	8001c58 <BSP_LED_On>
	HAL_Delay(10);
 8003022:	200a      	movs	r0, #10
 8003024:	f000 faf8 	bl	8003618 <HAL_Delay>
 8003028:	e002      	b.n	8003030 <GYRO_ReadAng+0x148>
     }     
        else
        { 
            HAL_Delay(10);
 800302a:	200a      	movs	r0, #10
 800302c:	f000 faf4 	bl	8003618 <HAL_Delay>
        }  	
      } 
    BSP_LED_Off(LED3);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fe fe2b 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8003036:	2003      	movs	r0, #3
 8003038:	f7fe fe28 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED7);
 800303c:	2004      	movs	r0, #4
 800303e:	f7fe fe25 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8003042:	2001      	movs	r0, #1
 8003044:	f7fe fe22 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED10);
 8003048:	2007      	movs	r0, #7
 800304a:	f7fe fe1f 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED8);
 800304e:	2005      	movs	r0, #5
 8003050:	f7fe fe1c 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED9);
 8003054:	2006      	movs	r0, #6
 8003056:	f7fe fe19 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED5);
 800305a:	2002      	movs	r0, #2
 800305c:	f7fe fe16 	bl	8001c8c <BSP_LED_Off>
}
 8003060:	bf00      	nop
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306a:	bf00      	nop
 800306c:	410c0000 	.word	0x410c0000
 8003070:	447a0000 	.word	0x447a0000
 8003074:	08009b28 	.word	0x08009b28
 8003078:	459c4000 	.word	0x459c4000
 800307c:	c59c4000 	.word	0xc59c4000

08003080 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <MX_SPI1_Init+0x74>)
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <MX_SPI1_Init+0x78>)
 8003088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <MX_SPI1_Init+0x74>)
 800308c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <MX_SPI1_Init+0x74>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <MX_SPI1_Init+0x74>)
 800309a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800309e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030b6:	2210      	movs	r2, #16
 80030b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030ce:	2207      	movs	r2, #7
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030da:	2208      	movs	r2, #8
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030de:	4805      	ldr	r0, [pc, #20]	; (80030f4 <MX_SPI1_Init+0x74>)
 80030e0:	f002 ff34 	bl	8005f4c <HAL_SPI_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030ea:	f7ff fddf 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200004f8 	.word	0x200004f8
 80030f8:	40013000 	.word	0x40013000

080030fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_SPI_MspInit+0x7c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d128      	bne.n	8003170 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_SPI_MspInit+0x80>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_SPI_MspInit+0x80>)
 8003124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003128:	6193      	str	r3, [r2, #24]
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_SPI_MspInit+0x80>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_SPI_MspInit+0x80>)
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_SPI_MspInit+0x80>)
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	6153      	str	r3, [r2, #20]
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_SPI_MspInit+0x80>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800314e:	23e0      	movs	r3, #224	; 0xe0
 8003150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800315e:	2305      	movs	r3, #5
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316c:	f000 fb8a 	bl	8003884 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003170:	bf00      	nop
 8003172:	3728      	adds	r7, #40	; 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40013000 	.word	0x40013000
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_SPI_MspDeInit+0x30>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10a      	bne.n	80031a8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_SPI_MspDeInit+0x34>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_SPI_MspDeInit+0x34>)
 8003198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800319c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 800319e:	21e0      	movs	r1, #224	; 0xe0
 80031a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a4:	f000 fce8 	bl	8003b78 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40013000 	.word	0x40013000
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_MspInit+0x44>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_MspInit+0x44>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6193      	str	r3, [r2, #24]
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_MspInit+0x44>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_MspInit+0x44>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4a08      	ldr	r2, [pc, #32]	; (80031fc <HAL_MspInit+0x44>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e0:	61d3      	str	r3, [r2, #28]
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_MspInit+0x44>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031ee:	2007      	movs	r0, #7
 80031f0:	f000 fb06 	bl	8003800 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000

08003200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <NMI_Handler+0x4>

08003206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <HardFault_Handler+0x4>

0800320c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <MemManage_Handler+0x4>

08003212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003216:	e7fe      	b.n	8003216 <BusFault_Handler+0x4>

08003218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800321c:	e7fe      	b.n	800321c <UsageFault_Handler+0x4>

0800321e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800324c:	f000 f9c4 	bl	80035d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}

08003254 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8003258:	2001      	movs	r0, #1
 800325a:	f000 fdb3 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}

08003262 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
	return 1;
 8003266:	2301      	movs	r3, #1
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_kill>:

int _kill(int pid, int sig)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800327c:	f003 ff24 	bl	80070c8 <__errno>
 8003280:	4603      	mov	r3, r0
 8003282:	2216      	movs	r2, #22
 8003284:	601a      	str	r2, [r3, #0]
	return -1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_exit>:

void _exit (int status)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800329a:	f04f 31ff 	mov.w	r1, #4294967295
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffe7 	bl	8003272 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032a4:	e7fe      	b.n	80032a4 <_exit+0x12>

080032a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	e00a      	b.n	80032ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032b8:	f3af 8000 	nop.w
 80032bc:	4601      	mov	r1, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	60ba      	str	r2, [r7, #8]
 80032c4:	b2ca      	uxtb	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	dbf0      	blt.n	80032b8 <_read+0x12>
	}

return len;
 80032d6:	687b      	ldr	r3, [r7, #4]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e009      	b.n	8003306 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	60ba      	str	r2, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fcc4 	bl	8002c88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	dbf1      	blt.n	80032f2 <_write+0x12>
	}
	return len;
 800330e:	687b      	ldr	r3, [r7, #4]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <_close>:

int _close(int file)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	return -1;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003340:	605a      	str	r2, [r3, #4]
	return 0;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_isatty>:

int _isatty(int file)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	return 1;
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
	return 0;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <_sbrk+0x5c>)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_sbrk+0x60>)
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <_sbrk+0x64>)
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <_sbrk+0x68>)
 80033a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d207      	bcs.n	80033c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033b0:	f003 fe8a 	bl	80070c8 <__errno>
 80033b4:	4603      	mov	r3, r0
 80033b6:	220c      	movs	r2, #12
 80033b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	e009      	b.n	80033d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <_sbrk+0x64>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <_sbrk+0x64>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <_sbrk+0x64>)
 80033d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	2000a000 	.word	0x2000a000
 80033e0:	00000400 	.word	0x00000400
 80033e4:	2000042c 	.word	0x2000042c
 80033e8:	200005f8 	.word	0x200005f8

080033ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <SystemInit+0x20>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	4a05      	ldr	r2, [pc, #20]	; (800340c <SystemInit+0x20>)
 80033f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <MX_USART1_UART_Init+0x58>)
 8003416:	4a15      	ldr	r2, [pc, #84]	; (800346c <MX_USART1_UART_Init+0x5c>)
 8003418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <MX_USART1_UART_Init+0x58>)
 800341c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <MX_USART1_UART_Init+0x58>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <MX_USART1_UART_Init+0x58>)
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <MX_USART1_UART_Init+0x58>)
 8003430:	2200      	movs	r2, #0
 8003432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <MX_USART1_UART_Init+0x58>)
 8003436:	220c      	movs	r2, #12
 8003438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <MX_USART1_UART_Init+0x58>)
 800343c:	2200      	movs	r2, #0
 800343e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <MX_USART1_UART_Init+0x58>)
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <MX_USART1_UART_Init+0x58>)
 8003448:	2200      	movs	r2, #0
 800344a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <MX_USART1_UART_Init+0x58>)
 800344e:	2200      	movs	r2, #0
 8003450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <MX_USART1_UART_Init+0x58>)
 8003454:	f003 f9d2 	bl	80067fc <HAL_UART_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800345e:	f7ff fc25 	bl	8002cac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	2000055c 	.word	0x2000055c
 800346c:	40013800 	.word	0x40013800

08003470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a17      	ldr	r2, [pc, #92]	; (80034ec <HAL_UART_MspInit+0x7c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d127      	bne.n	80034e2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <HAL_UART_MspInit+0x80>)
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <HAL_UART_MspInit+0x80>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800349c:	6193      	str	r3, [r2, #24]
 800349e:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <HAL_UART_MspInit+0x80>)
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_UART_MspInit+0x80>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_UART_MspInit+0x80>)
 80034b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034b4:	6153      	str	r3, [r2, #20]
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_UART_MspInit+0x80>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034c2:	2330      	movs	r3, #48	; 0x30
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034d2:	2307      	movs	r3, #7
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <HAL_UART_MspInit+0x84>)
 80034de:	f000 f9d1 	bl	8003884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40013800 	.word	0x40013800
 80034f0:	40021000 	.word	0x40021000
 80034f4:	48000800 	.word	0x48000800

080034f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80034f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003530 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034fc:	480d      	ldr	r0, [pc, #52]	; (8003534 <LoopForever+0x6>)
  ldr r1, =_edata
 80034fe:	490e      	ldr	r1, [pc, #56]	; (8003538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003500:	4a0e      	ldr	r2, [pc, #56]	; (800353c <LoopForever+0xe>)
  movs r3, #0
 8003502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003504:	e002      	b.n	800350c <LoopCopyDataInit>

08003506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350a:	3304      	adds	r3, #4

0800350c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800350c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003510:	d3f9      	bcc.n	8003506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003514:	4c0b      	ldr	r4, [pc, #44]	; (8003544 <LoopForever+0x16>)
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003518:	e001      	b.n	800351e <LoopFillZerobss>

0800351a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800351c:	3204      	adds	r2, #4

0800351e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003520:	d3fb      	bcc.n	800351a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003522:	f7ff ff63 	bl	80033ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003526:	f003 fdd5 	bl	80070d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800352a:	f7ff fa77 	bl	8002a1c <main>

0800352e <LoopForever>:

LoopForever:
    b LoopForever
 800352e:	e7fe      	b.n	800352e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003530:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003538:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 800353c:	08009f6c 	.word	0x08009f6c
  ldr r2, =_sbss
 8003540:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8003544:	200005f4 	.word	0x200005f4

08003548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003548:	e7fe      	b.n	8003548 <ADC1_2_IRQHandler>
	...

0800354c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_Init+0x28>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a07      	ldr	r2, [pc, #28]	; (8003574 <HAL_Init+0x28>)
 8003556:	f043 0310 	orr.w	r3, r3, #16
 800355a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800355c:	2003      	movs	r0, #3
 800355e:	f000 f94f 	bl	8003800 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003562:	2000      	movs	r0, #0
 8003564:	f000 f808 	bl	8003578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003568:	f7ff fe26 	bl	80031b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40022000 	.word	0x40022000

08003578 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003580:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_InitTick+0x54>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_InitTick+0x58>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	4619      	mov	r1, r3
 800358a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800358e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f967 	bl	800386a <HAL_SYSTICK_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00e      	b.n	80035c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d80a      	bhi.n	80035c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ac:	2200      	movs	r2, #0
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f000 f92f 	bl	8003816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035b8:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <HAL_InitTick+0x5c>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000178 	.word	0x20000178
 80035d0:	20000180 	.word	0x20000180
 80035d4:	2000017c 	.word	0x2000017c

080035d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_IncTick+0x20>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_IncTick+0x24>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <HAL_IncTick+0x24>)
 80035ea:	6013      	str	r3, [r2, #0]
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000180 	.word	0x20000180
 80035fc:	200005e0 	.word	0x200005e0

08003600 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return uwTick;  
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_GetTick+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	200005e0 	.word	0x200005e0

08003618 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003620:	f7ff ffee 	bl	8003600 <HAL_GetTick>
 8003624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d005      	beq.n	800363e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_Delay+0x44>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800363e:	bf00      	nop
 8003640:	f7ff ffde 	bl	8003600 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	429a      	cmp	r2, r3
 800364e:	d8f7      	bhi.n	8003640 <HAL_Delay+0x28>
  {
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000180 	.word	0x20000180

08003660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800367c:	4013      	ands	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800368c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003692:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	60d3      	str	r3, [r2, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	f003 0307 	and.w	r3, r3, #7
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db0b      	blt.n	80036ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	4907      	ldr	r1, [pc, #28]	; (80036fc <__NVIC_EnableIRQ+0x38>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2001      	movs	r0, #1
 80036e6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000e100 	.word	0xe000e100

08003700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	2b00      	cmp	r3, #0
 8003712:	db0a      	blt.n	800372a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	490c      	ldr	r1, [pc, #48]	; (800374c <__NVIC_SetPriority+0x4c>)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	440b      	add	r3, r1
 8003724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003728:	e00a      	b.n	8003740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4908      	ldr	r1, [pc, #32]	; (8003750 <__NVIC_SetPriority+0x50>)
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	3b04      	subs	r3, #4
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	440b      	add	r3, r1
 800373e:	761a      	strb	r2, [r3, #24]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000e100 	.word	0xe000e100
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f1c3 0307 	rsb	r3, r3, #7
 800376e:	2b04      	cmp	r3, #4
 8003770:	bf28      	it	cs
 8003772:	2304      	movcs	r3, #4
 8003774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3304      	adds	r3, #4
 800377a:	2b06      	cmp	r3, #6
 800377c:	d902      	bls.n	8003784 <NVIC_EncodePriority+0x30>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3b03      	subs	r3, #3
 8003782:	e000      	b.n	8003786 <NVIC_EncodePriority+0x32>
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43da      	mvns	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	401a      	ands	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800379c:	f04f 31ff 	mov.w	r1, #4294967295
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	4313      	orrs	r3, r2
         );
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037cc:	d301      	bcc.n	80037d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ce:	2301      	movs	r3, #1
 80037d0:	e00f      	b.n	80037f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <SysTick_Config+0x40>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037da:	210f      	movs	r1, #15
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	f7ff ff8e 	bl	8003700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <SysTick_Config+0x40>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ea:	4b04      	ldr	r3, [pc, #16]	; (80037fc <SysTick_Config+0x40>)
 80037ec:	2207      	movs	r2, #7
 80037ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	e000e010 	.word	0xe000e010

08003800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff29 	bl	8003660 <__NVIC_SetPriorityGrouping>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003828:	f7ff ff3e 	bl	80036a8 <__NVIC_GetPriorityGrouping>
 800382c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff8e 	bl	8003754 <NVIC_EncodePriority>
 8003838:	4602      	mov	r2, r0
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff5d 	bl	8003700 <__NVIC_SetPriority>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff31 	bl	80036c4 <__NVIC_EnableIRQ>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffa2 	bl	80037bc <SysTick_Config>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003892:	e154      	b.n	8003b3e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8146 	beq.w	8003b38 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d005      	beq.n	80038c4 <HAL_GPIO_Init+0x40>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d130      	bne.n	8003926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038fa:	2201      	movs	r2, #1
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	f003 0201 	and.w	r2, r3, #1
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b03      	cmp	r3, #3
 8003930:	d017      	beq.n	8003962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2203      	movs	r2, #3
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d123      	bne.n	80039b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	08da      	lsrs	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	6939      	ldr	r1, [r7, #16]
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a0 	beq.w	8003b38 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f8:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <HAL_GPIO_Init+0x2d8>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	4a57      	ldr	r2, [pc, #348]	; (8003b5c <HAL_GPIO_Init+0x2d8>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6193      	str	r3, [r2, #24]
 8003a04:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <HAL_GPIO_Init+0x2d8>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a10:	4a53      	ldr	r2, [pc, #332]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	3302      	adds	r3, #2
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	220f      	movs	r2, #15
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a3a:	d019      	beq.n	8003a70 <HAL_GPIO_Init+0x1ec>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a49      	ldr	r2, [pc, #292]	; (8003b64 <HAL_GPIO_Init+0x2e0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_GPIO_Init+0x1e8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a48      	ldr	r2, [pc, #288]	; (8003b68 <HAL_GPIO_Init+0x2e4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00d      	beq.n	8003a68 <HAL_GPIO_Init+0x1e4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a47      	ldr	r2, [pc, #284]	; (8003b6c <HAL_GPIO_Init+0x2e8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <HAL_GPIO_Init+0x1e0>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a46      	ldr	r2, [pc, #280]	; (8003b70 <HAL_GPIO_Init+0x2ec>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_GPIO_Init+0x1dc>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	e008      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a60:	2305      	movs	r3, #5
 8003a62:	e006      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a64:	2303      	movs	r3, #3
 8003a66:	e004      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e002      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a70:	2300      	movs	r3, #0
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	f002 0203 	and.w	r2, r2, #3
 8003a78:	0092      	lsls	r2, r2, #2
 8003a7a:	4093      	lsls	r3, r2
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a82:	4937      	ldr	r1, [pc, #220]	; (8003b60 <HAL_GPIO_Init+0x2dc>)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	3302      	adds	r3, #2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a90:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ab4:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003aba:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ade:	4a25      	ldr	r2, [pc, #148]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b08:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f aea3 	bne.w	8003894 <HAL_GPIO_Init+0x10>
  }
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40010000 	.word	0x40010000
 8003b64:	48000400 	.word	0x48000400
 8003b68:	48000800 	.word	0x48000800
 8003b6c:	48000c00 	.word	0x48000c00
 8003b70:	48001000 	.word	0x48001000
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003b86:	e0b8      	b.n	8003cfa <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b88:	2201      	movs	r2, #1
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80ab 	beq.w	8003cf4 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b9e:	4a5e      	ldr	r2, [pc, #376]	; (8003d18 <HAL_GPIO_DeInit+0x1a0>)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003baa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bc6:	d019      	beq.n	8003bfc <HAL_GPIO_DeInit+0x84>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_GPIO_DeInit+0x1a4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_GPIO_DeInit+0x80>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a53      	ldr	r2, [pc, #332]	; (8003d20 <HAL_GPIO_DeInit+0x1a8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_GPIO_DeInit+0x7c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <HAL_GPIO_DeInit+0x1ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <HAL_GPIO_DeInit+0x78>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a51      	ldr	r2, [pc, #324]	; (8003d28 <HAL_GPIO_DeInit+0x1b0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_GPIO_DeInit+0x74>
 8003be8:	2304      	movs	r3, #4
 8003bea:	e008      	b.n	8003bfe <HAL_GPIO_DeInit+0x86>
 8003bec:	2305      	movs	r3, #5
 8003bee:	e006      	b.n	8003bfe <HAL_GPIO_DeInit+0x86>
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e004      	b.n	8003bfe <HAL_GPIO_DeInit+0x86>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e002      	b.n	8003bfe <HAL_GPIO_DeInit+0x86>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_GPIO_DeInit+0x86>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	f002 0203 	and.w	r2, r2, #3
 8003c04:	0092      	lsls	r2, r2, #2
 8003c06:	4093      	lsls	r3, r2
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d132      	bne.n	8003c74 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	4945      	ldr	r1, [pc, #276]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c1c:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	4941      	ldr	r1, [pc, #260]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c2a:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	493e      	ldr	r1, [pc, #248]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c38:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	493a      	ldr	r1, [pc, #232]	; (8003d2c <HAL_GPIO_DeInit+0x1b4>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	220f      	movs	r2, #15
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c56:	4a30      	ldr	r2, [pc, #192]	; (8003d18 <HAL_GPIO_DeInit+0x1a0>)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	482c      	ldr	r0, [pc, #176]	; (8003d18 <HAL_GPIO_DeInit+0x1a0>)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	3302      	adds	r3, #2
 8003c70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2103      	movs	r1, #3
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	401a      	ands	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	08da      	lsrs	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3208      	adds	r2, #8
 8003c92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	220f      	movs	r2, #15
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	08d2      	lsrs	r2, r2, #3
 8003caa:	4019      	ands	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2103      	movs	r1, #3
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	401a      	ands	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2103      	movs	r1, #3
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	401a      	ands	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f47f af40 	bne.w	8003b88 <HAL_GPIO_DeInit+0x10>
  }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	48000400 	.word	0x48000400
 8003d20:	48000800 	.word	0x48000800
 8003d24:	48000c00 	.word	0x48000c00
 8003d28:	48001000 	.word	0x48001000
 8003d2c:	40010400 	.word	0x40010400

08003d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e001      	b.n	8003d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d7c:	e002      	b.n	8003d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	041a      	lsls	r2, r3, #16
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	43d9      	mvns	r1, r3
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	400b      	ands	r3, r1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	619a      	str	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe ff04 	bl	8002bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40010400 	.word	0x40010400

08003df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e081      	b.n	8003f0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe fd98 	bl	8002950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	; 0x24
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	e006      	b.n	8003e7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d104      	bne.n	8003e8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1a      	ldr	r2, [r3, #32]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e021      	b.n	8003f68 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fe fd4b 	bl	80029d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	f040 80f9 	bne.w	800418a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x34>
 8003f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0ed      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Mem_Write+0x4e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0e6      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fc6:	f7ff fb1b 	bl	8003600 <HAL_GetTick>
 8003fca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2319      	movs	r3, #25
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fad1 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0d1      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	; 0x21
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004010:	88f8      	ldrh	r0, [r7, #6]
 8004012:	893a      	ldrh	r2, [r7, #8]
 8004014:	8979      	ldrh	r1, [r7, #10]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4603      	mov	r3, r0
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f9e1 	bl	80043e8 <I2C_RequestMemoryWrite>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0a9      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2bff      	cmp	r3, #255	; 0xff
 8004040:	d90e      	bls.n	8004060 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	22ff      	movs	r2, #255	; 0xff
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	2300      	movs	r3, #0
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fbc3 	bl	80047e4 <I2C_TransferConfig>
 800405e:	e00f      	b.n	8004080 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	b2da      	uxtb	r2, r3
 8004070:	8979      	ldrh	r1, [r7, #10]
 8004072:	2300      	movs	r3, #0
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fbb2 	bl	80047e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fabb 	bl	8004600 <I2C_WaitOnTXISFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e07b      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d034      	beq.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d130      	bne.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fa4d 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04d      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2bff      	cmp	r3, #255	; 0xff
 80040f8:	d90e      	bls.n	8004118 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	b2da      	uxtb	r2, r3
 8004106:	8979      	ldrh	r1, [r7, #10]
 8004108:	2300      	movs	r3, #0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb67 	bl	80047e4 <I2C_TransferConfig>
 8004116:	e00f      	b.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	b2da      	uxtb	r2, r3
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	2300      	movs	r3, #0
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fb56 	bl	80047e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d19e      	bne.n	8004080 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fa9a 	bl	8004680 <I2C_WaitOnSTOPFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e01a      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2220      	movs	r2, #32
 800415c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_I2C_Mem_Write+0x224>)
 800416a:	400b      	ands	r3, r1
 800416c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fe00e800 	.word	0xfe00e800

08004198 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	f040 80fd 	bne.w	80043ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_I2C_Mem_Read+0x34>
 80041c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0f1      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x4e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0ea      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ee:	f7ff fa07 	bl	8003600 <HAL_GetTick>
 80041f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2319      	movs	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f9bd 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0d5      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2222      	movs	r2, #34	; 0x22
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004238:	88f8      	ldrh	r0, [r7, #6]
 800423a:	893a      	ldrh	r2, [r7, #8]
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4603      	mov	r3, r0
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f921 	bl	8004490 <I2C_RequestMemoryRead>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0ad      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2bff      	cmp	r3, #255	; 0xff
 8004268:	d90e      	bls.n	8004288 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	22ff      	movs	r2, #255	; 0xff
 800426e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	b2da      	uxtb	r2, r3
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	4b52      	ldr	r3, [pc, #328]	; (80043c4 <HAL_I2C_Mem_Read+0x22c>)
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 faaf 	bl	80047e4 <I2C_TransferConfig>
 8004286:	e00f      	b.n	80042a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_I2C_Mem_Read+0x22c>)
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fa9e 	bl	80047e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	2200      	movs	r2, #0
 80042b0:	2104      	movs	r1, #4
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f964 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07c      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d034      	beq.n	8004368 <HAL_I2C_Mem_Read+0x1d0>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d130      	bne.n	8004368 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f935 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e04d      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2bff      	cmp	r3, #255	; 0xff
 8004328:	d90e      	bls.n	8004348 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	b2da      	uxtb	r2, r3
 8004336:	8979      	ldrh	r1, [r7, #10]
 8004338:	2300      	movs	r3, #0
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fa4f 	bl	80047e4 <I2C_TransferConfig>
 8004346:	e00f      	b.n	8004368 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	b2da      	uxtb	r2, r3
 8004358:	8979      	ldrh	r1, [r7, #10]
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fa3e 	bl	80047e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d19a      	bne.n	80042a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f982 	bl	8004680 <I2C_WaitOnSTOPFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e01a      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2220      	movs	r2, #32
 800438c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_I2C_Mem_Read+0x230>)
 800439a:	400b      	ands	r3, r1
 800439c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	80002400 	.word	0x80002400
 80043c8:	fe00e800 	.word	0xfe00e800

080043cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043da:	b2db      	uxtb	r3, r3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	460b      	mov	r3, r1
 80043fc:	813b      	strh	r3, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	8979      	ldrh	r1, [r7, #10]
 8004408:	4b20      	ldr	r3, [pc, #128]	; (800448c <I2C_RequestMemoryWrite+0xa4>)
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f9e7 	bl	80047e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	69b9      	ldr	r1, [r7, #24]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f8f0 	bl	8004600 <I2C_WaitOnTXISFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e02c      	b.n	8004484 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	629a      	str	r2, [r3, #40]	; 0x28
 800443a:	e015      	b.n	8004468 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800443c:	893b      	ldrh	r3, [r7, #8]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	b29b      	uxth	r3, r3
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8d6 	bl	8004600 <I2C_WaitOnTXISFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e012      	b.n	8004484 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800445e:	893b      	ldrh	r3, [r7, #8]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2200      	movs	r2, #0
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f884 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	80002000 	.word	0x80002000

08004490 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	817b      	strh	r3, [r7, #10]
 80044a2:	460b      	mov	r3, r1
 80044a4:	813b      	strh	r3, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <I2C_RequestMemoryRead+0xa4>)
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f994 	bl	80047e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	69b9      	ldr	r1, [r7, #24]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f89d 	bl	8004600 <I2C_WaitOnTXISFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e02c      	b.n	800452a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d6:	893b      	ldrh	r3, [r7, #8]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
 80044e0:	e015      	b.n	800450e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044e2:	893b      	ldrh	r3, [r7, #8]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f883 	bl	8004600 <I2C_WaitOnTXISFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e012      	b.n	800452a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2200      	movs	r2, #0
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f831 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	80002000 	.word	0x80002000

08004538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d103      	bne.n	8004556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d007      	beq.n	8004574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	619a      	str	r2, [r3, #24]
  }
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004590:	e022      	b.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d01e      	beq.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7ff f831 	bl	8003600 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d113      	bne.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e00f      	b.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d0cd      	beq.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800460c:	e02c      	b.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f870 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e02a      	b.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d01e      	beq.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fe ffe9 	bl	8003600 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d113      	bne.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	f043 0220 	orr.w	r2, r3, #32
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e007      	b.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d1cb      	bne.n	800460e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800468c:	e028      	b.n	80046e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f830 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e026      	b.n	80046f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fe ffad 	bl	8003600 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d113      	bne.n	80046e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e007      	b.n	80046f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d1cf      	bne.n	800468e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b10      	cmp	r3, #16
 8004710:	d161      	bne.n	80047d6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004720:	d02b      	beq.n	800477a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004730:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004732:	e022      	b.n	800477a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d01e      	beq.n	800477a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7fe ff60 	bl	8003600 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_IsAcknowledgeFailed+0x5a>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d113      	bne.n	800477a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f043 0220 	orr.w	r2, r3, #32
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e02e      	b.n	80047d8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b20      	cmp	r3, #32
 8004786:	d1d5      	bne.n	8004734 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2210      	movs	r2, #16
 800478e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2220      	movs	r2, #32
 8004796:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fecd 	bl	8004538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <I2C_IsAcknowledgeFailed+0xe8>)
 80047aa:	400b      	ands	r3, r1
 80047ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f043 0204 	orr.w	r2, r3, #4
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	fe00e800 	.word	0xfe00e800

080047e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	817b      	strh	r3, [r7, #10]
 80047f2:	4613      	mov	r3, r2
 80047f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	0d5b      	lsrs	r3, r3, #21
 8004800:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <I2C_TransferConfig+0x58>)
 8004806:	430b      	orrs	r3, r1
 8004808:	43db      	mvns	r3, r3
 800480a:	ea02 0103 	and.w	r1, r2, r3
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004814:	7a7b      	ldrb	r3, [r7, #9]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	431a      	orrs	r2, r3
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	03ff63ff 	.word	0x03ff63ff

08004840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	d138      	bne.n	80048c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004860:	2302      	movs	r3, #2
 8004862:	e032      	b.n	80048ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004892:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d139      	bne.n	8004960 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e033      	b.n	8004962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004928:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004976:	af00      	add	r7, sp, #0
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f000 bef4 	b.w	8005772 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 816a 	beq.w	8004c6e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800499a:	4bb3      	ldr	r3, [pc, #716]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d00c      	beq.n	80049c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049a6:	4bb0      	ldr	r3, [pc, #704]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d159      	bne.n	8004a66 <HAL_RCC_OscConfig+0xf6>
 80049b2:	4bad      	ldr	r3, [pc, #692]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049be:	d152      	bne.n	8004a66 <HAL_RCC_OscConfig+0xf6>
 80049c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80049cc:	fa93 f3a3 	rbit	r3, r3
 80049d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HAL_RCC_OscConfig+0x82>
 80049ec:	4b9e      	ldr	r3, [pc, #632]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	e015      	b.n	8004a1e <HAL_RCC_OscConfig+0xae>
 80049f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80049fe:	fa93 f3a3 	rbit	r3, r3
 8004a02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a0a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a0e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a1a:	4b93      	ldr	r3, [pc, #588]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a2a:	fa92 f2a2 	rbit	r2, r2
 8004a2e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a32:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a36:	fab2 f282 	clz	r2, r2
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	f042 0220 	orr.w	r2, r2, #32
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	f002 021f 	and.w	r2, r2, #31
 8004a46:	2101      	movs	r1, #1
 8004a48:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 810c 	beq.w	8004c6c <HAL_RCC_OscConfig+0x2fc>
 8004a54:	1d3b      	adds	r3, r7, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 8106 	bne.w	8004c6c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f000 be86 	b.w	8005772 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d106      	bne.n	8004a80 <HAL_RCC_OscConfig+0x110>
 8004a72:	4b7d      	ldr	r3, [pc, #500]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a7c      	ldr	r2, [pc, #496]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e030      	b.n	8004ae2 <HAL_RCC_OscConfig+0x172>
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x134>
 8004a8a:	4b77      	ldr	r3, [pc, #476]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a76      	ldr	r2, [pc, #472]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b74      	ldr	r3, [pc, #464]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a73      	ldr	r2, [pc, #460]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e01e      	b.n	8004ae2 <HAL_RCC_OscConfig+0x172>
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aae:	d10c      	bne.n	8004aca <HAL_RCC_OscConfig+0x15a>
 8004ab0:	4b6d      	ldr	r3, [pc, #436]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a6c      	ldr	r2, [pc, #432]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4b6a      	ldr	r3, [pc, #424]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a69      	ldr	r2, [pc, #420]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	e00b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x172>
 8004aca:	4b67      	ldr	r3, [pc, #412]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a66      	ldr	r2, [pc, #408]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b64      	ldr	r3, [pc, #400]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a63      	ldr	r2, [pc, #396]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ae2:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f023 020f 	bic.w	r2, r3, #15
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	495d      	ldr	r1, [pc, #372]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af6:	1d3b      	adds	r3, r7, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d059      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fe fd7e 	bl	8003600 <HAL_GetTick>
 8004b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b0a:	f7fe fd79 	bl	8003600 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d902      	bls.n	8004b20 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	f000 be29 	b.w	8005772 <HAL_RCC_OscConfig+0xe02>
 8004b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <HAL_RCC_OscConfig+0x1e2>
 8004b4c:	4b46      	ldr	r3, [pc, #280]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	e015      	b.n	8004b7e <HAL_RCC_OscConfig+0x20e>
 8004b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b6e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b7a:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b8a:	fa92 f2a2 	rbit	r2, r2
 8004b8e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b92:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b96:	fab2 f282 	clz	r2, r2
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	f042 0220 	orr.w	r2, r2, #32
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	f002 021f 	and.w	r2, r2, #31
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ab      	beq.n	8004b0a <HAL_RCC_OscConfig+0x19a>
 8004bb2:	e05c      	b.n	8004c6e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fe fd24 	bl	8003600 <HAL_GetTick>
 8004bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bbe:	f7fe fd1f 	bl	8003600 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	; 0x64
 8004bcc:	d902      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f000 bdcf 	b.w	8005772 <HAL_RCC_OscConfig+0xe02>
 8004bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bdc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004be0:	fa93 f3a3 	rbit	r3, r3
 8004be4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004be8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCC_OscConfig+0x296>
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x2c2>
 8004c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c3e:	fa92 f2a2 	rbit	r2, r2
 8004c42:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c46:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c4a:	fab2 f282 	clz	r2, r2
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	f042 0220 	orr.w	r2, r2, #32
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	f002 021f 	and.w	r2, r2, #31
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ab      	bne.n	8004bbe <HAL_RCC_OscConfig+0x24e>
 8004c66:	e002      	b.n	8004c6e <HAL_RCC_OscConfig+0x2fe>
 8004c68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 816f 	beq.w	8004f5c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c7e:	4bd0      	ldr	r3, [pc, #832]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c8a:	4bcd      	ldr	r3, [pc, #820]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d16c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x400>
 8004c96:	4bca      	ldr	r3, [pc, #808]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d166      	bne.n	8004d70 <HAL_RCC_OscConfig+0x400>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004cac:	fa93 f3a3 	rbit	r3, r3
 8004cb0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004cb4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb8:	fab3 f383 	clz	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d102      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x362>
 8004ccc:	4bbc      	ldr	r3, [pc, #752]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	e013      	b.n	8004cfa <HAL_RCC_OscConfig+0x38a>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004cea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004cee:	fa93 f3a3 	rbit	r3, r3
 8004cf2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cf6:	4bb2      	ldr	r3, [pc, #712]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d00:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d04:	fa92 f2a2 	rbit	r2, r2
 8004d08:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d0c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d10:	fab2 f282 	clz	r2, r2
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	f042 0220 	orr.w	r2, r2, #32
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	f002 021f 	and.w	r2, r2, #31
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f202 	lsl.w	r2, r1, r2
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_RCC_OscConfig+0x3cc>
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d002      	beq.n	8004d3c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f000 bd1b 	b.w	8005772 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	4ba0      	ldr	r3, [pc, #640]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d44:	1d3b      	adds	r3, r7, #4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	21f8      	movs	r1, #248	; 0xf8
 8004d4c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d54:	fa91 f1a1 	rbit	r1, r1
 8004d58:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d5c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d60:	fab1 f181 	clz	r1, r1
 8004d64:	b2c9      	uxtb	r1, r1
 8004d66:	408b      	lsls	r3, r1
 8004d68:	4995      	ldr	r1, [pc, #596]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	e0f5      	b.n	8004f5c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8085 	beq.w	8004e86 <HAL_RCC_OscConfig+0x516>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d86:	fa93 f3a3 	rbit	r3, r3
 8004d8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d92:	fab3 f383 	clz	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	461a      	mov	r2, r3
 8004da4:	2301      	movs	r3, #1
 8004da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da8:	f7fe fc2a 	bl	8003600 <HAL_GetTick>
 8004dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fe fc25 	bl	8003600 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d902      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	f000 bcd5 	b.w	8005772 <HAL_RCC_OscConfig+0xe02>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004dd2:	fa93 f3a3 	rbit	r3, r3
 8004dd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004dda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dde:	fab3 f383 	clz	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d102      	bne.n	8004df8 <HAL_RCC_OscConfig+0x488>
 8004df2:	4b73      	ldr	r3, [pc, #460]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	e013      	b.n	8004e20 <HAL_RCC_OscConfig+0x4b0>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e1c:	4b68      	ldr	r3, [pc, #416]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	2202      	movs	r2, #2
 8004e22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e2a:	fa92 f2a2 	rbit	r2, r2
 8004e2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e36:	fab2 f282 	clz	r2, r2
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	f042 0220 	orr.w	r2, r2, #32
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	f002 021f 	and.w	r2, r2, #31
 8004e46:	2101      	movs	r1, #1
 8004e48:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0af      	beq.n	8004db2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e52:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	21f8      	movs	r1, #248	; 0xf8
 8004e62:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e6a:	fa91 f1a1 	rbit	r1, r1
 8004e6e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e72:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e76:	fab1 f181 	clz	r1, r1
 8004e7a:	b2c9      	uxtb	r1, r1
 8004e7c:	408b      	lsls	r3, r1
 8004e7e:	4950      	ldr	r1, [pc, #320]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	600b      	str	r3, [r1, #0]
 8004e84:	e06a      	b.n	8004f5c <HAL_RCC_OscConfig+0x5ec>
 8004e86:	2301      	movs	r3, #1
 8004e88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9c:	fab3 f383 	clz	r3, r3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ea6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fe fba5 	bl	8003600 <HAL_GetTick>
 8004eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ebc:	f7fe fba0 	bl	8003600 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d902      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	f000 bc50 	b.w	8005772 <HAL_RCC_OscConfig+0xe02>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d102      	bne.n	8004f02 <HAL_RCC_OscConfig+0x592>
 8004efc:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	e013      	b.n	8004f2a <HAL_RCC_OscConfig+0x5ba>
 8004f02:	2302      	movs	r3, #2
 8004f04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f0c:	fa93 f3a3 	rbit	r3, r3
 8004f10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f14:	2302      	movs	r3, #2
 8004f16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <HAL_RCC_OscConfig+0x650>)
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f30:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f34:	fa92 f2a2 	rbit	r2, r2
 8004f38:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f40:	fab2 f282 	clz	r2, r2
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	f042 0220 	orr.w	r2, r2, #32
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	f002 021f 	and.w	r2, r2, #31
 8004f50:	2101      	movs	r1, #1
 8004f52:	fa01 f202 	lsl.w	r2, r1, r2
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1af      	bne.n	8004ebc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80da 	beq.w	8005120 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f6c:	1d3b      	adds	r3, r7, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d069      	beq.n	800504a <HAL_RCC_OscConfig+0x6da>
 8004f76:	2301      	movs	r3, #1
 8004f78:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f80:	fa93 f3a3 	rbit	r3, r3
 8004f84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8c:	fab3 f383 	clz	r3, r3
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_OscConfig+0x654>)
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa0:	f7fe fb2e 	bl	8003600 <HAL_GetTick>
 8004fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa8:	e00e      	b.n	8004fc8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004faa:	f7fe fb29 	bl	8003600 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d906      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e3d9      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	10908120 	.word	0x10908120
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004fde:	2202      	movs	r2, #2
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	fa93 f2a3 	rbit	r2, r3
 8004fec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	fa93 f2a3 	rbit	r2, r3
 8005004:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005008:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	4ba5      	ldr	r3, [pc, #660]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 800500c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800500e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005012:	2102      	movs	r1, #2
 8005014:	6019      	str	r1, [r3, #0]
 8005016:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa93 f1a3 	rbit	r1, r3
 8005020:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005024:	6019      	str	r1, [r3, #0]
  return result;
 8005026:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	fab3 f383 	clz	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0b0      	beq.n	8004faa <HAL_RCC_OscConfig+0x63a>
 8005048:	e06a      	b.n	8005120 <HAL_RCC_OscConfig+0x7b0>
 800504a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	fa93 f2a3 	rbit	r2, r3
 800505c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005060:	601a      	str	r2, [r3, #0]
  return result;
 8005062:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005066:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	4b8c      	ldr	r3, [pc, #560]	; (80052a4 <HAL_RCC_OscConfig+0x934>)
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507c:	f7fe fac0 	bl	8003600 <HAL_GetTick>
 8005080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005084:	e009      	b.n	800509a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005086:	f7fe fabb 	bl	8003600 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e36b      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
 800509a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800509e:	2202      	movs	r2, #2
 80050a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	fa93 f2a3 	rbit	r2, r3
 80050ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80050b6:	2202      	movs	r2, #2
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	fa93 f2a3 	rbit	r2, r3
 80050c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050ce:	2202      	movs	r2, #2
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	fa93 f2a3 	rbit	r2, r3
 80050dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e2:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80050e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050ea:	2102      	movs	r1, #2
 80050ec:	6019      	str	r1, [r3, #0]
 80050ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	fa93 f1a3 	rbit	r1, r3
 80050f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80050fc:	6019      	str	r1, [r3, #0]
  return result;
 80050fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2101      	movs	r1, #1
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1b2      	bne.n	8005086 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8158 	beq.w	80053e0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005130:	2300      	movs	r3, #0
 8005132:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005136:	4b5a      	ldr	r3, [pc, #360]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d112      	bne.n	8005168 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005142:	4b57      	ldr	r3, [pc, #348]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	4a56      	ldr	r2, [pc, #344]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 8005148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514c:	61d3      	str	r3, [r2, #28]
 800514e:	4b54      	ldr	r3, [pc, #336]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005156:	f107 0308 	add.w	r3, r7, #8
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005168:	4b4f      	ldr	r3, [pc, #316]	; (80052a8 <HAL_RCC_OscConfig+0x938>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11a      	bne.n	80051aa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005174:	4b4c      	ldr	r3, [pc, #304]	; (80052a8 <HAL_RCC_OscConfig+0x938>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a4b      	ldr	r2, [pc, #300]	; (80052a8 <HAL_RCC_OscConfig+0x938>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005180:	f7fe fa3e 	bl	8003600 <HAL_GetTick>
 8005184:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005188:	e009      	b.n	800519e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518a:	f7fe fa39 	bl	8003600 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	; 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e2e9      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_RCC_OscConfig+0x938>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0ef      	beq.n	800518a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051aa:	1d3b      	adds	r3, r7, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <HAL_RCC_OscConfig+0x852>
 80051b4:	4b3a      	ldr	r3, [pc, #232]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6213      	str	r3, [r2, #32]
 80051c0:	e02f      	b.n	8005222 <HAL_RCC_OscConfig+0x8b2>
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10c      	bne.n	80051e6 <HAL_RCC_OscConfig+0x876>
 80051cc:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4a33      	ldr	r2, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	6213      	str	r3, [r2, #32]
 80051d8:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051de:	f023 0304 	bic.w	r3, r3, #4
 80051e2:	6213      	str	r3, [r2, #32]
 80051e4:	e01d      	b.n	8005222 <HAL_RCC_OscConfig+0x8b2>
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d10c      	bne.n	800520a <HAL_RCC_OscConfig+0x89a>
 80051f0:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	6213      	str	r3, [r2, #32]
 80051fc:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6213      	str	r3, [r2, #32]
 8005208:	e00b      	b.n	8005222 <HAL_RCC_OscConfig+0x8b2>
 800520a:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6213      	str	r3, [r2, #32]
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d06b      	beq.n	8005304 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522c:	f7fe f9e8 	bl	8003600 <HAL_GetTick>
 8005230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005234:	e00b      	b.n	800524e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005236:	f7fe f9e3 	bl	8003600 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	; 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e291      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
 800524e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005252:	2202      	movs	r2, #2
 8005254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	fa93 f2a3 	rbit	r2, r3
 8005260:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800526a:	2202      	movs	r2, #2
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	fa93 f2a3 	rbit	r2, r3
 8005278:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800527c:	601a      	str	r2, [r3, #0]
  return result;
 800527e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005282:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f043 0302 	orr.w	r3, r3, #2
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d109      	bne.n	80052ac <HAL_RCC_OscConfig+0x93c>
 8005298:	4b01      	ldr	r3, [pc, #4]	; (80052a0 <HAL_RCC_OscConfig+0x930>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	e014      	b.n	80052c8 <HAL_RCC_OscConfig+0x958>
 800529e:	bf00      	nop
 80052a0:	40021000 	.word	0x40021000
 80052a4:	10908120 	.word	0x10908120
 80052a8:	40007000 	.word	0x40007000
 80052ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80052b0:	2202      	movs	r2, #2
 80052b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	fa93 f2a3 	rbit	r2, r3
 80052be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	4bbb      	ldr	r3, [pc, #748]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80052cc:	2102      	movs	r1, #2
 80052ce:	6011      	str	r1, [r2, #0]
 80052d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	fa92 f1a2 	rbit	r1, r2
 80052da:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052de:	6011      	str	r1, [r2, #0]
  return result;
 80052e0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	fab2 f282 	clz	r2, r2
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	f002 021f 	and.w	r2, r2, #31
 80052f6:	2101      	movs	r1, #1
 80052f8:	fa01 f202 	lsl.w	r2, r1, r2
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d099      	beq.n	8005236 <HAL_RCC_OscConfig+0x8c6>
 8005302:	e063      	b.n	80053cc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005304:	f7fe f97c 	bl	8003600 <HAL_GetTick>
 8005308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530c:	e00b      	b.n	8005326 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fe f977 	bl	8003600 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f241 3288 	movw	r2, #5000	; 0x1388
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e225      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
 8005326:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800532a:	2202      	movs	r2, #2
 800532c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	fa93 f2a3 	rbit	r2, r3
 8005338:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005342:	2202      	movs	r2, #2
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	fa93 f2a3 	rbit	r2, r3
 8005350:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005354:	601a      	str	r2, [r3, #0]
  return result;
 8005356:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800535a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535c:	fab3 f383 	clz	r3, r3
 8005360:	b2db      	uxtb	r3, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f043 0302 	orr.w	r3, r3, #2
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d102      	bne.n	8005376 <HAL_RCC_OscConfig+0xa06>
 8005370:	4b90      	ldr	r3, [pc, #576]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	e00d      	b.n	8005392 <HAL_RCC_OscConfig+0xa22>
 8005376:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800537a:	2202      	movs	r2, #2
 800537c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	fa93 f2a3 	rbit	r2, r3
 8005388:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	4b89      	ldr	r3, [pc, #548]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005396:	2102      	movs	r1, #2
 8005398:	6011      	str	r1, [r2, #0]
 800539a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	fa92 f1a2 	rbit	r1, r2
 80053a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80053a8:	6011      	str	r1, [r2, #0]
  return result;
 80053aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	fab2 f282 	clz	r2, r2
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	f002 021f 	and.w	r2, r2, #31
 80053c0:	2101      	movs	r1, #1
 80053c2:	fa01 f202 	lsl.w	r2, r1, r2
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1a0      	bne.n	800530e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d4:	4b77      	ldr	r3, [pc, #476]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	4a76      	ldr	r2, [pc, #472]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e0:	1d3b      	adds	r3, r7, #4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 81c2 	beq.w	8005770 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ec:	4b71      	ldr	r3, [pc, #452]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 030c 	and.w	r3, r3, #12
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	f000 819c 	beq.w	8005732 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b02      	cmp	r3, #2
 8005402:	f040 8114 	bne.w	800562e <HAL_RCC_OscConfig+0xcbe>
 8005406:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800540a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800540e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	fa93 f2a3 	rbit	r2, r3
 800541a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800541e:	601a      	str	r2, [r3, #0]
  return result;
 8005420:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005424:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fe f8e0 	bl	8003600 <HAL_GetTick>
 8005440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005444:	e009      	b.n	800545a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005446:	f7fe f8db 	bl	8003600 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e18b      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
 800545a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800545e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005464:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	fa93 f2a3 	rbit	r2, r3
 800546e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005472:	601a      	str	r2, [r3, #0]
  return result;
 8005474:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005478:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d102      	bne.n	8005494 <HAL_RCC_OscConfig+0xb24>
 800548e:	4b49      	ldr	r3, [pc, #292]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	e01b      	b.n	80054cc <HAL_RCC_OscConfig+0xb5c>
 8005494:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800549c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	fa93 f2a3 	rbit	r2, r3
 80054a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	fa93 f2a3 	rbit	r2, r3
 80054c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	4b3a      	ldr	r3, [pc, #232]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80054d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	fa92 f1a2 	rbit	r1, r2
 80054e0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054e4:	6011      	str	r1, [r2, #0]
  return result;
 80054e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	fab2 f282 	clz	r2, r2
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	f042 0220 	orr.w	r2, r2, #32
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	f002 021f 	and.w	r2, r2, #31
 80054fc:	2101      	movs	r1, #1
 80054fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d19e      	bne.n	8005446 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005508:	4b2a      	ldr	r3, [pc, #168]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	430b      	orrs	r3, r1
 800551e:	4925      	ldr	r1, [pc, #148]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
 8005524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800552c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	fa93 f2a3 	rbit	r2, r3
 8005538:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800553c:	601a      	str	r2, [r3, #0]
  return result;
 800553e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005542:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005544:	fab3 f383 	clz	r3, r3
 8005548:	b2db      	uxtb	r3, r3
 800554a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800554e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	461a      	mov	r2, r3
 8005556:	2301      	movs	r3, #1
 8005558:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fe f851 	bl	8003600 <HAL_GetTick>
 800555e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005562:	e009      	b.n	8005578 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005564:	f7fe f84c 	bl	8003600 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0fc      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
 8005578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800557c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005582:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	fa93 f2a3 	rbit	r2, r3
 800558c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005590:	601a      	str	r2, [r3, #0]
  return result;
 8005592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005596:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005598:	fab3 f383 	clz	r3, r3
 800559c:	b2db      	uxtb	r3, r3
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d105      	bne.n	80055b8 <HAL_RCC_OscConfig+0xc48>
 80055ac:	4b01      	ldr	r3, [pc, #4]	; (80055b4 <HAL_RCC_OscConfig+0xc44>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	e01e      	b.n	80055f0 <HAL_RCC_OscConfig+0xc80>
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000
 80055b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	fa93 f2a3 	rbit	r2, r3
 80055cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	fa93 f2a3 	rbit	r2, r3
 80055e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	4b63      	ldr	r3, [pc, #396]	; (800577c <HAL_RCC_OscConfig+0xe0c>)
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80055f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055f8:	6011      	str	r1, [r2, #0]
 80055fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	fa92 f1a2 	rbit	r1, r2
 8005604:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005608:	6011      	str	r1, [r2, #0]
  return result;
 800560a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	fab2 f282 	clz	r2, r2
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	f042 0220 	orr.w	r2, r2, #32
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	f002 021f 	and.w	r2, r2, #31
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f202 	lsl.w	r2, r1, r2
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d09b      	beq.n	8005564 <HAL_RCC_OscConfig+0xbf4>
 800562c:	e0a0      	b.n	8005770 <HAL_RCC_OscConfig+0xe00>
 800562e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005632:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	fa93 f2a3 	rbit	r2, r3
 8005642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005646:	601a      	str	r2, [r3, #0]
  return result;
 8005648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800564c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005658:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7fd ffcc 	bl	8003600 <HAL_GetTick>
 8005668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800566c:	e009      	b.n	8005682 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566e:	f7fd ffc7 	bl	8003600 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e077      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
 8005682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800568a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	fa93 f2a3 	rbit	r2, r3
 8005696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800569a:	601a      	str	r2, [r3, #0]
  return result;
 800569c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d102      	bne.n	80056bc <HAL_RCC_OscConfig+0xd4c>
 80056b6:	4b31      	ldr	r3, [pc, #196]	; (800577c <HAL_RCC_OscConfig+0xe0c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	e01b      	b.n	80056f4 <HAL_RCC_OscConfig+0xd84>
 80056bc:	f107 0320 	add.w	r3, r7, #32
 80056c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	f107 0320 	add.w	r3, r7, #32
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	fa93 f2a3 	rbit	r2, r3
 80056d0:	f107 031c 	add.w	r3, r7, #28
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	f107 0318 	add.w	r3, r7, #24
 80056da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f107 0318 	add.w	r3, r7, #24
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	fa93 f2a3 	rbit	r2, r3
 80056ea:	f107 0314 	add.w	r3, r7, #20
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	4b22      	ldr	r3, [pc, #136]	; (800577c <HAL_RCC_OscConfig+0xe0c>)
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f107 0210 	add.w	r2, r7, #16
 80056f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	f107 0210 	add.w	r2, r7, #16
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	fa92 f1a2 	rbit	r1, r2
 8005708:	f107 020c 	add.w	r2, r7, #12
 800570c:	6011      	str	r1, [r2, #0]
  return result;
 800570e:	f107 020c 	add.w	r2, r7, #12
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	fab2 f282 	clz	r2, r2
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	f042 0220 	orr.w	r2, r2, #32
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	f002 021f 	and.w	r2, r2, #31
 8005724:	2101      	movs	r1, #1
 8005726:	fa01 f202 	lsl.w	r2, r1, r2
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d19e      	bne.n	800566e <HAL_RCC_OscConfig+0xcfe>
 8005730:	e01e      	b.n	8005770 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e018      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005740:	4b0e      	ldr	r3, [pc, #56]	; (800577c <HAL_RCC_OscConfig+0xe0c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005748:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800574c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	429a      	cmp	r2, r3
 8005758:	d108      	bne.n	800576c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800575a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800575e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40021000 	.word	0x40021000

08005780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b09e      	sub	sp, #120	; 0x78
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e162      	b.n	8005a5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005798:	4b90      	ldr	r3, [pc, #576]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d910      	bls.n	80057c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a6:	4b8d      	ldr	r3, [pc, #564]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f023 0207 	bic.w	r2, r3, #7
 80057ae:	498b      	ldr	r1, [pc, #556]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b6:	4b89      	ldr	r3, [pc, #548]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e14a      	b.n	8005a5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d4:	4b82      	ldr	r3, [pc, #520]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	497f      	ldr	r1, [pc, #508]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80dc 	beq.w	80059ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d13c      	bne.n	8005876 <HAL_RCC_ClockConfig+0xf6>
 80057fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005800:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005804:	fa93 f3a3 	rbit	r3, r3
 8005808:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800580a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d102      	bne.n	8005826 <HAL_RCC_ClockConfig+0xa6>
 8005820:	4b6f      	ldr	r3, [pc, #444]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	e00f      	b.n	8005846 <HAL_RCC_ClockConfig+0xc6>
 8005826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800582a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	667b      	str	r3, [r7, #100]	; 0x64
 8005834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005838:	663b      	str	r3, [r7, #96]	; 0x60
 800583a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005842:	4b67      	ldr	r3, [pc, #412]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800584a:	65ba      	str	r2, [r7, #88]	; 0x58
 800584c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800584e:	fa92 f2a2 	rbit	r2, r2
 8005852:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005856:	fab2 f282 	clz	r2, r2
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	f042 0220 	orr.w	r2, r2, #32
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	f002 021f 	and.w	r2, r2, #31
 8005866:	2101      	movs	r1, #1
 8005868:	fa01 f202 	lsl.w	r2, r1, r2
 800586c:	4013      	ands	r3, r2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d17b      	bne.n	800596a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0f3      	b.n	8005a5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d13c      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x178>
 800587e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005882:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005886:	fa93 f3a3 	rbit	r3, r3
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800588c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x128>
 80058a2:	4b4f      	ldr	r3, [pc, #316]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	e00f      	b.n	80058c8 <HAL_RCC_ClockConfig+0x148>
 80058a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b0:	fa93 f3a3 	rbit	r3, r3
 80058b4:	647b      	str	r3, [r7, #68]	; 0x44
 80058b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ba:	643b      	str	r3, [r7, #64]	; 0x40
 80058bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058be:	fa93 f3a3 	rbit	r3, r3
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c4:	4b46      	ldr	r3, [pc, #280]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80058ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d0:	fa92 f2a2 	rbit	r2, r2
 80058d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80058d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d8:	fab2 f282 	clz	r2, r2
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	f042 0220 	orr.w	r2, r2, #32
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	f002 021f 	and.w	r2, r2, #31
 80058e8:	2101      	movs	r1, #1
 80058ea:	fa01 f202 	lsl.w	r2, r1, r2
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d13a      	bne.n	800596a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0b2      	b.n	8005a5e <HAL_RCC_ClockConfig+0x2de>
 80058f8:	2302      	movs	r3, #2
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005906:	fab3 f383 	clz	r3, r3
 800590a:	b2db      	uxtb	r3, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d102      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	e00d      	b.n	800593c <HAL_RCC_ClockConfig+0x1bc>
 8005920:	2302      	movs	r3, #2
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
 800592c:	2302      	movs	r3, #2
 800592e:	623b      	str	r3, [r7, #32]
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	fa93 f3a3 	rbit	r3, r3
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	4b29      	ldr	r3, [pc, #164]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2202      	movs	r2, #2
 800593e:	61ba      	str	r2, [r7, #24]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	fa92 f2a2 	rbit	r2, r2
 8005946:	617a      	str	r2, [r7, #20]
  return result;
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	fab2 f282 	clz	r2, r2
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	f042 0220 	orr.w	r2, r2, #32
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	f002 021f 	and.w	r2, r2, #31
 800595a:	2101      	movs	r1, #1
 800595c:	fa01 f202 	lsl.w	r2, r1, r2
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e079      	b.n	8005a5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596a:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f023 0203 	bic.w	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	491a      	ldr	r1, [pc, #104]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005978:	4313      	orrs	r3, r2
 800597a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800597c:	f7fd fe40 	bl	8003600 <HAL_GetTick>
 8005980:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	e00a      	b.n	800599a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005984:	f7fd fe3c 	bl	8003600 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e061      	b.n	8005a5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 020c 	and.w	r2, r3, #12
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d1eb      	bne.n	8005984 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d214      	bcs.n	80059e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 0207 	bic.w	r2, r3, #7
 80059c2:	4906      	ldr	r1, [pc, #24]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <HAL_RCC_ClockConfig+0x25c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e040      	b.n	8005a5e <HAL_RCC_ClockConfig+0x2de>
 80059dc:	40022000 	.word	0x40022000
 80059e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_RCC_ClockConfig+0x2e8>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	491a      	ldr	r1, [pc, #104]	; (8005a68 <HAL_RCC_ClockConfig+0x2e8>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a0e:	4b16      	ldr	r3, [pc, #88]	; (8005a68 <HAL_RCC_ClockConfig+0x2e8>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4912      	ldr	r1, [pc, #72]	; (8005a68 <HAL_RCC_ClockConfig+0x2e8>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a22:	f000 f829 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005a26:	4601      	mov	r1, r0
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <HAL_RCC_ClockConfig+0x2e8>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a30:	22f0      	movs	r2, #240	; 0xf0
 8005a32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	fa92 f2a2 	rbit	r2, r2
 8005a3a:	60fa      	str	r2, [r7, #12]
  return result;
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	fab2 f282 	clz	r2, r2
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	40d3      	lsrs	r3, r2
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <HAL_RCC_ClockConfig+0x2ec>)
 8005a48:	5cd3      	ldrb	r3, [r2, r3]
 8005a4a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <HAL_RCC_ClockConfig+0x2f0>)
 8005a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <HAL_RCC_ClockConfig+0x2f4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fd fd8e 	bl	8003578 <HAL_InitTick>
  
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3778      	adds	r7, #120	; 0x78
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	08009b4c 	.word	0x08009b4c
 8005a70:	20000178 	.word	0x20000178
 8005a74:	2000017c 	.word	0x2000017c

08005a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b08b      	sub	sp, #44	; 0x2c
 8005a7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	2300      	movs	r3, #0
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005a92:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d002      	beq.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x30>
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d003      	beq.n	8005aae <HAL_RCC_GetSysClockFreq+0x36>
 8005aa6:	e03c      	b.n	8005b22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005aa8:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005aaa:	623b      	str	r3, [r7, #32]
      break;
 8005aac:	e03c      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ab4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ab8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	fa92 f2a2 	rbit	r2, r2
 8005ac0:	607a      	str	r2, [r7, #4]
  return result;
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	fab2 f282 	clz	r2, r2
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	40d3      	lsrs	r3, r2
 8005acc:	4a1c      	ldr	r2, [pc, #112]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ace:	5cd3      	ldrb	r3, [r2, r3]
 8005ad0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005ad2:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	220f      	movs	r2, #15
 8005adc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	fa92 f2a2 	rbit	r2, r2
 8005ae4:	60fa      	str	r2, [r7, #12]
  return result;
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	fab2 f282 	clz	r2, r2
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	40d3      	lsrs	r3, r2
 8005af0:	4a14      	ldr	r2, [pc, #80]	; (8005b44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005af2:	5cd3      	ldrb	r3, [r2, r3]
 8005af4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b00:	4a0e      	ldr	r2, [pc, #56]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b10:	e004      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	623b      	str	r3, [r7, #32]
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b24:	623b      	str	r3, [r7, #32]
      break;
 8005b26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b28:	6a3b      	ldr	r3, [r7, #32]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	372c      	adds	r7, #44	; 0x2c
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	007a1200 	.word	0x007a1200
 8005b40:	08009b64 	.word	0x08009b64
 8005b44:	08009b74 	.word	0x08009b74
 8005b48:	003d0900 	.word	0x003d0900

08005b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b52:	681b      	ldr	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000178 	.word	0x20000178

08005b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b6a:	f7ff ffef 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005b6e:	4601      	mov	r1, r0
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	fa92 f2a2 	rbit	r2, r2
 8005b84:	603a      	str	r2, [r7, #0]
  return result;
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	fab2 f282 	clz	r2, r2
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	40d3      	lsrs	r3, r2
 8005b90:	4a04      	ldr	r2, [pc, #16]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005b92:	5cd3      	ldrb	r3, [r2, r3]
 8005b94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	08009b5c 	.word	0x08009b5c

08005ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005bae:	f7ff ffcd 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005bbc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	fa92 f2a2 	rbit	r2, r2
 8005bc8:	603a      	str	r2, [r7, #0]
  return result;
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	fab2 f282 	clz	r2, r2
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	40d3      	lsrs	r3, r2
 8005bd4:	4a04      	ldr	r2, [pc, #16]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40021000 	.word	0x40021000
 8005be8:	08009b5c 	.word	0x08009b5c

08005bec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b092      	sub	sp, #72	; 0x48
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80d4 	beq.w	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c10:	4b4e      	ldr	r3, [pc, #312]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10e      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1c:	4b4b      	ldr	r3, [pc, #300]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	4a4a      	ldr	r2, [pc, #296]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c26:	61d3      	str	r3, [r2, #28]
 8005c28:	4b48      	ldr	r3, [pc, #288]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3a:	4b45      	ldr	r3, [pc, #276]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d118      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c46:	4b42      	ldr	r3, [pc, #264]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a41      	ldr	r2, [pc, #260]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c52:	f7fd fcd5 	bl	8003600 <HAL_GetTick>
 8005c56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5a:	f7fd fcd1 	bl	8003600 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b64      	cmp	r3, #100	; 0x64
 8005c66:	d901      	bls.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e169      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6c:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c78:	4b34      	ldr	r3, [pc, #208]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8084 	beq.w	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d07c      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c98:	4b2c      	ldr	r3, [pc, #176]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ca6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	fa93 f3a3 	rbit	r3, r3
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cb2:	fab3 f383 	clz	r3, r3
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4b26      	ldr	r3, [pc, #152]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	fa93 f3a3 	rbit	r3, r3
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd6:	fab3 f383 	clz	r3, r3
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cea:	4a18      	ldr	r2, [pc, #96]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04b      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfa:	f7fd fc81 	bl	8003600 <HAL_GetTick>
 8005cfe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d00:	e00a      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fd fc7d 	bl	8003600 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e113      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	fa93 f3a3 	rbit	r3, r3
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
 8005d24:	2302      	movs	r3, #2
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	fa93 f3a3 	rbit	r3, r3
 8005d2e:	61fb      	str	r3, [r7, #28]
  return result;
 8005d30:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f043 0302 	orr.w	r3, r3, #2
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d108      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005d46:	4b01      	ldr	r3, [pc, #4]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	e00d      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40007000 	.word	0x40007000
 8005d54:	10908100 	.word	0x10908100
 8005d58:	2302      	movs	r3, #2
 8005d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	fa93 f3a3 	rbit	r3, r3
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	4b78      	ldr	r3, [pc, #480]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2202      	movs	r2, #2
 8005d6a:	613a      	str	r2, [r7, #16]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	fa92 f2a2 	rbit	r2, r2
 8005d72:	60fa      	str	r2, [r7, #12]
  return result;
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	fab2 f282 	clz	r2, r2
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	f002 021f 	and.w	r2, r2, #31
 8005d86:	2101      	movs	r1, #1
 8005d88:	fa01 f202 	lsl.w	r2, r1, r2
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0b7      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	496a      	ldr	r1, [pc, #424]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005da4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d105      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dac:	4b66      	ldr	r3, [pc, #408]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	4a65      	ldr	r2, [pc, #404]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dc4:	4b60      	ldr	r3, [pc, #384]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f023 0203 	bic.w	r2, r3, #3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	495d      	ldr	r1, [pc, #372]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d008      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005de2:	4b59      	ldr	r3, [pc, #356]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4956      	ldr	r1, [pc, #344]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e00:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	494e      	ldr	r1, [pc, #312]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	f023 0210 	bic.w	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4947      	ldr	r1, [pc, #284]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005e3c:	4b42      	ldr	r3, [pc, #264]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	493f      	ldr	r1, [pc, #252]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	f023 0220 	bic.w	r2, r3, #32
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	4938      	ldr	r1, [pc, #224]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e78:	4b33      	ldr	r3, [pc, #204]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	4930      	ldr	r1, [pc, #192]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e96:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	4929      	ldr	r1, [pc, #164]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d008      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005eb4:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	4921      	ldr	r1, [pc, #132]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	491a      	ldr	r1, [pc, #104]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005ef0:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	4912      	ldr	r1, [pc, #72]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	490b      	ldr	r1, [pc, #44]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	4903      	ldr	r1, [pc, #12]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3748      	adds	r7, #72	; 0x48
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000

08005f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e09d      	b.n	800609a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d108      	bne.n	8005f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6e:	d009      	beq.n	8005f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	61da      	str	r2, [r3, #28]
 8005f76:	e005      	b.n	8005f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fd f8ac 	bl	80030fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fc4:	d902      	bls.n	8005fcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e002      	b.n	8005fd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fda:	d007      	beq.n	8005fec <HAL_SPI_Init+0xa0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fe4:	d002      	beq.n	8005fec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	ea42 0103 	orr.w	r1, r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	0c1b      	lsrs	r3, r3, #16
 8006048:	f003 0204 	and.w	r2, r3, #4
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006068:	ea42 0103 	orr.w	r1, r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006088:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e01a      	b.n	80060ea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7fd f857 	bl	8003180 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b08a      	sub	sp, #40	; 0x28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006100:	2301      	movs	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x26>
 8006114:	2302      	movs	r3, #2
 8006116:	e1fb      	b.n	8006510 <HAL_SPI_TransmitReceive+0x41e>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006120:	f7fd fa6e 	bl	8003600 <HAL_GetTick>
 8006124:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800612c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006134:	887b      	ldrh	r3, [r7, #2]
 8006136:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006138:	887b      	ldrh	r3, [r7, #2]
 800613a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800613c:	7efb      	ldrb	r3, [r7, #27]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d00e      	beq.n	8006160 <HAL_SPI_TransmitReceive+0x6e>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006148:	d106      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x66>
 8006152:	7efb      	ldrb	r3, [r7, #27]
 8006154:	2b04      	cmp	r3, #4
 8006156:	d003      	beq.n	8006160 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006158:	2302      	movs	r3, #2
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800615e:	e1cd      	b.n	80064fc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x80>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x80>
 800616c:	887b      	ldrh	r3, [r7, #2]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006178:	e1c0      	b.n	80064fc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b04      	cmp	r3, #4
 8006184:	d003      	beq.n	800618e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2205      	movs	r2, #5
 800618a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	887a      	ldrh	r2, [r7, #2]
 800619e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	887a      	ldrh	r2, [r7, #2]
 80061a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	887a      	ldrh	r2, [r7, #2]
 80061ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061d0:	d802      	bhi.n	80061d8 <HAL_SPI_TransmitReceive+0xe6>
 80061d2:	8a3b      	ldrh	r3, [r7, #16]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d908      	bls.n	80061ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	e007      	b.n	80061fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d007      	beq.n	8006218 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006220:	d97c      	bls.n	800631c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x13e>
 800622a:	8a7b      	ldrh	r3, [r7, #18]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d169      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	881a      	ldrh	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006254:	e056      	b.n	8006304 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b02      	cmp	r3, #2
 8006262:	d11b      	bne.n	800629c <HAL_SPI_TransmitReceive+0x1aa>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <HAL_SPI_TransmitReceive+0x1aa>
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	2b01      	cmp	r3, #1
 8006272:	d113      	bne.n	800629c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	881a      	ldrh	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	1c9a      	adds	r2, r3, #2
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d11c      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x1f2>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	b292      	uxth	r2, r2
 80062c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	1c9a      	adds	r2, r3, #2
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062e0:	2301      	movs	r3, #1
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062e4:	f7fd f98c 	bl	8003600 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d807      	bhi.n	8006304 <HAL_SPI_TransmitReceive+0x212>
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d003      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006302:	e0fb      	b.n	80064fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1a3      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x164>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d19d      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x164>
 800631a:	e0df      	b.n	80064dc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_SPI_TransmitReceive+0x23a>
 8006324:	8a7b      	ldrh	r3, [r7, #18]
 8006326:	2b01      	cmp	r3, #1
 8006328:	f040 80cb 	bne.w	80064c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b01      	cmp	r3, #1
 8006334:	d912      	bls.n	800635c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	881a      	ldrh	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b02      	subs	r3, #2
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	87da      	strh	r2, [r3, #62]	; 0x3e
 800635a:	e0b2      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	7812      	ldrb	r2, [r2, #0]
 8006368:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006382:	e09e      	b.n	80064c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b02      	cmp	r3, #2
 8006390:	d134      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x30a>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d02f      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x30a>
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d12c      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d912      	bls.n	80063d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	881a      	ldrh	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	1c9a      	adds	r2, r3, #2
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b02      	subs	r3, #2
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063d0:	e012      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d148      	bne.n	800649c <HAL_SPI_TransmitReceive+0x3aa>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d042      	beq.n	800649c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	d923      	bls.n	800646a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	b292      	uxth	r2, r2
 800642e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	1c9a      	adds	r2, r3, #2
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b02      	subs	r3, #2
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	d81f      	bhi.n	8006498 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	e016      	b.n	8006498 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f103 020c 	add.w	r2, r3, #12
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006498:	2301      	movs	r3, #1
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800649c:	f7fd f8b0 	bl	8003600 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d803      	bhi.n	80064b4 <HAL_SPI_TransmitReceive+0x3c2>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d102      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x3c8>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064c0:	e01c      	b.n	80064fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f47f af5b 	bne.w	8006384 <HAL_SPI_TransmitReceive+0x292>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f47f af54 	bne.w	8006384 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f945 	bl	8006770 <SPI_EndRxTxTransaction>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60
 80064f8:	e000      	b.n	80064fc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80064fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800650c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006510:	4618      	mov	r0, r3
 8006512:	3728      	adds	r7, #40	; 0x28
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006526:	b2db      	uxtb	r3, r3
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006544:	f7fd f85c 	bl	8003600 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4413      	add	r3, r2
 8006552:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006554:	f7fd f854 	bl	8003600 <HAL_GetTick>
 8006558:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800655a:	4b39      	ldr	r3, [pc, #228]	; (8006640 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	015b      	lsls	r3, r3, #5
 8006560:	0d1b      	lsrs	r3, r3, #20
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	fb02 f303 	mul.w	r3, r2, r3
 8006568:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656a:	e054      	b.n	8006616 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d050      	beq.n	8006616 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006574:	f7fd f844 	bl	8003600 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	429a      	cmp	r2, r3
 8006582:	d902      	bls.n	800658a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d13d      	bne.n	8006606 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a2:	d111      	bne.n	80065c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ac:	d004      	beq.n	80065b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b6:	d107      	bne.n	80065c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d0:	d10f      	bne.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e017      	b.n	8006636 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3b01      	subs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4013      	ands	r3, r2
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	429a      	cmp	r2, r3
 8006624:	bf0c      	ite	eq
 8006626:	2301      	moveq	r3, #1
 8006628:	2300      	movne	r3, #0
 800662a:	b2db      	uxtb	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	429a      	cmp	r2, r3
 8006632:	d19b      	bne.n	800656c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000178 	.word	0x20000178

08006644 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006656:	f7fc ffd3 	bl	8003600 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	1a9b      	subs	r3, r3, r2
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	4413      	add	r3, r2
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006666:	f7fc ffcb 	bl	8003600 <HAL_GetTick>
 800666a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	330c      	adds	r3, #12
 8006672:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006674:	4b3d      	ldr	r3, [pc, #244]	; (800676c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	00da      	lsls	r2, r3, #3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	0d1b      	lsrs	r3, r3, #20
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	fb02 f303 	mul.w	r3, r2, r3
 800668a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800668c:	e060      	b.n	8006750 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006694:	d107      	bne.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d050      	beq.n	8006750 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ae:	f7fc ffa7 	bl	8003600 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d902      	bls.n	80066c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d13d      	bne.n	8006740 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066dc:	d111      	bne.n	8006702 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e6:	d004      	beq.n	80066f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d107      	bne.n	8006702 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006700:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670a:	d10f      	bne.n	800672c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800672a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e010      	b.n	8006762 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	3b01      	subs	r3, #1
 800674e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4013      	ands	r3, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d196      	bne.n	800668e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3728      	adds	r7, #40	; 0x28
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000178 	.word	0x20000178

08006770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2200      	movs	r2, #0
 8006784:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff ff5b 	bl	8006644 <SPI_WaitFifoStateUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e027      	b.n	80067f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fec0 	bl	8006534 <SPI_WaitFlagStateUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e014      	b.n	80067f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff ff34 	bl	8006644 <SPI_WaitFifoStateUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e000      	b.n	80067f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e040      	b.n	8006890 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fc fe26 	bl	8003470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2224      	movs	r2, #36	; 0x24
 8006828:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f8c0 	bl	80069c0 <UART_SetConfig>
 8006840:	4603      	mov	r3, r0
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e022      	b.n	8006890 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa88 	bl	8006d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006866:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006876:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fb0f 	bl	8006eac <UART_CheckIdleState>
 800688e:	4603      	mov	r3, r0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	f040 8082 	bne.w	80069b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <HAL_UART_Transmit+0x26>
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e07a      	b.n	80069b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_UART_Transmit+0x38>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e073      	b.n	80069b8 <HAL_UART_Transmit+0x120>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2221      	movs	r2, #33	; 0x21
 80068e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068e6:	f7fc fe8b 	bl	8003600 <HAL_GetTick>
 80068ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	88fa      	ldrh	r2, [r7, #6]
 80068f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006904:	d108      	bne.n	8006918 <HAL_UART_Transmit+0x80>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	e003      	b.n	8006920 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006928:	e02d      	b.n	8006986 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2180      	movs	r1, #128	; 0x80
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fb02 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e039      	b.n	80069b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	881a      	ldrh	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006956:	b292      	uxth	r2, r2
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	3302      	adds	r3, #2
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e008      	b.n	8006974 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	781a      	ldrb	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	b292      	uxth	r2, r2
 800696c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	3301      	adds	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1cb      	bne.n	800692a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2200      	movs	r2, #0
 800699a:	2140      	movs	r1, #64	; 0x40
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 face 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e005      	b.n	80069b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e000      	b.n	80069b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
  }
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80069ee:	f023 030c 	bic.w	r3, r3, #12
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6979      	ldr	r1, [r7, #20]
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4aae      	ldr	r2, [pc, #696]	; (8006cf4 <UART_SetConfig+0x334>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d120      	bne.n	8006a82 <UART_SetConfig+0xc2>
 8006a40:	4bad      	ldr	r3, [pc, #692]	; (8006cf8 <UART_SetConfig+0x338>)
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d817      	bhi.n	8006a7c <UART_SetConfig+0xbc>
 8006a4c:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0x94>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006a65 	.word	0x08006a65
 8006a58:	08006a71 	.word	0x08006a71
 8006a5c:	08006a77 	.word	0x08006a77
 8006a60:	08006a6b 	.word	0x08006a6b
 8006a64:	2301      	movs	r3, #1
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e0b5      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	77fb      	strb	r3, [r7, #31]
 8006a6e:	e0b2      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006a70:	2304      	movs	r3, #4
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e0af      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006a76:	2308      	movs	r3, #8
 8006a78:	77fb      	strb	r3, [r7, #31]
 8006a7a:	e0ac      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e0a9      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a9d      	ldr	r2, [pc, #628]	; (8006cfc <UART_SetConfig+0x33c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d124      	bne.n	8006ad6 <UART_SetConfig+0x116>
 8006a8c:	4b9a      	ldr	r3, [pc, #616]	; (8006cf8 <UART_SetConfig+0x338>)
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a98:	d011      	beq.n	8006abe <UART_SetConfig+0xfe>
 8006a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a9e:	d817      	bhi.n	8006ad0 <UART_SetConfig+0x110>
 8006aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa4:	d011      	beq.n	8006aca <UART_SetConfig+0x10a>
 8006aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aaa:	d811      	bhi.n	8006ad0 <UART_SetConfig+0x110>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <UART_SetConfig+0xf8>
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab4:	d006      	beq.n	8006ac4 <UART_SetConfig+0x104>
 8006ab6:	e00b      	b.n	8006ad0 <UART_SetConfig+0x110>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e08b      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e088      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e085      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006aca:	2308      	movs	r3, #8
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e082      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e07f      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a89      	ldr	r2, [pc, #548]	; (8006d00 <UART_SetConfig+0x340>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d124      	bne.n	8006b2a <UART_SetConfig+0x16a>
 8006ae0:	4b85      	ldr	r3, [pc, #532]	; (8006cf8 <UART_SetConfig+0x338>)
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ae8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006aec:	d011      	beq.n	8006b12 <UART_SetConfig+0x152>
 8006aee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006af2:	d817      	bhi.n	8006b24 <UART_SetConfig+0x164>
 8006af4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006af8:	d011      	beq.n	8006b1e <UART_SetConfig+0x15e>
 8006afa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006afe:	d811      	bhi.n	8006b24 <UART_SetConfig+0x164>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <UART_SetConfig+0x14c>
 8006b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b08:	d006      	beq.n	8006b18 <UART_SetConfig+0x158>
 8006b0a:	e00b      	b.n	8006b24 <UART_SetConfig+0x164>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e061      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b12:	2302      	movs	r3, #2
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e05e      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e05b      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b1e:	2308      	movs	r3, #8
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e058      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b24:	2310      	movs	r3, #16
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e055      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a75      	ldr	r2, [pc, #468]	; (8006d04 <UART_SetConfig+0x344>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d124      	bne.n	8006b7e <UART_SetConfig+0x1be>
 8006b34:	4b70      	ldr	r3, [pc, #448]	; (8006cf8 <UART_SetConfig+0x338>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b40:	d011      	beq.n	8006b66 <UART_SetConfig+0x1a6>
 8006b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b46:	d817      	bhi.n	8006b78 <UART_SetConfig+0x1b8>
 8006b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b4c:	d011      	beq.n	8006b72 <UART_SetConfig+0x1b2>
 8006b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b52:	d811      	bhi.n	8006b78 <UART_SetConfig+0x1b8>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <UART_SetConfig+0x1a0>
 8006b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b5c:	d006      	beq.n	8006b6c <UART_SetConfig+0x1ac>
 8006b5e:	e00b      	b.n	8006b78 <UART_SetConfig+0x1b8>
 8006b60:	2300      	movs	r3, #0
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e037      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b66:	2302      	movs	r3, #2
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e034      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e031      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b72:	2308      	movs	r3, #8
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e02e      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e02b      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a61      	ldr	r2, [pc, #388]	; (8006d08 <UART_SetConfig+0x348>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d124      	bne.n	8006bd2 <UART_SetConfig+0x212>
 8006b88:	4b5b      	ldr	r3, [pc, #364]	; (8006cf8 <UART_SetConfig+0x338>)
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006b90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b94:	d011      	beq.n	8006bba <UART_SetConfig+0x1fa>
 8006b96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b9a:	d817      	bhi.n	8006bcc <UART_SetConfig+0x20c>
 8006b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ba0:	d011      	beq.n	8006bc6 <UART_SetConfig+0x206>
 8006ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ba6:	d811      	bhi.n	8006bcc <UART_SetConfig+0x20c>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <UART_SetConfig+0x1f4>
 8006bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb0:	d006      	beq.n	8006bc0 <UART_SetConfig+0x200>
 8006bb2:	e00b      	b.n	8006bcc <UART_SetConfig+0x20c>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	e00d      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	77fb      	strb	r3, [r7, #31]
 8006bbe:	e00a      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e007      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e004      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e001      	b.n	8006bd6 <UART_SetConfig+0x216>
 8006bd2:	2310      	movs	r3, #16
 8006bd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bde:	d15c      	bne.n	8006c9a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006be0:	7ffb      	ldrb	r3, [r7, #31]
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d827      	bhi.n	8006c36 <UART_SetConfig+0x276>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x22c>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c37 	.word	0x08006c37
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fe ffa8 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 8006c14:	61b8      	str	r0, [r7, #24]
        break;
 8006c16:	e013      	b.n	8006c40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c18:	f7fe ffc6 	bl	8005ba8 <HAL_RCC_GetPCLK2Freq>
 8006c1c:	61b8      	str	r0, [r7, #24]
        break;
 8006c1e:	e00f      	b.n	8006c40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b3a      	ldr	r3, [pc, #232]	; (8006d0c <UART_SetConfig+0x34c>)
 8006c22:	61bb      	str	r3, [r7, #24]
        break;
 8006c24:	e00c      	b.n	8006c40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fe ff27 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8006c2a:	61b8      	str	r0, [r7, #24]
        break;
 8006c2c:	e008      	b.n	8006c40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	61bb      	str	r3, [r7, #24]
        break;
 8006c34:	e004      	b.n	8006c40 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8085 	beq.w	8006d52 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	005a      	lsls	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	441a      	add	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b0f      	cmp	r3, #15
 8006c64:	d916      	bls.n	8006c94 <UART_SetConfig+0x2d4>
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6c:	d212      	bcs.n	8006c94 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f023 030f 	bic.w	r3, r3, #15
 8006c76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	89fb      	ldrh	r3, [r7, #14]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	89fa      	ldrh	r2, [r7, #14]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	e05e      	b.n	8006d52 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	77bb      	strb	r3, [r7, #30]
 8006c98:	e05b      	b.n	8006d52 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d837      	bhi.n	8006d10 <UART_SetConfig+0x350>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x2e8>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006d11 	.word	0x08006d11
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006d11 	.word	0x08006d11
 8006cc0:	08006d11 	.word	0x08006d11
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006ceb 	.word	0x08006ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ccc:	f7fe ff4a 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 8006cd0:	61b8      	str	r0, [r7, #24]
        break;
 8006cd2:	e022      	b.n	8006d1a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fe ff68 	bl	8005ba8 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	61b8      	str	r0, [r7, #24]
        break;
 8006cda:	e01e      	b.n	8006d1a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <UART_SetConfig+0x34c>)
 8006cde:	61bb      	str	r3, [r7, #24]
        break;
 8006ce0:	e01b      	b.n	8006d1a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce2:	f7fe fec9 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8006ce6:	61b8      	str	r0, [r7, #24]
        break;
 8006ce8:	e017      	b.n	8006d1a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cee:	61bb      	str	r3, [r7, #24]
        break;
 8006cf0:	e013      	b.n	8006d1a <UART_SetConfig+0x35a>
 8006cf2:	bf00      	nop
 8006cf4:	40013800 	.word	0x40013800
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	40004400 	.word	0x40004400
 8006d00:	40004800 	.word	0x40004800
 8006d04:	40004c00 	.word	0x40004c00
 8006d08:	40005000 	.word	0x40005000
 8006d0c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	77bb      	strb	r3, [r7, #30]
        break;
 8006d18:	bf00      	nop
    }

    if (pclk != 0U)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d018      	beq.n	8006d52 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	085a      	lsrs	r2, r3, #1
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b0f      	cmp	r3, #15
 8006d3a:	d908      	bls.n	8006d4e <UART_SetConfig+0x38e>
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d42:	d204      	bcs.n	8006d4e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	60da      	str	r2, [r3, #12]
 8006d4c:	e001      	b.n	8006d52 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d5e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e66:	d10a      	bne.n	8006e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ebc:	f7fc fba0 	bl	8003600 <HAL_GetTick>
 8006ec0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d10e      	bne.n	8006eee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f82d 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e023      	b.n	8006f36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d10e      	bne.n	8006f1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f817 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e00d      	b.n	8006f36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b09c      	sub	sp, #112	; 0x70
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4e:	e0a5      	b.n	800709c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	f000 80a1 	beq.w	800709c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5a:	f7fc fb51 	bl	8003600 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d13e      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f84:	667b      	str	r3, [r7, #100]	; 0x64
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e6      	bne.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e067      	b.n	80070be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d04f      	beq.n	800709c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800700a:	d147      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007014:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800702a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
 8007036:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800703a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e6      	bne.n	8007016 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3308      	adds	r3, #8
 800704e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	613b      	str	r3, [r7, #16]
   return(result);
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3308      	adds	r3, #8
 8007066:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007068:	623a      	str	r2, [r7, #32]
 800706a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	69f9      	ldr	r1, [r7, #28]
 800706e:	6a3a      	ldr	r2, [r7, #32]
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	61bb      	str	r3, [r7, #24]
   return(result);
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e5      	bne.n	8007048 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e010      	b.n	80070be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69da      	ldr	r2, [r3, #28]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4013      	ands	r3, r2
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	f43f af4a 	beq.w	8006f50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3770      	adds	r7, #112	; 0x70
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <__errno>:
 80070c8:	4b01      	ldr	r3, [pc, #4]	; (80070d0 <__errno+0x8>)
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000184 	.word	0x20000184

080070d4 <__libc_init_array>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4d0d      	ldr	r5, [pc, #52]	; (800710c <__libc_init_array+0x38>)
 80070d8:	4c0d      	ldr	r4, [pc, #52]	; (8007110 <__libc_init_array+0x3c>)
 80070da:	1b64      	subs	r4, r4, r5
 80070dc:	10a4      	asrs	r4, r4, #2
 80070de:	2600      	movs	r6, #0
 80070e0:	42a6      	cmp	r6, r4
 80070e2:	d109      	bne.n	80070f8 <__libc_init_array+0x24>
 80070e4:	4d0b      	ldr	r5, [pc, #44]	; (8007114 <__libc_init_array+0x40>)
 80070e6:	4c0c      	ldr	r4, [pc, #48]	; (8007118 <__libc_init_array+0x44>)
 80070e8:	f002 fd08 	bl	8009afc <_init>
 80070ec:	1b64      	subs	r4, r4, r5
 80070ee:	10a4      	asrs	r4, r4, #2
 80070f0:	2600      	movs	r6, #0
 80070f2:	42a6      	cmp	r6, r4
 80070f4:	d105      	bne.n	8007102 <__libc_init_array+0x2e>
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fc:	4798      	blx	r3
 80070fe:	3601      	adds	r6, #1
 8007100:	e7ee      	b.n	80070e0 <__libc_init_array+0xc>
 8007102:	f855 3b04 	ldr.w	r3, [r5], #4
 8007106:	4798      	blx	r3
 8007108:	3601      	adds	r6, #1
 800710a:	e7f2      	b.n	80070f2 <__libc_init_array+0x1e>
 800710c:	08009f64 	.word	0x08009f64
 8007110:	08009f64 	.word	0x08009f64
 8007114:	08009f64 	.word	0x08009f64
 8007118:	08009f68 	.word	0x08009f68

0800711c <memset>:
 800711c:	4402      	add	r2, r0
 800711e:	4603      	mov	r3, r0
 8007120:	4293      	cmp	r3, r2
 8007122:	d100      	bne.n	8007126 <memset+0xa>
 8007124:	4770      	bx	lr
 8007126:	f803 1b01 	strb.w	r1, [r3], #1
 800712a:	e7f9      	b.n	8007120 <memset+0x4>

0800712c <__cvt>:
 800712c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	ec55 4b10 	vmov	r4, r5, d0
 8007134:	2d00      	cmp	r5, #0
 8007136:	460e      	mov	r6, r1
 8007138:	4619      	mov	r1, r3
 800713a:	462b      	mov	r3, r5
 800713c:	bfbb      	ittet	lt
 800713e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007142:	461d      	movlt	r5, r3
 8007144:	2300      	movge	r3, #0
 8007146:	232d      	movlt	r3, #45	; 0x2d
 8007148:	700b      	strb	r3, [r1, #0]
 800714a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800714c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007150:	4691      	mov	r9, r2
 8007152:	f023 0820 	bic.w	r8, r3, #32
 8007156:	bfbc      	itt	lt
 8007158:	4622      	movlt	r2, r4
 800715a:	4614      	movlt	r4, r2
 800715c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007160:	d005      	beq.n	800716e <__cvt+0x42>
 8007162:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007166:	d100      	bne.n	800716a <__cvt+0x3e>
 8007168:	3601      	adds	r6, #1
 800716a:	2102      	movs	r1, #2
 800716c:	e000      	b.n	8007170 <__cvt+0x44>
 800716e:	2103      	movs	r1, #3
 8007170:	ab03      	add	r3, sp, #12
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	ab02      	add	r3, sp, #8
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	ec45 4b10 	vmov	d0, r4, r5
 800717c:	4653      	mov	r3, sl
 800717e:	4632      	mov	r2, r6
 8007180:	f000 fce2 	bl	8007b48 <_dtoa_r>
 8007184:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007188:	4607      	mov	r7, r0
 800718a:	d102      	bne.n	8007192 <__cvt+0x66>
 800718c:	f019 0f01 	tst.w	r9, #1
 8007190:	d022      	beq.n	80071d8 <__cvt+0xac>
 8007192:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007196:	eb07 0906 	add.w	r9, r7, r6
 800719a:	d110      	bne.n	80071be <__cvt+0x92>
 800719c:	783b      	ldrb	r3, [r7, #0]
 800719e:	2b30      	cmp	r3, #48	; 0x30
 80071a0:	d10a      	bne.n	80071b8 <__cvt+0x8c>
 80071a2:	2200      	movs	r2, #0
 80071a4:	2300      	movs	r3, #0
 80071a6:	4620      	mov	r0, r4
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7f9 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ae:	b918      	cbnz	r0, 80071b8 <__cvt+0x8c>
 80071b0:	f1c6 0601 	rsb	r6, r6, #1
 80071b4:	f8ca 6000 	str.w	r6, [sl]
 80071b8:	f8da 3000 	ldr.w	r3, [sl]
 80071bc:	4499      	add	r9, r3
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ca:	b108      	cbz	r0, 80071d0 <__cvt+0xa4>
 80071cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80071d0:	2230      	movs	r2, #48	; 0x30
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	454b      	cmp	r3, r9
 80071d6:	d307      	bcc.n	80071e8 <__cvt+0xbc>
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071dc:	1bdb      	subs	r3, r3, r7
 80071de:	4638      	mov	r0, r7
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	b004      	add	sp, #16
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e8:	1c59      	adds	r1, r3, #1
 80071ea:	9103      	str	r1, [sp, #12]
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	e7f0      	b.n	80071d2 <__cvt+0xa6>

080071f0 <__exponent>:
 80071f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071f2:	4603      	mov	r3, r0
 80071f4:	2900      	cmp	r1, #0
 80071f6:	bfb8      	it	lt
 80071f8:	4249      	neglt	r1, r1
 80071fa:	f803 2b02 	strb.w	r2, [r3], #2
 80071fe:	bfb4      	ite	lt
 8007200:	222d      	movlt	r2, #45	; 0x2d
 8007202:	222b      	movge	r2, #43	; 0x2b
 8007204:	2909      	cmp	r1, #9
 8007206:	7042      	strb	r2, [r0, #1]
 8007208:	dd2a      	ble.n	8007260 <__exponent+0x70>
 800720a:	f10d 0407 	add.w	r4, sp, #7
 800720e:	46a4      	mov	ip, r4
 8007210:	270a      	movs	r7, #10
 8007212:	46a6      	mov	lr, r4
 8007214:	460a      	mov	r2, r1
 8007216:	fb91 f6f7 	sdiv	r6, r1, r7
 800721a:	fb07 1516 	mls	r5, r7, r6, r1
 800721e:	3530      	adds	r5, #48	; 0x30
 8007220:	2a63      	cmp	r2, #99	; 0x63
 8007222:	f104 34ff 	add.w	r4, r4, #4294967295
 8007226:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800722a:	4631      	mov	r1, r6
 800722c:	dcf1      	bgt.n	8007212 <__exponent+0x22>
 800722e:	3130      	adds	r1, #48	; 0x30
 8007230:	f1ae 0502 	sub.w	r5, lr, #2
 8007234:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007238:	1c44      	adds	r4, r0, #1
 800723a:	4629      	mov	r1, r5
 800723c:	4561      	cmp	r1, ip
 800723e:	d30a      	bcc.n	8007256 <__exponent+0x66>
 8007240:	f10d 0209 	add.w	r2, sp, #9
 8007244:	eba2 020e 	sub.w	r2, r2, lr
 8007248:	4565      	cmp	r5, ip
 800724a:	bf88      	it	hi
 800724c:	2200      	movhi	r2, #0
 800724e:	4413      	add	r3, r2
 8007250:	1a18      	subs	r0, r3, r0
 8007252:	b003      	add	sp, #12
 8007254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800725a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800725e:	e7ed      	b.n	800723c <__exponent+0x4c>
 8007260:	2330      	movs	r3, #48	; 0x30
 8007262:	3130      	adds	r1, #48	; 0x30
 8007264:	7083      	strb	r3, [r0, #2]
 8007266:	70c1      	strb	r1, [r0, #3]
 8007268:	1d03      	adds	r3, r0, #4
 800726a:	e7f1      	b.n	8007250 <__exponent+0x60>

0800726c <_printf_float>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	ed2d 8b02 	vpush	{d8}
 8007274:	b08d      	sub	sp, #52	; 0x34
 8007276:	460c      	mov	r4, r1
 8007278:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800727c:	4616      	mov	r6, r2
 800727e:	461f      	mov	r7, r3
 8007280:	4605      	mov	r5, r0
 8007282:	f001 fb43 	bl	800890c <_localeconv_r>
 8007286:	f8d0 a000 	ldr.w	sl, [r0]
 800728a:	4650      	mov	r0, sl
 800728c:	f7f8 ffa0 	bl	80001d0 <strlen>
 8007290:	2300      	movs	r3, #0
 8007292:	930a      	str	r3, [sp, #40]	; 0x28
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	9305      	str	r3, [sp, #20]
 8007298:	f8d8 3000 	ldr.w	r3, [r8]
 800729c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072a0:	3307      	adds	r3, #7
 80072a2:	f023 0307 	bic.w	r3, r3, #7
 80072a6:	f103 0208 	add.w	r2, r3, #8
 80072aa:	f8c8 2000 	str.w	r2, [r8]
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80072c4:	ee08 0a10 	vmov	s16, r0
 80072c8:	4b9f      	ldr	r3, [pc, #636]	; (8007548 <_printf_float+0x2dc>)
 80072ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	f7f9 fc2b 	bl	8000b2c <__aeabi_dcmpun>
 80072d6:	bb88      	cbnz	r0, 800733c <_printf_float+0xd0>
 80072d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072dc:	4b9a      	ldr	r3, [pc, #616]	; (8007548 <_printf_float+0x2dc>)
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	f7f9 fc05 	bl	8000af0 <__aeabi_dcmple>
 80072e6:	bb48      	cbnz	r0, 800733c <_printf_float+0xd0>
 80072e8:	2200      	movs	r2, #0
 80072ea:	2300      	movs	r3, #0
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	f7f9 fbf4 	bl	8000adc <__aeabi_dcmplt>
 80072f4:	b110      	cbz	r0, 80072fc <_printf_float+0x90>
 80072f6:	232d      	movs	r3, #45	; 0x2d
 80072f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072fc:	4b93      	ldr	r3, [pc, #588]	; (800754c <_printf_float+0x2e0>)
 80072fe:	4894      	ldr	r0, [pc, #592]	; (8007550 <_printf_float+0x2e4>)
 8007300:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007304:	bf94      	ite	ls
 8007306:	4698      	movls	r8, r3
 8007308:	4680      	movhi	r8, r0
 800730a:	2303      	movs	r3, #3
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	9b05      	ldr	r3, [sp, #20]
 8007310:	f023 0204 	bic.w	r2, r3, #4
 8007314:	6022      	str	r2, [r4, #0]
 8007316:	f04f 0900 	mov.w	r9, #0
 800731a:	9700      	str	r7, [sp, #0]
 800731c:	4633      	mov	r3, r6
 800731e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007320:	4621      	mov	r1, r4
 8007322:	4628      	mov	r0, r5
 8007324:	f000 f9d8 	bl	80076d8 <_printf_common>
 8007328:	3001      	adds	r0, #1
 800732a:	f040 8090 	bne.w	800744e <_printf_float+0x1e2>
 800732e:	f04f 30ff 	mov.w	r0, #4294967295
 8007332:	b00d      	add	sp, #52	; 0x34
 8007334:	ecbd 8b02 	vpop	{d8}
 8007338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	4640      	mov	r0, r8
 8007342:	4649      	mov	r1, r9
 8007344:	f7f9 fbf2 	bl	8000b2c <__aeabi_dcmpun>
 8007348:	b140      	cbz	r0, 800735c <_printf_float+0xf0>
 800734a:	464b      	mov	r3, r9
 800734c:	2b00      	cmp	r3, #0
 800734e:	bfbc      	itt	lt
 8007350:	232d      	movlt	r3, #45	; 0x2d
 8007352:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007356:	487f      	ldr	r0, [pc, #508]	; (8007554 <_printf_float+0x2e8>)
 8007358:	4b7f      	ldr	r3, [pc, #508]	; (8007558 <_printf_float+0x2ec>)
 800735a:	e7d1      	b.n	8007300 <_printf_float+0x94>
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007362:	9206      	str	r2, [sp, #24]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	d13f      	bne.n	80073e8 <_printf_float+0x17c>
 8007368:	2306      	movs	r3, #6
 800736a:	6063      	str	r3, [r4, #4]
 800736c:	9b05      	ldr	r3, [sp, #20]
 800736e:	6861      	ldr	r1, [r4, #4]
 8007370:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007374:	2300      	movs	r3, #0
 8007376:	9303      	str	r3, [sp, #12]
 8007378:	ab0a      	add	r3, sp, #40	; 0x28
 800737a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800737e:	ab09      	add	r3, sp, #36	; 0x24
 8007380:	ec49 8b10 	vmov	d0, r8, r9
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	6022      	str	r2, [r4, #0]
 8007388:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800738c:	4628      	mov	r0, r5
 800738e:	f7ff fecd 	bl	800712c <__cvt>
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007396:	2b47      	cmp	r3, #71	; 0x47
 8007398:	4680      	mov	r8, r0
 800739a:	d108      	bne.n	80073ae <_printf_float+0x142>
 800739c:	1cc8      	adds	r0, r1, #3
 800739e:	db02      	blt.n	80073a6 <_printf_float+0x13a>
 80073a0:	6863      	ldr	r3, [r4, #4]
 80073a2:	4299      	cmp	r1, r3
 80073a4:	dd41      	ble.n	800742a <_printf_float+0x1be>
 80073a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80073aa:	fa5f fb8b 	uxtb.w	fp, fp
 80073ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073b2:	d820      	bhi.n	80073f6 <_printf_float+0x18a>
 80073b4:	3901      	subs	r1, #1
 80073b6:	465a      	mov	r2, fp
 80073b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073bc:	9109      	str	r1, [sp, #36]	; 0x24
 80073be:	f7ff ff17 	bl	80071f0 <__exponent>
 80073c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c4:	1813      	adds	r3, r2, r0
 80073c6:	2a01      	cmp	r2, #1
 80073c8:	4681      	mov	r9, r0
 80073ca:	6123      	str	r3, [r4, #16]
 80073cc:	dc02      	bgt.n	80073d4 <_printf_float+0x168>
 80073ce:	6822      	ldr	r2, [r4, #0]
 80073d0:	07d2      	lsls	r2, r2, #31
 80073d2:	d501      	bpl.n	80073d8 <_printf_float+0x16c>
 80073d4:	3301      	adds	r3, #1
 80073d6:	6123      	str	r3, [r4, #16]
 80073d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d09c      	beq.n	800731a <_printf_float+0xae>
 80073e0:	232d      	movs	r3, #45	; 0x2d
 80073e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e6:	e798      	b.n	800731a <_printf_float+0xae>
 80073e8:	9a06      	ldr	r2, [sp, #24]
 80073ea:	2a47      	cmp	r2, #71	; 0x47
 80073ec:	d1be      	bne.n	800736c <_printf_float+0x100>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1bc      	bne.n	800736c <_printf_float+0x100>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e7b9      	b.n	800736a <_printf_float+0xfe>
 80073f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073fa:	d118      	bne.n	800742e <_printf_float+0x1c2>
 80073fc:	2900      	cmp	r1, #0
 80073fe:	6863      	ldr	r3, [r4, #4]
 8007400:	dd0b      	ble.n	800741a <_printf_float+0x1ae>
 8007402:	6121      	str	r1, [r4, #16]
 8007404:	b913      	cbnz	r3, 800740c <_printf_float+0x1a0>
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	07d0      	lsls	r0, r2, #31
 800740a:	d502      	bpl.n	8007412 <_printf_float+0x1a6>
 800740c:	3301      	adds	r3, #1
 800740e:	440b      	add	r3, r1
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	65a1      	str	r1, [r4, #88]	; 0x58
 8007414:	f04f 0900 	mov.w	r9, #0
 8007418:	e7de      	b.n	80073d8 <_printf_float+0x16c>
 800741a:	b913      	cbnz	r3, 8007422 <_printf_float+0x1b6>
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	07d2      	lsls	r2, r2, #31
 8007420:	d501      	bpl.n	8007426 <_printf_float+0x1ba>
 8007422:	3302      	adds	r3, #2
 8007424:	e7f4      	b.n	8007410 <_printf_float+0x1a4>
 8007426:	2301      	movs	r3, #1
 8007428:	e7f2      	b.n	8007410 <_printf_float+0x1a4>
 800742a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800742e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007430:	4299      	cmp	r1, r3
 8007432:	db05      	blt.n	8007440 <_printf_float+0x1d4>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	6121      	str	r1, [r4, #16]
 8007438:	07d8      	lsls	r0, r3, #31
 800743a:	d5ea      	bpl.n	8007412 <_printf_float+0x1a6>
 800743c:	1c4b      	adds	r3, r1, #1
 800743e:	e7e7      	b.n	8007410 <_printf_float+0x1a4>
 8007440:	2900      	cmp	r1, #0
 8007442:	bfd4      	ite	le
 8007444:	f1c1 0202 	rsble	r2, r1, #2
 8007448:	2201      	movgt	r2, #1
 800744a:	4413      	add	r3, r2
 800744c:	e7e0      	b.n	8007410 <_printf_float+0x1a4>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	055a      	lsls	r2, r3, #21
 8007452:	d407      	bmi.n	8007464 <_printf_float+0x1f8>
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	4642      	mov	r2, r8
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	d12c      	bne.n	80074bc <_printf_float+0x250>
 8007462:	e764      	b.n	800732e <_printf_float+0xc2>
 8007464:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007468:	f240 80e0 	bls.w	800762c <_printf_float+0x3c0>
 800746c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007470:	2200      	movs	r2, #0
 8007472:	2300      	movs	r3, #0
 8007474:	f7f9 fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007478:	2800      	cmp	r0, #0
 800747a:	d034      	beq.n	80074e6 <_printf_float+0x27a>
 800747c:	4a37      	ldr	r2, [pc, #220]	; (800755c <_printf_float+0x2f0>)
 800747e:	2301      	movs	r3, #1
 8007480:	4631      	mov	r1, r6
 8007482:	4628      	mov	r0, r5
 8007484:	47b8      	blx	r7
 8007486:	3001      	adds	r0, #1
 8007488:	f43f af51 	beq.w	800732e <_printf_float+0xc2>
 800748c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007490:	429a      	cmp	r2, r3
 8007492:	db02      	blt.n	800749a <_printf_float+0x22e>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	07d8      	lsls	r0, r3, #31
 8007498:	d510      	bpl.n	80074bc <_printf_float+0x250>
 800749a:	ee18 3a10 	vmov	r3, s16
 800749e:	4652      	mov	r2, sl
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f af41 	beq.w	800732e <_printf_float+0xc2>
 80074ac:	f04f 0800 	mov.w	r8, #0
 80074b0:	f104 091a 	add.w	r9, r4, #26
 80074b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b6:	3b01      	subs	r3, #1
 80074b8:	4543      	cmp	r3, r8
 80074ba:	dc09      	bgt.n	80074d0 <_printf_float+0x264>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	079b      	lsls	r3, r3, #30
 80074c0:	f100 8105 	bmi.w	80076ce <_printf_float+0x462>
 80074c4:	68e0      	ldr	r0, [r4, #12]
 80074c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c8:	4298      	cmp	r0, r3
 80074ca:	bfb8      	it	lt
 80074cc:	4618      	movlt	r0, r3
 80074ce:	e730      	b.n	8007332 <_printf_float+0xc6>
 80074d0:	2301      	movs	r3, #1
 80074d2:	464a      	mov	r2, r9
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	f43f af27 	beq.w	800732e <_printf_float+0xc2>
 80074e0:	f108 0801 	add.w	r8, r8, #1
 80074e4:	e7e6      	b.n	80074b4 <_printf_float+0x248>
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dc39      	bgt.n	8007560 <_printf_float+0x2f4>
 80074ec:	4a1b      	ldr	r2, [pc, #108]	; (800755c <_printf_float+0x2f0>)
 80074ee:	2301      	movs	r3, #1
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b8      	blx	r7
 80074f6:	3001      	adds	r0, #1
 80074f8:	f43f af19 	beq.w	800732e <_printf_float+0xc2>
 80074fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007500:	4313      	orrs	r3, r2
 8007502:	d102      	bne.n	800750a <_printf_float+0x29e>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	07d9      	lsls	r1, r3, #31
 8007508:	d5d8      	bpl.n	80074bc <_printf_float+0x250>
 800750a:	ee18 3a10 	vmov	r3, s16
 800750e:	4652      	mov	r2, sl
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f af09 	beq.w	800732e <_printf_float+0xc2>
 800751c:	f04f 0900 	mov.w	r9, #0
 8007520:	f104 0a1a 	add.w	sl, r4, #26
 8007524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007526:	425b      	negs	r3, r3
 8007528:	454b      	cmp	r3, r9
 800752a:	dc01      	bgt.n	8007530 <_printf_float+0x2c4>
 800752c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752e:	e792      	b.n	8007456 <_printf_float+0x1ea>
 8007530:	2301      	movs	r3, #1
 8007532:	4652      	mov	r2, sl
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f aef7 	beq.w	800732e <_printf_float+0xc2>
 8007540:	f109 0901 	add.w	r9, r9, #1
 8007544:	e7ee      	b.n	8007524 <_printf_float+0x2b8>
 8007546:	bf00      	nop
 8007548:	7fefffff 	.word	0x7fefffff
 800754c:	08009b88 	.word	0x08009b88
 8007550:	08009b8c 	.word	0x08009b8c
 8007554:	08009b94 	.word	0x08009b94
 8007558:	08009b90 	.word	0x08009b90
 800755c:	08009b98 	.word	0x08009b98
 8007560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007564:	429a      	cmp	r2, r3
 8007566:	bfa8      	it	ge
 8007568:	461a      	movge	r2, r3
 800756a:	2a00      	cmp	r2, #0
 800756c:	4691      	mov	r9, r2
 800756e:	dc37      	bgt.n	80075e0 <_printf_float+0x374>
 8007570:	f04f 0b00 	mov.w	fp, #0
 8007574:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007578:	f104 021a 	add.w	r2, r4, #26
 800757c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800757e:	9305      	str	r3, [sp, #20]
 8007580:	eba3 0309 	sub.w	r3, r3, r9
 8007584:	455b      	cmp	r3, fp
 8007586:	dc33      	bgt.n	80075f0 <_printf_float+0x384>
 8007588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800758c:	429a      	cmp	r2, r3
 800758e:	db3b      	blt.n	8007608 <_printf_float+0x39c>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	07da      	lsls	r2, r3, #31
 8007594:	d438      	bmi.n	8007608 <_printf_float+0x39c>
 8007596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007598:	9b05      	ldr	r3, [sp, #20]
 800759a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	eba2 0901 	sub.w	r9, r2, r1
 80075a2:	4599      	cmp	r9, r3
 80075a4:	bfa8      	it	ge
 80075a6:	4699      	movge	r9, r3
 80075a8:	f1b9 0f00 	cmp.w	r9, #0
 80075ac:	dc35      	bgt.n	800761a <_printf_float+0x3ae>
 80075ae:	f04f 0800 	mov.w	r8, #0
 80075b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075b6:	f104 0a1a 	add.w	sl, r4, #26
 80075ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075be:	1a9b      	subs	r3, r3, r2
 80075c0:	eba3 0309 	sub.w	r3, r3, r9
 80075c4:	4543      	cmp	r3, r8
 80075c6:	f77f af79 	ble.w	80074bc <_printf_float+0x250>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4652      	mov	r2, sl
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f aeaa 	beq.w	800732e <_printf_float+0xc2>
 80075da:	f108 0801 	add.w	r8, r8, #1
 80075de:	e7ec      	b.n	80075ba <_printf_float+0x34e>
 80075e0:	4613      	mov	r3, r2
 80075e2:	4631      	mov	r1, r6
 80075e4:	4642      	mov	r2, r8
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	d1c0      	bne.n	8007570 <_printf_float+0x304>
 80075ee:	e69e      	b.n	800732e <_printf_float+0xc2>
 80075f0:	2301      	movs	r3, #1
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	9205      	str	r2, [sp, #20]
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f ae97 	beq.w	800732e <_printf_float+0xc2>
 8007600:	9a05      	ldr	r2, [sp, #20]
 8007602:	f10b 0b01 	add.w	fp, fp, #1
 8007606:	e7b9      	b.n	800757c <_printf_float+0x310>
 8007608:	ee18 3a10 	vmov	r3, s16
 800760c:	4652      	mov	r2, sl
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	d1be      	bne.n	8007596 <_printf_float+0x32a>
 8007618:	e689      	b.n	800732e <_printf_float+0xc2>
 800761a:	9a05      	ldr	r2, [sp, #20]
 800761c:	464b      	mov	r3, r9
 800761e:	4442      	add	r2, r8
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	d1c1      	bne.n	80075ae <_printf_float+0x342>
 800762a:	e680      	b.n	800732e <_printf_float+0xc2>
 800762c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800762e:	2a01      	cmp	r2, #1
 8007630:	dc01      	bgt.n	8007636 <_printf_float+0x3ca>
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d538      	bpl.n	80076a8 <_printf_float+0x43c>
 8007636:	2301      	movs	r3, #1
 8007638:	4642      	mov	r2, r8
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f ae74 	beq.w	800732e <_printf_float+0xc2>
 8007646:	ee18 3a10 	vmov	r3, s16
 800764a:	4652      	mov	r2, sl
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f ae6b 	beq.w	800732e <_printf_float+0xc2>
 8007658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800765c:	2200      	movs	r2, #0
 800765e:	2300      	movs	r3, #0
 8007660:	f7f9 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007664:	b9d8      	cbnz	r0, 800769e <_printf_float+0x432>
 8007666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007668:	f108 0201 	add.w	r2, r8, #1
 800766c:	3b01      	subs	r3, #1
 800766e:	4631      	mov	r1, r6
 8007670:	4628      	mov	r0, r5
 8007672:	47b8      	blx	r7
 8007674:	3001      	adds	r0, #1
 8007676:	d10e      	bne.n	8007696 <_printf_float+0x42a>
 8007678:	e659      	b.n	800732e <_printf_float+0xc2>
 800767a:	2301      	movs	r3, #1
 800767c:	4652      	mov	r2, sl
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	f43f ae52 	beq.w	800732e <_printf_float+0xc2>
 800768a:	f108 0801 	add.w	r8, r8, #1
 800768e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007690:	3b01      	subs	r3, #1
 8007692:	4543      	cmp	r3, r8
 8007694:	dcf1      	bgt.n	800767a <_printf_float+0x40e>
 8007696:	464b      	mov	r3, r9
 8007698:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800769c:	e6dc      	b.n	8007458 <_printf_float+0x1ec>
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	f104 0a1a 	add.w	sl, r4, #26
 80076a6:	e7f2      	b.n	800768e <_printf_float+0x422>
 80076a8:	2301      	movs	r3, #1
 80076aa:	4642      	mov	r2, r8
 80076ac:	e7df      	b.n	800766e <_printf_float+0x402>
 80076ae:	2301      	movs	r3, #1
 80076b0:	464a      	mov	r2, r9
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	f43f ae38 	beq.w	800732e <_printf_float+0xc2>
 80076be:	f108 0801 	add.w	r8, r8, #1
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076c6:	1a5b      	subs	r3, r3, r1
 80076c8:	4543      	cmp	r3, r8
 80076ca:	dcf0      	bgt.n	80076ae <_printf_float+0x442>
 80076cc:	e6fa      	b.n	80074c4 <_printf_float+0x258>
 80076ce:	f04f 0800 	mov.w	r8, #0
 80076d2:	f104 0919 	add.w	r9, r4, #25
 80076d6:	e7f4      	b.n	80076c2 <_printf_float+0x456>

080076d8 <_printf_common>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	4616      	mov	r6, r2
 80076de:	4699      	mov	r9, r3
 80076e0:	688a      	ldr	r2, [r1, #8]
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfb8      	it	lt
 80076ec:	4613      	movlt	r3, r2
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076f4:	4607      	mov	r7, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	b10a      	cbz	r2, 80076fe <_printf_common+0x26>
 80076fa:	3301      	adds	r3, #1
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	0699      	lsls	r1, r3, #26
 8007702:	bf42      	ittt	mi
 8007704:	6833      	ldrmi	r3, [r6, #0]
 8007706:	3302      	addmi	r3, #2
 8007708:	6033      	strmi	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	f015 0506 	ands.w	r5, r5, #6
 8007710:	d106      	bne.n	8007720 <_printf_common+0x48>
 8007712:	f104 0a19 	add.w	sl, r4, #25
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	6832      	ldr	r2, [r6, #0]
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	42ab      	cmp	r3, r5
 800771e:	dc26      	bgt.n	800776e <_printf_common+0x96>
 8007720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007724:	1e13      	subs	r3, r2, #0
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	bf18      	it	ne
 800772a:	2301      	movne	r3, #1
 800772c:	0692      	lsls	r2, r2, #26
 800772e:	d42b      	bmi.n	8007788 <_printf_common+0xb0>
 8007730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007734:	4649      	mov	r1, r9
 8007736:	4638      	mov	r0, r7
 8007738:	47c0      	blx	r8
 800773a:	3001      	adds	r0, #1
 800773c:	d01e      	beq.n	800777c <_printf_common+0xa4>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	68e5      	ldr	r5, [r4, #12]
 8007742:	6832      	ldr	r2, [r6, #0]
 8007744:	f003 0306 	and.w	r3, r3, #6
 8007748:	2b04      	cmp	r3, #4
 800774a:	bf08      	it	eq
 800774c:	1aad      	subeq	r5, r5, r2
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	bf0c      	ite	eq
 8007754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007758:	2500      	movne	r5, #0
 800775a:	4293      	cmp	r3, r2
 800775c:	bfc4      	itt	gt
 800775e:	1a9b      	subgt	r3, r3, r2
 8007760:	18ed      	addgt	r5, r5, r3
 8007762:	2600      	movs	r6, #0
 8007764:	341a      	adds	r4, #26
 8007766:	42b5      	cmp	r5, r6
 8007768:	d11a      	bne.n	80077a0 <_printf_common+0xc8>
 800776a:	2000      	movs	r0, #0
 800776c:	e008      	b.n	8007780 <_printf_common+0xa8>
 800776e:	2301      	movs	r3, #1
 8007770:	4652      	mov	r2, sl
 8007772:	4649      	mov	r1, r9
 8007774:	4638      	mov	r0, r7
 8007776:	47c0      	blx	r8
 8007778:	3001      	adds	r0, #1
 800777a:	d103      	bne.n	8007784 <_printf_common+0xac>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007784:	3501      	adds	r5, #1
 8007786:	e7c6      	b.n	8007716 <_printf_common+0x3e>
 8007788:	18e1      	adds	r1, r4, r3
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	2030      	movs	r0, #48	; 0x30
 800778e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007792:	4422      	add	r2, r4
 8007794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800779c:	3302      	adds	r3, #2
 800779e:	e7c7      	b.n	8007730 <_printf_common+0x58>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4622      	mov	r2, r4
 80077a4:	4649      	mov	r1, r9
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c0      	blx	r8
 80077aa:	3001      	adds	r0, #1
 80077ac:	d0e6      	beq.n	800777c <_printf_common+0xa4>
 80077ae:	3601      	adds	r6, #1
 80077b0:	e7d9      	b.n	8007766 <_printf_common+0x8e>
	...

080077b4 <_printf_i>:
 80077b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	460c      	mov	r4, r1
 80077ba:	4691      	mov	r9, r2
 80077bc:	7e27      	ldrb	r7, [r4, #24]
 80077be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077c0:	2f78      	cmp	r7, #120	; 0x78
 80077c2:	4680      	mov	r8, r0
 80077c4:	469a      	mov	sl, r3
 80077c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077ca:	d807      	bhi.n	80077dc <_printf_i+0x28>
 80077cc:	2f62      	cmp	r7, #98	; 0x62
 80077ce:	d80a      	bhi.n	80077e6 <_printf_i+0x32>
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f000 80d8 	beq.w	8007986 <_printf_i+0x1d2>
 80077d6:	2f58      	cmp	r7, #88	; 0x58
 80077d8:	f000 80a3 	beq.w	8007922 <_printf_i+0x16e>
 80077dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077e4:	e03a      	b.n	800785c <_printf_i+0xa8>
 80077e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ea:	2b15      	cmp	r3, #21
 80077ec:	d8f6      	bhi.n	80077dc <_printf_i+0x28>
 80077ee:	a001      	add	r0, pc, #4	; (adr r0, 80077f4 <_printf_i+0x40>)
 80077f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80077f4:	0800784d 	.word	0x0800784d
 80077f8:	08007861 	.word	0x08007861
 80077fc:	080077dd 	.word	0x080077dd
 8007800:	080077dd 	.word	0x080077dd
 8007804:	080077dd 	.word	0x080077dd
 8007808:	080077dd 	.word	0x080077dd
 800780c:	08007861 	.word	0x08007861
 8007810:	080077dd 	.word	0x080077dd
 8007814:	080077dd 	.word	0x080077dd
 8007818:	080077dd 	.word	0x080077dd
 800781c:	080077dd 	.word	0x080077dd
 8007820:	0800796d 	.word	0x0800796d
 8007824:	08007891 	.word	0x08007891
 8007828:	0800794f 	.word	0x0800794f
 800782c:	080077dd 	.word	0x080077dd
 8007830:	080077dd 	.word	0x080077dd
 8007834:	0800798f 	.word	0x0800798f
 8007838:	080077dd 	.word	0x080077dd
 800783c:	08007891 	.word	0x08007891
 8007840:	080077dd 	.word	0x080077dd
 8007844:	080077dd 	.word	0x080077dd
 8007848:	08007957 	.word	0x08007957
 800784c:	680b      	ldr	r3, [r1, #0]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	600a      	str	r2, [r1, #0]
 8007854:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800785c:	2301      	movs	r3, #1
 800785e:	e0a3      	b.n	80079a8 <_printf_i+0x1f4>
 8007860:	6825      	ldr	r5, [r4, #0]
 8007862:	6808      	ldr	r0, [r1, #0]
 8007864:	062e      	lsls	r6, r5, #24
 8007866:	f100 0304 	add.w	r3, r0, #4
 800786a:	d50a      	bpl.n	8007882 <_printf_i+0xce>
 800786c:	6805      	ldr	r5, [r0, #0]
 800786e:	600b      	str	r3, [r1, #0]
 8007870:	2d00      	cmp	r5, #0
 8007872:	da03      	bge.n	800787c <_printf_i+0xc8>
 8007874:	232d      	movs	r3, #45	; 0x2d
 8007876:	426d      	negs	r5, r5
 8007878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800787c:	485e      	ldr	r0, [pc, #376]	; (80079f8 <_printf_i+0x244>)
 800787e:	230a      	movs	r3, #10
 8007880:	e019      	b.n	80078b6 <_printf_i+0x102>
 8007882:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007886:	6805      	ldr	r5, [r0, #0]
 8007888:	600b      	str	r3, [r1, #0]
 800788a:	bf18      	it	ne
 800788c:	b22d      	sxthne	r5, r5
 800788e:	e7ef      	b.n	8007870 <_printf_i+0xbc>
 8007890:	680b      	ldr	r3, [r1, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	1d18      	adds	r0, r3, #4
 8007896:	6008      	str	r0, [r1, #0]
 8007898:	0628      	lsls	r0, r5, #24
 800789a:	d501      	bpl.n	80078a0 <_printf_i+0xec>
 800789c:	681d      	ldr	r5, [r3, #0]
 800789e:	e002      	b.n	80078a6 <_printf_i+0xf2>
 80078a0:	0669      	lsls	r1, r5, #25
 80078a2:	d5fb      	bpl.n	800789c <_printf_i+0xe8>
 80078a4:	881d      	ldrh	r5, [r3, #0]
 80078a6:	4854      	ldr	r0, [pc, #336]	; (80079f8 <_printf_i+0x244>)
 80078a8:	2f6f      	cmp	r7, #111	; 0x6f
 80078aa:	bf0c      	ite	eq
 80078ac:	2308      	moveq	r3, #8
 80078ae:	230a      	movne	r3, #10
 80078b0:	2100      	movs	r1, #0
 80078b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078b6:	6866      	ldr	r6, [r4, #4]
 80078b8:	60a6      	str	r6, [r4, #8]
 80078ba:	2e00      	cmp	r6, #0
 80078bc:	bfa2      	ittt	ge
 80078be:	6821      	ldrge	r1, [r4, #0]
 80078c0:	f021 0104 	bicge.w	r1, r1, #4
 80078c4:	6021      	strge	r1, [r4, #0]
 80078c6:	b90d      	cbnz	r5, 80078cc <_printf_i+0x118>
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	d04d      	beq.n	8007968 <_printf_i+0x1b4>
 80078cc:	4616      	mov	r6, r2
 80078ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80078d2:	fb03 5711 	mls	r7, r3, r1, r5
 80078d6:	5dc7      	ldrb	r7, [r0, r7]
 80078d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078dc:	462f      	mov	r7, r5
 80078de:	42bb      	cmp	r3, r7
 80078e0:	460d      	mov	r5, r1
 80078e2:	d9f4      	bls.n	80078ce <_printf_i+0x11a>
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d10b      	bne.n	8007900 <_printf_i+0x14c>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	07df      	lsls	r7, r3, #31
 80078ec:	d508      	bpl.n	8007900 <_printf_i+0x14c>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	6861      	ldr	r1, [r4, #4]
 80078f2:	4299      	cmp	r1, r3
 80078f4:	bfde      	ittt	le
 80078f6:	2330      	movle	r3, #48	; 0x30
 80078f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007900:	1b92      	subs	r2, r2, r6
 8007902:	6122      	str	r2, [r4, #16]
 8007904:	f8cd a000 	str.w	sl, [sp]
 8007908:	464b      	mov	r3, r9
 800790a:	aa03      	add	r2, sp, #12
 800790c:	4621      	mov	r1, r4
 800790e:	4640      	mov	r0, r8
 8007910:	f7ff fee2 	bl	80076d8 <_printf_common>
 8007914:	3001      	adds	r0, #1
 8007916:	d14c      	bne.n	80079b2 <_printf_i+0x1fe>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	b004      	add	sp, #16
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	4835      	ldr	r0, [pc, #212]	; (80079f8 <_printf_i+0x244>)
 8007924:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	680e      	ldr	r6, [r1, #0]
 800792c:	061f      	lsls	r7, r3, #24
 800792e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007932:	600e      	str	r6, [r1, #0]
 8007934:	d514      	bpl.n	8007960 <_printf_i+0x1ac>
 8007936:	07d9      	lsls	r1, r3, #31
 8007938:	bf44      	itt	mi
 800793a:	f043 0320 	orrmi.w	r3, r3, #32
 800793e:	6023      	strmi	r3, [r4, #0]
 8007940:	b91d      	cbnz	r5, 800794a <_printf_i+0x196>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	f023 0320 	bic.w	r3, r3, #32
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	2310      	movs	r3, #16
 800794c:	e7b0      	b.n	80078b0 <_printf_i+0xfc>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	f043 0320 	orr.w	r3, r3, #32
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	2378      	movs	r3, #120	; 0x78
 8007958:	4828      	ldr	r0, [pc, #160]	; (80079fc <_printf_i+0x248>)
 800795a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800795e:	e7e3      	b.n	8007928 <_printf_i+0x174>
 8007960:	065e      	lsls	r6, r3, #25
 8007962:	bf48      	it	mi
 8007964:	b2ad      	uxthmi	r5, r5
 8007966:	e7e6      	b.n	8007936 <_printf_i+0x182>
 8007968:	4616      	mov	r6, r2
 800796a:	e7bb      	b.n	80078e4 <_printf_i+0x130>
 800796c:	680b      	ldr	r3, [r1, #0]
 800796e:	6826      	ldr	r6, [r4, #0]
 8007970:	6960      	ldr	r0, [r4, #20]
 8007972:	1d1d      	adds	r5, r3, #4
 8007974:	600d      	str	r5, [r1, #0]
 8007976:	0635      	lsls	r5, r6, #24
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	d501      	bpl.n	8007980 <_printf_i+0x1cc>
 800797c:	6018      	str	r0, [r3, #0]
 800797e:	e002      	b.n	8007986 <_printf_i+0x1d2>
 8007980:	0671      	lsls	r1, r6, #25
 8007982:	d5fb      	bpl.n	800797c <_printf_i+0x1c8>
 8007984:	8018      	strh	r0, [r3, #0]
 8007986:	2300      	movs	r3, #0
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	4616      	mov	r6, r2
 800798c:	e7ba      	b.n	8007904 <_printf_i+0x150>
 800798e:	680b      	ldr	r3, [r1, #0]
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	600a      	str	r2, [r1, #0]
 8007994:	681e      	ldr	r6, [r3, #0]
 8007996:	6862      	ldr	r2, [r4, #4]
 8007998:	2100      	movs	r1, #0
 800799a:	4630      	mov	r0, r6
 800799c:	f7f8 fc20 	bl	80001e0 <memchr>
 80079a0:	b108      	cbz	r0, 80079a6 <_printf_i+0x1f2>
 80079a2:	1b80      	subs	r0, r0, r6
 80079a4:	6060      	str	r0, [r4, #4]
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	2300      	movs	r3, #0
 80079ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b0:	e7a8      	b.n	8007904 <_printf_i+0x150>
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	4632      	mov	r2, r6
 80079b6:	4649      	mov	r1, r9
 80079b8:	4640      	mov	r0, r8
 80079ba:	47d0      	blx	sl
 80079bc:	3001      	adds	r0, #1
 80079be:	d0ab      	beq.n	8007918 <_printf_i+0x164>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	079b      	lsls	r3, r3, #30
 80079c4:	d413      	bmi.n	80079ee <_printf_i+0x23a>
 80079c6:	68e0      	ldr	r0, [r4, #12]
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	4298      	cmp	r0, r3
 80079cc:	bfb8      	it	lt
 80079ce:	4618      	movlt	r0, r3
 80079d0:	e7a4      	b.n	800791c <_printf_i+0x168>
 80079d2:	2301      	movs	r3, #1
 80079d4:	4632      	mov	r2, r6
 80079d6:	4649      	mov	r1, r9
 80079d8:	4640      	mov	r0, r8
 80079da:	47d0      	blx	sl
 80079dc:	3001      	adds	r0, #1
 80079de:	d09b      	beq.n	8007918 <_printf_i+0x164>
 80079e0:	3501      	adds	r5, #1
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	9903      	ldr	r1, [sp, #12]
 80079e6:	1a5b      	subs	r3, r3, r1
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	dcf2      	bgt.n	80079d2 <_printf_i+0x21e>
 80079ec:	e7eb      	b.n	80079c6 <_printf_i+0x212>
 80079ee:	2500      	movs	r5, #0
 80079f0:	f104 0619 	add.w	r6, r4, #25
 80079f4:	e7f5      	b.n	80079e2 <_printf_i+0x22e>
 80079f6:	bf00      	nop
 80079f8:	08009b9a 	.word	0x08009b9a
 80079fc:	08009bab 	.word	0x08009bab

08007a00 <iprintf>:
 8007a00:	b40f      	push	{r0, r1, r2, r3}
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <iprintf+0x2c>)
 8007a04:	b513      	push	{r0, r1, r4, lr}
 8007a06:	681c      	ldr	r4, [r3, #0]
 8007a08:	b124      	cbz	r4, 8007a14 <iprintf+0x14>
 8007a0a:	69a3      	ldr	r3, [r4, #24]
 8007a0c:	b913      	cbnz	r3, 8007a14 <iprintf+0x14>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 fede 	bl	80087d0 <__sinit>
 8007a14:	ab05      	add	r3, sp, #20
 8007a16:	9a04      	ldr	r2, [sp, #16]
 8007a18:	68a1      	ldr	r1, [r4, #8]
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f001 fbf5 	bl	800920c <_vfiprintf_r>
 8007a22:	b002      	add	sp, #8
 8007a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a28:	b004      	add	sp, #16
 8007a2a:	4770      	bx	lr
 8007a2c:	20000184 	.word	0x20000184

08007a30 <quorem>:
 8007a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	6903      	ldr	r3, [r0, #16]
 8007a36:	690c      	ldr	r4, [r1, #16]
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	f2c0 8081 	blt.w	8007b42 <quorem+0x112>
 8007a40:	3c01      	subs	r4, #1
 8007a42:	f101 0814 	add.w	r8, r1, #20
 8007a46:	f100 0514 	add.w	r5, r0, #20
 8007a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a68:	d331      	bcc.n	8007ace <quorem+0x9e>
 8007a6a:	f04f 0e00 	mov.w	lr, #0
 8007a6e:	4640      	mov	r0, r8
 8007a70:	46ac      	mov	ip, r5
 8007a72:	46f2      	mov	sl, lr
 8007a74:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a78:	b293      	uxth	r3, r2
 8007a7a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	ebaa 0303 	sub.w	r3, sl, r3
 8007a88:	0c12      	lsrs	r2, r2, #16
 8007a8a:	f8dc a000 	ldr.w	sl, [ip]
 8007a8e:	fb06 e202 	mla	r2, r6, r2, lr
 8007a92:	fa13 f38a 	uxtah	r3, r3, sl
 8007a96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a9a:	fa1f fa82 	uxth.w	sl, r2
 8007a9e:	f8dc 2000 	ldr.w	r2, [ip]
 8007aa2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007aa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ab0:	4581      	cmp	r9, r0
 8007ab2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ab6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aba:	d2db      	bcs.n	8007a74 <quorem+0x44>
 8007abc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ac0:	b92b      	cbnz	r3, 8007ace <quorem+0x9e>
 8007ac2:	9b01      	ldr	r3, [sp, #4]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	d32e      	bcc.n	8007b2a <quorem+0xfa>
 8007acc:	613c      	str	r4, [r7, #16]
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f001 f9b8 	bl	8008e44 <__mcmp>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	db24      	blt.n	8007b22 <quorem+0xf2>
 8007ad8:	3601      	adds	r6, #1
 8007ada:	4628      	mov	r0, r5
 8007adc:	f04f 0c00 	mov.w	ip, #0
 8007ae0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ae4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ae8:	b293      	uxth	r3, r2
 8007aea:	ebac 0303 	sub.w	r3, ip, r3
 8007aee:	0c12      	lsrs	r2, r2, #16
 8007af0:	fa13 f38e 	uxtah	r3, r3, lr
 8007af4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007af8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b02:	45c1      	cmp	r9, r8
 8007b04:	f840 3b04 	str.w	r3, [r0], #4
 8007b08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b0c:	d2e8      	bcs.n	8007ae0 <quorem+0xb0>
 8007b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b16:	b922      	cbnz	r2, 8007b22 <quorem+0xf2>
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	d30a      	bcc.n	8007b36 <quorem+0x106>
 8007b20:	613c      	str	r4, [r7, #16]
 8007b22:	4630      	mov	r0, r6
 8007b24:	b003      	add	sp, #12
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	d1cc      	bne.n	8007acc <quorem+0x9c>
 8007b32:	3c01      	subs	r4, #1
 8007b34:	e7c7      	b.n	8007ac6 <quorem+0x96>
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	3b04      	subs	r3, #4
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	d1f0      	bne.n	8007b20 <quorem+0xf0>
 8007b3e:	3c01      	subs	r4, #1
 8007b40:	e7eb      	b.n	8007b1a <quorem+0xea>
 8007b42:	2000      	movs	r0, #0
 8007b44:	e7ee      	b.n	8007b24 <quorem+0xf4>
	...

08007b48 <_dtoa_r>:
 8007b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4c:	ed2d 8b02 	vpush	{d8}
 8007b50:	ec57 6b10 	vmov	r6, r7, d0
 8007b54:	b095      	sub	sp, #84	; 0x54
 8007b56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b5c:	9105      	str	r1, [sp, #20]
 8007b5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b62:	4604      	mov	r4, r0
 8007b64:	9209      	str	r2, [sp, #36]	; 0x24
 8007b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b68:	b975      	cbnz	r5, 8007b88 <_dtoa_r+0x40>
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f000 fed6 	bl	800891c <malloc>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6260      	str	r0, [r4, #36]	; 0x24
 8007b74:	b920      	cbnz	r0, 8007b80 <_dtoa_r+0x38>
 8007b76:	4bb2      	ldr	r3, [pc, #712]	; (8007e40 <_dtoa_r+0x2f8>)
 8007b78:	21ea      	movs	r1, #234	; 0xea
 8007b7a:	48b2      	ldr	r0, [pc, #712]	; (8007e44 <_dtoa_r+0x2fc>)
 8007b7c:	f001 fd9c 	bl	80096b8 <__assert_func>
 8007b80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b84:	6005      	str	r5, [r0, #0]
 8007b86:	60c5      	str	r5, [r0, #12]
 8007b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8a:	6819      	ldr	r1, [r3, #0]
 8007b8c:	b151      	cbz	r1, 8007ba4 <_dtoa_r+0x5c>
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	604a      	str	r2, [r1, #4]
 8007b92:	2301      	movs	r3, #1
 8007b94:	4093      	lsls	r3, r2
 8007b96:	608b      	str	r3, [r1, #8]
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 ff15 	bl	80089c8 <_Bfree>
 8007b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	1e3b      	subs	r3, r7, #0
 8007ba6:	bfb9      	ittee	lt
 8007ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bac:	9303      	strlt	r3, [sp, #12]
 8007bae:	2300      	movge	r3, #0
 8007bb0:	f8c8 3000 	strge.w	r3, [r8]
 8007bb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007bb8:	4ba3      	ldr	r3, [pc, #652]	; (8007e48 <_dtoa_r+0x300>)
 8007bba:	bfbc      	itt	lt
 8007bbc:	2201      	movlt	r2, #1
 8007bbe:	f8c8 2000 	strlt.w	r2, [r8]
 8007bc2:	ea33 0309 	bics.w	r3, r3, r9
 8007bc6:	d11b      	bne.n	8007c00 <_dtoa_r+0xb8>
 8007bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bca:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bd4:	4333      	orrs	r3, r6
 8007bd6:	f000 857a 	beq.w	80086ce <_dtoa_r+0xb86>
 8007bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bdc:	b963      	cbnz	r3, 8007bf8 <_dtoa_r+0xb0>
 8007bde:	4b9b      	ldr	r3, [pc, #620]	; (8007e4c <_dtoa_r+0x304>)
 8007be0:	e024      	b.n	8007c2c <_dtoa_r+0xe4>
 8007be2:	4b9b      	ldr	r3, [pc, #620]	; (8007e50 <_dtoa_r+0x308>)
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	3308      	adds	r3, #8
 8007be8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	9800      	ldr	r0, [sp, #0]
 8007bee:	b015      	add	sp, #84	; 0x54
 8007bf0:	ecbd 8b02 	vpop	{d8}
 8007bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf8:	4b94      	ldr	r3, [pc, #592]	; (8007e4c <_dtoa_r+0x304>)
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	3303      	adds	r3, #3
 8007bfe:	e7f3      	b.n	8007be8 <_dtoa_r+0xa0>
 8007c00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c04:	2200      	movs	r2, #0
 8007c06:	ec51 0b17 	vmov	r0, r1, d7
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c10:	f7f8 ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c14:	4680      	mov	r8, r0
 8007c16:	b158      	cbz	r0, 8007c30 <_dtoa_r+0xe8>
 8007c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8551 	beq.w	80086c8 <_dtoa_r+0xb80>
 8007c26:	488b      	ldr	r0, [pc, #556]	; (8007e54 <_dtoa_r+0x30c>)
 8007c28:	6018      	str	r0, [r3, #0]
 8007c2a:	1e43      	subs	r3, r0, #1
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	e7dd      	b.n	8007bec <_dtoa_r+0xa4>
 8007c30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c34:	aa12      	add	r2, sp, #72	; 0x48
 8007c36:	a913      	add	r1, sp, #76	; 0x4c
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f001 f9a7 	bl	8008f8c <__d2b>
 8007c3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c42:	4683      	mov	fp, r0
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	d07c      	beq.n	8007d42 <_dtoa_r+0x1fa>
 8007c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007c56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c62:	4b7d      	ldr	r3, [pc, #500]	; (8007e58 <_dtoa_r+0x310>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 fb0d 	bl	8000288 <__aeabi_dsub>
 8007c6e:	a36e      	add	r3, pc, #440	; (adr r3, 8007e28 <_dtoa_r+0x2e0>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fcc0 	bl	80005f8 <__aeabi_dmul>
 8007c78:	a36d      	add	r3, pc, #436	; (adr r3, 8007e30 <_dtoa_r+0x2e8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fb05 	bl	800028c <__adddf3>
 8007c82:	4606      	mov	r6, r0
 8007c84:	4628      	mov	r0, r5
 8007c86:	460f      	mov	r7, r1
 8007c88:	f7f8 fc4c 	bl	8000524 <__aeabi_i2d>
 8007c8c:	a36a      	add	r3, pc, #424	; (adr r3, 8007e38 <_dtoa_r+0x2f0>)
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f7f8 fcb1 	bl	80005f8 <__aeabi_dmul>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 faf5 	bl	800028c <__adddf3>
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	f7f8 ff57 	bl	8000b58 <__aeabi_d2iz>
 8007caa:	2200      	movs	r2, #0
 8007cac:	4682      	mov	sl, r0
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 ff12 	bl	8000adc <__aeabi_dcmplt>
 8007cb8:	b148      	cbz	r0, 8007cce <_dtoa_r+0x186>
 8007cba:	4650      	mov	r0, sl
 8007cbc:	f7f8 fc32 	bl	8000524 <__aeabi_i2d>
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	f7f8 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc8:	b908      	cbnz	r0, 8007cce <_dtoa_r+0x186>
 8007cca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cce:	f1ba 0f16 	cmp.w	sl, #22
 8007cd2:	d854      	bhi.n	8007d7e <_dtoa_r+0x236>
 8007cd4:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <_dtoa_r+0x314>)
 8007cd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ce2:	f7f8 fefb 	bl	8000adc <__aeabi_dcmplt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d04b      	beq.n	8007d82 <_dtoa_r+0x23a>
 8007cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cee:	2300      	movs	r3, #0
 8007cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cf4:	1b5d      	subs	r5, r3, r5
 8007cf6:	1e6b      	subs	r3, r5, #1
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	bf43      	ittte	mi
 8007cfc:	2300      	movmi	r3, #0
 8007cfe:	f1c5 0801 	rsbmi	r8, r5, #1
 8007d02:	9304      	strmi	r3, [sp, #16]
 8007d04:	f04f 0800 	movpl.w	r8, #0
 8007d08:	f1ba 0f00 	cmp.w	sl, #0
 8007d0c:	db3b      	blt.n	8007d86 <_dtoa_r+0x23e>
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007d14:	4453      	add	r3, sl
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9306      	str	r3, [sp, #24]
 8007d1c:	9b05      	ldr	r3, [sp, #20]
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d869      	bhi.n	8007df6 <_dtoa_r+0x2ae>
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	bfc4      	itt	gt
 8007d26:	3b04      	subgt	r3, #4
 8007d28:	9305      	strgt	r3, [sp, #20]
 8007d2a:	9b05      	ldr	r3, [sp, #20]
 8007d2c:	f1a3 0302 	sub.w	r3, r3, #2
 8007d30:	bfcc      	ite	gt
 8007d32:	2500      	movgt	r5, #0
 8007d34:	2501      	movle	r5, #1
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d869      	bhi.n	8007e0e <_dtoa_r+0x2c6>
 8007d3a:	e8df f003 	tbb	[pc, r3]
 8007d3e:	4e2c      	.short	0x4e2c
 8007d40:	5a4c      	.short	0x5a4c
 8007d42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d46:	441d      	add	r5, r3
 8007d48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	bfc1      	itttt	gt
 8007d50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d58:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d60:	bfda      	itte	le
 8007d62:	f1c3 0320 	rsble	r3, r3, #32
 8007d66:	fa06 f003 	lslle.w	r0, r6, r3
 8007d6a:	4318      	orrgt	r0, r3
 8007d6c:	f7f8 fbca 	bl	8000504 <__aeabi_ui2d>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4606      	mov	r6, r0
 8007d74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d78:	3d01      	subs	r5, #1
 8007d7a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d7c:	e771      	b.n	8007c62 <_dtoa_r+0x11a>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e7b6      	b.n	8007cf0 <_dtoa_r+0x1a8>
 8007d82:	900e      	str	r0, [sp, #56]	; 0x38
 8007d84:	e7b5      	b.n	8007cf2 <_dtoa_r+0x1aa>
 8007d86:	f1ca 0300 	rsb	r3, sl, #0
 8007d8a:	9306      	str	r3, [sp, #24]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	eba8 080a 	sub.w	r8, r8, sl
 8007d92:	930d      	str	r3, [sp, #52]	; 0x34
 8007d94:	e7c2      	b.n	8007d1c <_dtoa_r+0x1d4>
 8007d96:	2300      	movs	r3, #0
 8007d98:	9308      	str	r3, [sp, #32]
 8007d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dc39      	bgt.n	8007e14 <_dtoa_r+0x2cc>
 8007da0:	f04f 0901 	mov.w	r9, #1
 8007da4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007da8:	464b      	mov	r3, r9
 8007daa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007dae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007db0:	2200      	movs	r2, #0
 8007db2:	6042      	str	r2, [r0, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	f102 0614 	add.w	r6, r2, #20
 8007dba:	429e      	cmp	r6, r3
 8007dbc:	6841      	ldr	r1, [r0, #4]
 8007dbe:	d92f      	bls.n	8007e20 <_dtoa_r+0x2d8>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 fdc1 	bl	8008948 <_Balloc>
 8007dc6:	9000      	str	r0, [sp, #0]
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d14b      	bne.n	8007e64 <_dtoa_r+0x31c>
 8007dcc:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <_dtoa_r+0x318>)
 8007dce:	4602      	mov	r2, r0
 8007dd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dd4:	e6d1      	b.n	8007b7a <_dtoa_r+0x32>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e7de      	b.n	8007d98 <_dtoa_r+0x250>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	9308      	str	r3, [sp, #32]
 8007dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de0:	eb0a 0903 	add.w	r9, sl, r3
 8007de4:	f109 0301 	add.w	r3, r9, #1
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	bfb8      	it	lt
 8007dee:	2301      	movlt	r3, #1
 8007df0:	e7dd      	b.n	8007dae <_dtoa_r+0x266>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e7f2      	b.n	8007ddc <_dtoa_r+0x294>
 8007df6:	2501      	movs	r5, #1
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9305      	str	r3, [sp, #20]
 8007dfc:	9508      	str	r5, [sp, #32]
 8007dfe:	f04f 39ff 	mov.w	r9, #4294967295
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e08:	2312      	movs	r3, #18
 8007e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e0c:	e7cf      	b.n	8007dae <_dtoa_r+0x266>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	9308      	str	r3, [sp, #32]
 8007e12:	e7f4      	b.n	8007dfe <_dtoa_r+0x2b6>
 8007e14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e18:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	e7c6      	b.n	8007dae <_dtoa_r+0x266>
 8007e20:	3101      	adds	r1, #1
 8007e22:	6041      	str	r1, [r0, #4]
 8007e24:	0052      	lsls	r2, r2, #1
 8007e26:	e7c6      	b.n	8007db6 <_dtoa_r+0x26e>
 8007e28:	636f4361 	.word	0x636f4361
 8007e2c:	3fd287a7 	.word	0x3fd287a7
 8007e30:	8b60c8b3 	.word	0x8b60c8b3
 8007e34:	3fc68a28 	.word	0x3fc68a28
 8007e38:	509f79fb 	.word	0x509f79fb
 8007e3c:	3fd34413 	.word	0x3fd34413
 8007e40:	08009bc9 	.word	0x08009bc9
 8007e44:	08009be0 	.word	0x08009be0
 8007e48:	7ff00000 	.word	0x7ff00000
 8007e4c:	08009bc5 	.word	0x08009bc5
 8007e50:	08009bbc 	.word	0x08009bbc
 8007e54:	08009b99 	.word	0x08009b99
 8007e58:	3ff80000 	.word	0x3ff80000
 8007e5c:	08009d38 	.word	0x08009d38
 8007e60:	08009c3f 	.word	0x08009c3f
 8007e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e66:	9a00      	ldr	r2, [sp, #0]
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	2b0e      	cmp	r3, #14
 8007e6e:	f200 80ad 	bhi.w	8007fcc <_dtoa_r+0x484>
 8007e72:	2d00      	cmp	r5, #0
 8007e74:	f000 80aa 	beq.w	8007fcc <_dtoa_r+0x484>
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	dd36      	ble.n	8007eec <_dtoa_r+0x3a4>
 8007e7e:	4ac3      	ldr	r2, [pc, #780]	; (800818c <_dtoa_r+0x644>)
 8007e80:	f00a 030f 	and.w	r3, sl, #15
 8007e84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e88:	ed93 7b00 	vldr	d7, [r3]
 8007e8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e94:	eeb0 8a47 	vmov.f32	s16, s14
 8007e98:	eef0 8a67 	vmov.f32	s17, s15
 8007e9c:	d016      	beq.n	8007ecc <_dtoa_r+0x384>
 8007e9e:	4bbc      	ldr	r3, [pc, #752]	; (8008190 <_dtoa_r+0x648>)
 8007ea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ea8:	f7f8 fcd0 	bl	800084c <__aeabi_ddiv>
 8007eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb0:	f007 070f 	and.w	r7, r7, #15
 8007eb4:	2503      	movs	r5, #3
 8007eb6:	4eb6      	ldr	r6, [pc, #728]	; (8008190 <_dtoa_r+0x648>)
 8007eb8:	b957      	cbnz	r7, 8007ed0 <_dtoa_r+0x388>
 8007eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ebe:	ec53 2b18 	vmov	r2, r3, d8
 8007ec2:	f7f8 fcc3 	bl	800084c <__aeabi_ddiv>
 8007ec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eca:	e029      	b.n	8007f20 <_dtoa_r+0x3d8>
 8007ecc:	2502      	movs	r5, #2
 8007ece:	e7f2      	b.n	8007eb6 <_dtoa_r+0x36e>
 8007ed0:	07f9      	lsls	r1, r7, #31
 8007ed2:	d508      	bpl.n	8007ee6 <_dtoa_r+0x39e>
 8007ed4:	ec51 0b18 	vmov	r0, r1, d8
 8007ed8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007edc:	f7f8 fb8c 	bl	80005f8 <__aeabi_dmul>
 8007ee0:	ec41 0b18 	vmov	d8, r0, r1
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	107f      	asrs	r7, r7, #1
 8007ee8:	3608      	adds	r6, #8
 8007eea:	e7e5      	b.n	8007eb8 <_dtoa_r+0x370>
 8007eec:	f000 80a6 	beq.w	800803c <_dtoa_r+0x4f4>
 8007ef0:	f1ca 0600 	rsb	r6, sl, #0
 8007ef4:	4ba5      	ldr	r3, [pc, #660]	; (800818c <_dtoa_r+0x644>)
 8007ef6:	4fa6      	ldr	r7, [pc, #664]	; (8008190 <_dtoa_r+0x648>)
 8007ef8:	f006 020f 	and.w	r2, r6, #15
 8007efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f08:	f7f8 fb76 	bl	80005f8 <__aeabi_dmul>
 8007f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f10:	1136      	asrs	r6, r6, #4
 8007f12:	2300      	movs	r3, #0
 8007f14:	2502      	movs	r5, #2
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	f040 8085 	bne.w	8008026 <_dtoa_r+0x4de>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1d2      	bne.n	8007ec6 <_dtoa_r+0x37e>
 8007f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 808c 	beq.w	8008040 <_dtoa_r+0x4f8>
 8007f28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f2c:	4b99      	ldr	r3, [pc, #612]	; (8008194 <_dtoa_r+0x64c>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4630      	mov	r0, r6
 8007f32:	4639      	mov	r1, r7
 8007f34:	f7f8 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f000 8081 	beq.w	8008040 <_dtoa_r+0x4f8>
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d07d      	beq.n	8008040 <_dtoa_r+0x4f8>
 8007f44:	f1b9 0f00 	cmp.w	r9, #0
 8007f48:	dd3c      	ble.n	8007fc4 <_dtoa_r+0x47c>
 8007f4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f4e:	9307      	str	r3, [sp, #28]
 8007f50:	2200      	movs	r2, #0
 8007f52:	4b91      	ldr	r3, [pc, #580]	; (8008198 <_dtoa_r+0x650>)
 8007f54:	4630      	mov	r0, r6
 8007f56:	4639      	mov	r1, r7
 8007f58:	f7f8 fb4e 	bl	80005f8 <__aeabi_dmul>
 8007f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f60:	3501      	adds	r5, #1
 8007f62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f7f8 fada 	bl	8000524 <__aeabi_i2d>
 8007f70:	4632      	mov	r2, r6
 8007f72:	463b      	mov	r3, r7
 8007f74:	f7f8 fb40 	bl	80005f8 <__aeabi_dmul>
 8007f78:	4b88      	ldr	r3, [pc, #544]	; (800819c <_dtoa_r+0x654>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f7f8 f986 	bl	800028c <__adddf3>
 8007f80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f88:	9303      	str	r3, [sp, #12]
 8007f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d15c      	bne.n	800804a <_dtoa_r+0x502>
 8007f90:	4b83      	ldr	r3, [pc, #524]	; (80081a0 <_dtoa_r+0x658>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 f976 	bl	8000288 <__aeabi_dsub>
 8007f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	f7f8 fdb8 	bl	8000b18 <__aeabi_dcmpgt>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	f040 8296 	bne.w	80084da <_dtoa_r+0x992>
 8007fae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fb8:	4639      	mov	r1, r7
 8007fba:	f7f8 fd8f 	bl	8000adc <__aeabi_dcmplt>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f040 8288 	bne.w	80084d4 <_dtoa_r+0x98c>
 8007fc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f2c0 8158 	blt.w	8008284 <_dtoa_r+0x73c>
 8007fd4:	f1ba 0f0e 	cmp.w	sl, #14
 8007fd8:	f300 8154 	bgt.w	8008284 <_dtoa_r+0x73c>
 8007fdc:	4b6b      	ldr	r3, [pc, #428]	; (800818c <_dtoa_r+0x644>)
 8007fde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fe2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f280 80e3 	bge.w	80081b4 <_dtoa_r+0x66c>
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f300 80df 	bgt.w	80081b4 <_dtoa_r+0x66c>
 8007ff6:	f040 826d 	bne.w	80084d4 <_dtoa_r+0x98c>
 8007ffa:	4b69      	ldr	r3, [pc, #420]	; (80081a0 <_dtoa_r+0x658>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4640      	mov	r0, r8
 8008000:	4649      	mov	r1, r9
 8008002:	f7f8 faf9 	bl	80005f8 <__aeabi_dmul>
 8008006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800a:	f7f8 fd7b 	bl	8000b04 <__aeabi_dcmpge>
 800800e:	9e01      	ldr	r6, [sp, #4]
 8008010:	4637      	mov	r7, r6
 8008012:	2800      	cmp	r0, #0
 8008014:	f040 8243 	bne.w	800849e <_dtoa_r+0x956>
 8008018:	9d00      	ldr	r5, [sp, #0]
 800801a:	2331      	movs	r3, #49	; 0x31
 800801c:	f805 3b01 	strb.w	r3, [r5], #1
 8008020:	f10a 0a01 	add.w	sl, sl, #1
 8008024:	e23f      	b.n	80084a6 <_dtoa_r+0x95e>
 8008026:	07f2      	lsls	r2, r6, #31
 8008028:	d505      	bpl.n	8008036 <_dtoa_r+0x4ee>
 800802a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802e:	f7f8 fae3 	bl	80005f8 <__aeabi_dmul>
 8008032:	3501      	adds	r5, #1
 8008034:	2301      	movs	r3, #1
 8008036:	1076      	asrs	r6, r6, #1
 8008038:	3708      	adds	r7, #8
 800803a:	e76c      	b.n	8007f16 <_dtoa_r+0x3ce>
 800803c:	2502      	movs	r5, #2
 800803e:	e76f      	b.n	8007f20 <_dtoa_r+0x3d8>
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	f8cd a01c 	str.w	sl, [sp, #28]
 8008046:	930c      	str	r3, [sp, #48]	; 0x30
 8008048:	e78d      	b.n	8007f66 <_dtoa_r+0x41e>
 800804a:	9900      	ldr	r1, [sp, #0]
 800804c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800804e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008050:	4b4e      	ldr	r3, [pc, #312]	; (800818c <_dtoa_r+0x644>)
 8008052:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008056:	4401      	add	r1, r0
 8008058:	9102      	str	r1, [sp, #8]
 800805a:	9908      	ldr	r1, [sp, #32]
 800805c:	eeb0 8a47 	vmov.f32	s16, s14
 8008060:	eef0 8a67 	vmov.f32	s17, s15
 8008064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008068:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800806c:	2900      	cmp	r1, #0
 800806e:	d045      	beq.n	80080fc <_dtoa_r+0x5b4>
 8008070:	494c      	ldr	r1, [pc, #304]	; (80081a4 <_dtoa_r+0x65c>)
 8008072:	2000      	movs	r0, #0
 8008074:	f7f8 fbea 	bl	800084c <__aeabi_ddiv>
 8008078:	ec53 2b18 	vmov	r2, r3, d8
 800807c:	f7f8 f904 	bl	8000288 <__aeabi_dsub>
 8008080:	9d00      	ldr	r5, [sp, #0]
 8008082:	ec41 0b18 	vmov	d8, r0, r1
 8008086:	4639      	mov	r1, r7
 8008088:	4630      	mov	r0, r6
 800808a:	f7f8 fd65 	bl	8000b58 <__aeabi_d2iz>
 800808e:	900c      	str	r0, [sp, #48]	; 0x30
 8008090:	f7f8 fa48 	bl	8000524 <__aeabi_i2d>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4630      	mov	r0, r6
 800809a:	4639      	mov	r1, r7
 800809c:	f7f8 f8f4 	bl	8000288 <__aeabi_dsub>
 80080a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080a2:	3330      	adds	r3, #48	; 0x30
 80080a4:	f805 3b01 	strb.w	r3, [r5], #1
 80080a8:	ec53 2b18 	vmov	r2, r3, d8
 80080ac:	4606      	mov	r6, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	f7f8 fd14 	bl	8000adc <__aeabi_dcmplt>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d165      	bne.n	8008184 <_dtoa_r+0x63c>
 80080b8:	4632      	mov	r2, r6
 80080ba:	463b      	mov	r3, r7
 80080bc:	4935      	ldr	r1, [pc, #212]	; (8008194 <_dtoa_r+0x64c>)
 80080be:	2000      	movs	r0, #0
 80080c0:	f7f8 f8e2 	bl	8000288 <__aeabi_dsub>
 80080c4:	ec53 2b18 	vmov	r2, r3, d8
 80080c8:	f7f8 fd08 	bl	8000adc <__aeabi_dcmplt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f040 80b9 	bne.w	8008244 <_dtoa_r+0x6fc>
 80080d2:	9b02      	ldr	r3, [sp, #8]
 80080d4:	429d      	cmp	r5, r3
 80080d6:	f43f af75 	beq.w	8007fc4 <_dtoa_r+0x47c>
 80080da:	4b2f      	ldr	r3, [pc, #188]	; (8008198 <_dtoa_r+0x650>)
 80080dc:	ec51 0b18 	vmov	r0, r1, d8
 80080e0:	2200      	movs	r2, #0
 80080e2:	f7f8 fa89 	bl	80005f8 <__aeabi_dmul>
 80080e6:	4b2c      	ldr	r3, [pc, #176]	; (8008198 <_dtoa_r+0x650>)
 80080e8:	ec41 0b18 	vmov	d8, r0, r1
 80080ec:	2200      	movs	r2, #0
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 fa81 	bl	80005f8 <__aeabi_dmul>
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	e7c4      	b.n	8008086 <_dtoa_r+0x53e>
 80080fc:	ec51 0b17 	vmov	r0, r1, d7
 8008100:	f7f8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8008104:	9b02      	ldr	r3, [sp, #8]
 8008106:	9d00      	ldr	r5, [sp, #0]
 8008108:	930c      	str	r3, [sp, #48]	; 0x30
 800810a:	ec41 0b18 	vmov	d8, r0, r1
 800810e:	4639      	mov	r1, r7
 8008110:	4630      	mov	r0, r6
 8008112:	f7f8 fd21 	bl	8000b58 <__aeabi_d2iz>
 8008116:	9011      	str	r0, [sp, #68]	; 0x44
 8008118:	f7f8 fa04 	bl	8000524 <__aeabi_i2d>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 f8b0 	bl	8000288 <__aeabi_dsub>
 8008128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800812a:	3330      	adds	r3, #48	; 0x30
 800812c:	f805 3b01 	strb.w	r3, [r5], #1
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	429d      	cmp	r5, r3
 8008134:	4606      	mov	r6, r0
 8008136:	460f      	mov	r7, r1
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	d134      	bne.n	80081a8 <_dtoa_r+0x660>
 800813e:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <_dtoa_r+0x65c>)
 8008140:	ec51 0b18 	vmov	r0, r1, d8
 8008144:	f7f8 f8a2 	bl	800028c <__adddf3>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4630      	mov	r0, r6
 800814e:	4639      	mov	r1, r7
 8008150:	f7f8 fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8008154:	2800      	cmp	r0, #0
 8008156:	d175      	bne.n	8008244 <_dtoa_r+0x6fc>
 8008158:	ec53 2b18 	vmov	r2, r3, d8
 800815c:	4911      	ldr	r1, [pc, #68]	; (80081a4 <_dtoa_r+0x65c>)
 800815e:	2000      	movs	r0, #0
 8008160:	f7f8 f892 	bl	8000288 <__aeabi_dsub>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4630      	mov	r0, r6
 800816a:	4639      	mov	r1, r7
 800816c:	f7f8 fcb6 	bl	8000adc <__aeabi_dcmplt>
 8008170:	2800      	cmp	r0, #0
 8008172:	f43f af27 	beq.w	8007fc4 <_dtoa_r+0x47c>
 8008176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008178:	1e6b      	subs	r3, r5, #1
 800817a:	930c      	str	r3, [sp, #48]	; 0x30
 800817c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008180:	2b30      	cmp	r3, #48	; 0x30
 8008182:	d0f8      	beq.n	8008176 <_dtoa_r+0x62e>
 8008184:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008188:	e04a      	b.n	8008220 <_dtoa_r+0x6d8>
 800818a:	bf00      	nop
 800818c:	08009d38 	.word	0x08009d38
 8008190:	08009d10 	.word	0x08009d10
 8008194:	3ff00000 	.word	0x3ff00000
 8008198:	40240000 	.word	0x40240000
 800819c:	401c0000 	.word	0x401c0000
 80081a0:	40140000 	.word	0x40140000
 80081a4:	3fe00000 	.word	0x3fe00000
 80081a8:	4baf      	ldr	r3, [pc, #700]	; (8008468 <_dtoa_r+0x920>)
 80081aa:	f7f8 fa25 	bl	80005f8 <__aeabi_dmul>
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	e7ac      	b.n	800810e <_dtoa_r+0x5c6>
 80081b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081b8:	9d00      	ldr	r5, [sp, #0]
 80081ba:	4642      	mov	r2, r8
 80081bc:	464b      	mov	r3, r9
 80081be:	4630      	mov	r0, r6
 80081c0:	4639      	mov	r1, r7
 80081c2:	f7f8 fb43 	bl	800084c <__aeabi_ddiv>
 80081c6:	f7f8 fcc7 	bl	8000b58 <__aeabi_d2iz>
 80081ca:	9002      	str	r0, [sp, #8]
 80081cc:	f7f8 f9aa 	bl	8000524 <__aeabi_i2d>
 80081d0:	4642      	mov	r2, r8
 80081d2:	464b      	mov	r3, r9
 80081d4:	f7f8 fa10 	bl	80005f8 <__aeabi_dmul>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 f852 	bl	8000288 <__aeabi_dsub>
 80081e4:	9e02      	ldr	r6, [sp, #8]
 80081e6:	9f01      	ldr	r7, [sp, #4]
 80081e8:	3630      	adds	r6, #48	; 0x30
 80081ea:	f805 6b01 	strb.w	r6, [r5], #1
 80081ee:	9e00      	ldr	r6, [sp, #0]
 80081f0:	1bae      	subs	r6, r5, r6
 80081f2:	42b7      	cmp	r7, r6
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	d137      	bne.n	800826a <_dtoa_r+0x722>
 80081fa:	f7f8 f847 	bl	800028c <__adddf3>
 80081fe:	4642      	mov	r2, r8
 8008200:	464b      	mov	r3, r9
 8008202:	4606      	mov	r6, r0
 8008204:	460f      	mov	r7, r1
 8008206:	f7f8 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800820a:	b9c8      	cbnz	r0, 8008240 <_dtoa_r+0x6f8>
 800820c:	4642      	mov	r2, r8
 800820e:	464b      	mov	r3, r9
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008218:	b110      	cbz	r0, 8008220 <_dtoa_r+0x6d8>
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	07d9      	lsls	r1, r3, #31
 800821e:	d40f      	bmi.n	8008240 <_dtoa_r+0x6f8>
 8008220:	4620      	mov	r0, r4
 8008222:	4659      	mov	r1, fp
 8008224:	f000 fbd0 	bl	80089c8 <_Bfree>
 8008228:	2300      	movs	r3, #0
 800822a:	702b      	strb	r3, [r5, #0]
 800822c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800822e:	f10a 0001 	add.w	r0, sl, #1
 8008232:	6018      	str	r0, [r3, #0]
 8008234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008236:	2b00      	cmp	r3, #0
 8008238:	f43f acd8 	beq.w	8007bec <_dtoa_r+0xa4>
 800823c:	601d      	str	r5, [r3, #0]
 800823e:	e4d5      	b.n	8007bec <_dtoa_r+0xa4>
 8008240:	f8cd a01c 	str.w	sl, [sp, #28]
 8008244:	462b      	mov	r3, r5
 8008246:	461d      	mov	r5, r3
 8008248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800824c:	2a39      	cmp	r2, #57	; 0x39
 800824e:	d108      	bne.n	8008262 <_dtoa_r+0x71a>
 8008250:	9a00      	ldr	r2, [sp, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d1f7      	bne.n	8008246 <_dtoa_r+0x6fe>
 8008256:	9a07      	ldr	r2, [sp, #28]
 8008258:	9900      	ldr	r1, [sp, #0]
 800825a:	3201      	adds	r2, #1
 800825c:	9207      	str	r2, [sp, #28]
 800825e:	2230      	movs	r2, #48	; 0x30
 8008260:	700a      	strb	r2, [r1, #0]
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	3201      	adds	r2, #1
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	e78c      	b.n	8008184 <_dtoa_r+0x63c>
 800826a:	4b7f      	ldr	r3, [pc, #508]	; (8008468 <_dtoa_r+0x920>)
 800826c:	2200      	movs	r2, #0
 800826e:	f7f8 f9c3 	bl	80005f8 <__aeabi_dmul>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	f7f8 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800827e:	2800      	cmp	r0, #0
 8008280:	d09b      	beq.n	80081ba <_dtoa_r+0x672>
 8008282:	e7cd      	b.n	8008220 <_dtoa_r+0x6d8>
 8008284:	9a08      	ldr	r2, [sp, #32]
 8008286:	2a00      	cmp	r2, #0
 8008288:	f000 80c4 	beq.w	8008414 <_dtoa_r+0x8cc>
 800828c:	9a05      	ldr	r2, [sp, #20]
 800828e:	2a01      	cmp	r2, #1
 8008290:	f300 80a8 	bgt.w	80083e4 <_dtoa_r+0x89c>
 8008294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008296:	2a00      	cmp	r2, #0
 8008298:	f000 80a0 	beq.w	80083dc <_dtoa_r+0x894>
 800829c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082a0:	9e06      	ldr	r6, [sp, #24]
 80082a2:	4645      	mov	r5, r8
 80082a4:	9a04      	ldr	r2, [sp, #16]
 80082a6:	2101      	movs	r1, #1
 80082a8:	441a      	add	r2, r3
 80082aa:	4620      	mov	r0, r4
 80082ac:	4498      	add	r8, r3
 80082ae:	9204      	str	r2, [sp, #16]
 80082b0:	f000 fc46 	bl	8008b40 <__i2b>
 80082b4:	4607      	mov	r7, r0
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	dd0b      	ble.n	80082d2 <_dtoa_r+0x78a>
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd08      	ble.n	80082d2 <_dtoa_r+0x78a>
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	9a04      	ldr	r2, [sp, #16]
 80082c4:	bfa8      	it	ge
 80082c6:	462b      	movge	r3, r5
 80082c8:	eba8 0803 	sub.w	r8, r8, r3
 80082cc:	1aed      	subs	r5, r5, r3
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	9b06      	ldr	r3, [sp, #24]
 80082d4:	b1fb      	cbz	r3, 8008316 <_dtoa_r+0x7ce>
 80082d6:	9b08      	ldr	r3, [sp, #32]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 809f 	beq.w	800841c <_dtoa_r+0x8d4>
 80082de:	2e00      	cmp	r6, #0
 80082e0:	dd11      	ble.n	8008306 <_dtoa_r+0x7be>
 80082e2:	4639      	mov	r1, r7
 80082e4:	4632      	mov	r2, r6
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 fce6 	bl	8008cb8 <__pow5mult>
 80082ec:	465a      	mov	r2, fp
 80082ee:	4601      	mov	r1, r0
 80082f0:	4607      	mov	r7, r0
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 fc3a 	bl	8008b6c <__multiply>
 80082f8:	4659      	mov	r1, fp
 80082fa:	9007      	str	r0, [sp, #28]
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fb63 	bl	80089c8 <_Bfree>
 8008302:	9b07      	ldr	r3, [sp, #28]
 8008304:	469b      	mov	fp, r3
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	1b9a      	subs	r2, r3, r6
 800830a:	d004      	beq.n	8008316 <_dtoa_r+0x7ce>
 800830c:	4659      	mov	r1, fp
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fcd2 	bl	8008cb8 <__pow5mult>
 8008314:	4683      	mov	fp, r0
 8008316:	2101      	movs	r1, #1
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fc11 	bl	8008b40 <__i2b>
 800831e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	4606      	mov	r6, r0
 8008324:	dd7c      	ble.n	8008420 <_dtoa_r+0x8d8>
 8008326:	461a      	mov	r2, r3
 8008328:	4601      	mov	r1, r0
 800832a:	4620      	mov	r0, r4
 800832c:	f000 fcc4 	bl	8008cb8 <__pow5mult>
 8008330:	9b05      	ldr	r3, [sp, #20]
 8008332:	2b01      	cmp	r3, #1
 8008334:	4606      	mov	r6, r0
 8008336:	dd76      	ble.n	8008426 <_dtoa_r+0x8de>
 8008338:	2300      	movs	r3, #0
 800833a:	9306      	str	r3, [sp, #24]
 800833c:	6933      	ldr	r3, [r6, #16]
 800833e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008342:	6918      	ldr	r0, [r3, #16]
 8008344:	f000 fbac 	bl	8008aa0 <__hi0bits>
 8008348:	f1c0 0020 	rsb	r0, r0, #32
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	4418      	add	r0, r3
 8008350:	f010 001f 	ands.w	r0, r0, #31
 8008354:	f000 8086 	beq.w	8008464 <_dtoa_r+0x91c>
 8008358:	f1c0 0320 	rsb	r3, r0, #32
 800835c:	2b04      	cmp	r3, #4
 800835e:	dd7f      	ble.n	8008460 <_dtoa_r+0x918>
 8008360:	f1c0 001c 	rsb	r0, r0, #28
 8008364:	9b04      	ldr	r3, [sp, #16]
 8008366:	4403      	add	r3, r0
 8008368:	4480      	add	r8, r0
 800836a:	4405      	add	r5, r0
 800836c:	9304      	str	r3, [sp, #16]
 800836e:	f1b8 0f00 	cmp.w	r8, #0
 8008372:	dd05      	ble.n	8008380 <_dtoa_r+0x838>
 8008374:	4659      	mov	r1, fp
 8008376:	4642      	mov	r2, r8
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fcf7 	bl	8008d6c <__lshift>
 800837e:	4683      	mov	fp, r0
 8008380:	9b04      	ldr	r3, [sp, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	dd05      	ble.n	8008392 <_dtoa_r+0x84a>
 8008386:	4631      	mov	r1, r6
 8008388:	461a      	mov	r2, r3
 800838a:	4620      	mov	r0, r4
 800838c:	f000 fcee 	bl	8008d6c <__lshift>
 8008390:	4606      	mov	r6, r0
 8008392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d069      	beq.n	800846c <_dtoa_r+0x924>
 8008398:	4631      	mov	r1, r6
 800839a:	4658      	mov	r0, fp
 800839c:	f000 fd52 	bl	8008e44 <__mcmp>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	da63      	bge.n	800846c <_dtoa_r+0x924>
 80083a4:	2300      	movs	r3, #0
 80083a6:	4659      	mov	r1, fp
 80083a8:	220a      	movs	r2, #10
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fb2e 	bl	8008a0c <__multadd>
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083b6:	4683      	mov	fp, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 818f 	beq.w	80086dc <_dtoa_r+0xb94>
 80083be:	4639      	mov	r1, r7
 80083c0:	2300      	movs	r3, #0
 80083c2:	220a      	movs	r2, #10
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fb21 	bl	8008a0c <__multadd>
 80083ca:	f1b9 0f00 	cmp.w	r9, #0
 80083ce:	4607      	mov	r7, r0
 80083d0:	f300 808e 	bgt.w	80084f0 <_dtoa_r+0x9a8>
 80083d4:	9b05      	ldr	r3, [sp, #20]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	dc50      	bgt.n	800847c <_dtoa_r+0x934>
 80083da:	e089      	b.n	80084f0 <_dtoa_r+0x9a8>
 80083dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083e2:	e75d      	b.n	80082a0 <_dtoa_r+0x758>
 80083e4:	9b01      	ldr	r3, [sp, #4]
 80083e6:	1e5e      	subs	r6, r3, #1
 80083e8:	9b06      	ldr	r3, [sp, #24]
 80083ea:	42b3      	cmp	r3, r6
 80083ec:	bfbf      	itttt	lt
 80083ee:	9b06      	ldrlt	r3, [sp, #24]
 80083f0:	9606      	strlt	r6, [sp, #24]
 80083f2:	1af2      	sublt	r2, r6, r3
 80083f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80083f6:	bfb6      	itet	lt
 80083f8:	189b      	addlt	r3, r3, r2
 80083fa:	1b9e      	subge	r6, r3, r6
 80083fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	bfb8      	it	lt
 8008402:	2600      	movlt	r6, #0
 8008404:	2b00      	cmp	r3, #0
 8008406:	bfb5      	itete	lt
 8008408:	eba8 0503 	sublt.w	r5, r8, r3
 800840c:	9b01      	ldrge	r3, [sp, #4]
 800840e:	2300      	movlt	r3, #0
 8008410:	4645      	movge	r5, r8
 8008412:	e747      	b.n	80082a4 <_dtoa_r+0x75c>
 8008414:	9e06      	ldr	r6, [sp, #24]
 8008416:	9f08      	ldr	r7, [sp, #32]
 8008418:	4645      	mov	r5, r8
 800841a:	e74c      	b.n	80082b6 <_dtoa_r+0x76e>
 800841c:	9a06      	ldr	r2, [sp, #24]
 800841e:	e775      	b.n	800830c <_dtoa_r+0x7c4>
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	2b01      	cmp	r3, #1
 8008424:	dc18      	bgt.n	8008458 <_dtoa_r+0x910>
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	b9b3      	cbnz	r3, 8008458 <_dtoa_r+0x910>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008430:	b9a3      	cbnz	r3, 800845c <_dtoa_r+0x914>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008438:	0d1b      	lsrs	r3, r3, #20
 800843a:	051b      	lsls	r3, r3, #20
 800843c:	b12b      	cbz	r3, 800844a <_dtoa_r+0x902>
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	3301      	adds	r3, #1
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	f108 0801 	add.w	r8, r8, #1
 8008448:	2301      	movs	r3, #1
 800844a:	9306      	str	r3, [sp, #24]
 800844c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	f47f af74 	bne.w	800833c <_dtoa_r+0x7f4>
 8008454:	2001      	movs	r0, #1
 8008456:	e779      	b.n	800834c <_dtoa_r+0x804>
 8008458:	2300      	movs	r3, #0
 800845a:	e7f6      	b.n	800844a <_dtoa_r+0x902>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	e7f4      	b.n	800844a <_dtoa_r+0x902>
 8008460:	d085      	beq.n	800836e <_dtoa_r+0x826>
 8008462:	4618      	mov	r0, r3
 8008464:	301c      	adds	r0, #28
 8008466:	e77d      	b.n	8008364 <_dtoa_r+0x81c>
 8008468:	40240000 	.word	0x40240000
 800846c:	9b01      	ldr	r3, [sp, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dc38      	bgt.n	80084e4 <_dtoa_r+0x99c>
 8008472:	9b05      	ldr	r3, [sp, #20]
 8008474:	2b02      	cmp	r3, #2
 8008476:	dd35      	ble.n	80084e4 <_dtoa_r+0x99c>
 8008478:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800847c:	f1b9 0f00 	cmp.w	r9, #0
 8008480:	d10d      	bne.n	800849e <_dtoa_r+0x956>
 8008482:	4631      	mov	r1, r6
 8008484:	464b      	mov	r3, r9
 8008486:	2205      	movs	r2, #5
 8008488:	4620      	mov	r0, r4
 800848a:	f000 fabf 	bl	8008a0c <__multadd>
 800848e:	4601      	mov	r1, r0
 8008490:	4606      	mov	r6, r0
 8008492:	4658      	mov	r0, fp
 8008494:	f000 fcd6 	bl	8008e44 <__mcmp>
 8008498:	2800      	cmp	r0, #0
 800849a:	f73f adbd 	bgt.w	8008018 <_dtoa_r+0x4d0>
 800849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a0:	9d00      	ldr	r5, [sp, #0]
 80084a2:	ea6f 0a03 	mvn.w	sl, r3
 80084a6:	f04f 0800 	mov.w	r8, #0
 80084aa:	4631      	mov	r1, r6
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 fa8b 	bl	80089c8 <_Bfree>
 80084b2:	2f00      	cmp	r7, #0
 80084b4:	f43f aeb4 	beq.w	8008220 <_dtoa_r+0x6d8>
 80084b8:	f1b8 0f00 	cmp.w	r8, #0
 80084bc:	d005      	beq.n	80084ca <_dtoa_r+0x982>
 80084be:	45b8      	cmp	r8, r7
 80084c0:	d003      	beq.n	80084ca <_dtoa_r+0x982>
 80084c2:	4641      	mov	r1, r8
 80084c4:	4620      	mov	r0, r4
 80084c6:	f000 fa7f 	bl	80089c8 <_Bfree>
 80084ca:	4639      	mov	r1, r7
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 fa7b 	bl	80089c8 <_Bfree>
 80084d2:	e6a5      	b.n	8008220 <_dtoa_r+0x6d8>
 80084d4:	2600      	movs	r6, #0
 80084d6:	4637      	mov	r7, r6
 80084d8:	e7e1      	b.n	800849e <_dtoa_r+0x956>
 80084da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80084dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084e0:	4637      	mov	r7, r6
 80084e2:	e599      	b.n	8008018 <_dtoa_r+0x4d0>
 80084e4:	9b08      	ldr	r3, [sp, #32]
 80084e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80fd 	beq.w	80086ea <_dtoa_r+0xba2>
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	dd05      	ble.n	8008500 <_dtoa_r+0x9b8>
 80084f4:	4639      	mov	r1, r7
 80084f6:	462a      	mov	r2, r5
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fc37 	bl	8008d6c <__lshift>
 80084fe:	4607      	mov	r7, r0
 8008500:	9b06      	ldr	r3, [sp, #24]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d05c      	beq.n	80085c0 <_dtoa_r+0xa78>
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	4620      	mov	r0, r4
 800850a:	f000 fa1d 	bl	8008948 <_Balloc>
 800850e:	4605      	mov	r5, r0
 8008510:	b928      	cbnz	r0, 800851e <_dtoa_r+0x9d6>
 8008512:	4b80      	ldr	r3, [pc, #512]	; (8008714 <_dtoa_r+0xbcc>)
 8008514:	4602      	mov	r2, r0
 8008516:	f240 21ea 	movw	r1, #746	; 0x2ea
 800851a:	f7ff bb2e 	b.w	8007b7a <_dtoa_r+0x32>
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	3202      	adds	r2, #2
 8008522:	0092      	lsls	r2, r2, #2
 8008524:	f107 010c 	add.w	r1, r7, #12
 8008528:	300c      	adds	r0, #12
 800852a:	f000 f9ff 	bl	800892c <memcpy>
 800852e:	2201      	movs	r2, #1
 8008530:	4629      	mov	r1, r5
 8008532:	4620      	mov	r0, r4
 8008534:	f000 fc1a 	bl	8008d6c <__lshift>
 8008538:	9b00      	ldr	r3, [sp, #0]
 800853a:	3301      	adds	r3, #1
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	9b00      	ldr	r3, [sp, #0]
 8008540:	444b      	add	r3, r9
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	46b8      	mov	r8, r7
 800854c:	9306      	str	r3, [sp, #24]
 800854e:	4607      	mov	r7, r0
 8008550:	9b01      	ldr	r3, [sp, #4]
 8008552:	4631      	mov	r1, r6
 8008554:	3b01      	subs	r3, #1
 8008556:	4658      	mov	r0, fp
 8008558:	9302      	str	r3, [sp, #8]
 800855a:	f7ff fa69 	bl	8007a30 <quorem>
 800855e:	4603      	mov	r3, r0
 8008560:	3330      	adds	r3, #48	; 0x30
 8008562:	9004      	str	r0, [sp, #16]
 8008564:	4641      	mov	r1, r8
 8008566:	4658      	mov	r0, fp
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	f000 fc6b 	bl	8008e44 <__mcmp>
 800856e:	463a      	mov	r2, r7
 8008570:	4681      	mov	r9, r0
 8008572:	4631      	mov	r1, r6
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fc81 	bl	8008e7c <__mdiff>
 800857a:	68c2      	ldr	r2, [r0, #12]
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	4605      	mov	r5, r0
 8008580:	bb02      	cbnz	r2, 80085c4 <_dtoa_r+0xa7c>
 8008582:	4601      	mov	r1, r0
 8008584:	4658      	mov	r0, fp
 8008586:	f000 fc5d 	bl	8008e44 <__mcmp>
 800858a:	9b08      	ldr	r3, [sp, #32]
 800858c:	4602      	mov	r2, r0
 800858e:	4629      	mov	r1, r5
 8008590:	4620      	mov	r0, r4
 8008592:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008596:	f000 fa17 	bl	80089c8 <_Bfree>
 800859a:	9b05      	ldr	r3, [sp, #20]
 800859c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800859e:	9d01      	ldr	r5, [sp, #4]
 80085a0:	ea43 0102 	orr.w	r1, r3, r2
 80085a4:	9b06      	ldr	r3, [sp, #24]
 80085a6:	430b      	orrs	r3, r1
 80085a8:	9b08      	ldr	r3, [sp, #32]
 80085aa:	d10d      	bne.n	80085c8 <_dtoa_r+0xa80>
 80085ac:	2b39      	cmp	r3, #57	; 0x39
 80085ae:	d029      	beq.n	8008604 <_dtoa_r+0xabc>
 80085b0:	f1b9 0f00 	cmp.w	r9, #0
 80085b4:	dd01      	ble.n	80085ba <_dtoa_r+0xa72>
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	3331      	adds	r3, #49	; 0x31
 80085ba:	9a02      	ldr	r2, [sp, #8]
 80085bc:	7013      	strb	r3, [r2, #0]
 80085be:	e774      	b.n	80084aa <_dtoa_r+0x962>
 80085c0:	4638      	mov	r0, r7
 80085c2:	e7b9      	b.n	8008538 <_dtoa_r+0x9f0>
 80085c4:	2201      	movs	r2, #1
 80085c6:	e7e2      	b.n	800858e <_dtoa_r+0xa46>
 80085c8:	f1b9 0f00 	cmp.w	r9, #0
 80085cc:	db06      	blt.n	80085dc <_dtoa_r+0xa94>
 80085ce:	9905      	ldr	r1, [sp, #20]
 80085d0:	ea41 0909 	orr.w	r9, r1, r9
 80085d4:	9906      	ldr	r1, [sp, #24]
 80085d6:	ea59 0101 	orrs.w	r1, r9, r1
 80085da:	d120      	bne.n	800861e <_dtoa_r+0xad6>
 80085dc:	2a00      	cmp	r2, #0
 80085de:	ddec      	ble.n	80085ba <_dtoa_r+0xa72>
 80085e0:	4659      	mov	r1, fp
 80085e2:	2201      	movs	r2, #1
 80085e4:	4620      	mov	r0, r4
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	f000 fbc0 	bl	8008d6c <__lshift>
 80085ec:	4631      	mov	r1, r6
 80085ee:	4683      	mov	fp, r0
 80085f0:	f000 fc28 	bl	8008e44 <__mcmp>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	dc02      	bgt.n	8008600 <_dtoa_r+0xab8>
 80085fa:	d1de      	bne.n	80085ba <_dtoa_r+0xa72>
 80085fc:	07da      	lsls	r2, r3, #31
 80085fe:	d5dc      	bpl.n	80085ba <_dtoa_r+0xa72>
 8008600:	2b39      	cmp	r3, #57	; 0x39
 8008602:	d1d8      	bne.n	80085b6 <_dtoa_r+0xa6e>
 8008604:	9a02      	ldr	r2, [sp, #8]
 8008606:	2339      	movs	r3, #57	; 0x39
 8008608:	7013      	strb	r3, [r2, #0]
 800860a:	462b      	mov	r3, r5
 800860c:	461d      	mov	r5, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008614:	2a39      	cmp	r2, #57	; 0x39
 8008616:	d050      	beq.n	80086ba <_dtoa_r+0xb72>
 8008618:	3201      	adds	r2, #1
 800861a:	701a      	strb	r2, [r3, #0]
 800861c:	e745      	b.n	80084aa <_dtoa_r+0x962>
 800861e:	2a00      	cmp	r2, #0
 8008620:	dd03      	ble.n	800862a <_dtoa_r+0xae2>
 8008622:	2b39      	cmp	r3, #57	; 0x39
 8008624:	d0ee      	beq.n	8008604 <_dtoa_r+0xabc>
 8008626:	3301      	adds	r3, #1
 8008628:	e7c7      	b.n	80085ba <_dtoa_r+0xa72>
 800862a:	9a01      	ldr	r2, [sp, #4]
 800862c:	9907      	ldr	r1, [sp, #28]
 800862e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008632:	428a      	cmp	r2, r1
 8008634:	d02a      	beq.n	800868c <_dtoa_r+0xb44>
 8008636:	4659      	mov	r1, fp
 8008638:	2300      	movs	r3, #0
 800863a:	220a      	movs	r2, #10
 800863c:	4620      	mov	r0, r4
 800863e:	f000 f9e5 	bl	8008a0c <__multadd>
 8008642:	45b8      	cmp	r8, r7
 8008644:	4683      	mov	fp, r0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	f04f 020a 	mov.w	r2, #10
 800864e:	4641      	mov	r1, r8
 8008650:	4620      	mov	r0, r4
 8008652:	d107      	bne.n	8008664 <_dtoa_r+0xb1c>
 8008654:	f000 f9da 	bl	8008a0c <__multadd>
 8008658:	4680      	mov	r8, r0
 800865a:	4607      	mov	r7, r0
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	3301      	adds	r3, #1
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	e775      	b.n	8008550 <_dtoa_r+0xa08>
 8008664:	f000 f9d2 	bl	8008a0c <__multadd>
 8008668:	4639      	mov	r1, r7
 800866a:	4680      	mov	r8, r0
 800866c:	2300      	movs	r3, #0
 800866e:	220a      	movs	r2, #10
 8008670:	4620      	mov	r0, r4
 8008672:	f000 f9cb 	bl	8008a0c <__multadd>
 8008676:	4607      	mov	r7, r0
 8008678:	e7f0      	b.n	800865c <_dtoa_r+0xb14>
 800867a:	f1b9 0f00 	cmp.w	r9, #0
 800867e:	9a00      	ldr	r2, [sp, #0]
 8008680:	bfcc      	ite	gt
 8008682:	464d      	movgt	r5, r9
 8008684:	2501      	movle	r5, #1
 8008686:	4415      	add	r5, r2
 8008688:	f04f 0800 	mov.w	r8, #0
 800868c:	4659      	mov	r1, fp
 800868e:	2201      	movs	r2, #1
 8008690:	4620      	mov	r0, r4
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	f000 fb6a 	bl	8008d6c <__lshift>
 8008698:	4631      	mov	r1, r6
 800869a:	4683      	mov	fp, r0
 800869c:	f000 fbd2 	bl	8008e44 <__mcmp>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	dcb2      	bgt.n	800860a <_dtoa_r+0xac2>
 80086a4:	d102      	bne.n	80086ac <_dtoa_r+0xb64>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	07db      	lsls	r3, r3, #31
 80086aa:	d4ae      	bmi.n	800860a <_dtoa_r+0xac2>
 80086ac:	462b      	mov	r3, r5
 80086ae:	461d      	mov	r5, r3
 80086b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b4:	2a30      	cmp	r2, #48	; 0x30
 80086b6:	d0fa      	beq.n	80086ae <_dtoa_r+0xb66>
 80086b8:	e6f7      	b.n	80084aa <_dtoa_r+0x962>
 80086ba:	9a00      	ldr	r2, [sp, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d1a5      	bne.n	800860c <_dtoa_r+0xac4>
 80086c0:	f10a 0a01 	add.w	sl, sl, #1
 80086c4:	2331      	movs	r3, #49	; 0x31
 80086c6:	e779      	b.n	80085bc <_dtoa_r+0xa74>
 80086c8:	4b13      	ldr	r3, [pc, #76]	; (8008718 <_dtoa_r+0xbd0>)
 80086ca:	f7ff baaf 	b.w	8007c2c <_dtoa_r+0xe4>
 80086ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f47f aa86 	bne.w	8007be2 <_dtoa_r+0x9a>
 80086d6:	4b11      	ldr	r3, [pc, #68]	; (800871c <_dtoa_r+0xbd4>)
 80086d8:	f7ff baa8 	b.w	8007c2c <_dtoa_r+0xe4>
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	dc03      	bgt.n	80086ea <_dtoa_r+0xba2>
 80086e2:	9b05      	ldr	r3, [sp, #20]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	f73f aec9 	bgt.w	800847c <_dtoa_r+0x934>
 80086ea:	9d00      	ldr	r5, [sp, #0]
 80086ec:	4631      	mov	r1, r6
 80086ee:	4658      	mov	r0, fp
 80086f0:	f7ff f99e 	bl	8007a30 <quorem>
 80086f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086f8:	f805 3b01 	strb.w	r3, [r5], #1
 80086fc:	9a00      	ldr	r2, [sp, #0]
 80086fe:	1aaa      	subs	r2, r5, r2
 8008700:	4591      	cmp	r9, r2
 8008702:	ddba      	ble.n	800867a <_dtoa_r+0xb32>
 8008704:	4659      	mov	r1, fp
 8008706:	2300      	movs	r3, #0
 8008708:	220a      	movs	r2, #10
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f97e 	bl	8008a0c <__multadd>
 8008710:	4683      	mov	fp, r0
 8008712:	e7eb      	b.n	80086ec <_dtoa_r+0xba4>
 8008714:	08009c3f 	.word	0x08009c3f
 8008718:	08009b98 	.word	0x08009b98
 800871c:	08009bbc 	.word	0x08009bbc

08008720 <std>:
 8008720:	2300      	movs	r3, #0
 8008722:	b510      	push	{r4, lr}
 8008724:	4604      	mov	r4, r0
 8008726:	e9c0 3300 	strd	r3, r3, [r0]
 800872a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800872e:	6083      	str	r3, [r0, #8]
 8008730:	8181      	strh	r1, [r0, #12]
 8008732:	6643      	str	r3, [r0, #100]	; 0x64
 8008734:	81c2      	strh	r2, [r0, #14]
 8008736:	6183      	str	r3, [r0, #24]
 8008738:	4619      	mov	r1, r3
 800873a:	2208      	movs	r2, #8
 800873c:	305c      	adds	r0, #92	; 0x5c
 800873e:	f7fe fced 	bl	800711c <memset>
 8008742:	4b05      	ldr	r3, [pc, #20]	; (8008758 <std+0x38>)
 8008744:	6263      	str	r3, [r4, #36]	; 0x24
 8008746:	4b05      	ldr	r3, [pc, #20]	; (800875c <std+0x3c>)
 8008748:	62a3      	str	r3, [r4, #40]	; 0x28
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <std+0x40>)
 800874c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <std+0x44>)
 8008750:	6224      	str	r4, [r4, #32]
 8008752:	6323      	str	r3, [r4, #48]	; 0x30
 8008754:	bd10      	pop	{r4, pc}
 8008756:	bf00      	nop
 8008758:	0800948d 	.word	0x0800948d
 800875c:	080094af 	.word	0x080094af
 8008760:	080094e7 	.word	0x080094e7
 8008764:	0800950b 	.word	0x0800950b

08008768 <_cleanup_r>:
 8008768:	4901      	ldr	r1, [pc, #4]	; (8008770 <_cleanup_r+0x8>)
 800876a:	f000 b8af 	b.w	80088cc <_fwalk_reent>
 800876e:	bf00      	nop
 8008770:	08009821 	.word	0x08009821

08008774 <__sfmoreglue>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	1e4a      	subs	r2, r1, #1
 8008778:	2568      	movs	r5, #104	; 0x68
 800877a:	4355      	muls	r5, r2
 800877c:	460e      	mov	r6, r1
 800877e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008782:	f000 fcbf 	bl	8009104 <_malloc_r>
 8008786:	4604      	mov	r4, r0
 8008788:	b140      	cbz	r0, 800879c <__sfmoreglue+0x28>
 800878a:	2100      	movs	r1, #0
 800878c:	e9c0 1600 	strd	r1, r6, [r0]
 8008790:	300c      	adds	r0, #12
 8008792:	60a0      	str	r0, [r4, #8]
 8008794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008798:	f7fe fcc0 	bl	800711c <memset>
 800879c:	4620      	mov	r0, r4
 800879e:	bd70      	pop	{r4, r5, r6, pc}

080087a0 <__sfp_lock_acquire>:
 80087a0:	4801      	ldr	r0, [pc, #4]	; (80087a8 <__sfp_lock_acquire+0x8>)
 80087a2:	f000 b8b8 	b.w	8008916 <__retarget_lock_acquire_recursive>
 80087a6:	bf00      	nop
 80087a8:	200005ec 	.word	0x200005ec

080087ac <__sfp_lock_release>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__sfp_lock_release+0x8>)
 80087ae:	f000 b8b3 	b.w	8008918 <__retarget_lock_release_recursive>
 80087b2:	bf00      	nop
 80087b4:	200005ec 	.word	0x200005ec

080087b8 <__sinit_lock_acquire>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__sinit_lock_acquire+0x8>)
 80087ba:	f000 b8ac 	b.w	8008916 <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	200005e7 	.word	0x200005e7

080087c4 <__sinit_lock_release>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__sinit_lock_release+0x8>)
 80087c6:	f000 b8a7 	b.w	8008918 <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	200005e7 	.word	0x200005e7

080087d0 <__sinit>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	4604      	mov	r4, r0
 80087d4:	f7ff fff0 	bl	80087b8 <__sinit_lock_acquire>
 80087d8:	69a3      	ldr	r3, [r4, #24]
 80087da:	b11b      	cbz	r3, 80087e4 <__sinit+0x14>
 80087dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e0:	f7ff bff0 	b.w	80087c4 <__sinit_lock_release>
 80087e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087e8:	6523      	str	r3, [r4, #80]	; 0x50
 80087ea:	4b13      	ldr	r3, [pc, #76]	; (8008838 <__sinit+0x68>)
 80087ec:	4a13      	ldr	r2, [pc, #76]	; (800883c <__sinit+0x6c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80087f2:	42a3      	cmp	r3, r4
 80087f4:	bf04      	itt	eq
 80087f6:	2301      	moveq	r3, #1
 80087f8:	61a3      	streq	r3, [r4, #24]
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f820 	bl	8008840 <__sfp>
 8008800:	6060      	str	r0, [r4, #4]
 8008802:	4620      	mov	r0, r4
 8008804:	f000 f81c 	bl	8008840 <__sfp>
 8008808:	60a0      	str	r0, [r4, #8]
 800880a:	4620      	mov	r0, r4
 800880c:	f000 f818 	bl	8008840 <__sfp>
 8008810:	2200      	movs	r2, #0
 8008812:	60e0      	str	r0, [r4, #12]
 8008814:	2104      	movs	r1, #4
 8008816:	6860      	ldr	r0, [r4, #4]
 8008818:	f7ff ff82 	bl	8008720 <std>
 800881c:	68a0      	ldr	r0, [r4, #8]
 800881e:	2201      	movs	r2, #1
 8008820:	2109      	movs	r1, #9
 8008822:	f7ff ff7d 	bl	8008720 <std>
 8008826:	68e0      	ldr	r0, [r4, #12]
 8008828:	2202      	movs	r2, #2
 800882a:	2112      	movs	r1, #18
 800882c:	f7ff ff78 	bl	8008720 <std>
 8008830:	2301      	movs	r3, #1
 8008832:	61a3      	str	r3, [r4, #24]
 8008834:	e7d2      	b.n	80087dc <__sinit+0xc>
 8008836:	bf00      	nop
 8008838:	08009b84 	.word	0x08009b84
 800883c:	08008769 	.word	0x08008769

08008840 <__sfp>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	4607      	mov	r7, r0
 8008844:	f7ff ffac 	bl	80087a0 <__sfp_lock_acquire>
 8008848:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <__sfp+0x84>)
 800884a:	681e      	ldr	r6, [r3, #0]
 800884c:	69b3      	ldr	r3, [r6, #24]
 800884e:	b913      	cbnz	r3, 8008856 <__sfp+0x16>
 8008850:	4630      	mov	r0, r6
 8008852:	f7ff ffbd 	bl	80087d0 <__sinit>
 8008856:	3648      	adds	r6, #72	; 0x48
 8008858:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800885c:	3b01      	subs	r3, #1
 800885e:	d503      	bpl.n	8008868 <__sfp+0x28>
 8008860:	6833      	ldr	r3, [r6, #0]
 8008862:	b30b      	cbz	r3, 80088a8 <__sfp+0x68>
 8008864:	6836      	ldr	r6, [r6, #0]
 8008866:	e7f7      	b.n	8008858 <__sfp+0x18>
 8008868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800886c:	b9d5      	cbnz	r5, 80088a4 <__sfp+0x64>
 800886e:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <__sfp+0x88>)
 8008870:	60e3      	str	r3, [r4, #12]
 8008872:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008876:	6665      	str	r5, [r4, #100]	; 0x64
 8008878:	f000 f84c 	bl	8008914 <__retarget_lock_init_recursive>
 800887c:	f7ff ff96 	bl	80087ac <__sfp_lock_release>
 8008880:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008884:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008888:	6025      	str	r5, [r4, #0]
 800888a:	61a5      	str	r5, [r4, #24]
 800888c:	2208      	movs	r2, #8
 800888e:	4629      	mov	r1, r5
 8008890:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008894:	f7fe fc42 	bl	800711c <memset>
 8008898:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800889c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088a0:	4620      	mov	r0, r4
 80088a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a4:	3468      	adds	r4, #104	; 0x68
 80088a6:	e7d9      	b.n	800885c <__sfp+0x1c>
 80088a8:	2104      	movs	r1, #4
 80088aa:	4638      	mov	r0, r7
 80088ac:	f7ff ff62 	bl	8008774 <__sfmoreglue>
 80088b0:	4604      	mov	r4, r0
 80088b2:	6030      	str	r0, [r6, #0]
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d1d5      	bne.n	8008864 <__sfp+0x24>
 80088b8:	f7ff ff78 	bl	80087ac <__sfp_lock_release>
 80088bc:	230c      	movs	r3, #12
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	e7ee      	b.n	80088a0 <__sfp+0x60>
 80088c2:	bf00      	nop
 80088c4:	08009b84 	.word	0x08009b84
 80088c8:	ffff0001 	.word	0xffff0001

080088cc <_fwalk_reent>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4606      	mov	r6, r0
 80088d2:	4688      	mov	r8, r1
 80088d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088d8:	2700      	movs	r7, #0
 80088da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088de:	f1b9 0901 	subs.w	r9, r9, #1
 80088e2:	d505      	bpl.n	80088f0 <_fwalk_reent+0x24>
 80088e4:	6824      	ldr	r4, [r4, #0]
 80088e6:	2c00      	cmp	r4, #0
 80088e8:	d1f7      	bne.n	80088da <_fwalk_reent+0xe>
 80088ea:	4638      	mov	r0, r7
 80088ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f0:	89ab      	ldrh	r3, [r5, #12]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d907      	bls.n	8008906 <_fwalk_reent+0x3a>
 80088f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088fa:	3301      	adds	r3, #1
 80088fc:	d003      	beq.n	8008906 <_fwalk_reent+0x3a>
 80088fe:	4629      	mov	r1, r5
 8008900:	4630      	mov	r0, r6
 8008902:	47c0      	blx	r8
 8008904:	4307      	orrs	r7, r0
 8008906:	3568      	adds	r5, #104	; 0x68
 8008908:	e7e9      	b.n	80088de <_fwalk_reent+0x12>
	...

0800890c <_localeconv_r>:
 800890c:	4800      	ldr	r0, [pc, #0]	; (8008910 <_localeconv_r+0x4>)
 800890e:	4770      	bx	lr
 8008910:	200002d8 	.word	0x200002d8

08008914 <__retarget_lock_init_recursive>:
 8008914:	4770      	bx	lr

08008916 <__retarget_lock_acquire_recursive>:
 8008916:	4770      	bx	lr

08008918 <__retarget_lock_release_recursive>:
 8008918:	4770      	bx	lr
	...

0800891c <malloc>:
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <malloc+0xc>)
 800891e:	4601      	mov	r1, r0
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	f000 bbef 	b.w	8009104 <_malloc_r>
 8008926:	bf00      	nop
 8008928:	20000184 	.word	0x20000184

0800892c <memcpy>:
 800892c:	440a      	add	r2, r1
 800892e:	4291      	cmp	r1, r2
 8008930:	f100 33ff 	add.w	r3, r0, #4294967295
 8008934:	d100      	bne.n	8008938 <memcpy+0xc>
 8008936:	4770      	bx	lr
 8008938:	b510      	push	{r4, lr}
 800893a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008942:	4291      	cmp	r1, r2
 8008944:	d1f9      	bne.n	800893a <memcpy+0xe>
 8008946:	bd10      	pop	{r4, pc}

08008948 <_Balloc>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800894c:	4604      	mov	r4, r0
 800894e:	460d      	mov	r5, r1
 8008950:	b976      	cbnz	r6, 8008970 <_Balloc+0x28>
 8008952:	2010      	movs	r0, #16
 8008954:	f7ff ffe2 	bl	800891c <malloc>
 8008958:	4602      	mov	r2, r0
 800895a:	6260      	str	r0, [r4, #36]	; 0x24
 800895c:	b920      	cbnz	r0, 8008968 <_Balloc+0x20>
 800895e:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <_Balloc+0x78>)
 8008960:	4818      	ldr	r0, [pc, #96]	; (80089c4 <_Balloc+0x7c>)
 8008962:	2166      	movs	r1, #102	; 0x66
 8008964:	f000 fea8 	bl	80096b8 <__assert_func>
 8008968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800896c:	6006      	str	r6, [r0, #0]
 800896e:	60c6      	str	r6, [r0, #12]
 8008970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008972:	68f3      	ldr	r3, [r6, #12]
 8008974:	b183      	cbz	r3, 8008998 <_Balloc+0x50>
 8008976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800897e:	b9b8      	cbnz	r0, 80089b0 <_Balloc+0x68>
 8008980:	2101      	movs	r1, #1
 8008982:	fa01 f605 	lsl.w	r6, r1, r5
 8008986:	1d72      	adds	r2, r6, #5
 8008988:	0092      	lsls	r2, r2, #2
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fb5a 	bl	8009044 <_calloc_r>
 8008990:	b160      	cbz	r0, 80089ac <_Balloc+0x64>
 8008992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008996:	e00e      	b.n	80089b6 <_Balloc+0x6e>
 8008998:	2221      	movs	r2, #33	; 0x21
 800899a:	2104      	movs	r1, #4
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fb51 	bl	8009044 <_calloc_r>
 80089a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a4:	60f0      	str	r0, [r6, #12]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e4      	bne.n	8008976 <_Balloc+0x2e>
 80089ac:	2000      	movs	r0, #0
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	6802      	ldr	r2, [r0, #0]
 80089b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089b6:	2300      	movs	r3, #0
 80089b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089bc:	e7f7      	b.n	80089ae <_Balloc+0x66>
 80089be:	bf00      	nop
 80089c0:	08009bc9 	.word	0x08009bc9
 80089c4:	08009cb0 	.word	0x08009cb0

080089c8 <_Bfree>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	b976      	cbnz	r6, 80089f0 <_Bfree+0x28>
 80089d2:	2010      	movs	r0, #16
 80089d4:	f7ff ffa2 	bl	800891c <malloc>
 80089d8:	4602      	mov	r2, r0
 80089da:	6268      	str	r0, [r5, #36]	; 0x24
 80089dc:	b920      	cbnz	r0, 80089e8 <_Bfree+0x20>
 80089de:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <_Bfree+0x3c>)
 80089e0:	4809      	ldr	r0, [pc, #36]	; (8008a08 <_Bfree+0x40>)
 80089e2:	218a      	movs	r1, #138	; 0x8a
 80089e4:	f000 fe68 	bl	80096b8 <__assert_func>
 80089e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089ec:	6006      	str	r6, [r0, #0]
 80089ee:	60c6      	str	r6, [r0, #12]
 80089f0:	b13c      	cbz	r4, 8008a02 <_Bfree+0x3a>
 80089f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089f4:	6862      	ldr	r2, [r4, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089fc:	6021      	str	r1, [r4, #0]
 80089fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	08009bc9 	.word	0x08009bc9
 8008a08:	08009cb0 	.word	0x08009cb0

08008a0c <__multadd>:
 8008a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a10:	690e      	ldr	r6, [r1, #16]
 8008a12:	4607      	mov	r7, r0
 8008a14:	4698      	mov	r8, r3
 8008a16:	460c      	mov	r4, r1
 8008a18:	f101 0014 	add.w	r0, r1, #20
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6805      	ldr	r5, [r0, #0]
 8008a20:	b2a9      	uxth	r1, r5
 8008a22:	fb02 8101 	mla	r1, r2, r1, r8
 8008a26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a2a:	0c2d      	lsrs	r5, r5, #16
 8008a2c:	fb02 c505 	mla	r5, r2, r5, ip
 8008a30:	b289      	uxth	r1, r1
 8008a32:	3301      	adds	r3, #1
 8008a34:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a38:	429e      	cmp	r6, r3
 8008a3a:	f840 1b04 	str.w	r1, [r0], #4
 8008a3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a42:	dcec      	bgt.n	8008a1e <__multadd+0x12>
 8008a44:	f1b8 0f00 	cmp.w	r8, #0
 8008a48:	d022      	beq.n	8008a90 <__multadd+0x84>
 8008a4a:	68a3      	ldr	r3, [r4, #8]
 8008a4c:	42b3      	cmp	r3, r6
 8008a4e:	dc19      	bgt.n	8008a84 <__multadd+0x78>
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	4638      	mov	r0, r7
 8008a54:	3101      	adds	r1, #1
 8008a56:	f7ff ff77 	bl	8008948 <_Balloc>
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	b928      	cbnz	r0, 8008a6a <__multadd+0x5e>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <__multadd+0x8c>)
 8008a62:	480e      	ldr	r0, [pc, #56]	; (8008a9c <__multadd+0x90>)
 8008a64:	21b5      	movs	r1, #181	; 0xb5
 8008a66:	f000 fe27 	bl	80096b8 <__assert_func>
 8008a6a:	6922      	ldr	r2, [r4, #16]
 8008a6c:	3202      	adds	r2, #2
 8008a6e:	f104 010c 	add.w	r1, r4, #12
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	300c      	adds	r0, #12
 8008a76:	f7ff ff59 	bl	800892c <memcpy>
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	f7ff ffa3 	bl	80089c8 <_Bfree>
 8008a82:	462c      	mov	r4, r5
 8008a84:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a88:	3601      	adds	r6, #1
 8008a8a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a8e:	6126      	str	r6, [r4, #16]
 8008a90:	4620      	mov	r0, r4
 8008a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a96:	bf00      	nop
 8008a98:	08009c3f 	.word	0x08009c3f
 8008a9c:	08009cb0 	.word	0x08009cb0

08008aa0 <__hi0bits>:
 8008aa0:	0c03      	lsrs	r3, r0, #16
 8008aa2:	041b      	lsls	r3, r3, #16
 8008aa4:	b9d3      	cbnz	r3, 8008adc <__hi0bits+0x3c>
 8008aa6:	0400      	lsls	r0, r0, #16
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008aae:	bf04      	itt	eq
 8008ab0:	0200      	lsleq	r0, r0, #8
 8008ab2:	3308      	addeq	r3, #8
 8008ab4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ab8:	bf04      	itt	eq
 8008aba:	0100      	lsleq	r0, r0, #4
 8008abc:	3304      	addeq	r3, #4
 8008abe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ac2:	bf04      	itt	eq
 8008ac4:	0080      	lsleq	r0, r0, #2
 8008ac6:	3302      	addeq	r3, #2
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	db05      	blt.n	8008ad8 <__hi0bits+0x38>
 8008acc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ad0:	f103 0301 	add.w	r3, r3, #1
 8008ad4:	bf08      	it	eq
 8008ad6:	2320      	moveq	r3, #32
 8008ad8:	4618      	mov	r0, r3
 8008ada:	4770      	bx	lr
 8008adc:	2300      	movs	r3, #0
 8008ade:	e7e4      	b.n	8008aaa <__hi0bits+0xa>

08008ae0 <__lo0bits>:
 8008ae0:	6803      	ldr	r3, [r0, #0]
 8008ae2:	f013 0207 	ands.w	r2, r3, #7
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	d00b      	beq.n	8008b02 <__lo0bits+0x22>
 8008aea:	07da      	lsls	r2, r3, #31
 8008aec:	d424      	bmi.n	8008b38 <__lo0bits+0x58>
 8008aee:	0798      	lsls	r0, r3, #30
 8008af0:	bf49      	itett	mi
 8008af2:	085b      	lsrmi	r3, r3, #1
 8008af4:	089b      	lsrpl	r3, r3, #2
 8008af6:	2001      	movmi	r0, #1
 8008af8:	600b      	strmi	r3, [r1, #0]
 8008afa:	bf5c      	itt	pl
 8008afc:	600b      	strpl	r3, [r1, #0]
 8008afe:	2002      	movpl	r0, #2
 8008b00:	4770      	bx	lr
 8008b02:	b298      	uxth	r0, r3
 8008b04:	b9b0      	cbnz	r0, 8008b34 <__lo0bits+0x54>
 8008b06:	0c1b      	lsrs	r3, r3, #16
 8008b08:	2010      	movs	r0, #16
 8008b0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b0e:	bf04      	itt	eq
 8008b10:	0a1b      	lsreq	r3, r3, #8
 8008b12:	3008      	addeq	r0, #8
 8008b14:	071a      	lsls	r2, r3, #28
 8008b16:	bf04      	itt	eq
 8008b18:	091b      	lsreq	r3, r3, #4
 8008b1a:	3004      	addeq	r0, #4
 8008b1c:	079a      	lsls	r2, r3, #30
 8008b1e:	bf04      	itt	eq
 8008b20:	089b      	lsreq	r3, r3, #2
 8008b22:	3002      	addeq	r0, #2
 8008b24:	07da      	lsls	r2, r3, #31
 8008b26:	d403      	bmi.n	8008b30 <__lo0bits+0x50>
 8008b28:	085b      	lsrs	r3, r3, #1
 8008b2a:	f100 0001 	add.w	r0, r0, #1
 8008b2e:	d005      	beq.n	8008b3c <__lo0bits+0x5c>
 8008b30:	600b      	str	r3, [r1, #0]
 8008b32:	4770      	bx	lr
 8008b34:	4610      	mov	r0, r2
 8008b36:	e7e8      	b.n	8008b0a <__lo0bits+0x2a>
 8008b38:	2000      	movs	r0, #0
 8008b3a:	4770      	bx	lr
 8008b3c:	2020      	movs	r0, #32
 8008b3e:	4770      	bx	lr

08008b40 <__i2b>:
 8008b40:	b510      	push	{r4, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	2101      	movs	r1, #1
 8008b46:	f7ff feff 	bl	8008948 <_Balloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	b928      	cbnz	r0, 8008b5a <__i2b+0x1a>
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <__i2b+0x24>)
 8008b50:	4805      	ldr	r0, [pc, #20]	; (8008b68 <__i2b+0x28>)
 8008b52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b56:	f000 fdaf 	bl	80096b8 <__assert_func>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	6144      	str	r4, [r0, #20]
 8008b5e:	6103      	str	r3, [r0, #16]
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	bf00      	nop
 8008b64:	08009c3f 	.word	0x08009c3f
 8008b68:	08009cb0 	.word	0x08009cb0

08008b6c <__multiply>:
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	4614      	mov	r4, r2
 8008b72:	690a      	ldr	r2, [r1, #16]
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	bfb8      	it	lt
 8008b7a:	460b      	movlt	r3, r1
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	bfbc      	itt	lt
 8008b80:	4625      	movlt	r5, r4
 8008b82:	461c      	movlt	r4, r3
 8008b84:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b8c:	68ab      	ldr	r3, [r5, #8]
 8008b8e:	6869      	ldr	r1, [r5, #4]
 8008b90:	eb0a 0709 	add.w	r7, sl, r9
 8008b94:	42bb      	cmp	r3, r7
 8008b96:	b085      	sub	sp, #20
 8008b98:	bfb8      	it	lt
 8008b9a:	3101      	addlt	r1, #1
 8008b9c:	f7ff fed4 	bl	8008948 <_Balloc>
 8008ba0:	b930      	cbnz	r0, 8008bb0 <__multiply+0x44>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	4b42      	ldr	r3, [pc, #264]	; (8008cb0 <__multiply+0x144>)
 8008ba6:	4843      	ldr	r0, [pc, #268]	; (8008cb4 <__multiply+0x148>)
 8008ba8:	f240 115d 	movw	r1, #349	; 0x15d
 8008bac:	f000 fd84 	bl	80096b8 <__assert_func>
 8008bb0:	f100 0614 	add.w	r6, r0, #20
 8008bb4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008bb8:	4633      	mov	r3, r6
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4543      	cmp	r3, r8
 8008bbe:	d31e      	bcc.n	8008bfe <__multiply+0x92>
 8008bc0:	f105 0c14 	add.w	ip, r5, #20
 8008bc4:	f104 0314 	add.w	r3, r4, #20
 8008bc8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008bcc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008bd0:	9202      	str	r2, [sp, #8]
 8008bd2:	ebac 0205 	sub.w	r2, ip, r5
 8008bd6:	3a15      	subs	r2, #21
 8008bd8:	f022 0203 	bic.w	r2, r2, #3
 8008bdc:	3204      	adds	r2, #4
 8008bde:	f105 0115 	add.w	r1, r5, #21
 8008be2:	458c      	cmp	ip, r1
 8008be4:	bf38      	it	cc
 8008be6:	2204      	movcc	r2, #4
 8008be8:	9201      	str	r2, [sp, #4]
 8008bea:	9a02      	ldr	r2, [sp, #8]
 8008bec:	9303      	str	r3, [sp, #12]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d808      	bhi.n	8008c04 <__multiply+0x98>
 8008bf2:	2f00      	cmp	r7, #0
 8008bf4:	dc55      	bgt.n	8008ca2 <__multiply+0x136>
 8008bf6:	6107      	str	r7, [r0, #16]
 8008bf8:	b005      	add	sp, #20
 8008bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfe:	f843 2b04 	str.w	r2, [r3], #4
 8008c02:	e7db      	b.n	8008bbc <__multiply+0x50>
 8008c04:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c08:	f1ba 0f00 	cmp.w	sl, #0
 8008c0c:	d020      	beq.n	8008c50 <__multiply+0xe4>
 8008c0e:	f105 0e14 	add.w	lr, r5, #20
 8008c12:	46b1      	mov	r9, r6
 8008c14:	2200      	movs	r2, #0
 8008c16:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008c1a:	f8d9 b000 	ldr.w	fp, [r9]
 8008c1e:	b2a1      	uxth	r1, r4
 8008c20:	fa1f fb8b 	uxth.w	fp, fp
 8008c24:	fb0a b101 	mla	r1, sl, r1, fp
 8008c28:	4411      	add	r1, r2
 8008c2a:	f8d9 2000 	ldr.w	r2, [r9]
 8008c2e:	0c24      	lsrs	r4, r4, #16
 8008c30:	0c12      	lsrs	r2, r2, #16
 8008c32:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c36:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c3a:	b289      	uxth	r1, r1
 8008c3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c40:	45f4      	cmp	ip, lr
 8008c42:	f849 1b04 	str.w	r1, [r9], #4
 8008c46:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c4a:	d8e4      	bhi.n	8008c16 <__multiply+0xaa>
 8008c4c:	9901      	ldr	r1, [sp, #4]
 8008c4e:	5072      	str	r2, [r6, r1]
 8008c50:	9a03      	ldr	r2, [sp, #12]
 8008c52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c56:	3304      	adds	r3, #4
 8008c58:	f1b9 0f00 	cmp.w	r9, #0
 8008c5c:	d01f      	beq.n	8008c9e <__multiply+0x132>
 8008c5e:	6834      	ldr	r4, [r6, #0]
 8008c60:	f105 0114 	add.w	r1, r5, #20
 8008c64:	46b6      	mov	lr, r6
 8008c66:	f04f 0a00 	mov.w	sl, #0
 8008c6a:	880a      	ldrh	r2, [r1, #0]
 8008c6c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c70:	fb09 b202 	mla	r2, r9, r2, fp
 8008c74:	4492      	add	sl, r2
 8008c76:	b2a4      	uxth	r4, r4
 8008c78:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c7c:	f84e 4b04 	str.w	r4, [lr], #4
 8008c80:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c84:	f8be 2000 	ldrh.w	r2, [lr]
 8008c88:	0c24      	lsrs	r4, r4, #16
 8008c8a:	fb09 2404 	mla	r4, r9, r4, r2
 8008c8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c92:	458c      	cmp	ip, r1
 8008c94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c98:	d8e7      	bhi.n	8008c6a <__multiply+0xfe>
 8008c9a:	9a01      	ldr	r2, [sp, #4]
 8008c9c:	50b4      	str	r4, [r6, r2]
 8008c9e:	3604      	adds	r6, #4
 8008ca0:	e7a3      	b.n	8008bea <__multiply+0x7e>
 8008ca2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1a5      	bne.n	8008bf6 <__multiply+0x8a>
 8008caa:	3f01      	subs	r7, #1
 8008cac:	e7a1      	b.n	8008bf2 <__multiply+0x86>
 8008cae:	bf00      	nop
 8008cb0:	08009c3f 	.word	0x08009c3f
 8008cb4:	08009cb0 	.word	0x08009cb0

08008cb8 <__pow5mult>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	4615      	mov	r5, r2
 8008cbe:	f012 0203 	ands.w	r2, r2, #3
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	d007      	beq.n	8008cd8 <__pow5mult+0x20>
 8008cc8:	4c25      	ldr	r4, [pc, #148]	; (8008d60 <__pow5mult+0xa8>)
 8008cca:	3a01      	subs	r2, #1
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cd2:	f7ff fe9b 	bl	8008a0c <__multadd>
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	10ad      	asrs	r5, r5, #2
 8008cda:	d03d      	beq.n	8008d58 <__pow5mult+0xa0>
 8008cdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cde:	b97c      	cbnz	r4, 8008d00 <__pow5mult+0x48>
 8008ce0:	2010      	movs	r0, #16
 8008ce2:	f7ff fe1b 	bl	800891c <malloc>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	6270      	str	r0, [r6, #36]	; 0x24
 8008cea:	b928      	cbnz	r0, 8008cf8 <__pow5mult+0x40>
 8008cec:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <__pow5mult+0xac>)
 8008cee:	481e      	ldr	r0, [pc, #120]	; (8008d68 <__pow5mult+0xb0>)
 8008cf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008cf4:	f000 fce0 	bl	80096b8 <__assert_func>
 8008cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cfc:	6004      	str	r4, [r0, #0]
 8008cfe:	60c4      	str	r4, [r0, #12]
 8008d00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d08:	b94c      	cbnz	r4, 8008d1e <__pow5mult+0x66>
 8008d0a:	f240 2171 	movw	r1, #625	; 0x271
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f7ff ff16 	bl	8008b40 <__i2b>
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	6003      	str	r3, [r0, #0]
 8008d1e:	f04f 0900 	mov.w	r9, #0
 8008d22:	07eb      	lsls	r3, r5, #31
 8008d24:	d50a      	bpl.n	8008d3c <__pow5mult+0x84>
 8008d26:	4639      	mov	r1, r7
 8008d28:	4622      	mov	r2, r4
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff ff1e 	bl	8008b6c <__multiply>
 8008d30:	4639      	mov	r1, r7
 8008d32:	4680      	mov	r8, r0
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff fe47 	bl	80089c8 <_Bfree>
 8008d3a:	4647      	mov	r7, r8
 8008d3c:	106d      	asrs	r5, r5, #1
 8008d3e:	d00b      	beq.n	8008d58 <__pow5mult+0xa0>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	b938      	cbnz	r0, 8008d54 <__pow5mult+0x9c>
 8008d44:	4622      	mov	r2, r4
 8008d46:	4621      	mov	r1, r4
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff ff0f 	bl	8008b6c <__multiply>
 8008d4e:	6020      	str	r0, [r4, #0]
 8008d50:	f8c0 9000 	str.w	r9, [r0]
 8008d54:	4604      	mov	r4, r0
 8008d56:	e7e4      	b.n	8008d22 <__pow5mult+0x6a>
 8008d58:	4638      	mov	r0, r7
 8008d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5e:	bf00      	nop
 8008d60:	08009e00 	.word	0x08009e00
 8008d64:	08009bc9 	.word	0x08009bc9
 8008d68:	08009cb0 	.word	0x08009cb0

08008d6c <__lshift>:
 8008d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	6849      	ldr	r1, [r1, #4]
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d7a:	68a3      	ldr	r3, [r4, #8]
 8008d7c:	4607      	mov	r7, r0
 8008d7e:	4691      	mov	r9, r2
 8008d80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d84:	f108 0601 	add.w	r6, r8, #1
 8008d88:	42b3      	cmp	r3, r6
 8008d8a:	db0b      	blt.n	8008da4 <__lshift+0x38>
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff fddb 	bl	8008948 <_Balloc>
 8008d92:	4605      	mov	r5, r0
 8008d94:	b948      	cbnz	r0, 8008daa <__lshift+0x3e>
 8008d96:	4602      	mov	r2, r0
 8008d98:	4b28      	ldr	r3, [pc, #160]	; (8008e3c <__lshift+0xd0>)
 8008d9a:	4829      	ldr	r0, [pc, #164]	; (8008e40 <__lshift+0xd4>)
 8008d9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008da0:	f000 fc8a 	bl	80096b8 <__assert_func>
 8008da4:	3101      	adds	r1, #1
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	e7ee      	b.n	8008d88 <__lshift+0x1c>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f100 0114 	add.w	r1, r0, #20
 8008db0:	f100 0210 	add.w	r2, r0, #16
 8008db4:	4618      	mov	r0, r3
 8008db6:	4553      	cmp	r3, sl
 8008db8:	db33      	blt.n	8008e22 <__lshift+0xb6>
 8008dba:	6920      	ldr	r0, [r4, #16]
 8008dbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dc0:	f104 0314 	add.w	r3, r4, #20
 8008dc4:	f019 091f 	ands.w	r9, r9, #31
 8008dc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dd0:	d02b      	beq.n	8008e2a <__lshift+0xbe>
 8008dd2:	f1c9 0e20 	rsb	lr, r9, #32
 8008dd6:	468a      	mov	sl, r1
 8008dd8:	2200      	movs	r2, #0
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	fa00 f009 	lsl.w	r0, r0, r9
 8008de0:	4302      	orrs	r2, r0
 8008de2:	f84a 2b04 	str.w	r2, [sl], #4
 8008de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dea:	459c      	cmp	ip, r3
 8008dec:	fa22 f20e 	lsr.w	r2, r2, lr
 8008df0:	d8f3      	bhi.n	8008dda <__lshift+0x6e>
 8008df2:	ebac 0304 	sub.w	r3, ip, r4
 8008df6:	3b15      	subs	r3, #21
 8008df8:	f023 0303 	bic.w	r3, r3, #3
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	f104 0015 	add.w	r0, r4, #21
 8008e02:	4584      	cmp	ip, r0
 8008e04:	bf38      	it	cc
 8008e06:	2304      	movcc	r3, #4
 8008e08:	50ca      	str	r2, [r1, r3]
 8008e0a:	b10a      	cbz	r2, 8008e10 <__lshift+0xa4>
 8008e0c:	f108 0602 	add.w	r6, r8, #2
 8008e10:	3e01      	subs	r6, #1
 8008e12:	4638      	mov	r0, r7
 8008e14:	612e      	str	r6, [r5, #16]
 8008e16:	4621      	mov	r1, r4
 8008e18:	f7ff fdd6 	bl	80089c8 <_Bfree>
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e26:	3301      	adds	r3, #1
 8008e28:	e7c5      	b.n	8008db6 <__lshift+0x4a>
 8008e2a:	3904      	subs	r1, #4
 8008e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e30:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e34:	459c      	cmp	ip, r3
 8008e36:	d8f9      	bhi.n	8008e2c <__lshift+0xc0>
 8008e38:	e7ea      	b.n	8008e10 <__lshift+0xa4>
 8008e3a:	bf00      	nop
 8008e3c:	08009c3f 	.word	0x08009c3f
 8008e40:	08009cb0 	.word	0x08009cb0

08008e44 <__mcmp>:
 8008e44:	b530      	push	{r4, r5, lr}
 8008e46:	6902      	ldr	r2, [r0, #16]
 8008e48:	690c      	ldr	r4, [r1, #16]
 8008e4a:	1b12      	subs	r2, r2, r4
 8008e4c:	d10e      	bne.n	8008e6c <__mcmp+0x28>
 8008e4e:	f100 0314 	add.w	r3, r0, #20
 8008e52:	3114      	adds	r1, #20
 8008e54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e64:	42a5      	cmp	r5, r4
 8008e66:	d003      	beq.n	8008e70 <__mcmp+0x2c>
 8008e68:	d305      	bcc.n	8008e76 <__mcmp+0x32>
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	bd30      	pop	{r4, r5, pc}
 8008e70:	4283      	cmp	r3, r0
 8008e72:	d3f3      	bcc.n	8008e5c <__mcmp+0x18>
 8008e74:	e7fa      	b.n	8008e6c <__mcmp+0x28>
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7a:	e7f7      	b.n	8008e6c <__mcmp+0x28>

08008e7c <__mdiff>:
 8008e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	460c      	mov	r4, r1
 8008e82:	4606      	mov	r6, r0
 8008e84:	4611      	mov	r1, r2
 8008e86:	4620      	mov	r0, r4
 8008e88:	4617      	mov	r7, r2
 8008e8a:	f7ff ffdb 	bl	8008e44 <__mcmp>
 8008e8e:	1e05      	subs	r5, r0, #0
 8008e90:	d110      	bne.n	8008eb4 <__mdiff+0x38>
 8008e92:	4629      	mov	r1, r5
 8008e94:	4630      	mov	r0, r6
 8008e96:	f7ff fd57 	bl	8008948 <_Balloc>
 8008e9a:	b930      	cbnz	r0, 8008eaa <__mdiff+0x2e>
 8008e9c:	4b39      	ldr	r3, [pc, #228]	; (8008f84 <__mdiff+0x108>)
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	f240 2132 	movw	r1, #562	; 0x232
 8008ea4:	4838      	ldr	r0, [pc, #224]	; (8008f88 <__mdiff+0x10c>)
 8008ea6:	f000 fc07 	bl	80096b8 <__assert_func>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	bfa4      	itt	ge
 8008eb6:	463b      	movge	r3, r7
 8008eb8:	4627      	movge	r7, r4
 8008eba:	4630      	mov	r0, r6
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	bfa6      	itte	ge
 8008ec0:	461c      	movge	r4, r3
 8008ec2:	2500      	movge	r5, #0
 8008ec4:	2501      	movlt	r5, #1
 8008ec6:	f7ff fd3f 	bl	8008948 <_Balloc>
 8008eca:	b920      	cbnz	r0, 8008ed6 <__mdiff+0x5a>
 8008ecc:	4b2d      	ldr	r3, [pc, #180]	; (8008f84 <__mdiff+0x108>)
 8008ece:	4602      	mov	r2, r0
 8008ed0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ed4:	e7e6      	b.n	8008ea4 <__mdiff+0x28>
 8008ed6:	693e      	ldr	r6, [r7, #16]
 8008ed8:	60c5      	str	r5, [r0, #12]
 8008eda:	6925      	ldr	r5, [r4, #16]
 8008edc:	f107 0114 	add.w	r1, r7, #20
 8008ee0:	f104 0914 	add.w	r9, r4, #20
 8008ee4:	f100 0e14 	add.w	lr, r0, #20
 8008ee8:	f107 0210 	add.w	r2, r7, #16
 8008eec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ef0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008ef4:	46f2      	mov	sl, lr
 8008ef6:	2700      	movs	r7, #0
 8008ef8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008efc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f00:	fa1f f883 	uxth.w	r8, r3
 8008f04:	fa17 f78b 	uxtah	r7, r7, fp
 8008f08:	0c1b      	lsrs	r3, r3, #16
 8008f0a:	eba7 0808 	sub.w	r8, r7, r8
 8008f0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f16:	fa1f f888 	uxth.w	r8, r8
 8008f1a:	141f      	asrs	r7, r3, #16
 8008f1c:	454d      	cmp	r5, r9
 8008f1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f22:	f84a 3b04 	str.w	r3, [sl], #4
 8008f26:	d8e7      	bhi.n	8008ef8 <__mdiff+0x7c>
 8008f28:	1b2b      	subs	r3, r5, r4
 8008f2a:	3b15      	subs	r3, #21
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	3304      	adds	r3, #4
 8008f32:	3415      	adds	r4, #21
 8008f34:	42a5      	cmp	r5, r4
 8008f36:	bf38      	it	cc
 8008f38:	2304      	movcc	r3, #4
 8008f3a:	4419      	add	r1, r3
 8008f3c:	4473      	add	r3, lr
 8008f3e:	469e      	mov	lr, r3
 8008f40:	460d      	mov	r5, r1
 8008f42:	4565      	cmp	r5, ip
 8008f44:	d30e      	bcc.n	8008f64 <__mdiff+0xe8>
 8008f46:	f10c 0203 	add.w	r2, ip, #3
 8008f4a:	1a52      	subs	r2, r2, r1
 8008f4c:	f022 0203 	bic.w	r2, r2, #3
 8008f50:	3903      	subs	r1, #3
 8008f52:	458c      	cmp	ip, r1
 8008f54:	bf38      	it	cc
 8008f56:	2200      	movcc	r2, #0
 8008f58:	441a      	add	r2, r3
 8008f5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f5e:	b17b      	cbz	r3, 8008f80 <__mdiff+0x104>
 8008f60:	6106      	str	r6, [r0, #16]
 8008f62:	e7a5      	b.n	8008eb0 <__mdiff+0x34>
 8008f64:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f68:	fa17 f488 	uxtah	r4, r7, r8
 8008f6c:	1422      	asrs	r2, r4, #16
 8008f6e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f72:	b2a4      	uxth	r4, r4
 8008f74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f78:	f84e 4b04 	str.w	r4, [lr], #4
 8008f7c:	1417      	asrs	r7, r2, #16
 8008f7e:	e7e0      	b.n	8008f42 <__mdiff+0xc6>
 8008f80:	3e01      	subs	r6, #1
 8008f82:	e7ea      	b.n	8008f5a <__mdiff+0xde>
 8008f84:	08009c3f 	.word	0x08009c3f
 8008f88:	08009cb0 	.word	0x08009cb0

08008f8c <__d2b>:
 8008f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f90:	4689      	mov	r9, r1
 8008f92:	2101      	movs	r1, #1
 8008f94:	ec57 6b10 	vmov	r6, r7, d0
 8008f98:	4690      	mov	r8, r2
 8008f9a:	f7ff fcd5 	bl	8008948 <_Balloc>
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	b930      	cbnz	r0, 8008fb0 <__d2b+0x24>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	4b25      	ldr	r3, [pc, #148]	; (800903c <__d2b+0xb0>)
 8008fa6:	4826      	ldr	r0, [pc, #152]	; (8009040 <__d2b+0xb4>)
 8008fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8008fac:	f000 fb84 	bl	80096b8 <__assert_func>
 8008fb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fb8:	bb35      	cbnz	r5, 8009008 <__d2b+0x7c>
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	d028      	beq.n	8009012 <__d2b+0x86>
 8008fc0:	4668      	mov	r0, sp
 8008fc2:	9600      	str	r6, [sp, #0]
 8008fc4:	f7ff fd8c 	bl	8008ae0 <__lo0bits>
 8008fc8:	9900      	ldr	r1, [sp, #0]
 8008fca:	b300      	cbz	r0, 800900e <__d2b+0x82>
 8008fcc:	9a01      	ldr	r2, [sp, #4]
 8008fce:	f1c0 0320 	rsb	r3, r0, #32
 8008fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	40c2      	lsrs	r2, r0
 8008fda:	6163      	str	r3, [r4, #20]
 8008fdc:	9201      	str	r2, [sp, #4]
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	61a3      	str	r3, [r4, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf14      	ite	ne
 8008fe6:	2202      	movne	r2, #2
 8008fe8:	2201      	moveq	r2, #1
 8008fea:	6122      	str	r2, [r4, #16]
 8008fec:	b1d5      	cbz	r5, 8009024 <__d2b+0x98>
 8008fee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ff2:	4405      	add	r5, r0
 8008ff4:	f8c9 5000 	str.w	r5, [r9]
 8008ff8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ffc:	f8c8 0000 	str.w	r0, [r8]
 8009000:	4620      	mov	r0, r4
 8009002:	b003      	add	sp, #12
 8009004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800900c:	e7d5      	b.n	8008fba <__d2b+0x2e>
 800900e:	6161      	str	r1, [r4, #20]
 8009010:	e7e5      	b.n	8008fde <__d2b+0x52>
 8009012:	a801      	add	r0, sp, #4
 8009014:	f7ff fd64 	bl	8008ae0 <__lo0bits>
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	6163      	str	r3, [r4, #20]
 800901c:	2201      	movs	r2, #1
 800901e:	6122      	str	r2, [r4, #16]
 8009020:	3020      	adds	r0, #32
 8009022:	e7e3      	b.n	8008fec <__d2b+0x60>
 8009024:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009028:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800902c:	f8c9 0000 	str.w	r0, [r9]
 8009030:	6918      	ldr	r0, [r3, #16]
 8009032:	f7ff fd35 	bl	8008aa0 <__hi0bits>
 8009036:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800903a:	e7df      	b.n	8008ffc <__d2b+0x70>
 800903c:	08009c3f 	.word	0x08009c3f
 8009040:	08009cb0 	.word	0x08009cb0

08009044 <_calloc_r>:
 8009044:	b513      	push	{r0, r1, r4, lr}
 8009046:	434a      	muls	r2, r1
 8009048:	4611      	mov	r1, r2
 800904a:	9201      	str	r2, [sp, #4]
 800904c:	f000 f85a 	bl	8009104 <_malloc_r>
 8009050:	4604      	mov	r4, r0
 8009052:	b118      	cbz	r0, 800905c <_calloc_r+0x18>
 8009054:	9a01      	ldr	r2, [sp, #4]
 8009056:	2100      	movs	r1, #0
 8009058:	f7fe f860 	bl	800711c <memset>
 800905c:	4620      	mov	r0, r4
 800905e:	b002      	add	sp, #8
 8009060:	bd10      	pop	{r4, pc}
	...

08009064 <_free_r>:
 8009064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009066:	2900      	cmp	r1, #0
 8009068:	d048      	beq.n	80090fc <_free_r+0x98>
 800906a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906e:	9001      	str	r0, [sp, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f1a1 0404 	sub.w	r4, r1, #4
 8009076:	bfb8      	it	lt
 8009078:	18e4      	addlt	r4, r4, r3
 800907a:	f000 fca7 	bl	80099cc <__malloc_lock>
 800907e:	4a20      	ldr	r2, [pc, #128]	; (8009100 <_free_r+0x9c>)
 8009080:	9801      	ldr	r0, [sp, #4]
 8009082:	6813      	ldr	r3, [r2, #0]
 8009084:	4615      	mov	r5, r2
 8009086:	b933      	cbnz	r3, 8009096 <_free_r+0x32>
 8009088:	6063      	str	r3, [r4, #4]
 800908a:	6014      	str	r4, [r2, #0]
 800908c:	b003      	add	sp, #12
 800908e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009092:	f000 bca1 	b.w	80099d8 <__malloc_unlock>
 8009096:	42a3      	cmp	r3, r4
 8009098:	d90b      	bls.n	80090b2 <_free_r+0x4e>
 800909a:	6821      	ldr	r1, [r4, #0]
 800909c:	1862      	adds	r2, r4, r1
 800909e:	4293      	cmp	r3, r2
 80090a0:	bf04      	itt	eq
 80090a2:	681a      	ldreq	r2, [r3, #0]
 80090a4:	685b      	ldreq	r3, [r3, #4]
 80090a6:	6063      	str	r3, [r4, #4]
 80090a8:	bf04      	itt	eq
 80090aa:	1852      	addeq	r2, r2, r1
 80090ac:	6022      	streq	r2, [r4, #0]
 80090ae:	602c      	str	r4, [r5, #0]
 80090b0:	e7ec      	b.n	800908c <_free_r+0x28>
 80090b2:	461a      	mov	r2, r3
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	b10b      	cbz	r3, 80090bc <_free_r+0x58>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d9fa      	bls.n	80090b2 <_free_r+0x4e>
 80090bc:	6811      	ldr	r1, [r2, #0]
 80090be:	1855      	adds	r5, r2, r1
 80090c0:	42a5      	cmp	r5, r4
 80090c2:	d10b      	bne.n	80090dc <_free_r+0x78>
 80090c4:	6824      	ldr	r4, [r4, #0]
 80090c6:	4421      	add	r1, r4
 80090c8:	1854      	adds	r4, r2, r1
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	d1dd      	bne.n	800908c <_free_r+0x28>
 80090d0:	681c      	ldr	r4, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	6053      	str	r3, [r2, #4]
 80090d6:	4421      	add	r1, r4
 80090d8:	6011      	str	r1, [r2, #0]
 80090da:	e7d7      	b.n	800908c <_free_r+0x28>
 80090dc:	d902      	bls.n	80090e4 <_free_r+0x80>
 80090de:	230c      	movs	r3, #12
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	e7d3      	b.n	800908c <_free_r+0x28>
 80090e4:	6825      	ldr	r5, [r4, #0]
 80090e6:	1961      	adds	r1, r4, r5
 80090e8:	428b      	cmp	r3, r1
 80090ea:	bf04      	itt	eq
 80090ec:	6819      	ldreq	r1, [r3, #0]
 80090ee:	685b      	ldreq	r3, [r3, #4]
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	bf04      	itt	eq
 80090f4:	1949      	addeq	r1, r1, r5
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	6054      	str	r4, [r2, #4]
 80090fa:	e7c7      	b.n	800908c <_free_r+0x28>
 80090fc:	b003      	add	sp, #12
 80090fe:	bd30      	pop	{r4, r5, pc}
 8009100:	20000430 	.word	0x20000430

08009104 <_malloc_r>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	1ccd      	adds	r5, r1, #3
 8009108:	f025 0503 	bic.w	r5, r5, #3
 800910c:	3508      	adds	r5, #8
 800910e:	2d0c      	cmp	r5, #12
 8009110:	bf38      	it	cc
 8009112:	250c      	movcc	r5, #12
 8009114:	2d00      	cmp	r5, #0
 8009116:	4606      	mov	r6, r0
 8009118:	db01      	blt.n	800911e <_malloc_r+0x1a>
 800911a:	42a9      	cmp	r1, r5
 800911c:	d903      	bls.n	8009126 <_malloc_r+0x22>
 800911e:	230c      	movs	r3, #12
 8009120:	6033      	str	r3, [r6, #0]
 8009122:	2000      	movs	r0, #0
 8009124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009126:	f000 fc51 	bl	80099cc <__malloc_lock>
 800912a:	4921      	ldr	r1, [pc, #132]	; (80091b0 <_malloc_r+0xac>)
 800912c:	680a      	ldr	r2, [r1, #0]
 800912e:	4614      	mov	r4, r2
 8009130:	b99c      	cbnz	r4, 800915a <_malloc_r+0x56>
 8009132:	4f20      	ldr	r7, [pc, #128]	; (80091b4 <_malloc_r+0xb0>)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	b923      	cbnz	r3, 8009142 <_malloc_r+0x3e>
 8009138:	4621      	mov	r1, r4
 800913a:	4630      	mov	r0, r6
 800913c:	f000 f996 	bl	800946c <_sbrk_r>
 8009140:	6038      	str	r0, [r7, #0]
 8009142:	4629      	mov	r1, r5
 8009144:	4630      	mov	r0, r6
 8009146:	f000 f991 	bl	800946c <_sbrk_r>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d123      	bne.n	8009196 <_malloc_r+0x92>
 800914e:	230c      	movs	r3, #12
 8009150:	6033      	str	r3, [r6, #0]
 8009152:	4630      	mov	r0, r6
 8009154:	f000 fc40 	bl	80099d8 <__malloc_unlock>
 8009158:	e7e3      	b.n	8009122 <_malloc_r+0x1e>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	1b5b      	subs	r3, r3, r5
 800915e:	d417      	bmi.n	8009190 <_malloc_r+0x8c>
 8009160:	2b0b      	cmp	r3, #11
 8009162:	d903      	bls.n	800916c <_malloc_r+0x68>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	441c      	add	r4, r3
 8009168:	6025      	str	r5, [r4, #0]
 800916a:	e004      	b.n	8009176 <_malloc_r+0x72>
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	42a2      	cmp	r2, r4
 8009170:	bf0c      	ite	eq
 8009172:	600b      	streq	r3, [r1, #0]
 8009174:	6053      	strne	r3, [r2, #4]
 8009176:	4630      	mov	r0, r6
 8009178:	f000 fc2e 	bl	80099d8 <__malloc_unlock>
 800917c:	f104 000b 	add.w	r0, r4, #11
 8009180:	1d23      	adds	r3, r4, #4
 8009182:	f020 0007 	bic.w	r0, r0, #7
 8009186:	1ac2      	subs	r2, r0, r3
 8009188:	d0cc      	beq.n	8009124 <_malloc_r+0x20>
 800918a:	1a1b      	subs	r3, r3, r0
 800918c:	50a3      	str	r3, [r4, r2]
 800918e:	e7c9      	b.n	8009124 <_malloc_r+0x20>
 8009190:	4622      	mov	r2, r4
 8009192:	6864      	ldr	r4, [r4, #4]
 8009194:	e7cc      	b.n	8009130 <_malloc_r+0x2c>
 8009196:	1cc4      	adds	r4, r0, #3
 8009198:	f024 0403 	bic.w	r4, r4, #3
 800919c:	42a0      	cmp	r0, r4
 800919e:	d0e3      	beq.n	8009168 <_malloc_r+0x64>
 80091a0:	1a21      	subs	r1, r4, r0
 80091a2:	4630      	mov	r0, r6
 80091a4:	f000 f962 	bl	800946c <_sbrk_r>
 80091a8:	3001      	adds	r0, #1
 80091aa:	d1dd      	bne.n	8009168 <_malloc_r+0x64>
 80091ac:	e7cf      	b.n	800914e <_malloc_r+0x4a>
 80091ae:	bf00      	nop
 80091b0:	20000430 	.word	0x20000430
 80091b4:	20000434 	.word	0x20000434

080091b8 <__sfputc_r>:
 80091b8:	6893      	ldr	r3, [r2, #8]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	b410      	push	{r4}
 80091c0:	6093      	str	r3, [r2, #8]
 80091c2:	da08      	bge.n	80091d6 <__sfputc_r+0x1e>
 80091c4:	6994      	ldr	r4, [r2, #24]
 80091c6:	42a3      	cmp	r3, r4
 80091c8:	db01      	blt.n	80091ce <__sfputc_r+0x16>
 80091ca:	290a      	cmp	r1, #10
 80091cc:	d103      	bne.n	80091d6 <__sfputc_r+0x1e>
 80091ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d2:	f000 b99f 	b.w	8009514 <__swbuf_r>
 80091d6:	6813      	ldr	r3, [r2, #0]
 80091d8:	1c58      	adds	r0, r3, #1
 80091da:	6010      	str	r0, [r2, #0]
 80091dc:	7019      	strb	r1, [r3, #0]
 80091de:	4608      	mov	r0, r1
 80091e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <__sfputs_r>:
 80091e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e8:	4606      	mov	r6, r0
 80091ea:	460f      	mov	r7, r1
 80091ec:	4614      	mov	r4, r2
 80091ee:	18d5      	adds	r5, r2, r3
 80091f0:	42ac      	cmp	r4, r5
 80091f2:	d101      	bne.n	80091f8 <__sfputs_r+0x12>
 80091f4:	2000      	movs	r0, #0
 80091f6:	e007      	b.n	8009208 <__sfputs_r+0x22>
 80091f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fc:	463a      	mov	r2, r7
 80091fe:	4630      	mov	r0, r6
 8009200:	f7ff ffda 	bl	80091b8 <__sfputc_r>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d1f3      	bne.n	80091f0 <__sfputs_r+0xa>
 8009208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800920c <_vfiprintf_r>:
 800920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	460d      	mov	r5, r1
 8009212:	b09d      	sub	sp, #116	; 0x74
 8009214:	4614      	mov	r4, r2
 8009216:	4698      	mov	r8, r3
 8009218:	4606      	mov	r6, r0
 800921a:	b118      	cbz	r0, 8009224 <_vfiprintf_r+0x18>
 800921c:	6983      	ldr	r3, [r0, #24]
 800921e:	b90b      	cbnz	r3, 8009224 <_vfiprintf_r+0x18>
 8009220:	f7ff fad6 	bl	80087d0 <__sinit>
 8009224:	4b89      	ldr	r3, [pc, #548]	; (800944c <_vfiprintf_r+0x240>)
 8009226:	429d      	cmp	r5, r3
 8009228:	d11b      	bne.n	8009262 <_vfiprintf_r+0x56>
 800922a:	6875      	ldr	r5, [r6, #4]
 800922c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800922e:	07d9      	lsls	r1, r3, #31
 8009230:	d405      	bmi.n	800923e <_vfiprintf_r+0x32>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	059a      	lsls	r2, r3, #22
 8009236:	d402      	bmi.n	800923e <_vfiprintf_r+0x32>
 8009238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800923a:	f7ff fb6c 	bl	8008916 <__retarget_lock_acquire_recursive>
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	071b      	lsls	r3, r3, #28
 8009242:	d501      	bpl.n	8009248 <_vfiprintf_r+0x3c>
 8009244:	692b      	ldr	r3, [r5, #16]
 8009246:	b9eb      	cbnz	r3, 8009284 <_vfiprintf_r+0x78>
 8009248:	4629      	mov	r1, r5
 800924a:	4630      	mov	r0, r6
 800924c:	f000 f9c6 	bl	80095dc <__swsetup_r>
 8009250:	b1c0      	cbz	r0, 8009284 <_vfiprintf_r+0x78>
 8009252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009254:	07dc      	lsls	r4, r3, #31
 8009256:	d50e      	bpl.n	8009276 <_vfiprintf_r+0x6a>
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	b01d      	add	sp, #116	; 0x74
 800925e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009262:	4b7b      	ldr	r3, [pc, #492]	; (8009450 <_vfiprintf_r+0x244>)
 8009264:	429d      	cmp	r5, r3
 8009266:	d101      	bne.n	800926c <_vfiprintf_r+0x60>
 8009268:	68b5      	ldr	r5, [r6, #8]
 800926a:	e7df      	b.n	800922c <_vfiprintf_r+0x20>
 800926c:	4b79      	ldr	r3, [pc, #484]	; (8009454 <_vfiprintf_r+0x248>)
 800926e:	429d      	cmp	r5, r3
 8009270:	bf08      	it	eq
 8009272:	68f5      	ldreq	r5, [r6, #12]
 8009274:	e7da      	b.n	800922c <_vfiprintf_r+0x20>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	0598      	lsls	r0, r3, #22
 800927a:	d4ed      	bmi.n	8009258 <_vfiprintf_r+0x4c>
 800927c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800927e:	f7ff fb4b 	bl	8008918 <__retarget_lock_release_recursive>
 8009282:	e7e9      	b.n	8009258 <_vfiprintf_r+0x4c>
 8009284:	2300      	movs	r3, #0
 8009286:	9309      	str	r3, [sp, #36]	; 0x24
 8009288:	2320      	movs	r3, #32
 800928a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800928e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009292:	2330      	movs	r3, #48	; 0x30
 8009294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009458 <_vfiprintf_r+0x24c>
 8009298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800929c:	f04f 0901 	mov.w	r9, #1
 80092a0:	4623      	mov	r3, r4
 80092a2:	469a      	mov	sl, r3
 80092a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a8:	b10a      	cbz	r2, 80092ae <_vfiprintf_r+0xa2>
 80092aa:	2a25      	cmp	r2, #37	; 0x25
 80092ac:	d1f9      	bne.n	80092a2 <_vfiprintf_r+0x96>
 80092ae:	ebba 0b04 	subs.w	fp, sl, r4
 80092b2:	d00b      	beq.n	80092cc <_vfiprintf_r+0xc0>
 80092b4:	465b      	mov	r3, fp
 80092b6:	4622      	mov	r2, r4
 80092b8:	4629      	mov	r1, r5
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7ff ff93 	bl	80091e6 <__sfputs_r>
 80092c0:	3001      	adds	r0, #1
 80092c2:	f000 80aa 	beq.w	800941a <_vfiprintf_r+0x20e>
 80092c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092c8:	445a      	add	r2, fp
 80092ca:	9209      	str	r2, [sp, #36]	; 0x24
 80092cc:	f89a 3000 	ldrb.w	r3, [sl]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 80a2 	beq.w	800941a <_vfiprintf_r+0x20e>
 80092d6:	2300      	movs	r3, #0
 80092d8:	f04f 32ff 	mov.w	r2, #4294967295
 80092dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e0:	f10a 0a01 	add.w	sl, sl, #1
 80092e4:	9304      	str	r3, [sp, #16]
 80092e6:	9307      	str	r3, [sp, #28]
 80092e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ec:	931a      	str	r3, [sp, #104]	; 0x68
 80092ee:	4654      	mov	r4, sl
 80092f0:	2205      	movs	r2, #5
 80092f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f6:	4858      	ldr	r0, [pc, #352]	; (8009458 <_vfiprintf_r+0x24c>)
 80092f8:	f7f6 ff72 	bl	80001e0 <memchr>
 80092fc:	9a04      	ldr	r2, [sp, #16]
 80092fe:	b9d8      	cbnz	r0, 8009338 <_vfiprintf_r+0x12c>
 8009300:	06d1      	lsls	r1, r2, #27
 8009302:	bf44      	itt	mi
 8009304:	2320      	movmi	r3, #32
 8009306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800930a:	0713      	lsls	r3, r2, #28
 800930c:	bf44      	itt	mi
 800930e:	232b      	movmi	r3, #43	; 0x2b
 8009310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009314:	f89a 3000 	ldrb.w	r3, [sl]
 8009318:	2b2a      	cmp	r3, #42	; 0x2a
 800931a:	d015      	beq.n	8009348 <_vfiprintf_r+0x13c>
 800931c:	9a07      	ldr	r2, [sp, #28]
 800931e:	4654      	mov	r4, sl
 8009320:	2000      	movs	r0, #0
 8009322:	f04f 0c0a 	mov.w	ip, #10
 8009326:	4621      	mov	r1, r4
 8009328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800932c:	3b30      	subs	r3, #48	; 0x30
 800932e:	2b09      	cmp	r3, #9
 8009330:	d94e      	bls.n	80093d0 <_vfiprintf_r+0x1c4>
 8009332:	b1b0      	cbz	r0, 8009362 <_vfiprintf_r+0x156>
 8009334:	9207      	str	r2, [sp, #28]
 8009336:	e014      	b.n	8009362 <_vfiprintf_r+0x156>
 8009338:	eba0 0308 	sub.w	r3, r0, r8
 800933c:	fa09 f303 	lsl.w	r3, r9, r3
 8009340:	4313      	orrs	r3, r2
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	46a2      	mov	sl, r4
 8009346:	e7d2      	b.n	80092ee <_vfiprintf_r+0xe2>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	1d19      	adds	r1, r3, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	9103      	str	r1, [sp, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	bfbb      	ittet	lt
 8009354:	425b      	neglt	r3, r3
 8009356:	f042 0202 	orrlt.w	r2, r2, #2
 800935a:	9307      	strge	r3, [sp, #28]
 800935c:	9307      	strlt	r3, [sp, #28]
 800935e:	bfb8      	it	lt
 8009360:	9204      	strlt	r2, [sp, #16]
 8009362:	7823      	ldrb	r3, [r4, #0]
 8009364:	2b2e      	cmp	r3, #46	; 0x2e
 8009366:	d10c      	bne.n	8009382 <_vfiprintf_r+0x176>
 8009368:	7863      	ldrb	r3, [r4, #1]
 800936a:	2b2a      	cmp	r3, #42	; 0x2a
 800936c:	d135      	bne.n	80093da <_vfiprintf_r+0x1ce>
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	1d1a      	adds	r2, r3, #4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	9203      	str	r2, [sp, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	bfb8      	it	lt
 800937a:	f04f 33ff 	movlt.w	r3, #4294967295
 800937e:	3402      	adds	r4, #2
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009468 <_vfiprintf_r+0x25c>
 8009386:	7821      	ldrb	r1, [r4, #0]
 8009388:	2203      	movs	r2, #3
 800938a:	4650      	mov	r0, sl
 800938c:	f7f6 ff28 	bl	80001e0 <memchr>
 8009390:	b140      	cbz	r0, 80093a4 <_vfiprintf_r+0x198>
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	eba0 000a 	sub.w	r0, r0, sl
 8009398:	fa03 f000 	lsl.w	r0, r3, r0
 800939c:	9b04      	ldr	r3, [sp, #16]
 800939e:	4303      	orrs	r3, r0
 80093a0:	3401      	adds	r4, #1
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a8:	482c      	ldr	r0, [pc, #176]	; (800945c <_vfiprintf_r+0x250>)
 80093aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ae:	2206      	movs	r2, #6
 80093b0:	f7f6 ff16 	bl	80001e0 <memchr>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d03f      	beq.n	8009438 <_vfiprintf_r+0x22c>
 80093b8:	4b29      	ldr	r3, [pc, #164]	; (8009460 <_vfiprintf_r+0x254>)
 80093ba:	bb1b      	cbnz	r3, 8009404 <_vfiprintf_r+0x1f8>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	3307      	adds	r3, #7
 80093c0:	f023 0307 	bic.w	r3, r3, #7
 80093c4:	3308      	adds	r3, #8
 80093c6:	9303      	str	r3, [sp, #12]
 80093c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ca:	443b      	add	r3, r7
 80093cc:	9309      	str	r3, [sp, #36]	; 0x24
 80093ce:	e767      	b.n	80092a0 <_vfiprintf_r+0x94>
 80093d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d4:	460c      	mov	r4, r1
 80093d6:	2001      	movs	r0, #1
 80093d8:	e7a5      	b.n	8009326 <_vfiprintf_r+0x11a>
 80093da:	2300      	movs	r3, #0
 80093dc:	3401      	adds	r4, #1
 80093de:	9305      	str	r3, [sp, #20]
 80093e0:	4619      	mov	r1, r3
 80093e2:	f04f 0c0a 	mov.w	ip, #10
 80093e6:	4620      	mov	r0, r4
 80093e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ec:	3a30      	subs	r2, #48	; 0x30
 80093ee:	2a09      	cmp	r2, #9
 80093f0:	d903      	bls.n	80093fa <_vfiprintf_r+0x1ee>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0c5      	beq.n	8009382 <_vfiprintf_r+0x176>
 80093f6:	9105      	str	r1, [sp, #20]
 80093f8:	e7c3      	b.n	8009382 <_vfiprintf_r+0x176>
 80093fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80093fe:	4604      	mov	r4, r0
 8009400:	2301      	movs	r3, #1
 8009402:	e7f0      	b.n	80093e6 <_vfiprintf_r+0x1da>
 8009404:	ab03      	add	r3, sp, #12
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	462a      	mov	r2, r5
 800940a:	4b16      	ldr	r3, [pc, #88]	; (8009464 <_vfiprintf_r+0x258>)
 800940c:	a904      	add	r1, sp, #16
 800940e:	4630      	mov	r0, r6
 8009410:	f7fd ff2c 	bl	800726c <_printf_float>
 8009414:	4607      	mov	r7, r0
 8009416:	1c78      	adds	r0, r7, #1
 8009418:	d1d6      	bne.n	80093c8 <_vfiprintf_r+0x1bc>
 800941a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800941c:	07d9      	lsls	r1, r3, #31
 800941e:	d405      	bmi.n	800942c <_vfiprintf_r+0x220>
 8009420:	89ab      	ldrh	r3, [r5, #12]
 8009422:	059a      	lsls	r2, r3, #22
 8009424:	d402      	bmi.n	800942c <_vfiprintf_r+0x220>
 8009426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009428:	f7ff fa76 	bl	8008918 <__retarget_lock_release_recursive>
 800942c:	89ab      	ldrh	r3, [r5, #12]
 800942e:	065b      	lsls	r3, r3, #25
 8009430:	f53f af12 	bmi.w	8009258 <_vfiprintf_r+0x4c>
 8009434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009436:	e711      	b.n	800925c <_vfiprintf_r+0x50>
 8009438:	ab03      	add	r3, sp, #12
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	462a      	mov	r2, r5
 800943e:	4b09      	ldr	r3, [pc, #36]	; (8009464 <_vfiprintf_r+0x258>)
 8009440:	a904      	add	r1, sp, #16
 8009442:	4630      	mov	r0, r6
 8009444:	f7fe f9b6 	bl	80077b4 <_printf_i>
 8009448:	e7e4      	b.n	8009414 <_vfiprintf_r+0x208>
 800944a:	bf00      	nop
 800944c:	08009c70 	.word	0x08009c70
 8009450:	08009c90 	.word	0x08009c90
 8009454:	08009c50 	.word	0x08009c50
 8009458:	08009e0c 	.word	0x08009e0c
 800945c:	08009e16 	.word	0x08009e16
 8009460:	0800726d 	.word	0x0800726d
 8009464:	080091e7 	.word	0x080091e7
 8009468:	08009e12 	.word	0x08009e12

0800946c <_sbrk_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d06      	ldr	r5, [pc, #24]	; (8009488 <_sbrk_r+0x1c>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	602b      	str	r3, [r5, #0]
 8009478:	f7f9 ff82 	bl	8003380 <_sbrk>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_sbrk_r+0x1a>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_sbrk_r+0x1a>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	200005f0 	.word	0x200005f0

0800948c <__sread>:
 800948c:	b510      	push	{r4, lr}
 800948e:	460c      	mov	r4, r1
 8009490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009494:	f000 faa6 	bl	80099e4 <_read_r>
 8009498:	2800      	cmp	r0, #0
 800949a:	bfab      	itete	ge
 800949c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800949e:	89a3      	ldrhlt	r3, [r4, #12]
 80094a0:	181b      	addge	r3, r3, r0
 80094a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094a6:	bfac      	ite	ge
 80094a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094aa:	81a3      	strhlt	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__swrite>:
 80094ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	461f      	mov	r7, r3
 80094b4:	898b      	ldrh	r3, [r1, #12]
 80094b6:	05db      	lsls	r3, r3, #23
 80094b8:	4605      	mov	r5, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	4616      	mov	r6, r2
 80094be:	d505      	bpl.n	80094cc <__swrite+0x1e>
 80094c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c4:	2302      	movs	r3, #2
 80094c6:	2200      	movs	r2, #0
 80094c8:	f000 f9f8 	bl	80098bc <_lseek_r>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	4632      	mov	r2, r6
 80094da:	463b      	mov	r3, r7
 80094dc:	4628      	mov	r0, r5
 80094de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e2:	f000 b869 	b.w	80095b8 <_write_r>

080094e6 <__sseek>:
 80094e6:	b510      	push	{r4, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ee:	f000 f9e5 	bl	80098bc <_lseek_r>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	bf15      	itete	ne
 80094f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009502:	81a3      	strheq	r3, [r4, #12]
 8009504:	bf18      	it	ne
 8009506:	81a3      	strhne	r3, [r4, #12]
 8009508:	bd10      	pop	{r4, pc}

0800950a <__sclose>:
 800950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950e:	f000 b8f1 	b.w	80096f4 <_close_r>
	...

08009514 <__swbuf_r>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	460e      	mov	r6, r1
 8009518:	4614      	mov	r4, r2
 800951a:	4605      	mov	r5, r0
 800951c:	b118      	cbz	r0, 8009526 <__swbuf_r+0x12>
 800951e:	6983      	ldr	r3, [r0, #24]
 8009520:	b90b      	cbnz	r3, 8009526 <__swbuf_r+0x12>
 8009522:	f7ff f955 	bl	80087d0 <__sinit>
 8009526:	4b21      	ldr	r3, [pc, #132]	; (80095ac <__swbuf_r+0x98>)
 8009528:	429c      	cmp	r4, r3
 800952a:	d12b      	bne.n	8009584 <__swbuf_r+0x70>
 800952c:	686c      	ldr	r4, [r5, #4]
 800952e:	69a3      	ldr	r3, [r4, #24]
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	071a      	lsls	r2, r3, #28
 8009536:	d52f      	bpl.n	8009598 <__swbuf_r+0x84>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	b36b      	cbz	r3, 8009598 <__swbuf_r+0x84>
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	1ac0      	subs	r0, r0, r3
 8009542:	6963      	ldr	r3, [r4, #20]
 8009544:	b2f6      	uxtb	r6, r6
 8009546:	4283      	cmp	r3, r0
 8009548:	4637      	mov	r7, r6
 800954a:	dc04      	bgt.n	8009556 <__swbuf_r+0x42>
 800954c:	4621      	mov	r1, r4
 800954e:	4628      	mov	r0, r5
 8009550:	f000 f966 	bl	8009820 <_fflush_r>
 8009554:	bb30      	cbnz	r0, 80095a4 <__swbuf_r+0x90>
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	3b01      	subs	r3, #1
 800955a:	60a3      	str	r3, [r4, #8]
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	6022      	str	r2, [r4, #0]
 8009562:	701e      	strb	r6, [r3, #0]
 8009564:	6963      	ldr	r3, [r4, #20]
 8009566:	3001      	adds	r0, #1
 8009568:	4283      	cmp	r3, r0
 800956a:	d004      	beq.n	8009576 <__swbuf_r+0x62>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	07db      	lsls	r3, r3, #31
 8009570:	d506      	bpl.n	8009580 <__swbuf_r+0x6c>
 8009572:	2e0a      	cmp	r6, #10
 8009574:	d104      	bne.n	8009580 <__swbuf_r+0x6c>
 8009576:	4621      	mov	r1, r4
 8009578:	4628      	mov	r0, r5
 800957a:	f000 f951 	bl	8009820 <_fflush_r>
 800957e:	b988      	cbnz	r0, 80095a4 <__swbuf_r+0x90>
 8009580:	4638      	mov	r0, r7
 8009582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <__swbuf_r+0x9c>)
 8009586:	429c      	cmp	r4, r3
 8009588:	d101      	bne.n	800958e <__swbuf_r+0x7a>
 800958a:	68ac      	ldr	r4, [r5, #8]
 800958c:	e7cf      	b.n	800952e <__swbuf_r+0x1a>
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <__swbuf_r+0xa0>)
 8009590:	429c      	cmp	r4, r3
 8009592:	bf08      	it	eq
 8009594:	68ec      	ldreq	r4, [r5, #12]
 8009596:	e7ca      	b.n	800952e <__swbuf_r+0x1a>
 8009598:	4621      	mov	r1, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f000 f81e 	bl	80095dc <__swsetup_r>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d0cb      	beq.n	800953c <__swbuf_r+0x28>
 80095a4:	f04f 37ff 	mov.w	r7, #4294967295
 80095a8:	e7ea      	b.n	8009580 <__swbuf_r+0x6c>
 80095aa:	bf00      	nop
 80095ac:	08009c70 	.word	0x08009c70
 80095b0:	08009c90 	.word	0x08009c90
 80095b4:	08009c50 	.word	0x08009c50

080095b8 <_write_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d07      	ldr	r5, [pc, #28]	; (80095d8 <_write_r+0x20>)
 80095bc:	4604      	mov	r4, r0
 80095be:	4608      	mov	r0, r1
 80095c0:	4611      	mov	r1, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	602a      	str	r2, [r5, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f7f9 fe8a 	bl	80032e0 <_write>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_write_r+0x1e>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_write_r+0x1e>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	200005f0 	.word	0x200005f0

080095dc <__swsetup_r>:
 80095dc:	4b32      	ldr	r3, [pc, #200]	; (80096a8 <__swsetup_r+0xcc>)
 80095de:	b570      	push	{r4, r5, r6, lr}
 80095e0:	681d      	ldr	r5, [r3, #0]
 80095e2:	4606      	mov	r6, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	b125      	cbz	r5, 80095f2 <__swsetup_r+0x16>
 80095e8:	69ab      	ldr	r3, [r5, #24]
 80095ea:	b913      	cbnz	r3, 80095f2 <__swsetup_r+0x16>
 80095ec:	4628      	mov	r0, r5
 80095ee:	f7ff f8ef 	bl	80087d0 <__sinit>
 80095f2:	4b2e      	ldr	r3, [pc, #184]	; (80096ac <__swsetup_r+0xd0>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	d10f      	bne.n	8009618 <__swsetup_r+0x3c>
 80095f8:	686c      	ldr	r4, [r5, #4]
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009600:	0719      	lsls	r1, r3, #28
 8009602:	d42c      	bmi.n	800965e <__swsetup_r+0x82>
 8009604:	06dd      	lsls	r5, r3, #27
 8009606:	d411      	bmi.n	800962c <__swsetup_r+0x50>
 8009608:	2309      	movs	r3, #9
 800960a:	6033      	str	r3, [r6, #0]
 800960c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	e03e      	b.n	8009696 <__swsetup_r+0xba>
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <__swsetup_r+0xd4>)
 800961a:	429c      	cmp	r4, r3
 800961c:	d101      	bne.n	8009622 <__swsetup_r+0x46>
 800961e:	68ac      	ldr	r4, [r5, #8]
 8009620:	e7eb      	b.n	80095fa <__swsetup_r+0x1e>
 8009622:	4b24      	ldr	r3, [pc, #144]	; (80096b4 <__swsetup_r+0xd8>)
 8009624:	429c      	cmp	r4, r3
 8009626:	bf08      	it	eq
 8009628:	68ec      	ldreq	r4, [r5, #12]
 800962a:	e7e6      	b.n	80095fa <__swsetup_r+0x1e>
 800962c:	0758      	lsls	r0, r3, #29
 800962e:	d512      	bpl.n	8009656 <__swsetup_r+0x7a>
 8009630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009632:	b141      	cbz	r1, 8009646 <__swsetup_r+0x6a>
 8009634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009638:	4299      	cmp	r1, r3
 800963a:	d002      	beq.n	8009642 <__swsetup_r+0x66>
 800963c:	4630      	mov	r0, r6
 800963e:	f7ff fd11 	bl	8009064 <_free_r>
 8009642:	2300      	movs	r3, #0
 8009644:	6363      	str	r3, [r4, #52]	; 0x34
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f043 0308 	orr.w	r3, r3, #8
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	b94b      	cbnz	r3, 8009676 <__swsetup_r+0x9a>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800966c:	d003      	beq.n	8009676 <__swsetup_r+0x9a>
 800966e:	4621      	mov	r1, r4
 8009670:	4630      	mov	r0, r6
 8009672:	f000 f959 	bl	8009928 <__smakebuf_r>
 8009676:	89a0      	ldrh	r0, [r4, #12]
 8009678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800967c:	f010 0301 	ands.w	r3, r0, #1
 8009680:	d00a      	beq.n	8009698 <__swsetup_r+0xbc>
 8009682:	2300      	movs	r3, #0
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	6963      	ldr	r3, [r4, #20]
 8009688:	425b      	negs	r3, r3
 800968a:	61a3      	str	r3, [r4, #24]
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b943      	cbnz	r3, 80096a2 <__swsetup_r+0xc6>
 8009690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009694:	d1ba      	bne.n	800960c <__swsetup_r+0x30>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	0781      	lsls	r1, r0, #30
 800969a:	bf58      	it	pl
 800969c:	6963      	ldrpl	r3, [r4, #20]
 800969e:	60a3      	str	r3, [r4, #8]
 80096a0:	e7f4      	b.n	800968c <__swsetup_r+0xb0>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e7f7      	b.n	8009696 <__swsetup_r+0xba>
 80096a6:	bf00      	nop
 80096a8:	20000184 	.word	0x20000184
 80096ac:	08009c70 	.word	0x08009c70
 80096b0:	08009c90 	.word	0x08009c90
 80096b4:	08009c50 	.word	0x08009c50

080096b8 <__assert_func>:
 80096b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096ba:	4614      	mov	r4, r2
 80096bc:	461a      	mov	r2, r3
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <__assert_func+0x2c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4605      	mov	r5, r0
 80096c4:	68d8      	ldr	r0, [r3, #12]
 80096c6:	b14c      	cbz	r4, 80096dc <__assert_func+0x24>
 80096c8:	4b07      	ldr	r3, [pc, #28]	; (80096e8 <__assert_func+0x30>)
 80096ca:	9100      	str	r1, [sp, #0]
 80096cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096d0:	4906      	ldr	r1, [pc, #24]	; (80096ec <__assert_func+0x34>)
 80096d2:	462b      	mov	r3, r5
 80096d4:	f000 f8e0 	bl	8009898 <fiprintf>
 80096d8:	f000 f9a3 	bl	8009a22 <abort>
 80096dc:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <__assert_func+0x38>)
 80096de:	461c      	mov	r4, r3
 80096e0:	e7f3      	b.n	80096ca <__assert_func+0x12>
 80096e2:	bf00      	nop
 80096e4:	20000184 	.word	0x20000184
 80096e8:	08009e1d 	.word	0x08009e1d
 80096ec:	08009e2a 	.word	0x08009e2a
 80096f0:	08009e58 	.word	0x08009e58

080096f4 <_close_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d06      	ldr	r5, [pc, #24]	; (8009710 <_close_r+0x1c>)
 80096f8:	2300      	movs	r3, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7f9 fe0a 	bl	8003318 <_close>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_close_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_close_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	200005f0 	.word	0x200005f0

08009714 <__sflush_r>:
 8009714:	898a      	ldrh	r2, [r1, #12]
 8009716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	4605      	mov	r5, r0
 800971c:	0710      	lsls	r0, r2, #28
 800971e:	460c      	mov	r4, r1
 8009720:	d458      	bmi.n	80097d4 <__sflush_r+0xc0>
 8009722:	684b      	ldr	r3, [r1, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dc05      	bgt.n	8009734 <__sflush_r+0x20>
 8009728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	dc02      	bgt.n	8009734 <__sflush_r+0x20>
 800972e:	2000      	movs	r0, #0
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009736:	2e00      	cmp	r6, #0
 8009738:	d0f9      	beq.n	800972e <__sflush_r+0x1a>
 800973a:	2300      	movs	r3, #0
 800973c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009740:	682f      	ldr	r7, [r5, #0]
 8009742:	602b      	str	r3, [r5, #0]
 8009744:	d032      	beq.n	80097ac <__sflush_r+0x98>
 8009746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	075a      	lsls	r2, r3, #29
 800974c:	d505      	bpl.n	800975a <__sflush_r+0x46>
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	1ac0      	subs	r0, r0, r3
 8009752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009754:	b10b      	cbz	r3, 800975a <__sflush_r+0x46>
 8009756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009758:	1ac0      	subs	r0, r0, r3
 800975a:	2300      	movs	r3, #0
 800975c:	4602      	mov	r2, r0
 800975e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009760:	6a21      	ldr	r1, [r4, #32]
 8009762:	4628      	mov	r0, r5
 8009764:	47b0      	blx	r6
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	d106      	bne.n	800977a <__sflush_r+0x66>
 800976c:	6829      	ldr	r1, [r5, #0]
 800976e:	291d      	cmp	r1, #29
 8009770:	d82c      	bhi.n	80097cc <__sflush_r+0xb8>
 8009772:	4a2a      	ldr	r2, [pc, #168]	; (800981c <__sflush_r+0x108>)
 8009774:	40ca      	lsrs	r2, r1
 8009776:	07d6      	lsls	r6, r2, #31
 8009778:	d528      	bpl.n	80097cc <__sflush_r+0xb8>
 800977a:	2200      	movs	r2, #0
 800977c:	6062      	str	r2, [r4, #4]
 800977e:	04d9      	lsls	r1, r3, #19
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	d504      	bpl.n	8009790 <__sflush_r+0x7c>
 8009786:	1c42      	adds	r2, r0, #1
 8009788:	d101      	bne.n	800978e <__sflush_r+0x7a>
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	b903      	cbnz	r3, 8009790 <__sflush_r+0x7c>
 800978e:	6560      	str	r0, [r4, #84]	; 0x54
 8009790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009792:	602f      	str	r7, [r5, #0]
 8009794:	2900      	cmp	r1, #0
 8009796:	d0ca      	beq.n	800972e <__sflush_r+0x1a>
 8009798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800979c:	4299      	cmp	r1, r3
 800979e:	d002      	beq.n	80097a6 <__sflush_r+0x92>
 80097a0:	4628      	mov	r0, r5
 80097a2:	f7ff fc5f 	bl	8009064 <_free_r>
 80097a6:	2000      	movs	r0, #0
 80097a8:	6360      	str	r0, [r4, #52]	; 0x34
 80097aa:	e7c1      	b.n	8009730 <__sflush_r+0x1c>
 80097ac:	6a21      	ldr	r1, [r4, #32]
 80097ae:	2301      	movs	r3, #1
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b0      	blx	r6
 80097b4:	1c41      	adds	r1, r0, #1
 80097b6:	d1c7      	bne.n	8009748 <__sflush_r+0x34>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c4      	beq.n	8009748 <__sflush_r+0x34>
 80097be:	2b1d      	cmp	r3, #29
 80097c0:	d001      	beq.n	80097c6 <__sflush_r+0xb2>
 80097c2:	2b16      	cmp	r3, #22
 80097c4:	d101      	bne.n	80097ca <__sflush_r+0xb6>
 80097c6:	602f      	str	r7, [r5, #0]
 80097c8:	e7b1      	b.n	800972e <__sflush_r+0x1a>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d0:	81a3      	strh	r3, [r4, #12]
 80097d2:	e7ad      	b.n	8009730 <__sflush_r+0x1c>
 80097d4:	690f      	ldr	r7, [r1, #16]
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	d0a9      	beq.n	800972e <__sflush_r+0x1a>
 80097da:	0793      	lsls	r3, r2, #30
 80097dc:	680e      	ldr	r6, [r1, #0]
 80097de:	bf08      	it	eq
 80097e0:	694b      	ldreq	r3, [r1, #20]
 80097e2:	600f      	str	r7, [r1, #0]
 80097e4:	bf18      	it	ne
 80097e6:	2300      	movne	r3, #0
 80097e8:	eba6 0807 	sub.w	r8, r6, r7
 80097ec:	608b      	str	r3, [r1, #8]
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	dd9c      	ble.n	800972e <__sflush_r+0x1a>
 80097f4:	6a21      	ldr	r1, [r4, #32]
 80097f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097f8:	4643      	mov	r3, r8
 80097fa:	463a      	mov	r2, r7
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b0      	blx	r6
 8009800:	2800      	cmp	r0, #0
 8009802:	dc06      	bgt.n	8009812 <__sflush_r+0xfe>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e78e      	b.n	8009730 <__sflush_r+0x1c>
 8009812:	4407      	add	r7, r0
 8009814:	eba8 0800 	sub.w	r8, r8, r0
 8009818:	e7e9      	b.n	80097ee <__sflush_r+0xda>
 800981a:	bf00      	nop
 800981c:	20400001 	.word	0x20400001

08009820 <_fflush_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	690b      	ldr	r3, [r1, #16]
 8009824:	4605      	mov	r5, r0
 8009826:	460c      	mov	r4, r1
 8009828:	b913      	cbnz	r3, 8009830 <_fflush_r+0x10>
 800982a:	2500      	movs	r5, #0
 800982c:	4628      	mov	r0, r5
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	b118      	cbz	r0, 800983a <_fflush_r+0x1a>
 8009832:	6983      	ldr	r3, [r0, #24]
 8009834:	b90b      	cbnz	r3, 800983a <_fflush_r+0x1a>
 8009836:	f7fe ffcb 	bl	80087d0 <__sinit>
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <_fflush_r+0x6c>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d11b      	bne.n	8009878 <_fflush_r+0x58>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0ef      	beq.n	800982a <_fflush_r+0xa>
 800984a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800984c:	07d0      	lsls	r0, r2, #31
 800984e:	d404      	bmi.n	800985a <_fflush_r+0x3a>
 8009850:	0599      	lsls	r1, r3, #22
 8009852:	d402      	bmi.n	800985a <_fflush_r+0x3a>
 8009854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009856:	f7ff f85e 	bl	8008916 <__retarget_lock_acquire_recursive>
 800985a:	4628      	mov	r0, r5
 800985c:	4621      	mov	r1, r4
 800985e:	f7ff ff59 	bl	8009714 <__sflush_r>
 8009862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009864:	07da      	lsls	r2, r3, #31
 8009866:	4605      	mov	r5, r0
 8009868:	d4e0      	bmi.n	800982c <_fflush_r+0xc>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	059b      	lsls	r3, r3, #22
 800986e:	d4dd      	bmi.n	800982c <_fflush_r+0xc>
 8009870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009872:	f7ff f851 	bl	8008918 <__retarget_lock_release_recursive>
 8009876:	e7d9      	b.n	800982c <_fflush_r+0xc>
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <_fflush_r+0x70>)
 800987a:	429c      	cmp	r4, r3
 800987c:	d101      	bne.n	8009882 <_fflush_r+0x62>
 800987e:	68ac      	ldr	r4, [r5, #8]
 8009880:	e7df      	b.n	8009842 <_fflush_r+0x22>
 8009882:	4b04      	ldr	r3, [pc, #16]	; (8009894 <_fflush_r+0x74>)
 8009884:	429c      	cmp	r4, r3
 8009886:	bf08      	it	eq
 8009888:	68ec      	ldreq	r4, [r5, #12]
 800988a:	e7da      	b.n	8009842 <_fflush_r+0x22>
 800988c:	08009c70 	.word	0x08009c70
 8009890:	08009c90 	.word	0x08009c90
 8009894:	08009c50 	.word	0x08009c50

08009898 <fiprintf>:
 8009898:	b40e      	push	{r1, r2, r3}
 800989a:	b503      	push	{r0, r1, lr}
 800989c:	4601      	mov	r1, r0
 800989e:	ab03      	add	r3, sp, #12
 80098a0:	4805      	ldr	r0, [pc, #20]	; (80098b8 <fiprintf+0x20>)
 80098a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a6:	6800      	ldr	r0, [r0, #0]
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	f7ff fcaf 	bl	800920c <_vfiprintf_r>
 80098ae:	b002      	add	sp, #8
 80098b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098b4:	b003      	add	sp, #12
 80098b6:	4770      	bx	lr
 80098b8:	20000184 	.word	0x20000184

080098bc <_lseek_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4d07      	ldr	r5, [pc, #28]	; (80098dc <_lseek_r+0x20>)
 80098c0:	4604      	mov	r4, r0
 80098c2:	4608      	mov	r0, r1
 80098c4:	4611      	mov	r1, r2
 80098c6:	2200      	movs	r2, #0
 80098c8:	602a      	str	r2, [r5, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	f7f9 fd4b 	bl	8003366 <_lseek>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_lseek_r+0x1e>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_lseek_r+0x1e>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	200005f0 	.word	0x200005f0

080098e0 <__swhatbuf_r>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	460e      	mov	r6, r1
 80098e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	b096      	sub	sp, #88	; 0x58
 80098ec:	4614      	mov	r4, r2
 80098ee:	461d      	mov	r5, r3
 80098f0:	da07      	bge.n	8009902 <__swhatbuf_r+0x22>
 80098f2:	2300      	movs	r3, #0
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	89b3      	ldrh	r3, [r6, #12]
 80098f8:	061a      	lsls	r2, r3, #24
 80098fa:	d410      	bmi.n	800991e <__swhatbuf_r+0x3e>
 80098fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009900:	e00e      	b.n	8009920 <__swhatbuf_r+0x40>
 8009902:	466a      	mov	r2, sp
 8009904:	f000 f894 	bl	8009a30 <_fstat_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	dbf2      	blt.n	80098f2 <__swhatbuf_r+0x12>
 800990c:	9a01      	ldr	r2, [sp, #4]
 800990e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009912:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009916:	425a      	negs	r2, r3
 8009918:	415a      	adcs	r2, r3
 800991a:	602a      	str	r2, [r5, #0]
 800991c:	e7ee      	b.n	80098fc <__swhatbuf_r+0x1c>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	2000      	movs	r0, #0
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	b016      	add	sp, #88	; 0x58
 8009926:	bd70      	pop	{r4, r5, r6, pc}

08009928 <__smakebuf_r>:
 8009928:	898b      	ldrh	r3, [r1, #12]
 800992a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800992c:	079d      	lsls	r5, r3, #30
 800992e:	4606      	mov	r6, r0
 8009930:	460c      	mov	r4, r1
 8009932:	d507      	bpl.n	8009944 <__smakebuf_r+0x1c>
 8009934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	2301      	movs	r3, #1
 800993e:	6163      	str	r3, [r4, #20]
 8009940:	b002      	add	sp, #8
 8009942:	bd70      	pop	{r4, r5, r6, pc}
 8009944:	ab01      	add	r3, sp, #4
 8009946:	466a      	mov	r2, sp
 8009948:	f7ff ffca 	bl	80098e0 <__swhatbuf_r>
 800994c:	9900      	ldr	r1, [sp, #0]
 800994e:	4605      	mov	r5, r0
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff fbd7 	bl	8009104 <_malloc_r>
 8009956:	b948      	cbnz	r0, 800996c <__smakebuf_r+0x44>
 8009958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995c:	059a      	lsls	r2, r3, #22
 800995e:	d4ef      	bmi.n	8009940 <__smakebuf_r+0x18>
 8009960:	f023 0303 	bic.w	r3, r3, #3
 8009964:	f043 0302 	orr.w	r3, r3, #2
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	e7e3      	b.n	8009934 <__smakebuf_r+0xc>
 800996c:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <__smakebuf_r+0x7c>)
 800996e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	6020      	str	r0, [r4, #0]
 8009974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	9b00      	ldr	r3, [sp, #0]
 800997c:	6163      	str	r3, [r4, #20]
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	6120      	str	r0, [r4, #16]
 8009982:	b15b      	cbz	r3, 800999c <__smakebuf_r+0x74>
 8009984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009988:	4630      	mov	r0, r6
 800998a:	f000 f863 	bl	8009a54 <_isatty_r>
 800998e:	b128      	cbz	r0, 800999c <__smakebuf_r+0x74>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f023 0303 	bic.w	r3, r3, #3
 8009996:	f043 0301 	orr.w	r3, r3, #1
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	89a0      	ldrh	r0, [r4, #12]
 800999e:	4305      	orrs	r5, r0
 80099a0:	81a5      	strh	r5, [r4, #12]
 80099a2:	e7cd      	b.n	8009940 <__smakebuf_r+0x18>
 80099a4:	08008769 	.word	0x08008769

080099a8 <__ascii_mbtowc>:
 80099a8:	b082      	sub	sp, #8
 80099aa:	b901      	cbnz	r1, 80099ae <__ascii_mbtowc+0x6>
 80099ac:	a901      	add	r1, sp, #4
 80099ae:	b142      	cbz	r2, 80099c2 <__ascii_mbtowc+0x1a>
 80099b0:	b14b      	cbz	r3, 80099c6 <__ascii_mbtowc+0x1e>
 80099b2:	7813      	ldrb	r3, [r2, #0]
 80099b4:	600b      	str	r3, [r1, #0]
 80099b6:	7812      	ldrb	r2, [r2, #0]
 80099b8:	1e10      	subs	r0, r2, #0
 80099ba:	bf18      	it	ne
 80099bc:	2001      	movne	r0, #1
 80099be:	b002      	add	sp, #8
 80099c0:	4770      	bx	lr
 80099c2:	4610      	mov	r0, r2
 80099c4:	e7fb      	b.n	80099be <__ascii_mbtowc+0x16>
 80099c6:	f06f 0001 	mvn.w	r0, #1
 80099ca:	e7f8      	b.n	80099be <__ascii_mbtowc+0x16>

080099cc <__malloc_lock>:
 80099cc:	4801      	ldr	r0, [pc, #4]	; (80099d4 <__malloc_lock+0x8>)
 80099ce:	f7fe bfa2 	b.w	8008916 <__retarget_lock_acquire_recursive>
 80099d2:	bf00      	nop
 80099d4:	200005e8 	.word	0x200005e8

080099d8 <__malloc_unlock>:
 80099d8:	4801      	ldr	r0, [pc, #4]	; (80099e0 <__malloc_unlock+0x8>)
 80099da:	f7fe bf9d 	b.w	8008918 <__retarget_lock_release_recursive>
 80099de:	bf00      	nop
 80099e0:	200005e8 	.word	0x200005e8

080099e4 <_read_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d07      	ldr	r5, [pc, #28]	; (8009a04 <_read_r+0x20>)
 80099e8:	4604      	mov	r4, r0
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	602a      	str	r2, [r5, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f7f9 fc57 	bl	80032a6 <_read>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_read_r+0x1e>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_read_r+0x1e>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	200005f0 	.word	0x200005f0

08009a08 <__ascii_wctomb>:
 8009a08:	b149      	cbz	r1, 8009a1e <__ascii_wctomb+0x16>
 8009a0a:	2aff      	cmp	r2, #255	; 0xff
 8009a0c:	bf85      	ittet	hi
 8009a0e:	238a      	movhi	r3, #138	; 0x8a
 8009a10:	6003      	strhi	r3, [r0, #0]
 8009a12:	700a      	strbls	r2, [r1, #0]
 8009a14:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a18:	bf98      	it	ls
 8009a1a:	2001      	movls	r0, #1
 8009a1c:	4770      	bx	lr
 8009a1e:	4608      	mov	r0, r1
 8009a20:	4770      	bx	lr

08009a22 <abort>:
 8009a22:	b508      	push	{r3, lr}
 8009a24:	2006      	movs	r0, #6
 8009a26:	f000 f84d 	bl	8009ac4 <raise>
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	f7f9 fc31 	bl	8003292 <_exit>

08009a30 <_fstat_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d07      	ldr	r5, [pc, #28]	; (8009a50 <_fstat_r+0x20>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	602b      	str	r3, [r5, #0]
 8009a3e:	f7f9 fc77 	bl	8003330 <_fstat>
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	d102      	bne.n	8009a4c <_fstat_r+0x1c>
 8009a46:	682b      	ldr	r3, [r5, #0]
 8009a48:	b103      	cbz	r3, 8009a4c <_fstat_r+0x1c>
 8009a4a:	6023      	str	r3, [r4, #0]
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
 8009a4e:	bf00      	nop
 8009a50:	200005f0 	.word	0x200005f0

08009a54 <_isatty_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4d06      	ldr	r5, [pc, #24]	; (8009a70 <_isatty_r+0x1c>)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	f7f9 fc76 	bl	8003350 <_isatty>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_isatty_r+0x1a>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_isatty_r+0x1a>
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	200005f0 	.word	0x200005f0

08009a74 <_raise_r>:
 8009a74:	291f      	cmp	r1, #31
 8009a76:	b538      	push	{r3, r4, r5, lr}
 8009a78:	4604      	mov	r4, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	d904      	bls.n	8009a88 <_raise_r+0x14>
 8009a7e:	2316      	movs	r3, #22
 8009a80:	6003      	str	r3, [r0, #0]
 8009a82:	f04f 30ff 	mov.w	r0, #4294967295
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a8a:	b112      	cbz	r2, 8009a92 <_raise_r+0x1e>
 8009a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a90:	b94b      	cbnz	r3, 8009aa6 <_raise_r+0x32>
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 f830 	bl	8009af8 <_getpid_r>
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aa2:	f000 b817 	b.w	8009ad4 <_kill_r>
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d00a      	beq.n	8009ac0 <_raise_r+0x4c>
 8009aaa:	1c59      	adds	r1, r3, #1
 8009aac:	d103      	bne.n	8009ab6 <_raise_r+0x42>
 8009aae:	2316      	movs	r3, #22
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	e7e7      	b.n	8009a86 <_raise_r+0x12>
 8009ab6:	2400      	movs	r4, #0
 8009ab8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009abc:	4628      	mov	r0, r5
 8009abe:	4798      	blx	r3
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	e7e0      	b.n	8009a86 <_raise_r+0x12>

08009ac4 <raise>:
 8009ac4:	4b02      	ldr	r3, [pc, #8]	; (8009ad0 <raise+0xc>)
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	f7ff bfd3 	b.w	8009a74 <_raise_r>
 8009ace:	bf00      	nop
 8009ad0:	20000184 	.word	0x20000184

08009ad4 <_kill_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	; (8009af4 <_kill_r+0x20>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	4611      	mov	r1, r2
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	f7f9 fbc6 	bl	8003272 <_kill>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	d102      	bne.n	8009af0 <_kill_r+0x1c>
 8009aea:	682b      	ldr	r3, [r5, #0]
 8009aec:	b103      	cbz	r3, 8009af0 <_kill_r+0x1c>
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	bd38      	pop	{r3, r4, r5, pc}
 8009af2:	bf00      	nop
 8009af4:	200005f0 	.word	0x200005f0

08009af8 <_getpid_r>:
 8009af8:	f7f9 bbb3 	b.w	8003262 <_getpid>

08009afc <_init>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	bf00      	nop
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr

08009b08 <_fini>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	bf00      	nop
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr
