
Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800a750  0800a750  0001a750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af7c  0800af7c  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800af7c  0800af7c  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af7c  0800af7c  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af80  0800af80  0001af80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800af84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020354  2**0
                  CONTENTS
 10 .bss          000002b0  20000354  20000354  00020354  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000604  20000604  00020354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a784  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c83  00000000  00000000  0003ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  0003e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  0003f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f08  00000000  00000000  000407c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001853b  00000000  00000000  000616d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9538  00000000  00000000  00079c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00133143  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005410  00000000  00000000  00133198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a734 	.word	0x0800a734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800a734 	.word	0x0800a734

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000bb6:	f001 fa6f 	bl	8002098 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 faab 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000bd8:	f107 030f 	add.w	r3, r7, #15
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2123      	movs	r1, #35	; 0x23
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fa9f 	bl	8002124 <GYRO_IO_Write>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000c02:	f001 fa49 	bl	8002098 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2201      	movs	r2, #1
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fabb 	bl	8002188 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	2124      	movs	r1, #36	; 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 faad 	bl	8002188 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2124      	movs	r1, #36	; 0x24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fa70 	bl	8002124 <GYRO_IO_Write>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fa5b 	bl	8002124 <GYRO_IO_Write>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000c88:	f107 030f 	add.w	r3, r7, #15
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2130      	movs	r1, #48	; 0x30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fa79 	bl	8002188 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000c96:	f107 030e 	add.w	r3, r7, #14
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2122      	movs	r1, #34	; 0x22
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fa72 	bl	8002188 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	121b      	asrs	r3, r3, #8
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	f023 0320 	bic.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000cd8:	f107 030f 	add.w	r3, r7, #15
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2130      	movs	r1, #48	; 0x30
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fa1f 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000ce6:	f107 030e 	add.w	r3, r7, #14
 8000cea:	2201      	movs	r2, #1
 8000cec:	2122      	movs	r1, #34	; 0x22
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fa18 	bl	8002124 <GYRO_IO_Write>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2122      	movs	r1, #34	; 0x22
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fa3a 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e00c      	b.n	8000d4a <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d109      	bne.n	8000d4a <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f023 0308 	bic.w	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d4a:	f107 030f 	add.w	r3, r7, #15
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2122      	movs	r1, #34	; 0x22
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f9e6 	bl	8002124 <GYRO_IO_Write>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d6a:	f107 030f 	add.w	r3, r7, #15
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2122      	movs	r1, #34	; 0x22
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fa08 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e009      	b.n	8000da2 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0308 	bic.w	r3, r3, #8
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000da2:	f107 030f 	add.w	r3, r7, #15
 8000da6:	2201      	movs	r2, #1
 8000da8:	2122      	movs	r1, #34	; 0x22
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f9ba 	bl	8002124 <GYRO_IO_Write>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2121      	movs	r1, #33	; 0x21
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 f9dc 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	2201      	movs	r2, #1
 8000dea:	2121      	movs	r1, #33	; 0x21
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f999 	bl	8002124 <GYRO_IO_Write>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e04:	f107 030f 	add.w	r3, r7, #15
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2124      	movs	r1, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f9bb 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f023 0310 	bic.w	r3, r3, #16
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e26:	f107 030f 	add.w	r3, r7, #15
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2124      	movs	r1, #36	; 0x24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f978 	bl	8002124 <GYRO_IO_Write>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000e64:	f107 030f 	add.w	r3, r7, #15
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2123      	movs	r1, #35	; 0x23
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f98b 	bl	8002188 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2206      	movs	r2, #6
 8000e78:	2128      	movs	r1, #40	; 0x28
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f984 	bl	8002188 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d126      	bne.n	8000ed8 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
 8000e8e:	e01f      	b.n	8000ed0 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	3301      	adds	r3, #1
 8000e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eae:	440b      	add	r3, r1
 8000eb0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	dddc      	ble.n	8000e90 <I3G4250D_ReadXYZAngRate+0x54>
 8000ed6:	e025      	b.n	8000f24 <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	e01f      	b.n	8000f1e <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000efc:	440b      	add	r3, r1
 8000efe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f12:	440b      	add	r3, r1
 8000f14:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	dddc      	ble.n	8000ede <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f2a:	2b20      	cmp	r3, #32
 8000f2c:	d00c      	beq.n	8000f48 <I3G4250D_ReadXYZAngRate+0x10c>
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	dc0d      	bgt.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d003      	beq.n	8000f42 <I3G4250D_ReadXYZAngRate+0x106>
 8000f3a:	e008      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <I3G4250D_ReadXYZAngRate+0x158>)
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f40:	e005      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <I3G4250D_ReadXYZAngRate+0x15c>)
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f46:	e002      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <I3G4250D_ReadXYZAngRate+0x160>)
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f4c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	e017      	b.n	8000f84 <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	3301      	adds	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	dde4      	ble.n	8000f54 <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	410c0000 	.word	0x410c0000
 8000f98:	418c0000 	.word	0x418c0000
 8000f9c:	428c0000 	.word	0x428c0000

08000fa0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000fae:	f001 f873 	bl	8002098 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000fb8:	f107 030f 	add.w	r3, r7, #15
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 f8af 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000fd0:	f107 030f 	add.w	r3, r7, #15
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2123      	movs	r1, #35	; 0x23
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f8a3 	bl	8002124 <GYRO_IO_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ffa:	f001 f84d 	bl	8002098 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	2201      	movs	r2, #1
 8001002:	210f      	movs	r1, #15
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f8bf 	bl	8002188 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	2201      	movs	r2, #1
 800101e:	2124      	movs	r1, #36	; 0x24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f8b1 	bl	8002188 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102c:	b2db      	uxtb	r3, r3
 800102e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	2124      	movs	r1, #36	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f874 	bl	8002124 <GYRO_IO_Write>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001058:	f107 030f 	add.w	r3, r7, #15
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f85f 	bl	8002124 <GYRO_IO_Write>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	2300      	movs	r3, #0
 800107e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f87d 	bl	8002188 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	2201      	movs	r2, #1
 8001094:	2122      	movs	r1, #34	; 0x22
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f876 	bl	8002188 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	121b      	asrs	r3, r3, #8
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	f023 0320 	bic.w	r3, r3, #32
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	2130      	movs	r1, #48	; 0x30
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f823 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80010de:	f107 030e 	add.w	r3, r7, #14
 80010e2:	2201      	movs	r2, #1
 80010e4:	2122      	movs	r1, #34	; 0x22
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 f81c 	bl	8002124 <GYRO_IO_Write>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	2201      	movs	r2, #1
 8001104:	2122      	movs	r1, #34	; 0x22
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f83e 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10a      	bne.n	8001128 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e00c      	b.n	8001142 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d109      	bne.n	8001142 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f023 0308 	bic.w	r3, r3, #8
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001142:	f107 030f 	add.w	r3, r7, #15
 8001146:	2201      	movs	r2, #1
 8001148:	2122      	movs	r1, #34	; 0x22
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ffea 	bl	8002124 <GYRO_IO_Write>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001162:	f107 030f 	add.w	r3, r7, #15
 8001166:	2201      	movs	r2, #1
 8001168:	2122      	movs	r1, #34	; 0x22
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f80c 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e009      	b.n	800119a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f023 0308 	bic.w	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	2201      	movs	r2, #1
 80011a0:	2122      	movs	r1, #34	; 0x22
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ffbe 	bl	8002124 <GYRO_IO_Write>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011ba:	f107 030f 	add.w	r3, r7, #15
 80011be:	2201      	movs	r2, #1
 80011c0:	2121      	movs	r1, #33	; 0x21
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffe0 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011dc:	f107 030f 	add.w	r3, r7, #15
 80011e0:	2201      	movs	r2, #1
 80011e2:	2121      	movs	r1, #33	; 0x21
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ff9d 	bl	8002124 <GYRO_IO_Write>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	2201      	movs	r2, #1
 8001202:	2124      	movs	r1, #36	; 0x24
 8001204:	4618      	mov	r0, r3
 8001206:	f000 ffbf 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0310 	bic.w	r3, r3, #16
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4313      	orrs	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	2201      	movs	r2, #1
 8001224:	2124      	movs	r1, #36	; 0x24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ff7c 	bl	8002124 <GYRO_IO_Write>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	2300      	movs	r3, #0
 8001242:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800125c:	f107 030f 	add.w	r3, r7, #15
 8001260:	2201      	movs	r2, #1
 8001262:	2123      	movs	r1, #35	; 0x23
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ff8f 	bl	8002188 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	2206      	movs	r2, #6
 8001270:	2128      	movs	r1, #40	; 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f000 ff88 	bl	8002188 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d126      	bne.n	80012d0 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	e01f      	b.n	80012c8 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	3301      	adds	r3, #1
 800128e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001292:	4413      	add	r3, r2
 8001294:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001298:	b29b      	uxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a6:	440b      	add	r3, r1
 80012a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012bc:	440b      	add	r3, r1
 80012be:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	dddc      	ble.n	8001288 <L3GD20_ReadXYZAngRate+0x54>
 80012ce:	e025      	b.n	800131c <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	e01f      	b.n	8001316 <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012de:	4413      	add	r3, r2
 80012e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	3301      	adds	r3, #1
 80012f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012f4:	440b      	add	r3, r1
 80012f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21a      	sxth	r2, r3
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800130a:	440b      	add	r3, r1
 800130c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	3301      	adds	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	2b02      	cmp	r3, #2
 800131a:	dddc      	ble.n	80012d6 <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001322:	2b20      	cmp	r3, #32
 8001324:	d00c      	beq.n	8001340 <L3GD20_ReadXYZAngRate+0x10c>
 8001326:	2b20      	cmp	r3, #32
 8001328:	dc0d      	bgt.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <L3GD20_ReadXYZAngRate+0x100>
 800132e:	2b10      	cmp	r3, #16
 8001330:	d003      	beq.n	800133a <L3GD20_ReadXYZAngRate+0x106>
 8001332:	e008      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <L3GD20_ReadXYZAngRate+0x158>)
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001338:	e005      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <L3GD20_ReadXYZAngRate+0x15c>)
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800133e:	e002      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <L3GD20_ReadXYZAngRate+0x160>)
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001344:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	e017      	b.n	800137c <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001354:	4413      	add	r3, r2
 8001356:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	3301      	adds	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b02      	cmp	r3, #2
 8001380:	dde4      	ble.n	800134c <L3GD20_ReadXYZAngRate+0x118>
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	410c0000 	.word	0x410c0000
 8001390:	418c0000 	.word	0x418c0000
 8001394:	428c0000 	.word	0x428c0000

08001398 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80013a6:	f000 ff29 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2120      	movs	r1, #32
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f000 ff99 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	461a      	mov	r2, r3
 80013c2:	2123      	movs	r1, #35	; 0x23
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f000 ff91 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80013ea:	f000 ff07 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80013ee:	210f      	movs	r1, #15
 80013f0:	2032      	movs	r0, #50	; 0x32
 80013f2:	f000 ff8e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800140a:	2124      	movs	r1, #36	; 0x24
 800140c:	2032      	movs	r0, #50	; 0x32
 800140e:	f000 ff80 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	461a      	mov	r2, r3
 8001422:	2124      	movs	r1, #36	; 0x24
 8001424:	2032      	movs	r0, #50	; 0x32
 8001426:	f000 ff61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800143c:	2121      	movs	r1, #33	; 0x21
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f000 ff67 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4313      	orrs	r3, r2
 8001456:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	461a      	mov	r2, r3
 800145c:	2121      	movs	r1, #33	; 0x21
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f000 ff44 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001476:	2121      	movs	r1, #33	; 0x21
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f000 ff4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f023 0308 	bic.w	r3, r3, #8
 8001488:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4313      	orrs	r3, r2
 8001490:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	461a      	mov	r2, r3
 8001496:	2121      	movs	r1, #33	; 0x21
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 ff27 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b088      	sub	sp, #32
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80014ae:	2300      	movs	r3, #0
 80014b0:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80014ba:	2123      	movs	r1, #35	; 0x23
 80014bc:	2032      	movs	r0, #50	; 0x32
 80014be:	f000 ff28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80014c6:	2124      	movs	r1, #36	; 0x24
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f000 ff22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80014d2:	2128      	movs	r1, #40	; 0x28
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f000 ff1c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014da:	4603      	mov	r3, r0
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80014e0:	2129      	movs	r1, #41	; 0x29
 80014e2:	2032      	movs	r0, #50	; 0x32
 80014e4:	f000 ff15 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80014ee:	212a      	movs	r1, #42	; 0x2a
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f000 ff0e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80014fc:	212b      	movs	r1, #43	; 0x2b
 80014fe:	2032      	movs	r0, #50	; 0x32
 8001500:	f000 ff07 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	b25b      	sxtb	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f000 ff00 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001512:	4603      	mov	r3, r0
 8001514:	b25b      	sxtb	r3, r3
 8001516:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001518:	212d      	movs	r1, #45	; 0x2d
 800151a:	2032      	movs	r0, #50	; 0x32
 800151c:	f000 fef9 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	b25b      	sxtb	r3, r3
 8001524:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001526:	7d3b      	ldrb	r3, [r7, #20]
 8001528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d126      	bne.n	800157e <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
 8001534:	e01f      	b.n	8001576 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3301      	adds	r3, #1
 800153c:	f107 0220 	add.w	r2, r7, #32
 8001540:	4413      	add	r3, r2
 8001542:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b29a      	uxth	r2, r3
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	f107 0120 	add.w	r1, r7, #32
 8001554:	440b      	add	r3, r1
 8001556:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	b212      	sxth	r2, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	f107 0120 	add.w	r1, r7, #32
 800156a:	440b      	add	r3, r1
 800156c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3301      	adds	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d9dc      	bls.n	8001536 <LSM303AGR_AccReadXYZ+0x90>
 800157c:	e025      	b.n	80015ca <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	77fb      	strb	r3, [r7, #31]
 8001582:	e01f      	b.n	80015c4 <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	f107 0220 	add.w	r2, r7, #32
 800158c:	4413      	add	r3, r2
 800158e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	3301      	adds	r3, #1
 800159e:	f107 0120 	add.w	r1, r7, #32
 80015a2:	440b      	add	r3, r1
 80015a4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	b212      	sxth	r2, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	f107 0120 	add.w	r1, r7, #32
 80015b8:	440b      	add	r3, r1
 80015ba:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80015be:	7ffb      	ldrb	r3, [r7, #31]
 80015c0:	3301      	adds	r3, #1
 80015c2:	77fb      	strb	r3, [r7, #31]
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d9dc      	bls.n	8001584 <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80015ca:	7d3b      	ldrb	r3, [r7, #20]
 80015cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015d0:	2b30      	cmp	r3, #48	; 0x30
 80015d2:	d013      	beq.n	80015fc <LSM303AGR_AccReadXYZ+0x156>
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	dc14      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d00c      	beq.n	80015f6 <LSM303AGR_AccReadXYZ+0x150>
 80015dc:	2b20      	cmp	r3, #32
 80015de:	dc10      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <LSM303AGR_AccReadXYZ+0x144>
 80015e4:	2b10      	cmp	r3, #16
 80015e6:	d003      	beq.n	80015f0 <LSM303AGR_AccReadXYZ+0x14a>
 80015e8:	e00b      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77bb      	strb	r3, [r7, #30]
    break;
 80015ee:	e008      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80015f0:	2302      	movs	r3, #2
 80015f2:	77bb      	strb	r3, [r7, #30]
    break;
 80015f4:	e005      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80015f6:	2304      	movs	r3, #4
 80015f8:	77bb      	strb	r3, [r7, #30]
    break;
 80015fa:	e002      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80015fc:	230c      	movs	r3, #12
 80015fe:	77bb      	strb	r3, [r7, #30]
    break;
 8001600:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	e015      	b.n	8001634 <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	f107 0220 	add.w	r2, r7, #32
 8001610:	4413      	add	r3, r2
 8001612:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001616:	b29a      	uxth	r2, r3
 8001618:	7fbb      	ldrb	r3, [r7, #30]
 800161a:	b29b      	uxth	r3, r3
 800161c:	fb12 f303 	smulbb	r3, r2, r3
 8001620:	b299      	uxth	r1, r3
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b20a      	sxth	r2, r1
 800162c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	3301      	adds	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d9e6      	bls.n	8001608 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001652:	2121      	movs	r1, #33	; 0x21
 8001654:	2032      	movs	r0, #50	; 0x32
 8001656:	f000 fe5c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4313      	orrs	r3, r2
 800166c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	461a      	mov	r2, r3
 8001672:	2121      	movs	r1, #33	; 0x21
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 fe39 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001690:	2122      	movs	r1, #34	; 0x22
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f000 fe3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2122      	movs	r1, #34	; 0x22
 80016aa:	2032      	movs	r0, #50	; 0x32
 80016ac:	f000 fe1e 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80016c6:	2138      	movs	r1, #56	; 0x38
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 fe22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	461a      	mov	r2, r3
 80016de:	2138      	movs	r1, #56	; 0x38
 80016e0:	2032      	movs	r0, #50	; 0x32
 80016e2:	f000 fe03 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80016e6:	230a      	movs	r3, #10
 80016e8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	461a      	mov	r2, r3
 80016ee:	213a      	movs	r1, #58	; 0x3a
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f000 fdfb 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80016f6:	2305      	movs	r3, #5
 80016f8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	461a      	mov	r2, r3
 80016fe:	213b      	movs	r1, #59	; 0x3b
 8001700:	2032      	movs	r0, #50	; 0x32
 8001702:	f000 fdf3 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	461a      	mov	r2, r3
 800170a:	213c      	movs	r1, #60	; 0x3c
 800170c:	2032      	movs	r0, #50	; 0x32
 800170e:	f000 fded 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	461a      	mov	r2, r3
 800171a:	213d      	movs	r1, #61	; 0x3d
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f000 fde5 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800172e:	f000 fdaf 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001732:	2080      	movs	r0, #128	; 0x80
 8001734:	f7ff ffa5 	bl	8001682 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001738:	2004      	movs	r0, #4
 800173a:	f7ff ff83 	bl	8001644 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff ffba 	bl	80016b8 <LSM303AGR_AccClickITEnable>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001756:	f000 fd51 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	461a      	mov	r2, r3
 8001762:	2120      	movs	r1, #32
 8001764:	2032      	movs	r0, #50	; 0x32
 8001766:	f000 fdc1 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	461a      	mov	r2, r3
 8001772:	2123      	movs	r1, #35	; 0x23
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f000 fdb9 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800179a:	f000 fd2f 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800179e:	210f      	movs	r1, #15
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f000 fdb6 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80017ba:	2124      	movs	r1, #36	; 0x24
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f000 fda8 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017cc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2124      	movs	r1, #36	; 0x24
 80017d4:	2032      	movs	r0, #50	; 0x32
 80017d6:	f000 fd89 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80017ec:	2121      	movs	r1, #33	; 0x21
 80017ee:	2032      	movs	r0, #50	; 0x32
 80017f0:	f000 fd8f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4313      	orrs	r3, r2
 8001806:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	461a      	mov	r2, r3
 800180c:	2121      	movs	r1, #33	; 0x21
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f000 fd6c 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001826:	2121      	movs	r1, #33	; 0x21
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f000 fd72 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f023 0308 	bic.w	r3, r3, #8
 8001838:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4313      	orrs	r3, r2
 8001840:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	461a      	mov	r2, r3
 8001846:	2121      	movs	r1, #33	; 0x21
 8001848:	2032      	movs	r0, #50	; 0x32
 800184a:	f000 fd4f 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800185e:	2300      	movs	r3, #0
 8001860:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001866:	2301      	movs	r3, #1
 8001868:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800186a:	2123      	movs	r1, #35	; 0x23
 800186c:	2032      	movs	r0, #50	; 0x32
 800186e:	f000 fd50 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001872:	4603      	mov	r3, r0
 8001874:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001876:	2124      	movs	r1, #36	; 0x24
 8001878:	2032      	movs	r0, #50	; 0x32
 800187a:	f000 fd4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800187e:	4603      	mov	r3, r0
 8001880:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001882:	2128      	movs	r1, #40	; 0x28
 8001884:	2032      	movs	r0, #50	; 0x32
 8001886:	f000 fd44 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800188a:	4603      	mov	r3, r0
 800188c:	b25b      	sxtb	r3, r3
 800188e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001890:	2129      	movs	r1, #41	; 0x29
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f000 fd3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001898:	4603      	mov	r3, r0
 800189a:	b25b      	sxtb	r3, r3
 800189c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800189e:	212a      	movs	r1, #42	; 0x2a
 80018a0:	2032      	movs	r0, #50	; 0x32
 80018a2:	f000 fd36 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80018ac:	212b      	movs	r1, #43	; 0x2b
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f000 fd2f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	2032      	movs	r0, #50	; 0x32
 80018be:	f000 fd28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80018c8:	212d      	movs	r1, #45	; 0x2d
 80018ca:	2032      	movs	r0, #50	; 0x32
 80018cc:	f000 fd21 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80018d6:	7d3b      	ldrb	r3, [r7, #20]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d126      	bne.n	800192e <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
 80018e4:	e01f      	b.n	8001926 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	3301      	adds	r3, #1
 80018ec:	f107 0220 	add.w	r2, r7, #32
 80018f0:	4413      	add	r3, r2
 80018f2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	f107 0120 	add.w	r1, r7, #32
 8001904:	440b      	add	r3, r1
 8001906:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4413      	add	r3, r2
 800190e:	b29a      	uxth	r2, r3
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	b212      	sxth	r2, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f107 0120 	add.w	r1, r7, #32
 800191a:	440b      	add	r3, r1
 800191c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	3301      	adds	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d9dc      	bls.n	80018e6 <LSM303DLHC_AccReadXYZ+0x90>
 800192c:	e025      	b.n	800197a <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	77fb      	strb	r3, [r7, #31]
 8001932:	e01f      	b.n	8001974 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	f107 0220 	add.w	r2, r7, #32
 800193c:	4413      	add	r3, r2
 800193e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	3301      	adds	r3, #1
 800194e:	f107 0120 	add.w	r1, r7, #32
 8001952:	440b      	add	r3, r1
 8001954:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4413      	add	r3, r2
 800195c:	b29a      	uxth	r2, r3
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	b212      	sxth	r2, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	f107 0120 	add.w	r1, r7, #32
 8001968:	440b      	add	r3, r1
 800196a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	3301      	adds	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d9dc      	bls.n	8001934 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800197a:	7d3b      	ldrb	r3, [r7, #20]
 800197c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001980:	2b30      	cmp	r3, #48	; 0x30
 8001982:	d013      	beq.n	80019ac <LSM303DLHC_AccReadXYZ+0x156>
 8001984:	2b30      	cmp	r3, #48	; 0x30
 8001986:	dc14      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001988:	2b20      	cmp	r3, #32
 800198a:	d00c      	beq.n	80019a6 <LSM303DLHC_AccReadXYZ+0x150>
 800198c:	2b20      	cmp	r3, #32
 800198e:	dc10      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <LSM303DLHC_AccReadXYZ+0x144>
 8001994:	2b10      	cmp	r3, #16
 8001996:	d003      	beq.n	80019a0 <LSM303DLHC_AccReadXYZ+0x14a>
 8001998:	e00b      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800199a:	2301      	movs	r3, #1
 800199c:	77bb      	strb	r3, [r7, #30]
    break;
 800199e:	e008      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80019a0:	2302      	movs	r3, #2
 80019a2:	77bb      	strb	r3, [r7, #30]
    break;
 80019a4:	e005      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80019a6:	2304      	movs	r3, #4
 80019a8:	77bb      	strb	r3, [r7, #30]
    break;
 80019aa:	e002      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80019ac:	230c      	movs	r3, #12
 80019ae:	77bb      	strb	r3, [r7, #30]
    break;
 80019b0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	e015      	b.n	80019e4 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	f107 0220 	add.w	r2, r7, #32
 80019c0:	4413      	add	r3, r2
 80019c2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	7fbb      	ldrb	r3, [r7, #30]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	fb12 f303 	smulbb	r3, r2, r3
 80019d0:	b299      	uxth	r1, r3
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	b20a      	sxth	r2, r1
 80019dc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	3301      	adds	r3, #1
 80019e2:	77fb      	strb	r3, [r7, #31]
 80019e4:	7ffb      	ldrb	r3, [r7, #31]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d9e6      	bls.n	80019b8 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001a02:	2121      	movs	r1, #33	; 0x21
 8001a04:	2032      	movs	r0, #50	; 0x32
 8001a06:	f000 fc84 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2121      	movs	r1, #33	; 0x21
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f000 fc61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001a40:	2122      	movs	r1, #34	; 0x22
 8001a42:	2032      	movs	r0, #50	; 0x32
 8001a44:	f000 fc65 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	461a      	mov	r2, r3
 8001a58:	2122      	movs	r1, #34	; 0x22
 8001a5a:	2032      	movs	r0, #50	; 0x32
 8001a5c:	f000 fc46 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001a76:	2138      	movs	r1, #56	; 0x38
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f000 fc4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2138      	movs	r1, #56	; 0x38
 8001a90:	2032      	movs	r0, #50	; 0x32
 8001a92:	f000 fc2b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a96:	230a      	movs	r3, #10
 8001a98:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	213a      	movs	r1, #58	; 0x3a
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f000 fc23 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	461a      	mov	r2, r3
 8001aae:	213b      	movs	r1, #59	; 0x3b
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f000 fc1b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	213c      	movs	r1, #60	; 0x3c
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f000 fc15 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001ac2:	2332      	movs	r3, #50	; 0x32
 8001ac4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	213d      	movs	r1, #61	; 0x3d
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f000 fc0d 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001ade:	f000 fbd7 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001ae2:	2080      	movs	r0, #128	; 0x80
 8001ae4:	f7ff ffa5 	bl	8001a32 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7ff ff83 	bl	80019f4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001aee:	2010      	movs	r0, #16
 8001af0:	f7ff ffba 	bl	8001a68 <LSM303DLHC_AccClickITEnable>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10c      	bne.n	8001b22 <BSP_LED_Init+0x2a>
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6153      	str	r3, [r2, #20]
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	e06e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10c      	bne.n	8001b42 <BSP_LED_Init+0x4a>
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6153      	str	r3, [r2, #20]
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	e05e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d10c      	bne.n	8001b62 <BSP_LED_Init+0x6a>
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b52:	6153      	str	r3, [r2, #20]
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	e04e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d10c      	bne.n	8001b82 <BSP_LED_Init+0x8a>
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b72:	6153      	str	r3, [r2, #20]
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e03e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d10c      	bne.n	8001ba2 <BSP_LED_Init+0xaa>
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	6153      	str	r3, [r2, #20]
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	e02e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d10c      	bne.n	8001bc2 <BSP_LED_Init+0xca>
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <BSP_LED_Init+0x154>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb2:	6153      	str	r3, [r2, #20]
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	e01e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b06      	cmp	r3, #6
 8001bc6:	d10c      	bne.n	8001be2 <BSP_LED_Init+0xea>
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6153      	str	r3, [r2, #20]
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	e00e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d10b      	bne.n	8001c00 <BSP_LED_Init+0x108>
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6153      	str	r3, [r2, #20]
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fedd 	bl	80039e4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f002 f93f 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 8001c42:	bf00      	nop
 8001c44:	3740      	adds	r7, #64	; 0x40
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	0800a784 	.word	0x0800a784
 8001c54:	200000d0 	.word	0x200000d0

08001c58 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <BSP_LED_On+0x2c>)
 8001c66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <BSP_LED_On+0x30>)
 8001c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	f002 f923 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000d0 	.word	0x200000d0
 8001c88:	0800a784 	.word	0x0800a784

08001c8c <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <BSP_LED_Off+0x2c>)
 8001c9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <BSP_LED_Off+0x30>)
 8001ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f002 f909 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200000d0 	.word	0x200000d0
 8001cbc:	0800a784 	.word	0x0800a784

08001cc0 <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <BSP_LED_Toggle+0x2c>)
 8001cce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <BSP_LED_Toggle+0x30>)
 8001cd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f002 f907 	bl	8003ef0 <HAL_GPIO_TogglePin>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000d0 	.word	0x200000d0
 8001cf0:	0800a784 	.word	0x0800a784

08001cf4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <BSP_PB_Init+0x2e>
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <BSP_PB_Init+0x70>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	f107 0214 	add.w	r2, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fe40 	bl	80039e4 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d11e      	bne.n	8001da8 <BSP_PB_Init+0xb4>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	f107 0214 	add.w	r2, r7, #20
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 fe2a 	bl	80039e4 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001d90:	2306      	movs	r3, #6
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	210f      	movs	r1, #15
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fdec 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001d9e:	2306      	movs	r3, #6
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fe03 	bl	80039ae <HAL_NVIC_EnableIRQ>
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	200000f0 	.word	0x200000f0

08001db8 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <BSP_PB_GetState+0x28>)
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 f85e 	bl	8003e90 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000f0 	.word	0x200000f0

08001de4 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df6:	6153      	str	r3, [r2, #20]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001e14:	2304      	movs	r3, #4
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <I2Cx_MspInit+0x64>)
 8001e20:	f001 fde0 	bl	80039e4 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	61d3      	str	r3, [r2, #28]
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e52:	f002 fb6b 	bl	800452c <HAL_I2C_GetState>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11a      	bne.n	8001e92 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <I2Cx_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e64:	2232      	movs	r2, #50	; 0x32
 8001e66:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e86:	4804      	ldr	r0, [pc, #16]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e88:	f7ff ffac 	bl	8001de4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e8e:	f002 f861 	bl	8003f54 <HAL_I2C_Init>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200003d4 	.word	0x200003d4
 8001e9c:	40005400 	.word	0x40005400

08001ea0 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	717b      	strb	r3, [r7, #5]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <I2Cx_WriteData+0x48>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	88f9      	ldrh	r1, [r7, #6]
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <I2Cx_WriteData+0x4c>)
 8001ece:	f002 f8ff 	bl	80040d0 <HAL_I2C_Mem_Write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001edc:	f000 f834 	bl	8001f48 <I2Cx_Error>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200000f8 	.word	0x200000f8
 8001eec:	200003d4 	.word	0x200003d4

08001ef0 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460a      	mov	r2, r1
 8001efa:	80fb      	strh	r3, [r7, #6]
 8001efc:	4613      	mov	r3, r2
 8001efe:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001f08:	797b      	ldrb	r3, [r7, #5]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <I2Cx_ReadData+0x50>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	88f9      	ldrh	r1, [r7, #6]
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	f107 030e 	add.w	r3, r7, #14
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4808      	ldr	r0, [pc, #32]	; (8001f44 <I2Cx_ReadData+0x54>)
 8001f22:	f002 f9e9 	bl	80042f8 <HAL_I2C_Mem_Read>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001f30:	f000 f80a 	bl	8001f48 <I2Cx_Error>
  
  }
  return value;
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000f8 	.word	0x200000f8
 8001f44:	200003d4 	.word	0x200003d4

08001f48 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <I2Cx_Error+0x14>)
 8001f4e:	f002 f890 	bl	8004072 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001f52:	f7ff ff7b 	bl	8001e4c <I2Cx_Init>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003d4 	.word	0x200003d4

08001f60 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f64:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <SPIx_Init+0x70>)
 8001f66:	f004 fb87 	bl	8006678 <HAL_SPI_GetState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d12c      	bne.n	8001fca <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <SPIx_Init+0x70>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <SPIx_Init+0x74>)
 8001f74:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <SPIx_Init+0x70>)
 8001f78:	2218      	movs	r2, #24
 8001f7a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <SPIx_Init+0x70>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <SPIx_Init+0x70>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <SPIx_Init+0x70>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <SPIx_Init+0x70>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <SPIx_Init+0x70>)
 8001f96:	2207      	movs	r2, #7
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <SPIx_Init+0x70>)
 8001f9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa0:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <SPIx_Init+0x70>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <SPIx_Init+0x70>)
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fbc:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc0:	f000 f836 	bl	8002030 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc6:	f004 f871 	bl	80060ac <HAL_SPI_Init>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000370 	.word	0x20000370
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SPIx_WriteRead+0x38>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f107 020f 	add.w	r2, r7, #15
 8001fee:	1df9      	adds	r1, r7, #7
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <SPIx_WriteRead+0x3c>)
 8001ff6:	f004 f92c 	bl	8006252 <HAL_SPI_TransmitReceive>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002000:	f000 f80a 	bl	8002018 <SPIx_Error>
  }
  
  return receivedbyte;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200000f4 	.word	0x200000f4
 8002014:	20000370 	.word	0x20000370

08002018 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <SPIx_Error+0x14>)
 800201e:	f004 f8f0 	bl	8006202 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8002022:	f7ff ff9d 	bl	8001f60 <SPIx_Init>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000370 	.word	0x20000370

08002030 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <SPIx_MspInit+0x64>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <SPIx_MspInit+0x64>)
 800203e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <SPIx_MspInit+0x64>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <SPIx_MspInit+0x64>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <SPIx_MspInit+0x64>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	6153      	str	r3, [r2, #20]
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <SPIx_MspInit+0x64>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002068:	23e0      	movs	r3, #224	; 0xe0
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002078:	2305      	movs	r3, #5
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f001 fcad 	bl	80039e4 <HAL_GPIO_Init>
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <GYRO_IO_Init+0x84>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <GYRO_IO_Init+0x84>)
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	6153      	str	r3, [r2, #20]
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <GYRO_IO_Init+0x84>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80020b6:	2308      	movs	r3, #8
 80020b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4619      	mov	r1, r3
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <GYRO_IO_Init+0x88>)
 80020ce:	f001 fc89 	bl	80039e4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80020d2:	2201      	movs	r2, #1
 80020d4:	2108      	movs	r1, #8
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <GYRO_IO_Init+0x88>)
 80020d8:	f001 fef2 	bl	8003ec0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <GYRO_IO_Init+0x84>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <GYRO_IO_Init+0x84>)
 80020e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e6:	6153      	str	r3, [r2, #20]
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <GYRO_IO_Init+0x84>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80020f4:	2303      	movs	r3, #3
 80020f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <GYRO_IO_Init+0x88>)
 800210c:	f001 fc6a 	bl	80039e4 <HAL_GPIO_Init>
  
  SPIx_Init();
 8002110:	f7ff ff26 	bl	8001f60 <SPIx_Init>
}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	48001000 	.word	0x48001000

08002124 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
 8002130:	4613      	mov	r3, r2
 8002132:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002134:	883b      	ldrh	r3, [r7, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d903      	bls.n	8002142 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002140:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002142:	2200      	movs	r2, #0
 8002144:	2108      	movs	r1, #8
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <GYRO_IO_Write+0x60>)
 8002148:	f001 feba 	bl	8003ec0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff42 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002154:	e00a      	b.n	800216c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff3c 	bl	8001fd8 <SPIx_WriteRead>
    NumByteToWrite--;
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800216c:	883b      	ldrh	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f1      	bne.n	8002156 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002172:	2201      	movs	r2, #1
 8002174:	2108      	movs	r1, #8
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <GYRO_IO_Write+0x60>)
 8002178:	f001 fea2 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	48001000 	.word	0x48001000

08002188 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	4613      	mov	r3, r2
 8002196:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002198:	883b      	ldrh	r3, [r7, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d904      	bls.n	80021a8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80021a4:	70fb      	strb	r3, [r7, #3]
 80021a6:	e003      	b.n	80021b0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ae:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80021b0:	2200      	movs	r2, #0
 80021b2:	2108      	movs	r1, #8
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021b6:	f001 fe83 	bl	8003ec0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff0b 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80021c2:	e00c      	b.n	80021de <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff ff07 	bl	8001fd8 <SPIx_WriteRead>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80021d2:	883b      	ldrh	r3, [r7, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ef      	bne.n	80021c4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80021e4:	2201      	movs	r2, #1
 80021e6:	2108      	movs	r1, #8
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021ea:	f001 fe69 	bl	8003ec0 <HAL_GPIO_WritePin>
}  
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	48001000 	.word	0x48001000

080021fc <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220c:	6153      	str	r3, [r2, #20]
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002224:	6153      	str	r3, [r2, #20]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002232:	2304      	movs	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	4619      	mov	r1, r3
 8002248:	4810      	ldr	r0, [pc, #64]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 800224a:	f001 fbcb 	bl	80039e4 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 800224e:	2200      	movs	r2, #0
 8002250:	210f      	movs	r1, #15
 8002252:	2008      	movs	r0, #8
 8002254:	f001 fb8f 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8002258:	2008      	movs	r0, #8
 800225a:	f001 fba8 	bl	80039ae <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800225e:	2330      	movs	r3, #48	; 0x30
 8002260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 8002276:	f001 fbb5 	bl	80039e4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800227a:	f7ff fde7 	bl	8001e4c <I2Cx_Init>
}
 800227e:	bf00      	nop
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	48001000 	.word	0x48001000

08002290 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800229c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a0:	6153      	str	r3, [r2, #20]
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80022ae:	2330      	movs	r3, #48	; 0x30
 80022b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80022b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022c6:	f001 fb8d 	bl	80039e4 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80022ca:	2200      	movs	r2, #0
 80022cc:	210f      	movs	r1, #15
 80022ce:	200a      	movs	r0, #10
 80022d0:	f001 fb51 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80022d4:	200a      	movs	r0, #10
 80022d6:	f001 fb6a 	bl	80039ae <HAL_NVIC_EnableIRQ>
  
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48001000 	.word	0x48001000

080022ec <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
 80022f6:	460b      	mov	r3, r1
 80022f8:	717b      	strb	r3, [r7, #5]
 80022fa:	4613      	mov	r3, r2
 80022fc:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80022fe:	793a      	ldrb	r2, [r7, #4]
 8002300:	7979      	ldrb	r1, [r7, #5]
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdcb 	bl	8001ea0 <I2Cx_WriteData>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	460a      	mov	r2, r1
 800231c:	80fb      	strh	r3, [r7, #6]
 800231e:	4613      	mov	r3, r2
 8002320:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002322:	797a      	ldrb	r2, [r7, #5]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fde1 	bl	8001ef0 <I2Cx_ReadData>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002342:	2300      	movs	r3, #0
 8002344:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800234e:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4798      	blx	r3
 8002354:	4603      	mov	r3, r0
 8002356:	2b33      	cmp	r3, #51	; 0x33
 8002358:	d14f      	bne.n	80023fa <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 800235e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002360:	2300      	movs	r3, #0
 8002362:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002368:	2307      	movs	r3, #7
 800236a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 800236c:	2300      	movs	r3, #0
 800236e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002370:	2300      	movs	r3, #0
 8002372:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002374:	2300      	movs	r3, #0
 8002376:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002378:	2308      	movs	r3, #8
 800237a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800237c:	7b3a      	ldrb	r2, [r7, #12]
 800237e:	7b7b      	ldrb	r3, [r7, #13]
 8002380:	4313      	orrs	r3, r2
 8002382:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002384:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002386:	4313      	orrs	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	8abb      	ldrh	r3, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002392:	7c3a      	ldrb	r2, [r7, #16]
 8002394:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002396:	4313      	orrs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	7cbb      	ldrb	r3, [r7, #18]
 800239c:	4313      	orrs	r3, r2
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023a8:	b21a      	sxth	r2, r3
 80023aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	8aba      	ldrh	r2, [r7, #20]
 80023bc:	4610      	mov	r0, r2
 80023be:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80023c4:	2310      	movs	r3, #16
 80023c6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80023d2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80023d8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023da:	4313      	orrs	r3, r2
 80023dc:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80023de:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	8aba      	ldrh	r2, [r7, #20]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	4610      	mov	r0, r2
 80023f2:	4798      	blx	r3

    ret = ACCELERO_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	e054      	b.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4798      	blx	r3
 8002400:	4603      	mov	r3, r0
 8002402:	2b33      	cmp	r3, #51	; 0x33
 8002404:	d14e      	bne.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 800240a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800240c:	2300      	movs	r3, #0
 800240e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002414:	2307      	movs	r3, #7
 8002416:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002418:	2300      	movs	r3, #0
 800241a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800241c:	2300      	movs	r3, #0
 800241e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002420:	2300      	movs	r3, #0
 8002422:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002424:	2308      	movs	r3, #8
 8002426:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002428:	7b3a      	ldrb	r2, [r7, #12]
 800242a:	7b7b      	ldrb	r3, [r7, #13]
 800242c:	4313      	orrs	r3, r2
 800242e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002430:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002432:	4313      	orrs	r3, r2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	b29a      	uxth	r2, r3
 8002438:	8abb      	ldrh	r3, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800243e:	7c3a      	ldrb	r2, [r7, #16]
 8002440:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002442:	4313      	orrs	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	7cbb      	ldrb	r3, [r7, #18]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	4313      	orrs	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002454:	b21a      	sxth	r2, r3
 8002456:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	b21b      	sxth	r3, r3
 800245e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	8aba      	ldrh	r2, [r7, #20]
 8002468:	4610      	mov	r0, r2
 800246a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002470:	2310      	movs	r3, #16
 8002472:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800247c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800247e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002480:	4313      	orrs	r3, r2
 8002482:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002484:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800248a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800248c:	4313      	orrs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	8aba      	ldrh	r2, [r7, #20]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3

    ret = ACCELERO_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000009c 	.word	0x2000009c
 80024b4:	20000420 	.word	0x20000420
 80024b8:	20000068 	.word	0x20000068

080024bc <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000420 	.word	0x20000420

080024e4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80024ee:	2300      	movs	r3, #0
 80024f0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80024f2:	2300      	movs	r3, #0
 80024f4:	703b      	strb	r3, [r7, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80024fa:	4b52      	ldr	r3, [pc, #328]	; (8002644 <BSP_GYRO_Init+0x160>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4798      	blx	r3
 8002500:	4603      	mov	r3, r0
 8002502:	2bd4      	cmp	r3, #212	; 0xd4
 8002504:	d005      	beq.n	8002512 <BSP_GYRO_Init+0x2e>
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4798      	blx	r3
 800250c:	4603      	mov	r3, r0
 800250e:	2bd5      	cmp	r3, #213	; 0xd5
 8002510:	d146      	bne.n	80025a0 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002516:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002518:	2308      	movs	r3, #8
 800251a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800251c:	2300      	movs	r3, #0
 800251e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002520:	2307      	movs	r3, #7
 8002522:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002524:	2330      	movs	r3, #48	; 0x30
 8002526:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002528:	2300      	movs	r3, #0
 800252a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800252c:	2300      	movs	r3, #0
 800252e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_250;
 8002530:	2300      	movs	r3, #0
 8002532:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002534:	793a      	ldrb	r2, [r7, #4]
 8002536:	797b      	ldrb	r3, [r7, #5]
 8002538:	4313      	orrs	r3, r2
 800253a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800253c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800253e:	4313      	orrs	r3, r2
 8002540:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002542:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002544:	4313      	orrs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800254a:	7a3a      	ldrb	r2, [r7, #8]
 800254c:	7a7b      	ldrb	r3, [r7, #9]
 800254e:	4313      	orrs	r3, r2
 8002550:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002552:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002554:	4313      	orrs	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b29a      	uxth	r2, r3
 800255e:	89bb      	ldrh	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002564:	4b38      	ldr	r3, [pc, #224]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	89ba      	ldrh	r2, [r7, #12]
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE;
 8002570:	2320      	movs	r3, #32
 8002572:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_9;
 8002574:	2309      	movs	r3, #9
 8002576:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002578:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800257a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800257c:	4313      	orrs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	89ba      	ldrh	r2, [r7, #12]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2010      	movs	r0, #16
 8002598:	4798      	blx	r3

    ret = GYRO_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e04b      	b.n	8002638 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <BSP_GYRO_Init+0x168>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4798      	blx	r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	2bd3      	cmp	r3, #211	; 0xd3
 80025aa:	d145      	bne.n	8002638 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <BSP_GYRO_Init+0x164>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <BSP_GYRO_Init+0x168>)
 80025b0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80025b2:	2308      	movs	r3, #8
 80025b4:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80025ba:	2307      	movs	r3, #7
 80025bc:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80025be:	2330      	movs	r3, #48	; 0x30
 80025c0:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80025c2:	2300      	movs	r3, #0
 80025c4:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80025c6:	2300      	movs	r3, #0
 80025c8:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80025ca:	2310      	movs	r3, #16
 80025cc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025ce:	793a      	ldrb	r2, [r7, #4]
 80025d0:	797b      	ldrb	r3, [r7, #5]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025d6:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025de:	4313      	orrs	r3, r2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025e4:	7a3a      	ldrb	r2, [r7, #8]
 80025e6:	7a7b      	ldrb	r3, [r7, #9]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80025ec:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	89bb      	ldrh	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	89ba      	ldrh	r2, [r7, #12]
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800260a:	2300      	movs	r3, #0
 800260c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800260e:	2300      	movs	r3, #0
 8002610:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002612:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002614:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002616:	4313      	orrs	r3, r2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <BSP_GYRO_Init+0x164>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	89ba      	ldrh	r2, [r7, #12]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4610      	mov	r0, r2
 8002628:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <BSP_GYRO_Init+0x164>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	2010      	movs	r0, #16
 8002632:	4798      	blx	r3

    ret = GYRO_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000034 	.word	0x20000034
 8002648:	20000424 	.word	0x20000424
 800264c:	20000000 	.word	0x20000000

08002650 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000424 	.word	0x20000424

08002678 <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f, -0.0052635f, -0.0068811f, 0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.00688114, -0.0052635f};

void FIRFilter_Init(FIRFilter * fir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	/* Clear the buffer */
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e009      	b.n	800269a <FIRFilter_Init+0x22>
	{
		fir->buf[n] = 0.0f;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3301      	adds	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d9f2      	bls.n	8002686 <FIRFilter_Init+0xe>
	}

	/* Reset Buffer index */
	fir->bufIndex = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	/* Clear the output */
	fir->out = 0.0f;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <FirstOrderIIR_Init>:
 *      Author: 123
 */
#include "FirstOrderIIRFilter.h"

void FirstOrderIIR_Init(FirstOrderIIR * filt, float alpha)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	ed87 0a00 	vstr	s0, [r7]
	if(alpha < 0.0f)
 80026c8:	edd7 7a00 	vldr	s15, [r7]
 80026cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	d504      	bpl.n	80026e0 <FirstOrderIIR_Init+0x24>
	{
		filt->alpha = 0.0f;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e010      	b.n	8002702 <FirstOrderIIR_Init+0x46>
	}
	else if(alpha > 1.0f)
 80026e0:	edd7 7a00 	vldr	s15, [r7]
 80026e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	dd04      	ble.n	80026fc <FirstOrderIIR_Init+0x40>
	{
		filt->alpha = 1.0f;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e002      	b.n	8002702 <FirstOrderIIR_Init+0x46>
	}
	else
	{
		filt->alpha = alpha;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	601a      	str	r2, [r3, #0]
	}

	filt->out = 0;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <FirstOrderIIR_Update>:


float FirstOrderIIR_Update(FirstOrderIIR * filt, float in)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	ed87 0a00 	vstr	s0, [r7]
	/* Update the output */
	return filt->out = (1.0f - filt->alpha) * in + filt->alpha * filt->out;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800272c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002730:	edd7 7a00 	vldr	s15, [r7]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edd3 6a00 	vldr	s13, [r3]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edd3 7a01 	vldr	s15, [r3, #4]
 8002744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	edc3 7a01 	vstr	s15, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	ee07 3a90 	vmov	s15, r3
}
 800275a:	eeb0 0a67 	vmov.f32	s0, s15
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <IIRFilter_Init>:
 */

#include "IIRFilter.h"

void IIRFilter_Init(IIRFilter * filt, float alpha, float beta)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	ed87 0a02 	vstr	s0, [r7, #8]
 8002774:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->alpha = alpha;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	601a      	str	r2, [r3, #0]
	filt->beta = beta;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	605a      	str	r2, [r3, #4]
	filt->out = 0;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <IIRFilter_Update>:

float IIRFilter_Update(IIRFilter * filt, float input)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	ed87 0a00 	vstr	s0, [r7]
	/* y[n] = alpha*x[n] - beta*y[n-1] */
	return filt->out = filt->alpha*input - filt->beta * filt->out;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	ed93 7a00 	vldr	s14, [r3]
 80027aa:	edd7 7a00 	vldr	s15, [r7]
 80027ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80027be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	edc3 7a02 	vstr	s15, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	ee07 3a90 	vmov	s15, r3
}
 80027d4:	eeb0 0a67 	vmov.f32	s0, s15
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <RCFilter_Init>:
 *      Author: 123
 */
#include "RCFilter.h"

void RCFilter_Init(RCFilter * Filt,float cutoff_Freq, float sampleTime)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80027ee:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute RC for cutOff_Freq */
	float RC = 1.0f / (2*PI*cutoff_Freq);
 80027f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80027fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002806:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Compute first order LPF coefficients */
	Filt->coeff[0] = sampleTime / (sampleTime + RC);
 800280a:	ed97 7a01 	vldr	s14, [r7, #4]
 800280e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002816:	edd7 6a01 	vldr	s13, [r7, #4]
 800281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	edc3 7a00 	vstr	s15, [r3]
	Filt->coeff[1] = RC / (sampleTime + RC);
 8002824:	ed97 7a01 	vldr	s14, [r7, #4]
 8002828:	edd7 7a05 	vldr	s15, [r7, #20]
 800282c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002830:	edd7 6a05 	vldr	s13, [r7, #20]
 8002834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	Filt->out[0] = 0.0f;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
	Filt->out[1] = 0.0f;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <MX_GPIO_Init+0x118>)
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4a3f      	ldr	r2, [pc, #252]	; (8002974 <MX_GPIO_Init+0x118>)
 8002878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800287c:	6153      	str	r3, [r2, #20]
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <MX_GPIO_Init+0x118>)
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <MX_GPIO_Init+0x118>)
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <MX_GPIO_Init+0x118>)
 8002890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002894:	6153      	str	r3, [r2, #20]
 8002896:	4b37      	ldr	r3, [pc, #220]	; (8002974 <MX_GPIO_Init+0x118>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028a2:	4b34      	ldr	r3, [pc, #208]	; (8002974 <MX_GPIO_Init+0x118>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4a33      	ldr	r2, [pc, #204]	; (8002974 <MX_GPIO_Init+0x118>)
 80028a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ac:	6153      	str	r3, [r2, #20]
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <MX_GPIO_Init+0x118>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <MX_GPIO_Init+0x118>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4a2d      	ldr	r2, [pc, #180]	; (8002974 <MX_GPIO_Init+0x118>)
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c4:	6153      	str	r3, [r2, #20]
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <MX_GPIO_Init+0x118>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	4b28      	ldr	r3, [pc, #160]	; (8002974 <MX_GPIO_Init+0x118>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4a27      	ldr	r2, [pc, #156]	; (8002974 <MX_GPIO_Init+0x118>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6153      	str	r3, [r2, #20]
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <MX_GPIO_Init+0x118>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80028ea:	2200      	movs	r2, #0
 80028ec:	f64f 7108 	movw	r1, #65288	; 0xff08
 80028f0:	4821      	ldr	r0, [pc, #132]	; (8002978 <MX_GPIO_Init+0x11c>)
 80028f2:	f001 fae5 	bl	8003ec0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80028f6:	2337      	movs	r3, #55	; 0x37
 80028f8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80028fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	481b      	ldr	r0, [pc, #108]	; (8002978 <MX_GPIO_Init+0x11c>)
 800290c:	f001 f86a 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002910:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002914:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002916:	2301      	movs	r3, #1
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4813      	ldr	r0, [pc, #76]	; (8002978 <MX_GPIO_Init+0x11c>)
 800292a:	f001 f85b 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800292e:	2301      	movs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f001 f84e 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002948:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800295a:	230e      	movs	r3, #14
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002968:	f001 f83c 	bl	80039e4 <HAL_GPIO_Init>

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	48001000 	.word	0x48001000

0800297c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <MX_I2C1_Init+0x74>)
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <MX_I2C1_Init+0x78>)
 8002984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <MX_I2C1_Init+0x74>)
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <MX_I2C1_Init+0x7c>)
 800298a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <MX_I2C1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_I2C1_Init+0x74>)
 8002994:	2201      	movs	r2, #1
 8002996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <MX_I2C1_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029b6:	480e      	ldr	r0, [pc, #56]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029b8:	f001 facc 	bl	8003f54 <HAL_I2C_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029c2:	f000 fa21 	bl	8002e08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029c6:	2100      	movs	r1, #0
 80029c8:	4809      	ldr	r0, [pc, #36]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029ca:	f001 ffe9 	bl	80049a0 <HAL_I2CEx_ConfigAnalogFilter>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029d4:	f000 fa18 	bl	8002e08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029d8:	2100      	movs	r1, #0
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <MX_I2C1_Init+0x74>)
 80029dc:	f002 f82b 	bl	8004a36 <HAL_I2CEx_ConfigDigitalFilter>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029e6:	f000 fa0f 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000440 	.word	0x20000440
 80029f4:	40005400 	.word	0x40005400
 80029f8:	2000090e 	.word	0x2000090e

080029fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_I2C_MspInit+0x7c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d127      	bne.n	8002a6e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_I2C_MspInit+0x80>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_I2C_MspInit+0x80>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6153      	str	r3, [r2, #20]
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_I2C_MspInit+0x80>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002a36:	23c0      	movs	r3, #192	; 0xc0
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a3a:	2312      	movs	r3, #18
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a46:	2304      	movs	r3, #4
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <HAL_I2C_MspInit+0x84>)
 8002a52:	f000 ffc7 	bl	80039e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_I2C_MspInit+0x80>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_I2C_MspInit+0x80>)
 8002a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_I2C_MspInit+0x80>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40005400 	.word	0x40005400
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	48000400 	.word	0x48000400

08002a84 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_I2C_MspDeInit+0x38>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10d      	bne.n	8002ab2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_I2C_MspDeInit+0x3c>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_I2C_MspDeInit+0x3c>)
 8002a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aa0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8002aa2:	2140      	movs	r1, #64	; 0x40
 8002aa4:	4807      	ldr	r0, [pc, #28]	; (8002ac4 <HAL_I2C_MspDeInit+0x40>)
 8002aa6:	f001 f917 	bl	8003cd8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <HAL_I2C_MspDeInit+0x40>)
 8002aae:	f001 f913 	bl	8003cd8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40005400 	.word	0x40005400
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	48000400 	.word	0x48000400

08002ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002acc:	f000 fdee 	bl	80036ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ad0:	f000 f892 	bl	8002bf8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ad4:	f7ff fec2 	bl	800285c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ad8:	f7ff ff50 	bl	800297c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002adc:	f000 fb80 	bl	80031e0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002ae0:	f000 fd46 	bl	8003570 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED4);
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f7ff f807 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff f804 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8002af0:	2002      	movs	r0, #2
 8002af2:	f7ff f801 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 8002af6:	2004      	movs	r0, #4
 8002af8:	f7fe fffe 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 8002afc:	2006      	movs	r0, #6
 8002afe:	f7fe fffb 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 8002b02:	2007      	movs	r0, #7
 8002b04:	f7fe fff8 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 8002b08:	2005      	movs	r0, #5
 8002b0a:	f7fe fff5 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f7fe fff2 	bl	8001af8 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002b14:	2101      	movs	r1, #1
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7ff f8ec 	bl	8001cf4 <BSP_PB_Init>

  while (!UserPressButton) Toggle_Leds();
 8002b1c:	e001      	b.n	8002b22 <main+0x5a>
 8002b1e:	f000 f8db 	bl	8002cd8 <Toggle_Leds>
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <main+0x10c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f8      	beq.n	8002b1e <main+0x56>
  BSP_LED_Off(LED3);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7ff f8ad 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f7ff f8aa 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f7ff f8a7 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8002b3e:	2003      	movs	r0, #3
 8002b40:	f7ff f8a4 	bl	8001c8c <BSP_LED_Off>

  /* Initialize RC Filters */
  RCFilter_Init(&Acc_RC_LPF, 5.0f, 0.01f);
 8002b44:	eddf 0a24 	vldr	s1, [pc, #144]	; 8002bd8 <main+0x110>
 8002b48:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002b4c:	4823      	ldr	r0, [pc, #140]	; (8002bdc <main+0x114>)
 8002b4e:	f7ff fe48 	bl	80027e2 <RCFilter_Init>

  FIRFilter_Init(&Acc_FIR_LPF);
 8002b52:	4823      	ldr	r0, [pc, #140]	; (8002be0 <main+0x118>)
 8002b54:	f7ff fd90 	bl	8002678 <FIRFilter_Init>

  IIRFilter_Init(&Acc_IIR_LPF, IIR_ALPHA, IIR_BETA);
 8002b58:	eddf 0a22 	vldr	s1, [pc, #136]	; 8002be4 <main+0x11c>
 8002b5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b60:	4821      	ldr	r0, [pc, #132]	; (8002be8 <main+0x120>)
 8002b62:	f7ff fe01 	bl	8002768 <IIRFilter_Init>

  FirstOrderIIR_Init(&Acc_FO_IIR, FO_IIR_ALPHA);
 8002b66:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002be4 <main+0x11c>
 8002b6a:	4820      	ldr	r0, [pc, #128]	; (8002bec <main+0x124>)
 8002b6c:	f7ff fda6 	bl	80026bc <FirstOrderIIR_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1,data,7,HAL_MAX_DELAY);

	  UserPressButton = 0;
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <main+0x10c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
	  BSP_examples[DemoIndex++].DemoFunc();
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <main+0x128>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	b2d1      	uxtb	r1, r2
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <main+0x128>)
 8002b80:	7011      	strb	r1, [r2, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <main+0x12c>)
 8002b86:	460b      	mov	r3, r1
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a5b      	subs	r3, r3, r1
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4798      	blx	r3

	  /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
	  if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <main+0x128>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d902      	bls.n	8002ba2 <main+0xda>
	  {
		DemoIndex = 0;
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <main+0x128>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
	  }
	  /* Toggle LEDs between each Test */
	  UserPressButton = 0;
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <main+0x10c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
	  while (!UserPressButton) IIR_Check(); //	Toggle_Leds();
 8002ba8:	e001      	b.n	8002bae <main+0xe6>
 8002baa:	f000 f8c9 	bl	8002d40 <IIR_Check>
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <main+0x10c>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f8      	beq.n	8002baa <main+0xe2>
	  BSP_LED_Off(LED3);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7ff f867 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED4);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f7ff f864 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED5);
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f7ff f861 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED6);
 8002bca:	2003      	movs	r0, #3
 8002bcc:	f7ff f85e 	bl	8001c8c <BSP_LED_Off>
	  UserPressButton = 0;
 8002bd0:	e7ce      	b.n	8002b70 <main+0xa8>
 8002bd2:	bf00      	nop
 8002bd4:	20000429 	.word	0x20000429
 8002bd8:	3c23d70a 	.word	0x3c23d70a
 8002bdc:	200004b0 	.word	0x200004b0
 8002be0:	200004c0 	.word	0x200004c0
 8002be4:	3f666666 	.word	0x3f666666
 8002be8:	200004a4 	.word	0x200004a4
 8002bec:	2000049c 	.word	0x2000049c
 8002bf0:	20000428 	.word	0x20000428
 8002bf4:	200000fc 	.word	0x200000fc

08002bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b09e      	sub	sp, #120	; 0x78
 8002bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c02:	2228      	movs	r2, #40	; 0x28
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 f8a4 	bl	8007d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	223c      	movs	r2, #60	; 0x3c
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f005 f896 	bl	8007d54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c30:	2310      	movs	r3, #16
 8002c32:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c34:	2302      	movs	r3, #2
 8002c36:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c3c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002c40:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 ff42 	bl	8004ad0 <HAL_RCC_OscConfig>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002c52:	f000 f8d9 	bl	8002e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c56:	230f      	movs	r3, #15
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c70:	2101      	movs	r1, #1
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fe34 	bl	80058e0 <HAL_RCC_ClockConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002c7e:	f000 f8c3 	bl	8002e08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002c82:	2321      	movs	r3, #33	; 0x21
 8002c84:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c8e:	463b      	mov	r3, r7
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 f85b 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002c9c:	f000 f8b4 	bl	8002e08 <Error_Handler>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3778      	adds	r7, #120	; 0x78
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
  if (USER_BUTTON_PIN == GPIO_Pin)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d109      	bne.n	8002ccc <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 8002cb8:	bf00      	nop
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7ff f87c 	bl	8001db8 <BSP_PB_GetState>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8002cc6:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000429 	.word	0x20000429

08002cd8 <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED3);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fe ffef 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002ce2:	2064      	movs	r0, #100	; 0x64
 8002ce4:	f000 fd48 	bl	8003778 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7fe ffe9 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cee:	2064      	movs	r0, #100	; 0x64
 8002cf0:	f000 fd42 	bl	8003778 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	f7fe ffe3 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cfa:	2064      	movs	r0, #100	; 0x64
 8002cfc:	f000 fd3c 	bl	8003778 <HAL_Delay>
    BSP_LED_Toggle(LED8);
 8002d00:	2005      	movs	r0, #5
 8002d02:	f7fe ffdd 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002d06:	2064      	movs	r0, #100	; 0x64
 8002d08:	f000 fd36 	bl	8003778 <HAL_Delay>
    BSP_LED_Toggle(LED10);
 8002d0c:	2007      	movs	r0, #7
 8002d0e:	f7fe ffd7 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002d12:	2064      	movs	r0, #100	; 0x64
 8002d14:	f000 fd30 	bl	8003778 <HAL_Delay>
    BSP_LED_Toggle(LED9);
 8002d18:	2006      	movs	r0, #6
 8002d1a:	f7fe ffd1 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002d1e:	2064      	movs	r0, #100	; 0x64
 8002d20:	f000 fd2a 	bl	8003778 <HAL_Delay>
    BSP_LED_Toggle(LED7);
 8002d24:	2004      	movs	r0, #4
 8002d26:	f7fe ffcb 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002d2a:	2064      	movs	r0, #100	; 0x64
 8002d2c:	f000 fd24 	bl	8003778 <HAL_Delay>
    BSP_LED_Toggle(LED5);
 8002d30:	2002      	movs	r0, #2
 8002d32:	f7fe ffc5 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002d36:	2064      	movs	r0, #100	; 0x64
 8002d38:	f000 fd1e 	bl	8003778 <HAL_Delay>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <IIR_Check>:

/* IIR Filter Check */
void IIR_Check()
{
 8002d40:	b5b0      	push	{r4, r5, r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af02      	add	r7, sp, #8
	if((HAL_GetTick() - timerFILTER_MS) >= SAMPLE_TIME_FILTER_MS)
 8002d46:	f000 fd0b 	bl	8003760 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <IIR_Check+0x90>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b09      	cmp	r3, #9
 8002d54:	d938      	bls.n	8002dc8 <IIR_Check+0x88>
	{
		filterInput = 10.0f * sinf(0.0062831853f * SIN_FREQ_HZ * timerFILTER_MS);
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <IIR_Check+0x90>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d62:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002dd4 <IIR_Check+0x94>
 8002d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6e:	f004 fa5b 	bl	8007228 <sinf>
 8002d72:	eef0 7a40 	vmov.f32	s15, s0
 8002d76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <IIR_Check+0x98>)
 8002d80:	edc3 7a00 	vstr	s15, [r3]

		IIRFilter_Update(&Acc_IIR_LPF, filterInput);
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <IIR_Check+0x98>)
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8e:	4813      	ldr	r0, [pc, #76]	; (8002ddc <IIR_Check+0x9c>)
 8002d90:	f7ff fd02 	bl	8002798 <IIRFilter_Update>

		printf(" %.3f, %.3f\r\n",
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <IIR_Check+0x98>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fbd5 	bl	8000548 <__aeabi_f2d>
 8002d9e:	4604      	mov	r4, r0
 8002da0:	460d      	mov	r5, r1
				filterInput, Acc_IIR_LPF.out);
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <IIR_Check+0x9c>)
 8002da4:	689b      	ldr	r3, [r3, #8]
		printf(" %.3f, %.3f\r\n",
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbce 	bl	8000548 <__aeabi_f2d>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	e9cd 2300 	strd	r2, r3, [sp]
 8002db4:	4622      	mov	r2, r4
 8002db6:	462b      	mov	r3, r5
 8002db8:	4809      	ldr	r0, [pc, #36]	; (8002de0 <IIR_Check+0xa0>)
 8002dba:	f005 fc3d 	bl	8008638 <iprintf>

		timerFILTER_MS += SAMPLE_TIME_FILTER_MS;
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <IIR_Check+0x90>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330a      	adds	r3, #10
 8002dc4:	4a02      	ldr	r2, [pc, #8]	; (8002dd0 <IIR_Check+0x90>)
 8002dc6:	6013      	str	r3, [r2, #0]

	}
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000430 	.word	0x20000430
 8002dd4:	3c23ae35 	.word	0x3c23ae35
 8002dd8:	2000042c 	.word	0x2000042c
 8002ddc:	200004a4 	.word	0x200004a4
 8002de0:	0800a750 	.word	0x0800a750

08002de4 <__io_putchar>:

int __io_putchar(int ch)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t *)&ch , 1 , 0xFFFF);
 8002dec:	1d39      	adds	r1, r7, #4
 8002dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df2:	2201      	movs	r2, #1
 8002df4:	4803      	ldr	r0, [pc, #12]	; (8002e04 <__io_putchar+0x20>)
 8002df6:	f003 fdff 	bl	80069f8 <HAL_UART_Transmit>
	return ch;
 8002dfa:	687b      	ldr	r3, [r7, #4]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000056c 	.word	0x2000056c

08002e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 8002e0c:	2007      	movs	r0, #7
 8002e0e:	f7fe ff23 	bl	8001c58 <BSP_LED_On>
    BSP_LED_On(LED3);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe ff20 	bl	8001c58 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e18:	b672      	cpsid	i
}
 8002e1a:	bf00      	nop
  __disable_irq();
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <Error_Handler+0x14>
	...

08002e20 <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
  {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002e24:	f7ff fa88 	bl	8002338 <BSP_ACCELERO_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002e2e:	f7ff ffeb 	bl	8002e08 <Error_Handler>
  }
  
  UserPressButton = 0;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <ACCELERO_MEMS_Test+0x30>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002e38:	e001      	b.n	8002e3e <ACCELERO_MEMS_Test+0x1e>
  {
    ACCELERO_ReadAcc();
 8002e3a:	f000 f80d 	bl	8002e58 <ACCELERO_ReadAcc>
  while(!UserPressButton)
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <ACCELERO_MEMS_Test+0x30>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f8      	beq.n	8002e3a <ACCELERO_MEMS_Test+0x1a>
  }
}  
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000429 	.word	0x20000429
 8002e54:	00000000 	.word	0x00000000

08002e58 <ACCELERO_ReadAcc>:

static void ACCELERO_ReadAcc(void)
{
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af02      	add	r7, sp, #8
  int16_t buffer[3] = {0};
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval = 0x00;
 8002e66:	2300      	movs	r3, #0
 8002e68:	81fb      	strh	r3, [r7, #14]
  
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fb25 	bl	80024bc <BSP_ACCELERO_GetXYZ>
 
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
 8002e72:	88bb      	ldrh	r3, [r7, #4]
 8002e74:	81bb      	strh	r3, [r7, #12]
  yval = buffer[1];
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	81fb      	strh	r3, [r7, #14]
 // IIRFilter_Update(&Acc_IIR_LPF, xval);
  //printf(" %.3f, %.3f , %.3f \r\n",
  		 // 0.061035*buffer[0]*9.81/1000, 0.061035*buffer[1]*9.81/1000, 0.061035*buffer[2]*9.81/1000);

  //FirstOrderIIR_Update(&Acc_FO_IIR, buffer[0]);
  FirstOrderIIR_Update(&Acc_FO_IIR, buffer[1]);
 8002e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e86:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8a:	485d      	ldr	r0, [pc, #372]	; (8003000 <ACCELERO_ReadAcc+0x1a8>)
 8002e8c:	f7ff fc43 	bl	8002716 <FirstOrderIIR_Update>
  //FirstOrderIIR_Update(&Acc_FO_IIR, buffer[2]);

  printf(" %.3f, %.3f\r\n", 0.061035*buffer[1]*9.81/1000, 0.061035*Acc_FO_IIR.out*9.81/1000);
 8002e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fb45 	bl	8000524 <__aeabi_i2d>
 8002e9a:	a355      	add	r3, pc, #340	; (adr r3, 8002ff0 <ACCELERO_ReadAcc+0x198>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fbaa 	bl	80005f8 <__aeabi_dmul>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	a352      	add	r3, pc, #328	; (adr r3, 8002ff8 <ACCELERO_ReadAcc+0x1a0>)
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f7fd fba1 	bl	80005f8 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	4b50      	ldr	r3, [pc, #320]	; (8003004 <ACCELERO_ReadAcc+0x1ac>)
 8002ec4:	f7fd fcc2 	bl	800084c <__aeabi_ddiv>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4614      	mov	r4, r2
 8002ece:	461d      	mov	r5, r3
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <ACCELERO_ReadAcc+0x1a8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb37 	bl	8000548 <__aeabi_f2d>
 8002eda:	a345      	add	r3, pc, #276	; (adr r3, 8002ff0 <ACCELERO_ReadAcc+0x198>)
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f7fd fb8a 	bl	80005f8 <__aeabi_dmul>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	a342      	add	r3, pc, #264	; (adr r3, 8002ff8 <ACCELERO_ReadAcc+0x1a0>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f7fd fb81 	bl	80005f8 <__aeabi_dmul>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	4b40      	ldr	r3, [pc, #256]	; (8003004 <ACCELERO_ReadAcc+0x1ac>)
 8002f04:	f7fd fca2 	bl	800084c <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	e9cd 2300 	strd	r2, r3, [sp]
 8002f10:	4622      	mov	r2, r4
 8002f12:	462b      	mov	r3, r5
 8002f14:	483c      	ldr	r0, [pc, #240]	; (8003008 <ACCELERO_ReadAcc+0x1b0>)
 8002f16:	f005 fb8f 	bl	8008638 <iprintf>


  //HAL_Delay(500);

  if((ABS(xval))>(ABS(yval)))
 8002f1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bfb8      	it	lt
 8002f22:	425b      	neglt	r3, r3
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bfb8      	it	lt
 8002f2e:	425b      	neglt	r3, r3
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d91f      	bls.n	8002f76 <ACCELERO_ReadAcc+0x11e>
  {
    if(xval > ThresholdHigh)
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <ACCELERO_ReadAcc+0x1b4>)
 8002f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dd06      	ble.n	8002f52 <ACCELERO_ReadAcc+0xfa>
    { 
      /* LED10 On */
      BSP_LED_On(LED10);
 8002f44:	2007      	movs	r0, #7
 8002f46:	f7fe fe87 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002f4a:	200a      	movs	r0, #10
 8002f4c:	f000 fc14 	bl	8003778 <HAL_Delay>
 8002f50:	e030      	b.n	8002fb4 <ACCELERO_ReadAcc+0x15c>
    }
    else if(xval < ThresholdLow)
 8002f52:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <ACCELERO_ReadAcc+0x1b8>)
 8002f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	da06      	bge.n	8002f6e <ACCELERO_ReadAcc+0x116>
    { 
      /* LED3 On */
      BSP_LED_On(LED3);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fe fe79 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002f66:	200a      	movs	r0, #10
 8002f68:	f000 fc06 	bl	8003778 <HAL_Delay>
 8002f6c:	e022      	b.n	8002fb4 <ACCELERO_ReadAcc+0x15c>
    }
    else
    { 
      HAL_Delay(10);
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f000 fc02 	bl	8003778 <HAL_Delay>
 8002f74:	e01e      	b.n	8002fb4 <ACCELERO_ReadAcc+0x15c>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <ACCELERO_ReadAcc+0x1b8>)
 8002f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	da06      	bge.n	8002f92 <ACCELERO_ReadAcc+0x13a>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f7fe fe67 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002f8a:	200a      	movs	r0, #10
 8002f8c:	f000 fbf4 	bl	8003778 <HAL_Delay>
 8002f90:	e010      	b.n	8002fb4 <ACCELERO_ReadAcc+0x15c>
    }
    else if(yval > ThresholdHigh)
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <ACCELERO_ReadAcc+0x1b4>)
 8002f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f98:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dd06      	ble.n	8002fae <ACCELERO_ReadAcc+0x156>
    {
      /* LED7 On */
      BSP_LED_On(LED7);
 8002fa0:	2004      	movs	r0, #4
 8002fa2:	f7fe fe59 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002fa6:	200a      	movs	r0, #10
 8002fa8:	f000 fbe6 	bl	8003778 <HAL_Delay>
 8002fac:	e002      	b.n	8002fb4 <ACCELERO_ReadAcc+0x15c>
    } 
    else
  {	    
      HAL_Delay(10);
 8002fae:	200a      	movs	r0, #10
 8002fb0:	f000 fbe2 	bl	8003778 <HAL_Delay>
    }
  } 
  
     BSP_LED_Off(LED3);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fe fe69 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED6);
 8002fba:	2003      	movs	r0, #3
 8002fbc:	f7fe fe66 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED7);
 8002fc0:	2004      	movs	r0, #4
 8002fc2:	f7fe fe63 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED4);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f7fe fe60 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED10);
 8002fcc:	2007      	movs	r0, #7
 8002fce:	f7fe fe5d 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED8);
 8002fd2:	2005      	movs	r0, #5
 8002fd4:	f7fe fe5a 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED9);
 8002fd8:	2006      	movs	r0, #6
 8002fda:	f7fe fe57 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED5);
 8002fde:	2002      	movs	r0, #2
 8002fe0:	f7fe fe54 	bl	8001c8c <BSP_LED_Off>
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bdb0      	pop	{r4, r5, r7, pc}
 8002fec:	f3af 8000 	nop.w
 8002ff0:	c1d29dc7 	.word	0xc1d29dc7
 8002ff4:	3faf3ffa 	.word	0x3faf3ffa
 8002ff8:	51eb851f 	.word	0x51eb851f
 8002ffc:	40239eb8 	.word	0x40239eb8
 8003000:	2000049c 	.word	0x2000049c
 8003004:	408f4000 	.word	0x408f4000
 8003008:	0800a760 	.word	0x0800a760
 800300c:	20000174 	.word	0x20000174
 8003010:	20000176 	.word	0x20000176

08003014 <GYRO_MEMS_Test>:
  *   MEMS peripheral.
  * @param None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8003018:	f7ff f98e 	bl	8002338 <BSP_ACCELERO_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <GYRO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8003022:	f7ff fef1 	bl	8002e08 <Error_Handler>
  }
  
  UserPressButton = 0;
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <GYRO_MEMS_Test+0x30>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 800302c:	e001      	b.n	8003032 <GYRO_MEMS_Test+0x1e>
  {
    GYRO_ReadAng();
 800302e:	f000 f80b 	bl	8003048 <GYRO_ReadAng>
  while(!UserPressButton)
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <GYRO_MEMS_Test+0x30>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f8      	beq.n	800302e <GYRO_MEMS_Test+0x1a>
  }
}  
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000429 	.word	0x20000429

08003048 <GYRO_ReadAng>:

static void GYRO_ReadAng(void)
{
 8003048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800304c:	b08a      	sub	sp, #40	; 0x28
 800304e:	af04      	add	r7, sp, #16
  /* Gyroscope variable */
  float Buffer[3];
  float Xval,Yval,Zval = 0x00;
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	617b      	str	r3, [r7, #20]

  /* Init Gyroscope Mems */
  if(BSP_GYRO_Init() != HAL_OK)
 8003056:	f7ff fa45 	bl	80024e4 <BSP_GYRO_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <GYRO_ReadAng+0x1c>
  {
    /* Initialization Error */
    Error_Handler(); 
 8003060:	f7ff fed2 	bl	8002e08 <Error_Handler>
  }

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
 8003064:	463b      	mov	r3, r7
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff faf2 	bl	8002650 <BSP_GYRO_GetXYZ>
     
  /* Update autoreload and capture compare registers value*/
  Xval = Buffer[0];
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	613b      	str	r3, [r7, #16]
  Yval = Buffer[1];
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60fb      	str	r3, [r7, #12]
  Zval = Buffer[2];
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	617b      	str	r3, [r7, #20]
  /* dps */
  printf("%.3f, %.3f, %.3f \r\n",
		  L3GD20_SENSITIVITY_250DPS*Xval/1000, L3GD20_SENSITIVITY_250DPS*Yval/1000,
 8003078:	edd7 7a04 	vldr	s15, [r7, #16]
 800307c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80031cc <GYRO_ReadAng+0x184>
 8003080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003084:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80031d0 <GYRO_ReadAng+0x188>
 8003088:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 800308c:	ee16 0a90 	vmov	r0, s13
 8003090:	f7fd fa5a 	bl	8000548 <__aeabi_f2d>
 8003094:	4680      	mov	r8, r0
 8003096:	4689      	mov	r9, r1
		  L3GD20_SENSITIVITY_250DPS*Xval/1000, L3GD20_SENSITIVITY_250DPS*Yval/1000,
 8003098:	edd7 7a03 	vldr	s15, [r7, #12]
 800309c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80031cc <GYRO_ReadAng+0x184>
 80030a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80031d0 <GYRO_ReadAng+0x188>
 80030a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 80030ac:	ee16 0a90 	vmov	r0, s13
 80030b0:	f7fd fa4a 	bl	8000548 <__aeabi_f2d>
 80030b4:	4604      	mov	r4, r0
 80030b6:	460d      	mov	r5, r1
		  L3GD20_SENSITIVITY_250DPS*Zval/1000);
 80030b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80030bc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80031cc <GYRO_ReadAng+0x184>
 80030c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80031d0 <GYRO_ReadAng+0x188>
 80030c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 80030cc:	ee16 0a90 	vmov	r0, s13
 80030d0:	f7fd fa3a 	bl	8000548 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030dc:	e9cd 4500 	strd	r4, r5, [sp]
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	483b      	ldr	r0, [pc, #236]	; (80031d4 <GYRO_ReadAng+0x18c>)
 80030e6:	f005 faa7 	bl	8008638 <iprintf>
  HAL_Delay(20);
 80030ea:	2014      	movs	r0, #20
 80030ec:	f000 fb44 	bl	8003778 <HAL_Delay>
      
  if(Xval>Yval)
 80030f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80030f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	dd23      	ble.n	800314a <GYRO_ReadAng+0x102>
   {
    if(Buffer[0] > 5000.0f)
 8003102:	edd7 7a00 	vldr	s15, [r7]
 8003106:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80031d8 <GYRO_ReadAng+0x190>
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	dd06      	ble.n	8003122 <GYRO_ReadAng+0xda>
     { 
        /* LD10 On */
        BSP_LED_On(LED10);
 8003114:	2007      	movs	r0, #7
 8003116:	f7fe fd9f 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 800311a:	200a      	movs	r0, #10
 800311c:	f000 fb2c 	bl	8003778 <HAL_Delay>
 8003120:	e036      	b.n	8003190 <GYRO_ReadAng+0x148>
     }
     else if(Buffer[0] < -5000.0f)
 8003122:	edd7 7a00 	vldr	s15, [r7]
 8003126:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80031dc <GYRO_ReadAng+0x194>
 800312a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003132:	d506      	bpl.n	8003142 <GYRO_ReadAng+0xfa>
     { 
        /* LED3 On */
        BSP_LED_On(LED3);
 8003134:	2000      	movs	r0, #0
 8003136:	f7fe fd8f 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 800313a:	200a      	movs	r0, #10
 800313c:	f000 fb1c 	bl	8003778 <HAL_Delay>
 8003140:	e026      	b.n	8003190 <GYRO_ReadAng+0x148>
     }      
    else
    { 
      HAL_Delay(10);
 8003142:	200a      	movs	r0, #10
 8003144:	f000 fb18 	bl	8003778 <HAL_Delay>
 8003148:	e022      	b.n	8003190 <GYRO_ReadAng+0x148>
    }
   }
  else
   {
    if(Buffer[1] < -5000.0f)
 800314a:	edd7 7a01 	vldr	s15, [r7, #4]
 800314e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80031dc <GYRO_ReadAng+0x194>
 8003152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	d506      	bpl.n	800316a <GYRO_ReadAng+0x122>
     {
        /* LD6 on */
        BSP_LED_On(LED6);           
 800315c:	2003      	movs	r0, #3
 800315e:	f7fe fd7b 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8003162:	200a      	movs	r0, #10
 8003164:	f000 fb08 	bl	8003778 <HAL_Delay>
 8003168:	e012      	b.n	8003190 <GYRO_ReadAng+0x148>
     }
    else if(Buffer[1] > 5000.0f)
 800316a:	edd7 7a01 	vldr	s15, [r7, #4]
 800316e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80031d8 <GYRO_ReadAng+0x190>
 8003172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317a:	dd06      	ble.n	800318a <GYRO_ReadAng+0x142>
     {
        /* LD7 On */
        BSP_LED_On(LED7);        
 800317c:	2004      	movs	r0, #4
 800317e:	f7fe fd6b 	bl	8001c58 <BSP_LED_On>
	HAL_Delay(10);
 8003182:	200a      	movs	r0, #10
 8003184:	f000 faf8 	bl	8003778 <HAL_Delay>
 8003188:	e002      	b.n	8003190 <GYRO_ReadAng+0x148>
     }     
        else
        { 
            HAL_Delay(10);
 800318a:	200a      	movs	r0, #10
 800318c:	f000 faf4 	bl	8003778 <HAL_Delay>
        }  	
      } 
    BSP_LED_Off(LED3);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fe fd7b 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8003196:	2003      	movs	r0, #3
 8003198:	f7fe fd78 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED7);
 800319c:	2004      	movs	r0, #4
 800319e:	f7fe fd75 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7fe fd72 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED10);
 80031a8:	2007      	movs	r0, #7
 80031aa:	f7fe fd6f 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED8);
 80031ae:	2005      	movs	r0, #5
 80031b0:	f7fe fd6c 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED9);
 80031b4:	2006      	movs	r0, #6
 80031b6:	f7fe fd69 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED5);
 80031ba:	2002      	movs	r0, #2
 80031bc:	f7fe fd66 	bl	8001c8c <BSP_LED_Off>
}
 80031c0:	bf00      	nop
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031ca:	bf00      	nop
 80031cc:	410c0000 	.word	0x410c0000
 80031d0:	447a0000 	.word	0x447a0000
 80031d4:	0800a770 	.word	0x0800a770
 80031d8:	459c4000 	.word	0x459c4000
 80031dc:	c59c4000 	.word	0xc59c4000

080031e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <MX_SPI1_Init+0x74>)
 80031e6:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <MX_SPI1_Init+0x78>)
 80031e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <MX_SPI1_Init+0x74>)
 80031ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <MX_SPI1_Init+0x74>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <MX_SPI1_Init+0x74>)
 80031fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80031fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <MX_SPI1_Init+0x74>)
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <MX_SPI1_Init+0x74>)
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <MX_SPI1_Init+0x74>)
 800320e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003212:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_SPI1_Init+0x74>)
 8003216:	2210      	movs	r2, #16
 8003218:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <MX_SPI1_Init+0x74>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <MX_SPI1_Init+0x74>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <MX_SPI1_Init+0x74>)
 8003228:	2200      	movs	r2, #0
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <MX_SPI1_Init+0x74>)
 800322e:	2207      	movs	r2, #7
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <MX_SPI1_Init+0x74>)
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <MX_SPI1_Init+0x74>)
 800323a:	2208      	movs	r2, #8
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800323e:	4805      	ldr	r0, [pc, #20]	; (8003254 <MX_SPI1_Init+0x74>)
 8003240:	f002 ff34 	bl	80060ac <HAL_SPI_Init>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800324a:	f7ff fddd 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000508 	.word	0x20000508
 8003258:	40013000 	.word	0x40013000

0800325c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_SPI_MspInit+0x7c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d128      	bne.n	80032d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_SPI_MspInit+0x80>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_SPI_MspInit+0x80>)
 8003284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003288:	6193      	str	r3, [r2, #24]
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_SPI_MspInit+0x80>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_SPI_MspInit+0x80>)
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_SPI_MspInit+0x80>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	6153      	str	r3, [r2, #20]
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_SPI_MspInit+0x80>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80032ae:	23e0      	movs	r3, #224	; 0xe0
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032be:	2305      	movs	r3, #5
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032cc:	f000 fb8a 	bl	80039e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40013000 	.word	0x40013000
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a08      	ldr	r2, [pc, #32]	; (8003310 <HAL_SPI_MspDeInit+0x30>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10a      	bne.n	8003308 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_SPI_MspDeInit+0x34>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	4a07      	ldr	r2, [pc, #28]	; (8003314 <HAL_SPI_MspDeInit+0x34>)
 80032f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fc:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 80032fe:	21e0      	movs	r1, #224	; 0xe0
 8003300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003304:	f000 fce8 	bl	8003cd8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40013000 	.word	0x40013000
 8003314:	40021000 	.word	0x40021000

08003318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_MspInit+0x44>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_MspInit+0x44>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6193      	str	r3, [r2, #24]
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_MspInit+0x44>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_MspInit+0x44>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_MspInit+0x44>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	61d3      	str	r3, [r2, #28]
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_MspInit+0x44>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800334e:	2007      	movs	r0, #7
 8003350:	f000 fb06 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler+0x4>

08003366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <HardFault_Handler+0x4>

0800336c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <MemManage_Handler+0x4>

08003372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003376:	e7fe      	b.n	8003376 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler+0x4>

0800337e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f000 f9c4 	bl	8003738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f000 fdb3 	bl	8003f24 <HAL_GPIO_EXTI_IRQHandler>
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
	return 1;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_kill>:

int _kill(int pid, int sig)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033dc:	f004 fc90 	bl	8007d00 <__errno>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2216      	movs	r2, #22
 80033e4:	601a      	str	r2, [r3, #0]
	return -1;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <_exit>:

void _exit (int status)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033fa:	f04f 31ff 	mov.w	r1, #4294967295
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffe7 	bl	80033d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003404:	e7fe      	b.n	8003404 <_exit+0x12>

08003406 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e00a      	b.n	800342e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003418:	f3af 8000 	nop.w
 800341c:	4601      	mov	r1, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	60ba      	str	r2, [r7, #8]
 8003424:	b2ca      	uxtb	r2, r1
 8003426:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	dbf0      	blt.n	8003418 <_read+0x12>
	}

return len;
 8003436:	687b      	ldr	r3, [r7, #4]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e009      	b.n	8003466 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	60ba      	str	r2, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fcc2 	bl	8002de4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	dbf1      	blt.n	8003452 <_write+0x12>
	}
	return len;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_close>:

int _close(int file)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	return -1;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034a0:	605a      	str	r2, [r3, #4]
	return 0;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_isatty>:

int _isatty(int file)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	return 1;
 80034b8:	2301      	movs	r3, #1
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
	return 0;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <_sbrk+0x5c>)
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <_sbrk+0x60>)
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <_sbrk+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <_sbrk+0x64>)
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <_sbrk+0x68>)
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <_sbrk+0x64>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d207      	bcs.n	8003520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003510:	f004 fbf6 	bl	8007d00 <__errno>
 8003514:	4603      	mov	r3, r0
 8003516:	220c      	movs	r2, #12
 8003518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	e009      	b.n	8003534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <_sbrk+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <_sbrk+0x64>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <_sbrk+0x64>)
 8003530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000a000 	.word	0x2000a000
 8003540:	00000400 	.word	0x00000400
 8003544:	20000434 	.word	0x20000434
 8003548:	20000608 	.word	0x20000608

0800354c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <SystemInit+0x20>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <SystemInit+0x20>)
 8003558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800355c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 8003576:	4a15      	ldr	r2, [pc, #84]	; (80035cc <MX_USART1_UART_Init+0x5c>)
 8003578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 800357c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 8003596:	220c      	movs	r2, #12
 8003598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035b2:	4805      	ldr	r0, [pc, #20]	; (80035c8 <MX_USART1_UART_Init+0x58>)
 80035b4:	f003 f9d2 	bl	800695c <HAL_UART_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80035be:	f7ff fc23 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000056c 	.word	0x2000056c
 80035cc:	40013800 	.word	0x40013800

080035d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a17      	ldr	r2, [pc, #92]	; (800364c <HAL_UART_MspInit+0x7c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d127      	bne.n	8003642 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <HAL_UART_MspInit+0x80>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_UART_MspInit+0x80>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fc:	6193      	str	r3, [r2, #24]
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <HAL_UART_MspInit+0x80>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_UART_MspInit+0x80>)
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4a10      	ldr	r2, [pc, #64]	; (8003650 <HAL_UART_MspInit+0x80>)
 8003610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003614:	6153      	str	r3, [r2, #20]
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_UART_MspInit+0x80>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003622:	2330      	movs	r3, #48	; 0x30
 8003624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800362e:	2303      	movs	r3, #3
 8003630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003632:	2307      	movs	r3, #7
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	4805      	ldr	r0, [pc, #20]	; (8003654 <HAL_UART_MspInit+0x84>)
 800363e:	f000 f9d1 	bl	80039e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40013800 	.word	0x40013800
 8003650:	40021000 	.word	0x40021000
 8003654:	48000800 	.word	0x48000800

08003658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003690 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <LoopForever+0x6>)
  ldr r1, =_edata
 800365e:	490e      	ldr	r1, [pc, #56]	; (8003698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <LoopForever+0xe>)
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003664:	e002      	b.n	800366c <LoopCopyDataInit>

08003666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800366a:	3304      	adds	r3, #4

0800366c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800366c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800366e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003670:	d3f9      	bcc.n	8003666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003674:	4c0b      	ldr	r4, [pc, #44]	; (80036a4 <LoopForever+0x16>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003678:	e001      	b.n	800367e <LoopFillZerobss>

0800367a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800367a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800367c:	3204      	adds	r2, #4

0800367e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800367e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003680:	d3fb      	bcc.n	800367a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003682:	f7ff ff63 	bl	800354c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003686:	f004 fb41 	bl	8007d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800368a:	f7ff fa1d 	bl	8002ac8 <main>

0800368e <LoopForever>:

LoopForever:
    b LoopForever
 800368e:	e7fe      	b.n	800368e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003690:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003698:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 800369c:	0800af84 	.word	0x0800af84
  ldr r2, =_sbss
 80036a0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 80036a4:	20000604 	.word	0x20000604

080036a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036a8:	e7fe      	b.n	80036a8 <ADC1_2_IRQHandler>
	...

080036ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_Init+0x28>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <HAL_Init+0x28>)
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f000 f94f 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f000 f808 	bl	80036d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c8:	f7ff fe26 	bl	8003318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000

080036d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_InitTick+0x54>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_InitTick+0x58>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f967 	bl	80039ca <HAL_SYSTICK_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00e      	b.n	8003724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d80a      	bhi.n	8003722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f000 f92f 	bl	8003976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003718:	4a06      	ldr	r2, [pc, #24]	; (8003734 <HAL_InitTick+0x5c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000178 	.word	0x20000178
 8003730:	20000180 	.word	0x20000180
 8003734:	2000017c 	.word	0x2000017c

08003738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000180 	.word	0x20000180
 800375c:	200005f0 	.word	0x200005f0

08003760 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;  
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	200005f0 	.word	0x200005f0

08003778 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff ffee 	bl	8003760 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffde 	bl	8003760 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000180 	.word	0x20000180

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	; (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	; (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	d301      	bcc.n	8003932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2301      	movs	r3, #1
 8003930:	e00f      	b.n	8003952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <SysTick_Config+0x40>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393a:	210f      	movs	r1, #15
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f7ff ff8e 	bl	8003860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <SysTick_Config+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	4b04      	ldr	r3, [pc, #16]	; (800395c <SysTick_Config+0x40>)
 800394c:	2207      	movs	r2, #7
 800394e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e010 	.word	0xe000e010

08003960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff29 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003988:	f7ff ff3e 	bl	8003808 <__NVIC_GetPriorityGrouping>
 800398c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7ff ff8e 	bl	80038b4 <NVIC_EncodePriority>
 8003998:	4602      	mov	r2, r0
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5d 	bl	8003860 <__NVIC_SetPriority>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff31 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffa2 	bl	800391c <SysTick_Config>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f2:	e154      	b.n	8003c9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	4013      	ands	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8146 	beq.w	8003c98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d005      	beq.n	8003a24 <HAL_GPIO_Init+0x40>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d130      	bne.n	8003a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0201 	and.w	r2, r3, #1
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d017      	beq.n	8003ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d123      	bne.n	8003b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	08da      	lsrs	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3208      	adds	r2, #8
 8003ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	220f      	movs	r2, #15
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	08da      	lsrs	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3208      	adds	r2, #8
 8003b10:	6939      	ldr	r1, [r7, #16]
 8003b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	2203      	movs	r2, #3
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0203 	and.w	r2, r3, #3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80a0 	beq.w	8003c98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b58:	4b58      	ldr	r3, [pc, #352]	; (8003cbc <HAL_GPIO_Init+0x2d8>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	4a57      	ldr	r2, [pc, #348]	; (8003cbc <HAL_GPIO_Init+0x2d8>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6193      	str	r3, [r2, #24]
 8003b64:	4b55      	ldr	r3, [pc, #340]	; (8003cbc <HAL_GPIO_Init+0x2d8>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b70:	4a53      	ldr	r2, [pc, #332]	; (8003cc0 <HAL_GPIO_Init+0x2dc>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	220f      	movs	r2, #15
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b9a:	d019      	beq.n	8003bd0 <HAL_GPIO_Init+0x1ec>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a49      	ldr	r2, [pc, #292]	; (8003cc4 <HAL_GPIO_Init+0x2e0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_GPIO_Init+0x1e8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a48      	ldr	r2, [pc, #288]	; (8003cc8 <HAL_GPIO_Init+0x2e4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00d      	beq.n	8003bc8 <HAL_GPIO_Init+0x1e4>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a47      	ldr	r2, [pc, #284]	; (8003ccc <HAL_GPIO_Init+0x2e8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0x1e0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a46      	ldr	r2, [pc, #280]	; (8003cd0 <HAL_GPIO_Init+0x2ec>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_GPIO_Init+0x1dc>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e008      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc0:	2305      	movs	r3, #5
 8003bc2:	e006      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e004      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e002      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	f002 0203 	and.w	r2, r2, #3
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	4093      	lsls	r3, r2
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003be2:	4937      	ldr	r1, [pc, #220]	; (8003cc0 <HAL_GPIO_Init+0x2dc>)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bf0:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c14:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c3e:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c68:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c92:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <HAL_GPIO_Init+0x2f0>)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f47f aea3 	bne.w	80039f4 <HAL_GPIO_Init+0x10>
  }
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	48000400 	.word	0x48000400
 8003cc8:	48000800 	.word	0x48000800
 8003ccc:	48000c00 	.word	0x48000c00
 8003cd0:	48001000 	.word	0x48001000
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ce6:	e0b8      	b.n	8003e5a <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80ab 	beq.w	8003e54 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003cfe:	4a5e      	ldr	r2, [pc, #376]	; (8003e78 <HAL_GPIO_DeInit+0x1a0>)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	3302      	adds	r3, #2
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	220f      	movs	r2, #15
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d26:	d019      	beq.n	8003d5c <HAL_GPIO_DeInit+0x84>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a54      	ldr	r2, [pc, #336]	; (8003e7c <HAL_GPIO_DeInit+0x1a4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <HAL_GPIO_DeInit+0x80>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a53      	ldr	r2, [pc, #332]	; (8003e80 <HAL_GPIO_DeInit+0x1a8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00d      	beq.n	8003d54 <HAL_GPIO_DeInit+0x7c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a52      	ldr	r2, [pc, #328]	; (8003e84 <HAL_GPIO_DeInit+0x1ac>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <HAL_GPIO_DeInit+0x78>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a51      	ldr	r2, [pc, #324]	; (8003e88 <HAL_GPIO_DeInit+0x1b0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_GPIO_DeInit+0x74>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	e008      	b.n	8003d5e <HAL_GPIO_DeInit+0x86>
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	e006      	b.n	8003d5e <HAL_GPIO_DeInit+0x86>
 8003d50:	2303      	movs	r3, #3
 8003d52:	e004      	b.n	8003d5e <HAL_GPIO_DeInit+0x86>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e002      	b.n	8003d5e <HAL_GPIO_DeInit+0x86>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_GPIO_DeInit+0x86>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	f002 0203 	and.w	r2, r2, #3
 8003d64:	0092      	lsls	r2, r2, #2
 8003d66:	4093      	lsls	r3, r2
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d132      	bne.n	8003dd4 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	4945      	ldr	r1, [pc, #276]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d7c:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	4941      	ldr	r1, [pc, #260]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d8a:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	493e      	ldr	r1, [pc, #248]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d98:	4b3c      	ldr	r3, [pc, #240]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	493a      	ldr	r1, [pc, #232]	; (8003e8c <HAL_GPIO_DeInit+0x1b4>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003db6:	4a30      	ldr	r2, [pc, #192]	; (8003e78 <HAL_GPIO_DeInit+0x1a0>)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	482c      	ldr	r0, [pc, #176]	; (8003e78 <HAL_GPIO_DeInit+0x1a0>)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	400a      	ands	r2, r1
 8003dce:	3302      	adds	r3, #2
 8003dd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2103      	movs	r1, #3
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	08da      	lsrs	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3208      	adds	r2, #8
 8003df2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	220f      	movs	r2, #15
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	08d2      	lsrs	r2, r2, #3
 8003e0a:	4019      	ands	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3208      	adds	r2, #8
 8003e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2103      	movs	r1, #3
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	401a      	ands	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	401a      	ands	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2103      	movs	r1, #3
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3301      	adds	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f47f af40 	bne.w	8003ce8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	48000400 	.word	0x48000400
 8003e80:	48000800 	.word	0x48000800
 8003e84:	48000c00 	.word	0x48000c00
 8003e88:	48001000 	.word	0x48001000
 8003e8c:	40010400 	.word	0x40010400

08003e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e001      	b.n	8003eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	43d9      	mvns	r1, r3
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	400b      	ands	r3, r1
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	619a      	str	r2, [r3, #24]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f3a:	4a05      	ldr	r2, [pc, #20]	; (8003f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe feb0 	bl	8002ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40010400 	.word	0x40010400

08003f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e081      	b.n	800406a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe fd3e 	bl	80029fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	e006      	b.n	8003fdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d104      	bne.n	8003fee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69d9      	ldr	r1, [r3, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e021      	b.n	80040c8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fe fcf1 	bl	8002a84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	4608      	mov	r0, r1
 80040da:	4611      	mov	r1, r2
 80040dc:	461a      	mov	r2, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	817b      	strh	r3, [r7, #10]
 80040e2:	460b      	mov	r3, r1
 80040e4:	813b      	strh	r3, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	f040 80f9 	bne.w	80042ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_I2C_Mem_Write+0x34>
 80040fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0ed      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_I2C_Mem_Write+0x4e>
 800411a:	2302      	movs	r3, #2
 800411c:	e0e6      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004126:	f7ff fb1b 	bl	8003760 <HAL_GetTick>
 800412a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2319      	movs	r3, #25
 8004132:	2201      	movs	r2, #1
 8004134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fad1 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d1      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2221      	movs	r2, #33	; 0x21
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2240      	movs	r2, #64	; 0x40
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004170:	88f8      	ldrh	r0, [r7, #6]
 8004172:	893a      	ldrh	r2, [r7, #8]
 8004174:	8979      	ldrh	r1, [r7, #10]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	4603      	mov	r3, r0
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f9e1 	bl	8004548 <I2C_RequestMemoryWrite>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0a9      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2bff      	cmp	r3, #255	; 0xff
 80041a0:	d90e      	bls.n	80041c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	8979      	ldrh	r1, [r7, #10]
 80041b0:	2300      	movs	r3, #0
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fbc3 	bl	8004944 <I2C_TransferConfig>
 80041be:	e00f      	b.n	80041e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	8979      	ldrh	r1, [r7, #10]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fbb2 	bl	8004944 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fabb 	bl	8004760 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e07b      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d034      	beq.n	8004298 <HAL_I2C_Mem_Write+0x1c8>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	d130      	bne.n	8004298 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	2200      	movs	r2, #0
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fa4d 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e04d      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2bff      	cmp	r3, #255	; 0xff
 8004258:	d90e      	bls.n	8004278 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	22ff      	movs	r2, #255	; 0xff
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	b2da      	uxtb	r2, r3
 8004266:	8979      	ldrh	r1, [r7, #10]
 8004268:	2300      	movs	r3, #0
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fb67 	bl	8004944 <I2C_TransferConfig>
 8004276:	e00f      	b.n	8004298 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	b2da      	uxtb	r2, r3
 8004288:	8979      	ldrh	r1, [r7, #10]
 800428a:	2300      	movs	r3, #0
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fb56 	bl	8004944 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d19e      	bne.n	80041e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fa9a 	bl	80047e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e01a      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2220      	movs	r2, #32
 80042bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_I2C_Mem_Write+0x224>)
 80042ca:	400b      	ands	r3, r1
 80042cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	fe00e800 	.word	0xfe00e800

080042f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4603      	mov	r3, r0
 8004308:	817b      	strh	r3, [r7, #10]
 800430a:	460b      	mov	r3, r1
 800430c:	813b      	strh	r3, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b20      	cmp	r3, #32
 800431c:	f040 80fd 	bne.w	800451a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_I2C_Mem_Read+0x34>
 8004326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004332:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0f1      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_I2C_Mem_Read+0x4e>
 8004342:	2302      	movs	r3, #2
 8004344:	e0ea      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800434e:	f7ff fa07 	bl	8003760 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2319      	movs	r3, #25
 800435a:	2201      	movs	r2, #1
 800435c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f9bd 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0d5      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2222      	movs	r2, #34	; 0x22
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2240      	movs	r2, #64	; 0x40
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a3a      	ldr	r2, [r7, #32]
 800438a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004398:	88f8      	ldrh	r0, [r7, #6]
 800439a:	893a      	ldrh	r2, [r7, #8]
 800439c:	8979      	ldrh	r1, [r7, #10]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4603      	mov	r3, r0
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f921 	bl	80045f0 <I2C_RequestMemoryRead>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0ad      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2bff      	cmp	r3, #255	; 0xff
 80043c8:	d90e      	bls.n	80043e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	22ff      	movs	r2, #255	; 0xff
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	8979      	ldrh	r1, [r7, #10]
 80043d8:	4b52      	ldr	r3, [pc, #328]	; (8004524 <HAL_I2C_Mem_Read+0x22c>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 faaf 	bl	8004944 <I2C_TransferConfig>
 80043e6:	e00f      	b.n	8004408 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	8979      	ldrh	r1, [r7, #10]
 80043fa:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_I2C_Mem_Read+0x22c>)
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fa9e 	bl	8004944 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	2200      	movs	r2, #0
 8004410:	2104      	movs	r1, #4
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f964 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e07c      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d034      	beq.n	80044c8 <HAL_I2C_Mem_Read+0x1d0>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	d130      	bne.n	80044c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f935 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e04d      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	2bff      	cmp	r3, #255	; 0xff
 8004488:	d90e      	bls.n	80044a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	22ff      	movs	r2, #255	; 0xff
 800448e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	b2da      	uxtb	r2, r3
 8004496:	8979      	ldrh	r1, [r7, #10]
 8004498:	2300      	movs	r3, #0
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fa4f 	bl	8004944 <I2C_TransferConfig>
 80044a6:	e00f      	b.n	80044c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	8979      	ldrh	r1, [r7, #10]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fa3e 	bl	8004944 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d19a      	bne.n	8004408 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f982 	bl	80047e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e01a      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_I2C_Mem_Read+0x230>)
 80044fa:	400b      	ands	r3, r1
 80044fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	80002400 	.word	0x80002400
 8004528:	fe00e800 	.word	0xfe00e800

0800452c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453a:	b2db      	uxtb	r3, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	461a      	mov	r2, r3
 8004556:	4603      	mov	r3, r0
 8004558:	817b      	strh	r3, [r7, #10]
 800455a:	460b      	mov	r3, r1
 800455c:	813b      	strh	r3, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	4b20      	ldr	r3, [pc, #128]	; (80045ec <I2C_RequestMemoryWrite+0xa4>)
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f9e7 	bl	8004944 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f8f0 	bl	8004760 <I2C_WaitOnTXISFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e02c      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	629a      	str	r2, [r3, #40]	; 0x28
 800459a:	e015      	b.n	80045c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f8d6 	bl	8004760 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e012      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045be:	893b      	ldrh	r3, [r7, #8]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f884 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	80002000 	.word	0x80002000

080045f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	8979      	ldrh	r1, [r7, #10]
 8004610:	4b20      	ldr	r3, [pc, #128]	; (8004694 <I2C_RequestMemoryRead+0xa4>)
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f994 	bl	8004944 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	69b9      	ldr	r1, [r7, #24]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f89d 	bl	8004760 <I2C_WaitOnTXISFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e02c      	b.n	800468a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004636:	893b      	ldrh	r3, [r7, #8]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
 8004640:	e015      	b.n	800466e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	b29b      	uxth	r3, r3
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f883 	bl	8004760 <I2C_WaitOnTXISFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e012      	b.n	800468a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004664:	893b      	ldrh	r3, [r7, #8]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2200      	movs	r2, #0
 8004676:	2140      	movs	r1, #64	; 0x40
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f831 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	80002000 	.word	0x80002000

08004698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d103      	bne.n	80046b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d007      	beq.n	80046d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	619a      	str	r2, [r3, #24]
  }
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f0:	e022      	b.n	8004738 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d01e      	beq.n	8004738 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7ff f831 	bl	8003760 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d113      	bne.n	8004738 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e00f      	b.n	8004758 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4013      	ands	r3, r2
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	429a      	cmp	r2, r3
 8004754:	d0cd      	beq.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800476c:	e02c      	b.n	80047c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f870 	bl	8004858 <I2C_IsAcknowledgeFailed>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e02a      	b.n	80047d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d01e      	beq.n	80047c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fe ffe9 	bl	8003760 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d113      	bne.n	80047c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e007      	b.n	80047d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d1cb      	bne.n	800476e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ec:	e028      	b.n	8004840 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f830 	bl	8004858 <I2C_IsAcknowledgeFailed>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e026      	b.n	8004850 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fe ffad 	bl	8003760 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d113      	bne.n	8004840 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e007      	b.n	8004850 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b20      	cmp	r3, #32
 800484c:	d1cf      	bne.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b10      	cmp	r3, #16
 8004870:	d161      	bne.n	8004936 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004880:	d02b      	beq.n	80048da <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004890:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004892:	e022      	b.n	80048da <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d01e      	beq.n	80048da <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489c:	f7fe ff60 	bl	8003760 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <I2C_IsAcknowledgeFailed+0x5a>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d113      	bne.n	80048da <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e02e      	b.n	8004938 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d1d5      	bne.n	8004894 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2210      	movs	r2, #16
 80048ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2220      	movs	r2, #32
 80048f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fecd 	bl	8004698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <I2C_IsAcknowledgeFailed+0xe8>)
 800490a:	400b      	ands	r3, r1
 800490c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	fe00e800 	.word	0xfe00e800

08004944 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	4613      	mov	r3, r2
 8004954:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	0d5b      	lsrs	r3, r3, #21
 8004960:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004964:	4b0d      	ldr	r3, [pc, #52]	; (800499c <I2C_TransferConfig+0x58>)
 8004966:	430b      	orrs	r3, r1
 8004968:	43db      	mvns	r3, r3
 800496a:	ea02 0103 	and.w	r1, r2, r3
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004974:	7a7b      	ldrb	r3, [r7, #9]
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	431a      	orrs	r2, r3
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	03ff63ff 	.word	0x03ff63ff

080049a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d138      	bne.n	8004a28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e032      	b.n	8004a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d139      	bne.n	8004ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e033      	b.n	8004ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	1d3b      	adds	r3, r7, #4
 8004ada:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f000 bef4 	b.w	80058d2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 816a 	beq.w	8004dce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004afa:	4bb3      	ldr	r3, [pc, #716]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d00c      	beq.n	8004b20 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b06:	4bb0      	ldr	r3, [pc, #704]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d159      	bne.n	8004bc6 <HAL_RCC_OscConfig+0xf6>
 8004b12:	4bad      	ldr	r3, [pc, #692]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d152      	bne.n	8004bc6 <HAL_RCC_OscConfig+0xf6>
 8004b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b24:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <HAL_RCC_OscConfig+0x82>
 8004b4c:	4b9e      	ldr	r3, [pc, #632]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	e015      	b.n	8004b7e <HAL_RCC_OscConfig+0xae>
 8004b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b56:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b6a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004b6e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004b7a:	4b93      	ldr	r3, [pc, #588]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b82:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004b86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004b8a:	fa92 f2a2 	rbit	r2, r2
 8004b8e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004b92:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004b96:	fab2 f282 	clz	r2, r2
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	f042 0220 	orr.w	r2, r2, #32
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	f002 021f 	and.w	r2, r2, #31
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 810c 	beq.w	8004dcc <HAL_RCC_OscConfig+0x2fc>
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 8106 	bne.w	8004dcc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f000 be86 	b.w	80058d2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x110>
 8004bd2:	4b7d      	ldr	r3, [pc, #500]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7c      	ldr	r2, [pc, #496]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e030      	b.n	8004c42 <HAL_RCC_OscConfig+0x172>
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x134>
 8004bea:	4b77      	ldr	r3, [pc, #476]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a76      	ldr	r2, [pc, #472]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b74      	ldr	r3, [pc, #464]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a73      	ldr	r2, [pc, #460]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e01e      	b.n	8004c42 <HAL_RCC_OscConfig+0x172>
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c0e:	d10c      	bne.n	8004c2a <HAL_RCC_OscConfig+0x15a>
 8004c10:	4b6d      	ldr	r3, [pc, #436]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a6c      	ldr	r2, [pc, #432]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	4b6a      	ldr	r3, [pc, #424]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a69      	ldr	r2, [pc, #420]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e00b      	b.n	8004c42 <HAL_RCC_OscConfig+0x172>
 8004c2a:	4b67      	ldr	r3, [pc, #412]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a66      	ldr	r2, [pc, #408]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a63      	ldr	r2, [pc, #396]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c40:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c42:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	f023 020f 	bic.w	r2, r3, #15
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	495d      	ldr	r1, [pc, #372]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d059      	beq.n	8004d14 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fe fd7e 	bl	8003760 <HAL_GetTick>
 8004c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6a:	f7fe fd79 	bl	8003760 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d902      	bls.n	8004c80 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	f000 be29 	b.w	80058d2 <HAL_RCC_OscConfig+0xe02>
 8004c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004c8c:	fa93 f3a3 	rbit	r3, r3
 8004c90:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004c94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c98:	fab3 f383 	clz	r3, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d102      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x1e2>
 8004cac:	4b46      	ldr	r3, [pc, #280]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x20e>
 8004cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cb6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004cce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ce2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004ce6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004cea:	fa92 f2a2 	rbit	r2, r2
 8004cee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004cf2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004cf6:	fab2 f282 	clz	r2, r2
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	f042 0220 	orr.w	r2, r2, #32
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	f002 021f 	and.w	r2, r2, #31
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ab      	beq.n	8004c6a <HAL_RCC_OscConfig+0x19a>
 8004d12:	e05c      	b.n	8004dce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d14:	f7fe fd24 	bl	8003760 <HAL_GetTick>
 8004d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1e:	f7fe fd1f 	bl	8003760 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d902      	bls.n	8004d34 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	f000 bdcf 	b.w	80058d2 <HAL_RCC_OscConfig+0xe02>
 8004d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004d48:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCC_OscConfig+0x296>
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	e015      	b.n	8004d92 <HAL_RCC_OscConfig+0x2c2>
 8004d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004d82:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d86:	fa93 f3a3 	rbit	r3, r3
 8004d8a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <HAL_RCC_OscConfig+0x2f8>)
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004d9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004d9e:	fa92 f2a2 	rbit	r2, r2
 8004da2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004da6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004daa:	fab2 f282 	clz	r2, r2
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	f042 0220 	orr.w	r2, r2, #32
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	f002 021f 	and.w	r2, r2, #31
 8004dba:	2101      	movs	r1, #1
 8004dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ab      	bne.n	8004d1e <HAL_RCC_OscConfig+0x24e>
 8004dc6:	e002      	b.n	8004dce <HAL_RCC_OscConfig+0x2fe>
 8004dc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 816f 	beq.w	80050bc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004dde:	4bd0      	ldr	r3, [pc, #832]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004dea:	4bcd      	ldr	r3, [pc, #820]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d16c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x400>
 8004df6:	4bca      	ldr	r3, [pc, #808]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d166      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x400>
 8004e02:	2302      	movs	r3, #2
 8004e04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004e14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e18:	fab3 f383 	clz	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <HAL_RCC_OscConfig+0x362>
 8004e2c:	4bbc      	ldr	r3, [pc, #752]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	e013      	b.n	8004e5a <HAL_RCC_OscConfig+0x38a>
 8004e32:	2302      	movs	r3, #2
 8004e34:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004e44:	2302      	movs	r3, #2
 8004e46:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004e4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004e56:	4bb2      	ldr	r3, [pc, #712]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004e60:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004e64:	fa92 f2a2 	rbit	r2, r2
 8004e68:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004e6c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004e70:	fab2 f282 	clz	r2, r2
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	f042 0220 	orr.w	r2, r2, #32
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	f002 021f 	and.w	r2, r2, #31
 8004e80:	2101      	movs	r1, #1
 8004e82:	fa01 f202 	lsl.w	r2, r1, r2
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_RCC_OscConfig+0x3cc>
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d002      	beq.n	8004e9c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f000 bd1b 	b.w	80058d2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4ba0      	ldr	r3, [pc, #640]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	21f8      	movs	r1, #248	; 0xf8
 8004eac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004eb4:	fa91 f1a1 	rbit	r1, r1
 8004eb8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004ebc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004ec0:	fab1 f181 	clz	r1, r1
 8004ec4:	b2c9      	uxtb	r1, r1
 8004ec6:	408b      	lsls	r3, r1
 8004ec8:	4995      	ldr	r1, [pc, #596]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	e0f5      	b.n	80050bc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8085 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x516>
 8004edc:	2301      	movs	r3, #1
 8004ede:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ee6:	fa93 f3a3 	rbit	r3, r3
 8004eea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004eee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef2:	fab3 f383 	clz	r3, r3
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004efc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	461a      	mov	r2, r3
 8004f04:	2301      	movs	r3, #1
 8004f06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fe fc2a 	bl	8003760 <HAL_GetTick>
 8004f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f12:	f7fe fc25 	bl	8003760 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d902      	bls.n	8004f28 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	f000 bcd5 	b.w	80058d2 <HAL_RCC_OscConfig+0xe02>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004f32:	fa93 f3a3 	rbit	r3, r3
 8004f36:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004f3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3e:	fab3 f383 	clz	r3, r3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d102      	bne.n	8004f58 <HAL_RCC_OscConfig+0x488>
 8004f52:	4b73      	ldr	r3, [pc, #460]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	e013      	b.n	8004f80 <HAL_RCC_OscConfig+0x4b0>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004f62:	fa93 f3a3 	rbit	r3, r3
 8004f66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004f70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004f7c:	4b68      	ldr	r3, [pc, #416]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2202      	movs	r2, #2
 8004f82:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004f86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004f8a:	fa92 f2a2 	rbit	r2, r2
 8004f8e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004f92:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f96:	fab2 f282 	clz	r2, r2
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	f042 0220 	orr.w	r2, r2, #32
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	f002 021f 	and.w	r2, r2, #31
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0af      	beq.n	8004f12 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb2:	4b5b      	ldr	r3, [pc, #364]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	21f8      	movs	r1, #248	; 0xf8
 8004fc2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004fca:	fa91 f1a1 	rbit	r1, r1
 8004fce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004fd2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004fd6:	fab1 f181 	clz	r1, r1
 8004fda:	b2c9      	uxtb	r1, r1
 8004fdc:	408b      	lsls	r3, r1
 8004fde:	4950      	ldr	r1, [pc, #320]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]
 8004fe4:	e06a      	b.n	80050bc <HAL_RCC_OscConfig+0x5ec>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ff0:	fa93 f3a3 	rbit	r3, r3
 8004ff4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004ff8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffc:	fab3 f383 	clz	r3, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005006:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	461a      	mov	r2, r3
 800500e:	2300      	movs	r3, #0
 8005010:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe fba5 	bl	8003760 <HAL_GetTick>
 8005016:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	e00a      	b.n	8005032 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501c:	f7fe fba0 	bl	8003760 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d902      	bls.n	8005032 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	f000 bc50 	b.w	80058d2 <HAL_RCC_OscConfig+0xe02>
 8005032:	2302      	movs	r3, #2
 8005034:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005038:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800503c:	fa93 f3a3 	rbit	r3, r3
 8005040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d102      	bne.n	8005062 <HAL_RCC_OscConfig+0x592>
 800505c:	4b30      	ldr	r3, [pc, #192]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	e013      	b.n	800508a <HAL_RCC_OscConfig+0x5ba>
 8005062:	2302      	movs	r3, #2
 8005064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005074:	2302      	movs	r3, #2
 8005076:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800507a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <HAL_RCC_OscConfig+0x650>)
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2202      	movs	r2, #2
 800508c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005090:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005094:	fa92 f2a2 	rbit	r2, r2
 8005098:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800509c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80050a0:	fab2 f282 	clz	r2, r2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	f042 0220 	orr.w	r2, r2, #32
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	f002 021f 	and.w	r2, r2, #31
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f202 	lsl.w	r2, r1, r2
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1af      	bne.n	800501c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80da 	beq.w	8005280 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d069      	beq.n	80051aa <HAL_RCC_OscConfig+0x6da>
 80050d6:	2301      	movs	r3, #1
 80050d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050e0:	fa93 f3a3 	rbit	r3, r3
 80050e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80050e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ec:	fab3 f383 	clz	r3, r3
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_OscConfig+0x654>)
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	461a      	mov	r2, r3
 80050fc:	2301      	movs	r3, #1
 80050fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005100:	f7fe fb2e 	bl	8003760 <HAL_GetTick>
 8005104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005108:	e00e      	b.n	8005128 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510a:	f7fe fb29 	bl	8003760 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d906      	bls.n	8005128 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e3d9      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	10908120 	.word	0x10908120
 8005128:	2302      	movs	r3, #2
 800512a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800513a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800513e:	2202      	movs	r2, #2
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	fa93 f2a3 	rbit	r2, r3
 800514c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005156:	2202      	movs	r2, #2
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	fa93 f2a3 	rbit	r2, r3
 8005164:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005168:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800516a:	4ba5      	ldr	r3, [pc, #660]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800516c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800516e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005172:	2102      	movs	r1, #2
 8005174:	6019      	str	r1, [r3, #0]
 8005176:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fa93 f1a3 	rbit	r1, r3
 8005180:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005184:	6019      	str	r1, [r3, #0]
  return result;
 8005186:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2101      	movs	r1, #1
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0b0      	beq.n	800510a <HAL_RCC_OscConfig+0x63a>
 80051a8:	e06a      	b.n	8005280 <HAL_RCC_OscConfig+0x7b0>
 80051aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	fa93 f2a3 	rbit	r2, r3
 80051bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80051c0:	601a      	str	r2, [r3, #0]
  return result;
 80051c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80051c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b8c      	ldr	r3, [pc, #560]	; (8005404 <HAL_RCC_OscConfig+0x934>)
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051dc:	f7fe fac0 	bl	8003760 <HAL_GetTick>
 80051e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e4:	e009      	b.n	80051fa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e6:	f7fe fabb 	bl	8003760 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e36b      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
 80051fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80051fe:	2202      	movs	r2, #2
 8005200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005202:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	fa93 f2a3 	rbit	r2, r3
 800520c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005216:	2202      	movs	r2, #2
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	fa93 f2a3 	rbit	r2, r3
 8005224:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800522e:	2202      	movs	r2, #2
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fa93 f2a3 	rbit	r2, r3
 800523c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005240:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005242:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005246:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800524a:	2102      	movs	r1, #2
 800524c:	6019      	str	r1, [r3, #0]
 800524e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	fa93 f1a3 	rbit	r1, r3
 8005258:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800525c:	6019      	str	r1, [r3, #0]
  return result;
 800525e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	fab3 f383 	clz	r3, r3
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1b2      	bne.n	80051e6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8158 	beq.w	8005540 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005290:	2300      	movs	r3, #0
 8005292:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005296:	4b5a      	ldr	r3, [pc, #360]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d112      	bne.n	80052c8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	4a56      	ldr	r2, [pc, #344]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ac:	61d3      	str	r3, [r2, #28]
 80052ae:	4b54      	ldr	r3, [pc, #336]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80052b6:	f107 0308 	add.w	r3, r7, #8
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	f107 0308 	add.w	r3, r7, #8
 80052c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	4b4f      	ldr	r3, [pc, #316]	; (8005408 <HAL_RCC_OscConfig+0x938>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11a      	bne.n	800530a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d4:	4b4c      	ldr	r3, [pc, #304]	; (8005408 <HAL_RCC_OscConfig+0x938>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a4b      	ldr	r2, [pc, #300]	; (8005408 <HAL_RCC_OscConfig+0x938>)
 80052da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e0:	f7fe fa3e 	bl	8003760 <HAL_GetTick>
 80052e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e8:	e009      	b.n	80052fe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ea:	f7fe fa39 	bl	8003760 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e2e9      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fe:	4b42      	ldr	r3, [pc, #264]	; (8005408 <HAL_RCC_OscConfig+0x938>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ef      	beq.n	80052ea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530a:	1d3b      	adds	r3, r7, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d106      	bne.n	8005322 <HAL_RCC_OscConfig+0x852>
 8005314:	4b3a      	ldr	r3, [pc, #232]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4a39      	ldr	r2, [pc, #228]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6213      	str	r3, [r2, #32]
 8005320:	e02f      	b.n	8005382 <HAL_RCC_OscConfig+0x8b2>
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10c      	bne.n	8005346 <HAL_RCC_OscConfig+0x876>
 800532c:	4b34      	ldr	r3, [pc, #208]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4a33      	ldr	r2, [pc, #204]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	6213      	str	r3, [r2, #32]
 8005338:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4a30      	ldr	r2, [pc, #192]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800533e:	f023 0304 	bic.w	r3, r3, #4
 8005342:	6213      	str	r3, [r2, #32]
 8005344:	e01d      	b.n	8005382 <HAL_RCC_OscConfig+0x8b2>
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b05      	cmp	r3, #5
 800534e:	d10c      	bne.n	800536a <HAL_RCC_OscConfig+0x89a>
 8005350:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	6213      	str	r3, [r2, #32]
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4a27      	ldr	r2, [pc, #156]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	6213      	str	r3, [r2, #32]
 8005368:	e00b      	b.n	8005382 <HAL_RCC_OscConfig+0x8b2>
 800536a:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a24      	ldr	r2, [pc, #144]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6213      	str	r3, [r2, #32]
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d06b      	beq.n	8005464 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538c:	f7fe f9e8 	bl	8003760 <HAL_GetTick>
 8005390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005394:	e00b      	b.n	80053ae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fe f9e3 	bl	8003760 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e291      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
 80053ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80053b2:	2202      	movs	r2, #2
 80053b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	fa93 f2a3 	rbit	r2, r3
 80053c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80053ca:	2202      	movs	r2, #2
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	fa93 f2a3 	rbit	r2, r3
 80053d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80053dc:	601a      	str	r2, [r3, #0]
  return result;
 80053de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80053e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f043 0302 	orr.w	r3, r3, #2
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d109      	bne.n	800540c <HAL_RCC_OscConfig+0x93c>
 80053f8:	4b01      	ldr	r3, [pc, #4]	; (8005400 <HAL_RCC_OscConfig+0x930>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	e014      	b.n	8005428 <HAL_RCC_OscConfig+0x958>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	10908120 	.word	0x10908120
 8005408:	40007000 	.word	0x40007000
 800540c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005410:	2202      	movs	r2, #2
 8005412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	fa93 f2a3 	rbit	r2, r3
 800541e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	4bbb      	ldr	r3, [pc, #748]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800542c:	2102      	movs	r1, #2
 800542e:	6011      	str	r1, [r2, #0]
 8005430:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	fa92 f1a2 	rbit	r1, r2
 800543a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800543e:	6011      	str	r1, [r2, #0]
  return result;
 8005440:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	fab2 f282 	clz	r2, r2
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	f002 021f 	and.w	r2, r2, #31
 8005456:	2101      	movs	r1, #1
 8005458:	fa01 f202 	lsl.w	r2, r1, r2
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d099      	beq.n	8005396 <HAL_RCC_OscConfig+0x8c6>
 8005462:	e063      	b.n	800552c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005464:	f7fe f97c 	bl	8003760 <HAL_GetTick>
 8005468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800546c:	e00b      	b.n	8005486 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800546e:	f7fe f977 	bl	8003760 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e225      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
 8005486:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800548a:	2202      	movs	r2, #2
 800548c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	fa93 f2a3 	rbit	r2, r3
 8005498:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80054a2:	2202      	movs	r2, #2
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	fa93 f2a3 	rbit	r2, r3
 80054b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80054b4:	601a      	str	r2, [r3, #0]
  return result;
 80054b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80054ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f043 0302 	orr.w	r3, r3, #2
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d102      	bne.n	80054d6 <HAL_RCC_OscConfig+0xa06>
 80054d0:	4b90      	ldr	r3, [pc, #576]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	e00d      	b.n	80054f2 <HAL_RCC_OscConfig+0xa22>
 80054d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80054da:	2202      	movs	r2, #2
 80054dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	fa93 f2a3 	rbit	r2, r3
 80054e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	4b89      	ldr	r3, [pc, #548]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80054f6:	2102      	movs	r1, #2
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	fa92 f1a2 	rbit	r1, r2
 8005504:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005508:	6011      	str	r1, [r2, #0]
  return result;
 800550a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	fab2 f282 	clz	r2, r2
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f002 021f 	and.w	r2, r2, #31
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f202 	lsl.w	r2, r1, r2
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1a0      	bne.n	800546e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800552c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005530:	2b01      	cmp	r3, #1
 8005532:	d105      	bne.n	8005540 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005534:	4b77      	ldr	r3, [pc, #476]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	4a76      	ldr	r2, [pc, #472]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 800553a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005540:	1d3b      	adds	r3, r7, #4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 81c2 	beq.w	80058d0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800554c:	4b71      	ldr	r3, [pc, #452]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b08      	cmp	r3, #8
 8005556:	f000 819c 	beq.w	8005892 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	2b02      	cmp	r3, #2
 8005562:	f040 8114 	bne.w	800578e <HAL_RCC_OscConfig+0xcbe>
 8005566:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800556a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800556e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	fa93 f2a3 	rbit	r2, r3
 800557a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800557e:	601a      	str	r2, [r3, #0]
  return result;
 8005580:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005584:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005590:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7fe f8e0 	bl	8003760 <HAL_GetTick>
 80055a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055a4:	e009      	b.n	80055ba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fe f8db 	bl	8003760 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e18b      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
 80055ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80055be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	fa93 f2a3 	rbit	r2, r3
 80055ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055d2:	601a      	str	r2, [r3, #0]
  return result;
 80055d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055da:	fab3 f383 	clz	r3, r3
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d102      	bne.n	80055f4 <HAL_RCC_OscConfig+0xb24>
 80055ee:	4b49      	ldr	r3, [pc, #292]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	e01b      	b.n	800562c <HAL_RCC_OscConfig+0xb5c>
 80055f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80055f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	fa93 f2a3 	rbit	r2, r3
 8005608:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	fa93 f2a3 	rbit	r2, r3
 8005622:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	4b3a      	ldr	r3, [pc, #232]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005630:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	fa92 f1a2 	rbit	r1, r2
 8005640:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005644:	6011      	str	r1, [r2, #0]
  return result;
 8005646:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	fab2 f282 	clz	r2, r2
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	f042 0220 	orr.w	r2, r2, #32
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	f002 021f 	and.w	r2, r2, #31
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f202 	lsl.w	r2, r1, r2
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d19e      	bne.n	80055a6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005670:	1d3b      	adds	r3, r7, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005676:	1d3b      	adds	r3, r7, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	430b      	orrs	r3, r1
 800567e:	4925      	ldr	r1, [pc, #148]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 8005680:	4313      	orrs	r3, r2
 8005682:	604b      	str	r3, [r1, #4]
 8005684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800568c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	fa93 f2a3 	rbit	r2, r3
 8005698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800569c:	601a      	str	r2, [r3, #0]
  return result;
 800569e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056a2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a4:	fab3 f383 	clz	r3, r3
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	461a      	mov	r2, r3
 80056b6:	2301      	movs	r3, #1
 80056b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fe f851 	bl	8003760 <HAL_GetTick>
 80056be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c2:	e009      	b.n	80056d8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fe f84c 	bl	8003760 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e0fc      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
 80056d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	fa93 f2a3 	rbit	r2, r3
 80056ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80056f0:	601a      	str	r2, [r3, #0]
  return result;
 80056f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80056f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056f8:	fab3 f383 	clz	r3, r3
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d105      	bne.n	8005718 <HAL_RCC_OscConfig+0xc48>
 800570c:	4b01      	ldr	r3, [pc, #4]	; (8005714 <HAL_RCC_OscConfig+0xc44>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	e01e      	b.n	8005750 <HAL_RCC_OscConfig+0xc80>
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800571c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	fa93 f2a3 	rbit	r2, r3
 800572c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	fa93 f2a3 	rbit	r2, r3
 8005746:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	4b63      	ldr	r3, [pc, #396]	; (80058dc <HAL_RCC_OscConfig+0xe0c>)
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005754:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	fa92 f1a2 	rbit	r1, r2
 8005764:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005768:	6011      	str	r1, [r2, #0]
  return result;
 800576a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	f042 0220 	orr.w	r2, r2, #32
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f002 021f 	and.w	r2, r2, #31
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d09b      	beq.n	80056c4 <HAL_RCC_OscConfig+0xbf4>
 800578c:	e0a0      	b.n	80058d0 <HAL_RCC_OscConfig+0xe00>
 800578e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005792:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	fa93 f2a3 	rbit	r2, r3
 80057a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057a6:	601a      	str	r2, [r3, #0]
  return result;
 80057a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	461a      	mov	r2, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fd ffcc 	bl	8003760 <HAL_GetTick>
 80057c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057cc:	e009      	b.n	80057e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ce:	f7fd ffc7 	bl	8003760 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e077      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
 80057e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	fa93 f2a3 	rbit	r2, r3
 80057f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057fa:	601a      	str	r2, [r3, #0]
  return result;
 80057fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005800:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <HAL_RCC_OscConfig+0xd4c>
 8005816:	4b31      	ldr	r3, [pc, #196]	; (80058dc <HAL_RCC_OscConfig+0xe0c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	e01b      	b.n	8005854 <HAL_RCC_OscConfig+0xd84>
 800581c:	f107 0320 	add.w	r3, r7, #32
 8005820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005826:	f107 0320 	add.w	r3, r7, #32
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	fa93 f2a3 	rbit	r2, r3
 8005830:	f107 031c 	add.w	r3, r7, #28
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	f107 0318 	add.w	r3, r7, #24
 800583a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f107 0318 	add.w	r3, r7, #24
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	fa93 f2a3 	rbit	r2, r3
 800584a:	f107 0314 	add.w	r3, r7, #20
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	4b22      	ldr	r3, [pc, #136]	; (80058dc <HAL_RCC_OscConfig+0xe0c>)
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	f107 0210 	add.w	r2, r7, #16
 8005858:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	f107 0210 	add.w	r2, r7, #16
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	fa92 f1a2 	rbit	r1, r2
 8005868:	f107 020c 	add.w	r2, r7, #12
 800586c:	6011      	str	r1, [r2, #0]
  return result;
 800586e:	f107 020c 	add.w	r2, r7, #12
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	fab2 f282 	clz	r2, r2
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	f042 0220 	orr.w	r2, r2, #32
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	f002 021f 	and.w	r2, r2, #31
 8005884:	2101      	movs	r1, #1
 8005886:	fa01 f202 	lsl.w	r2, r1, r2
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d19e      	bne.n	80057ce <HAL_RCC_OscConfig+0xcfe>
 8005890:	e01e      	b.n	80058d0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e018      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <HAL_RCC_OscConfig+0xe0c>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80058ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058b0:	1d3b      	adds	r3, r7, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d108      	bne.n	80058cc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80058ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80058be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000

080058e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b09e      	sub	sp, #120	; 0x78
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e162      	b.n	8005bbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058f8:	4b90      	ldr	r3, [pc, #576]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d910      	bls.n	8005928 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005906:	4b8d      	ldr	r3, [pc, #564]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 0207 	bic.w	r2, r3, #7
 800590e:	498b      	ldr	r1, [pc, #556]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b89      	ldr	r3, [pc, #548]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e14a      	b.n	8005bbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005934:	4b82      	ldr	r3, [pc, #520]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	497f      	ldr	r1, [pc, #508]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005942:	4313      	orrs	r3, r2
 8005944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80dc 	beq.w	8005b0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d13c      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xf6>
 800595c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005960:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005964:	fa93 f3a3 	rbit	r3, r3
 8005968:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596c:	fab3 f383 	clz	r3, r3
 8005970:	b2db      	uxtb	r3, r3
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <HAL_RCC_ClockConfig+0xa6>
 8005980:	4b6f      	ldr	r3, [pc, #444]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	e00f      	b.n	80059a6 <HAL_RCC_ClockConfig+0xc6>
 8005986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800598a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	667b      	str	r3, [r7, #100]	; 0x64
 8005994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005998:	663b      	str	r3, [r7, #96]	; 0x60
 800599a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800599c:	fa93 f3a3 	rbit	r3, r3
 80059a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a2:	4b67      	ldr	r3, [pc, #412]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80059ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059ae:	fa92 f2a2 	rbit	r2, r2
 80059b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80059b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059b6:	fab2 f282 	clz	r2, r2
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	f042 0220 	orr.w	r2, r2, #32
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	f002 021f 	and.w	r2, r2, #31
 80059c6:	2101      	movs	r1, #1
 80059c8:	fa01 f202 	lsl.w	r2, r1, r2
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d17b      	bne.n	8005aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0f3      	b.n	8005bbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d13c      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x178>
 80059de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e6:	fa93 f3a3 	rbit	r3, r3
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80059ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ee:	fab3 f383 	clz	r3, r3
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x128>
 8005a02:	4b4f      	ldr	r3, [pc, #316]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	e00f      	b.n	8005a28 <HAL_RCC_ClockConfig+0x148>
 8005a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	647b      	str	r3, [r7, #68]	; 0x44
 8005a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1e:	fa93 f3a3 	rbit	r3, r3
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a24:	4b46      	ldr	r3, [pc, #280]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a30:	fa92 f2a2 	rbit	r2, r2
 8005a34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a38:	fab2 f282 	clz	r2, r2
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	f042 0220 	orr.w	r2, r2, #32
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	f002 021f 	and.w	r2, r2, #31
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d13a      	bne.n	8005aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0b2      	b.n	8005bbe <HAL_RCC_ClockConfig+0x2de>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	fa93 f3a3 	rbit	r3, r3
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a66:	fab3 f383 	clz	r3, r3
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d102      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x1a0>
 8005a7a:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	e00d      	b.n	8005a9c <HAL_RCC_ClockConfig+0x1bc>
 8005a80:	2302      	movs	r3, #2
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	fa93 f3a3 	rbit	r3, r3
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	623b      	str	r3, [r7, #32]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	61ba      	str	r2, [r7, #24]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	fa92 f2a2 	rbit	r2, r2
 8005aa6:	617a      	str	r2, [r7, #20]
  return result;
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	fab2 f282 	clz	r2, r2
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	f042 0220 	orr.w	r2, r2, #32
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	f002 021f 	and.w	r2, r2, #31
 8005aba:	2101      	movs	r1, #1
 8005abc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e079      	b.n	8005bbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aca:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f023 0203 	bic.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	491a      	ldr	r1, [pc, #104]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005adc:	f7fd fe40 	bl	8003760 <HAL_GetTick>
 8005ae0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae4:	f7fd fe3c 	bl	8003760 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e061      	b.n	8005bbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afa:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <HAL_RCC_ClockConfig+0x260>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f003 020c 	and.w	r2, r3, #12
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d1eb      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d214      	bcs.n	8005b44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 0207 	bic.w	r2, r3, #7
 8005b22:	4906      	ldr	r1, [pc, #24]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2a:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <HAL_RCC_ClockConfig+0x25c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d005      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e040      	b.n	8005bbe <HAL_RCC_ClockConfig+0x2de>
 8005b3c:	40022000 	.word	0x40022000
 8005b40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	491a      	ldr	r1, [pc, #104]	; (8005bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4912      	ldr	r1, [pc, #72]	; (8005bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b82:	f000 f829 	bl	8005bd8 <HAL_RCC_GetSysClockFreq>
 8005b86:	4601      	mov	r1, r0
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b90:	22f0      	movs	r2, #240	; 0xf0
 8005b92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	fa92 f2a2 	rbit	r2, r2
 8005b9a:	60fa      	str	r2, [r7, #12]
  return result;
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	fab2 f282 	clz	r2, r2
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	40d3      	lsrs	r3, r2
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <HAL_RCC_ClockConfig+0x2ec>)
 8005ba8:	5cd3      	ldrb	r3, [r2, r3]
 8005baa:	fa21 f303 	lsr.w	r3, r1, r3
 8005bae:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <HAL_RCC_ClockConfig+0x2f0>)
 8005bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <HAL_RCC_ClockConfig+0x2f4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fd fd8e 	bl	80036d8 <HAL_InitTick>
  
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3778      	adds	r7, #120	; 0x78
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	0800a794 	.word	0x0800a794
 8005bd0:	20000178 	.word	0x20000178
 8005bd4:	2000017c 	.word	0x2000017c

08005bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b08b      	sub	sp, #44	; 0x2c
 8005bdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005bf2:	4b29      	ldr	r3, [pc, #164]	; (8005c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d002      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x30>
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d003      	beq.n	8005c0e <HAL_RCC_GetSysClockFreq+0x36>
 8005c06:	e03c      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c0a:	623b      	str	r3, [r7, #32]
      break;
 8005c0c:	e03c      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005c18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	fa92 f2a2 	rbit	r2, r2
 8005c20:	607a      	str	r2, [r7, #4]
  return result;
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	fab2 f282 	clz	r2, r2
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	40d3      	lsrs	r3, r2
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c2e:	5cd3      	ldrb	r3, [r2, r3]
 8005c30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005c32:	4b19      	ldr	r3, [pc, #100]	; (8005c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	220f      	movs	r2, #15
 8005c3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	fa92 f2a2 	rbit	r2, r2
 8005c44:	60fa      	str	r2, [r7, #12]
  return result;
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	fab2 f282 	clz	r2, r2
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	40d3      	lsrs	r3, r2
 8005c50:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c52:	5cd3      	ldrb	r3, [r2, r3]
 8005c54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c60:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	fb02 f303 	mul.w	r3, r2, r3
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	e004      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	623b      	str	r3, [r7, #32]
      break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c84:	623b      	str	r3, [r7, #32]
      break;
 8005c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c88:	6a3b      	ldr	r3, [r7, #32]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	372c      	adds	r7, #44	; 0x2c
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	007a1200 	.word	0x007a1200
 8005ca0:	0800a7ac 	.word	0x0800a7ac
 8005ca4:	0800a7bc 	.word	0x0800a7bc
 8005ca8:	003d0900 	.word	0x003d0900

08005cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000178 	.word	0x20000178

08005cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005cca:	f7ff ffef 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cce:	4601      	mov	r1, r0
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005cdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	fa92 f2a2 	rbit	r2, r2
 8005ce4:	603a      	str	r2, [r7, #0]
  return result;
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	fab2 f282 	clz	r2, r2
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	40d3      	lsrs	r3, r2
 8005cf0:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005cf2:	5cd3      	ldrb	r3, [r2, r3]
 8005cf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40021000 	.word	0x40021000
 8005d04:	0800a7a4 	.word	0x0800a7a4

08005d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005d0e:	f7ff ffcd 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005d12:	4601      	mov	r1, r0
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005d1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005d20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	fa92 f2a2 	rbit	r2, r2
 8005d28:	603a      	str	r2, [r7, #0]
  return result;
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	fab2 f282 	clz	r2, r2
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	40d3      	lsrs	r3, r2
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005d36:	5cd3      	ldrb	r3, [r2, r3]
 8005d38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	0800a7a4 	.word	0x0800a7a4

08005d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b092      	sub	sp, #72	; 0x48
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80d4 	beq.w	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d70:	4b4e      	ldr	r3, [pc, #312]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10e      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d7c:	4b4b      	ldr	r3, [pc, #300]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	4a4a      	ldr	r2, [pc, #296]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d86:	61d3      	str	r3, [r2, #28]
 8005d88:	4b48      	ldr	r3, [pc, #288]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9a:	4b45      	ldr	r3, [pc, #276]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d118      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005da6:	4b42      	ldr	r3, [pc, #264]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a41      	ldr	r2, [pc, #260]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005db2:	f7fd fcd5 	bl	8003760 <HAL_GetTick>
 8005db6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db8:	e008      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dba:	f7fd fcd1 	bl	8003760 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b64      	cmp	r3, #100	; 0x64
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e169      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dcc:	4b38      	ldr	r3, [pc, #224]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dd8:	4b34      	ldr	r3, [pc, #208]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8084 	beq.w	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d07c      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005df8:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e12:	fab3 f383 	clz	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	461a      	mov	r2, r3
 8005e22:	2301      	movs	r3, #1
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	fa93 f3a3 	rbit	r3, r3
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e36:	fab3 f383 	clz	r3, r3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	461a      	mov	r2, r3
 8005e46:	2300      	movs	r3, #0
 8005e48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e4a:	4a18      	ldr	r2, [pc, #96]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d04b      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5a:	f7fd fc81 	bl	8003760 <HAL_GetTick>
 8005e5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e60:	e00a      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e62:	f7fd fc7d 	bl	8003760 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e113      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	fa93 f3a3 	rbit	r3, r3
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
 8005e84:	2302      	movs	r3, #2
 8005e86:	623b      	str	r3, [r7, #32]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	fa93 f3a3 	rbit	r3, r3
 8005e8e:	61fb      	str	r3, [r7, #28]
  return result;
 8005e90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e92:	fab3 f383 	clz	r3, r3
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d108      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005ea6:	4b01      	ldr	r3, [pc, #4]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	e00d      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	10908100 	.word	0x10908100
 8005eb8:	2302      	movs	r3, #2
 8005eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	fa93 f3a3 	rbit	r3, r3
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	4b78      	ldr	r3, [pc, #480]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2202      	movs	r2, #2
 8005eca:	613a      	str	r2, [r7, #16]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	fa92 f2a2 	rbit	r2, r2
 8005ed2:	60fa      	str	r2, [r7, #12]
  return result;
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	fab2 f282 	clz	r2, r2
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	f002 021f 	and.w	r2, r2, #31
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0b7      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ef2:	4b6d      	ldr	r3, [pc, #436]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	496a      	ldr	r1, [pc, #424]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f0c:	4b66      	ldr	r3, [pc, #408]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	4a65      	ldr	r2, [pc, #404]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f24:	4b60      	ldr	r3, [pc, #384]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	f023 0203 	bic.w	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	495d      	ldr	r1, [pc, #372]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f42:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	4956      	ldr	r1, [pc, #344]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f60:	4b51      	ldr	r3, [pc, #324]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	494e      	ldr	r1, [pc, #312]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f7e:	4b4a      	ldr	r3, [pc, #296]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4947      	ldr	r1, [pc, #284]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005f9c:	4b42      	ldr	r3, [pc, #264]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	493f      	ldr	r1, [pc, #252]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fba:	4b3b      	ldr	r3, [pc, #236]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f023 0220 	bic.w	r2, r3, #32
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	4938      	ldr	r1, [pc, #224]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fd8:	4b33      	ldr	r3, [pc, #204]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	4930      	ldr	r1, [pc, #192]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d008      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ff6:	4b2c      	ldr	r3, [pc, #176]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	4929      	ldr	r1, [pc, #164]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006004:	4313      	orrs	r3, r2
 8006006:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	4921      	ldr	r1, [pc, #132]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006022:	4313      	orrs	r3, r2
 8006024:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006032:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	491a      	ldr	r1, [pc, #104]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006040:	4313      	orrs	r3, r2
 8006042:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006050:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	4912      	ldr	r1, [pc, #72]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605e:	4313      	orrs	r3, r2
 8006060:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d008      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	490b      	ldr	r1, [pc, #44]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800607c:	4313      	orrs	r3, r2
 800607e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	4903      	ldr	r1, [pc, #12]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800609a:	4313      	orrs	r3, r2
 800609c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3748      	adds	r7, #72	; 0x48
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40021000 	.word	0x40021000

080060ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e09d      	b.n	80061fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d108      	bne.n	80060d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ce:	d009      	beq.n	80060e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	61da      	str	r2, [r3, #28]
 80060d6:	e005      	b.n	80060e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fd f8ac 	bl	800325c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800611a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006124:	d902      	bls.n	800612c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e002      	b.n	8006132 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800612c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006130:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800613a:	d007      	beq.n	800614c <HAL_SPI_Init+0xa0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006144:	d002      	beq.n	800614c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618e:	ea42 0103 	orr.w	r1, r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	f003 0204 	and.w	r2, r3, #4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061c8:	ea42 0103 	orr.w	r1, r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e01a      	b.n	800624a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fd f857 	bl	80032e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b08a      	sub	sp, #40	; 0x28
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006260:	2301      	movs	r3, #1
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_SPI_TransmitReceive+0x26>
 8006274:	2302      	movs	r3, #2
 8006276:	e1fb      	b.n	8006670 <HAL_SPI_TransmitReceive+0x41e>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006280:	f7fd fa6e 	bl	8003760 <HAL_GetTick>
 8006284:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800628c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006298:	887b      	ldrh	r3, [r7, #2]
 800629a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800629c:	7efb      	ldrb	r3, [r7, #27]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d00e      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x6e>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a8:	d106      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x66>
 80062b2:	7efb      	ldrb	r3, [r7, #27]
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d003      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80062be:	e1cd      	b.n	800665c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x80>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x80>
 80062cc:	887b      	ldrh	r3, [r7, #2]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80062d8:	e1c0      	b.n	800665c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d003      	beq.n	80062ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2205      	movs	r2, #5
 80062ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	887a      	ldrh	r2, [r7, #2]
 80062fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	887a      	ldrh	r2, [r7, #2]
 8006306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	887a      	ldrh	r2, [r7, #2]
 8006314:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	887a      	ldrh	r2, [r7, #2]
 800631a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006330:	d802      	bhi.n	8006338 <HAL_SPI_TransmitReceive+0xe6>
 8006332:	8a3b      	ldrh	r3, [r7, #16]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d908      	bls.n	800634a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006346:	605a      	str	r2, [r3, #4]
 8006348:	e007      	b.n	800635a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006358:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d007      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006376:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006380:	d97c      	bls.n	800647c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x13e>
 800638a:	8a7b      	ldrh	r3, [r7, #18]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d169      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	1c9a      	adds	r2, r3, #2
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063b4:	e056      	b.n	8006464 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d11b      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x1aa>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x1aa>
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d113      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d11c      	bne.n	8006444 <HAL_SPI_TransmitReceive+0x1f2>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	b292      	uxth	r2, r2
 8006422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	1c9a      	adds	r2, r3, #2
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006440:	2301      	movs	r3, #1
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006444:	f7fd f98c 	bl	8003760 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006450:	429a      	cmp	r2, r3
 8006452:	d807      	bhi.n	8006464 <HAL_SPI_TransmitReceive+0x212>
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d003      	beq.n	8006464 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006462:	e0fb      	b.n	800665c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1a3      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x164>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d19d      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x164>
 800647a:	e0df      	b.n	800663c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_SPI_TransmitReceive+0x23a>
 8006484:	8a7b      	ldrh	r3, [r7, #18]
 8006486:	2b01      	cmp	r3, #1
 8006488:	f040 80cb 	bne.w	8006622 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b01      	cmp	r3, #1
 8006494:	d912      	bls.n	80064bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	881a      	ldrh	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	1c9a      	adds	r2, r3, #2
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b02      	subs	r3, #2
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064ba:	e0b2      	b.n	8006622 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	330c      	adds	r3, #12
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e2:	e09e      	b.n	8006622 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d134      	bne.n	800655c <HAL_SPI_TransmitReceive+0x30a>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02f      	beq.n	800655c <HAL_SPI_TransmitReceive+0x30a>
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d12c      	bne.n	800655c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d912      	bls.n	8006532 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	1c9a      	adds	r2, r3, #2
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b02      	subs	r3, #2
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006530:	e012      	b.n	8006558 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	330c      	adds	r3, #12
 800653c:	7812      	ldrb	r2, [r2, #0]
 800653e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b01      	cmp	r3, #1
 8006568:	d148      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x3aa>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d042      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d923      	bls.n	80065ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	b292      	uxth	r2, r2
 800658e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	1c9a      	adds	r2, r3, #2
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b02      	subs	r3, #2
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d81f      	bhi.n	80065f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	e016      	b.n	80065f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f103 020c 	add.w	r2, r3, #12
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	7812      	ldrb	r2, [r2, #0]
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065f8:	2301      	movs	r3, #1
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065fc:	f7fd f8b0 	bl	8003760 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006608:	429a      	cmp	r2, r3
 800660a:	d803      	bhi.n	8006614 <HAL_SPI_TransmitReceive+0x3c2>
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d102      	bne.n	800661a <HAL_SPI_TransmitReceive+0x3c8>
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006620:	e01c      	b.n	800665c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	f47f af5b 	bne.w	80064e4 <HAL_SPI_TransmitReceive+0x292>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	f47f af54 	bne.w	80064e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f945 	bl	80068d0 <SPI_EndRxTxTransaction>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d006      	beq.n	800665a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	661a      	str	r2, [r3, #96]	; 0x60
 8006658:	e000      	b.n	800665c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800665a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800666c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006670:	4618      	mov	r0, r3
 8006672:	3728      	adds	r7, #40	; 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006686:	b2db      	uxtb	r3, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066a4:	f7fd f85c 	bl	8003760 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4413      	add	r3, r2
 80066b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066b4:	f7fd f854 	bl	8003760 <HAL_GetTick>
 80066b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066ba:	4b39      	ldr	r3, [pc, #228]	; (80067a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	015b      	lsls	r3, r3, #5
 80066c0:	0d1b      	lsrs	r3, r3, #20
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	fb02 f303 	mul.w	r3, r2, r3
 80066c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ca:	e054      	b.n	8006776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d050      	beq.n	8006776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066d4:	f7fd f844 	bl	8003760 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d902      	bls.n	80066ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d13d      	bne.n	8006766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006702:	d111      	bne.n	8006728 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670c:	d004      	beq.n	8006718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006716:	d107      	bne.n	8006728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006730:	d10f      	bne.n	8006752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e017      	b.n	8006796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	3b01      	subs	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	bf0c      	ite	eq
 8006786:	2301      	moveq	r3, #1
 8006788:	2300      	movne	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	429a      	cmp	r2, r3
 8006792:	d19b      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000178 	.word	0x20000178

080067a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067b6:	f7fc ffd3 	bl	8003760 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	4413      	add	r3, r2
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80067c6:	f7fc ffcb 	bl	8003760 <HAL_GetTick>
 80067ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80067d4:	4b3d      	ldr	r3, [pc, #244]	; (80068cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	00da      	lsls	r2, r3, #3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	0d1b      	lsrs	r3, r3, #20
 80067e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067ec:	e060      	b.n	80068b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067f4:	d107      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0x62>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006804:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d050      	beq.n	80068b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800680e:	f7fc ffa7 	bl	8003760 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681a:	429a      	cmp	r2, r3
 800681c:	d902      	bls.n	8006824 <SPI_WaitFifoStateUntilTimeout+0x80>
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d13d      	bne.n	80068a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006832:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800683c:	d111      	bne.n	8006862 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006846:	d004      	beq.n	8006852 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	d107      	bne.n	8006862 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006860:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686a:	d10f      	bne.n	800688c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800688a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e010      	b.n	80068c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	4013      	ands	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d196      	bne.n	80067ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3728      	adds	r7, #40	; 0x28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000178 	.word	0x20000178

080068d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7ff ff5b 	bl	80067a4 <SPI_WaitFifoStateUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e027      	b.n	8006954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2200      	movs	r2, #0
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff fec0 	bl	8006694 <SPI_WaitFlagStateUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e014      	b.n	8006954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff ff34 	bl	80067a4 <SPI_WaitFifoStateUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006946:	f043 0220 	orr.w	r2, r3, #32
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e000      	b.n	8006954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e040      	b.n	80069f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fc fe26 	bl	80035d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2224      	movs	r2, #36	; 0x24
 8006988:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8c0 	bl	8006b20 <UART_SetConfig>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e022      	b.n	80069f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa88 	bl	8006ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb0f 	bl	800700c <UART_CheckIdleState>
 80069ee:	4603      	mov	r3, r0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	; 0x28
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	f040 8082 	bne.w	8006b16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_UART_Transmit+0x26>
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e07a      	b.n	8006b18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_UART_Transmit+0x38>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e073      	b.n	8006b18 <HAL_UART_Transmit+0x120>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2221      	movs	r2, #33	; 0x21
 8006a44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a46:	f7fc fe8b 	bl	8003760 <HAL_GetTick>
 8006a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a64:	d108      	bne.n	8006a78 <HAL_UART_Transmit+0x80>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	e003      	b.n	8006a80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a88:	e02d      	b.n	8006ae6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fb02 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e039      	b.n	8006b18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	3302      	adds	r3, #2
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e008      	b.n	8006ad4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	781a      	ldrb	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	b292      	uxth	r2, r2
 8006acc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1cb      	bne.n	8006a8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	2140      	movs	r1, #64	; 0x40
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 face 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e005      	b.n	8006b18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
  }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b4e:	f023 030c 	bic.w	r3, r3, #12
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	6979      	ldr	r1, [r7, #20]
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4aae      	ldr	r2, [pc, #696]	; (8006e54 <UART_SetConfig+0x334>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d120      	bne.n	8006be2 <UART_SetConfig+0xc2>
 8006ba0:	4bad      	ldr	r3, [pc, #692]	; (8006e58 <UART_SetConfig+0x338>)
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d817      	bhi.n	8006bdc <UART_SetConfig+0xbc>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <UART_SetConfig+0x94>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006bd1 	.word	0x08006bd1
 8006bbc:	08006bd7 	.word	0x08006bd7
 8006bc0:	08006bcb 	.word	0x08006bcb
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e0b5      	b.n	8006d36 <UART_SetConfig+0x216>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	77fb      	strb	r3, [r7, #31]
 8006bce:	e0b2      	b.n	8006d36 <UART_SetConfig+0x216>
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e0af      	b.n	8006d36 <UART_SetConfig+0x216>
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	77fb      	strb	r3, [r7, #31]
 8006bda:	e0ac      	b.n	8006d36 <UART_SetConfig+0x216>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e0a9      	b.n	8006d36 <UART_SetConfig+0x216>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a9d      	ldr	r2, [pc, #628]	; (8006e5c <UART_SetConfig+0x33c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d124      	bne.n	8006c36 <UART_SetConfig+0x116>
 8006bec:	4b9a      	ldr	r3, [pc, #616]	; (8006e58 <UART_SetConfig+0x338>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bf8:	d011      	beq.n	8006c1e <UART_SetConfig+0xfe>
 8006bfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bfe:	d817      	bhi.n	8006c30 <UART_SetConfig+0x110>
 8006c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c04:	d011      	beq.n	8006c2a <UART_SetConfig+0x10a>
 8006c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0a:	d811      	bhi.n	8006c30 <UART_SetConfig+0x110>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <UART_SetConfig+0xf8>
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d006      	beq.n	8006c24 <UART_SetConfig+0x104>
 8006c16:	e00b      	b.n	8006c30 <UART_SetConfig+0x110>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e08b      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e088      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c24:	2304      	movs	r3, #4
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e085      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	e082      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c30:	2310      	movs	r3, #16
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e07f      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a89      	ldr	r2, [pc, #548]	; (8006e60 <UART_SetConfig+0x340>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d124      	bne.n	8006c8a <UART_SetConfig+0x16a>
 8006c40:	4b85      	ldr	r3, [pc, #532]	; (8006e58 <UART_SetConfig+0x338>)
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006c48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c4c:	d011      	beq.n	8006c72 <UART_SetConfig+0x152>
 8006c4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c52:	d817      	bhi.n	8006c84 <UART_SetConfig+0x164>
 8006c54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c58:	d011      	beq.n	8006c7e <UART_SetConfig+0x15e>
 8006c5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c5e:	d811      	bhi.n	8006c84 <UART_SetConfig+0x164>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <UART_SetConfig+0x14c>
 8006c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c68:	d006      	beq.n	8006c78 <UART_SetConfig+0x158>
 8006c6a:	e00b      	b.n	8006c84 <UART_SetConfig+0x164>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e061      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c72:	2302      	movs	r3, #2
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e05e      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e05b      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e058      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c84:	2310      	movs	r3, #16
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e055      	b.n	8006d36 <UART_SetConfig+0x216>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a75      	ldr	r2, [pc, #468]	; (8006e64 <UART_SetConfig+0x344>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d124      	bne.n	8006cde <UART_SetConfig+0x1be>
 8006c94:	4b70      	ldr	r3, [pc, #448]	; (8006e58 <UART_SetConfig+0x338>)
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ca0:	d011      	beq.n	8006cc6 <UART_SetConfig+0x1a6>
 8006ca2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ca6:	d817      	bhi.n	8006cd8 <UART_SetConfig+0x1b8>
 8006ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cac:	d011      	beq.n	8006cd2 <UART_SetConfig+0x1b2>
 8006cae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb2:	d811      	bhi.n	8006cd8 <UART_SetConfig+0x1b8>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <UART_SetConfig+0x1a0>
 8006cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbc:	d006      	beq.n	8006ccc <UART_SetConfig+0x1ac>
 8006cbe:	e00b      	b.n	8006cd8 <UART_SetConfig+0x1b8>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e037      	b.n	8006d36 <UART_SetConfig+0x216>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e034      	b.n	8006d36 <UART_SetConfig+0x216>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e031      	b.n	8006d36 <UART_SetConfig+0x216>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	77fb      	strb	r3, [r7, #31]
 8006cd6:	e02e      	b.n	8006d36 <UART_SetConfig+0x216>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e02b      	b.n	8006d36 <UART_SetConfig+0x216>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a61      	ldr	r2, [pc, #388]	; (8006e68 <UART_SetConfig+0x348>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d124      	bne.n	8006d32 <UART_SetConfig+0x212>
 8006ce8:	4b5b      	ldr	r3, [pc, #364]	; (8006e58 <UART_SetConfig+0x338>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006cf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cf4:	d011      	beq.n	8006d1a <UART_SetConfig+0x1fa>
 8006cf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cfa:	d817      	bhi.n	8006d2c <UART_SetConfig+0x20c>
 8006cfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d00:	d011      	beq.n	8006d26 <UART_SetConfig+0x206>
 8006d02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d06:	d811      	bhi.n	8006d2c <UART_SetConfig+0x20c>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <UART_SetConfig+0x1f4>
 8006d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d10:	d006      	beq.n	8006d20 <UART_SetConfig+0x200>
 8006d12:	e00b      	b.n	8006d2c <UART_SetConfig+0x20c>
 8006d14:	2300      	movs	r3, #0
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e00d      	b.n	8006d36 <UART_SetConfig+0x216>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e00a      	b.n	8006d36 <UART_SetConfig+0x216>
 8006d20:	2304      	movs	r3, #4
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e007      	b.n	8006d36 <UART_SetConfig+0x216>
 8006d26:	2308      	movs	r3, #8
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e004      	b.n	8006d36 <UART_SetConfig+0x216>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e001      	b.n	8006d36 <UART_SetConfig+0x216>
 8006d32:	2310      	movs	r3, #16
 8006d34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3e:	d15c      	bne.n	8006dfa <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006d40:	7ffb      	ldrb	r3, [r7, #31]
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d827      	bhi.n	8006d96 <UART_SetConfig+0x276>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <UART_SetConfig+0x22c>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d79 	.word	0x08006d79
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	08006d97 	.word	0x08006d97
 8006d5c:	08006d87 	.word	0x08006d87
 8006d60:	08006d97 	.word	0x08006d97
 8006d64:	08006d97 	.word	0x08006d97
 8006d68:	08006d97 	.word	0x08006d97
 8006d6c:	08006d8f 	.word	0x08006d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d70:	f7fe ffa8 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8006d74:	61b8      	str	r0, [r7, #24]
        break;
 8006d76:	e013      	b.n	8006da0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d78:	f7fe ffc6 	bl	8005d08 <HAL_RCC_GetPCLK2Freq>
 8006d7c:	61b8      	str	r0, [r7, #24]
        break;
 8006d7e:	e00f      	b.n	8006da0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <UART_SetConfig+0x34c>)
 8006d82:	61bb      	str	r3, [r7, #24]
        break;
 8006d84:	e00c      	b.n	8006da0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d86:	f7fe ff27 	bl	8005bd8 <HAL_RCC_GetSysClockFreq>
 8006d8a:	61b8      	str	r0, [r7, #24]
        break;
 8006d8c:	e008      	b.n	8006da0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d92:	61bb      	str	r3, [r7, #24]
        break;
 8006d94:	e004      	b.n	8006da0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8085 	beq.w	8006eb2 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	005a      	lsls	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	441a      	add	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d916      	bls.n	8006df4 <UART_SetConfig+0x2d4>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d212      	bcs.n	8006df4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f023 030f 	bic.w	r3, r3, #15
 8006dd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	89fa      	ldrh	r2, [r7, #14]
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	e05e      	b.n	8006eb2 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	77bb      	strb	r3, [r7, #30]
 8006df8:	e05b      	b.n	8006eb2 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dfa:	7ffb      	ldrb	r3, [r7, #31]
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d837      	bhi.n	8006e70 <UART_SetConfig+0x350>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <UART_SetConfig+0x2e8>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e2d 	.word	0x08006e2d
 8006e0c:	08006e35 	.word	0x08006e35
 8006e10:	08006e3d 	.word	0x08006e3d
 8006e14:	08006e71 	.word	0x08006e71
 8006e18:	08006e43 	.word	0x08006e43
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006e71 	.word	0x08006e71
 8006e24:	08006e71 	.word	0x08006e71
 8006e28:	08006e4b 	.word	0x08006e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e2c:	f7fe ff4a 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8006e30:	61b8      	str	r0, [r7, #24]
        break;
 8006e32:	e022      	b.n	8006e7a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e34:	f7fe ff68 	bl	8005d08 <HAL_RCC_GetPCLK2Freq>
 8006e38:	61b8      	str	r0, [r7, #24]
        break;
 8006e3a:	e01e      	b.n	8006e7a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <UART_SetConfig+0x34c>)
 8006e3e:	61bb      	str	r3, [r7, #24]
        break;
 8006e40:	e01b      	b.n	8006e7a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e42:	f7fe fec9 	bl	8005bd8 <HAL_RCC_GetSysClockFreq>
 8006e46:	61b8      	str	r0, [r7, #24]
        break;
 8006e48:	e017      	b.n	8006e7a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e4e:	61bb      	str	r3, [r7, #24]
        break;
 8006e50:	e013      	b.n	8006e7a <UART_SetConfig+0x35a>
 8006e52:	bf00      	nop
 8006e54:	40013800 	.word	0x40013800
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40004400 	.word	0x40004400
 8006e60:	40004800 	.word	0x40004800
 8006e64:	40004c00 	.word	0x40004c00
 8006e68:	40005000 	.word	0x40005000
 8006e6c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	77bb      	strb	r3, [r7, #30]
        break;
 8006e78:	bf00      	nop
    }

    if (pclk != 0U)
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d018      	beq.n	8006eb2 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	085a      	lsrs	r2, r3, #1
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	441a      	add	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b0f      	cmp	r3, #15
 8006e9a:	d908      	bls.n	8006eae <UART_SetConfig+0x38e>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d204      	bcs.n	8006eae <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	60da      	str	r2, [r3, #12]
 8006eac:	e001      	b.n	8006eb2 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ebe:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01a      	beq.n	8006fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc6:	d10a      	bne.n	8006fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	605a      	str	r2, [r3, #4]
  }
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af02      	add	r7, sp, #8
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800701c:	f7fc fba0 	bl	8003760 <HAL_GetTick>
 8007020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b08      	cmp	r3, #8
 800702e:	d10e      	bne.n	800704e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f82d 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e023      	b.n	8007096 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b04      	cmp	r3, #4
 800705a:	d10e      	bne.n	800707a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f817 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e00d      	b.n	8007096 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b09c      	sub	sp, #112	; 0x70
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	603b      	str	r3, [r7, #0]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ae:	e0a5      	b.n	80071fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	f000 80a1 	beq.w	80071fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ba:	f7fc fb51 	bl	8003760 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80070ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d13e      	bne.n	800714e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070e4:	667b      	str	r3, [r7, #100]	; 0x64
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e6      	bne.n	80070d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	663b      	str	r3, [r7, #96]	; 0x60
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007122:	64ba      	str	r2, [r7, #72]	; 0x48
 8007124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e5      	bne.n	8007102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e067      	b.n	800721e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d04f      	beq.n	80071fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716a:	d147      	bne.n	80071fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800718a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007194:	637b      	str	r3, [r7, #52]	; 0x34
 8007196:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800719a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e6      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	613b      	str	r3, [r7, #16]
   return(result);
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f023 0301 	bic.w	r3, r3, #1
 80071be:	66bb      	str	r3, [r7, #104]	; 0x68
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3308      	adds	r3, #8
 80071c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071c8:	623a      	str	r2, [r7, #32]
 80071ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	69f9      	ldr	r1, [r7, #28]
 80071ce:	6a3a      	ldr	r2, [r7, #32]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e010      	b.n	800721e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69da      	ldr	r2, [r3, #28]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	4013      	ands	r3, r2
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	429a      	cmp	r2, r3
 800720a:	bf0c      	ite	eq
 800720c:	2301      	moveq	r3, #1
 800720e:	2300      	movne	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	429a      	cmp	r2, r3
 8007218:	f43f af4a 	beq.w	80070b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3770      	adds	r7, #112	; 0x70
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <sinf>:
 8007228:	ee10 3a10 	vmov	r3, s0
 800722c:	b507      	push	{r0, r1, r2, lr}
 800722e:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <sinf+0x7c>)
 8007230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007234:	4293      	cmp	r3, r2
 8007236:	dc05      	bgt.n	8007244 <sinf+0x1c>
 8007238:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80072a8 <sinf+0x80>
 800723c:	2000      	movs	r0, #0
 800723e:	f000 fc5b 	bl	8007af8 <__kernel_sinf>
 8007242:	e004      	b.n	800724e <sinf+0x26>
 8007244:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007248:	db04      	blt.n	8007254 <sinf+0x2c>
 800724a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800724e:	b003      	add	sp, #12
 8007250:	f85d fb04 	ldr.w	pc, [sp], #4
 8007254:	4668      	mov	r0, sp
 8007256:	f000 f829 	bl	80072ac <__ieee754_rem_pio2f>
 800725a:	f000 0003 	and.w	r0, r0, #3
 800725e:	2801      	cmp	r0, #1
 8007260:	d008      	beq.n	8007274 <sinf+0x4c>
 8007262:	2802      	cmp	r0, #2
 8007264:	d00d      	beq.n	8007282 <sinf+0x5a>
 8007266:	b9b0      	cbnz	r0, 8007296 <sinf+0x6e>
 8007268:	eddd 0a01 	vldr	s1, [sp, #4]
 800726c:	ed9d 0a00 	vldr	s0, [sp]
 8007270:	2001      	movs	r0, #1
 8007272:	e7e4      	b.n	800723e <sinf+0x16>
 8007274:	eddd 0a01 	vldr	s1, [sp, #4]
 8007278:	ed9d 0a00 	vldr	s0, [sp]
 800727c:	f000 f952 	bl	8007524 <__kernel_cosf>
 8007280:	e7e5      	b.n	800724e <sinf+0x26>
 8007282:	eddd 0a01 	vldr	s1, [sp, #4]
 8007286:	ed9d 0a00 	vldr	s0, [sp]
 800728a:	2001      	movs	r0, #1
 800728c:	f000 fc34 	bl	8007af8 <__kernel_sinf>
 8007290:	eeb1 0a40 	vneg.f32	s0, s0
 8007294:	e7db      	b.n	800724e <sinf+0x26>
 8007296:	eddd 0a01 	vldr	s1, [sp, #4]
 800729a:	ed9d 0a00 	vldr	s0, [sp]
 800729e:	f000 f941 	bl	8007524 <__kernel_cosf>
 80072a2:	e7f5      	b.n	8007290 <sinf+0x68>
 80072a4:	3f490fd8 	.word	0x3f490fd8
 80072a8:	00000000 	.word	0x00000000

080072ac <__ieee754_rem_pio2f>:
 80072ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ae:	ee10 6a10 	vmov	r6, s0
 80072b2:	4b8e      	ldr	r3, [pc, #568]	; (80074ec <__ieee754_rem_pio2f+0x240>)
 80072b4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80072b8:	429d      	cmp	r5, r3
 80072ba:	b087      	sub	sp, #28
 80072bc:	eef0 7a40 	vmov.f32	s15, s0
 80072c0:	4604      	mov	r4, r0
 80072c2:	dc05      	bgt.n	80072d0 <__ieee754_rem_pio2f+0x24>
 80072c4:	2300      	movs	r3, #0
 80072c6:	ed80 0a00 	vstr	s0, [r0]
 80072ca:	6043      	str	r3, [r0, #4]
 80072cc:	2000      	movs	r0, #0
 80072ce:	e01a      	b.n	8007306 <__ieee754_rem_pio2f+0x5a>
 80072d0:	4b87      	ldr	r3, [pc, #540]	; (80074f0 <__ieee754_rem_pio2f+0x244>)
 80072d2:	429d      	cmp	r5, r3
 80072d4:	dc46      	bgt.n	8007364 <__ieee754_rem_pio2f+0xb8>
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80074f4 <__ieee754_rem_pio2f+0x248>
 80072dc:	4b86      	ldr	r3, [pc, #536]	; (80074f8 <__ieee754_rem_pio2f+0x24c>)
 80072de:	f025 050f 	bic.w	r5, r5, #15
 80072e2:	dd1f      	ble.n	8007324 <__ieee754_rem_pio2f+0x78>
 80072e4:	429d      	cmp	r5, r3
 80072e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072ea:	d00e      	beq.n	800730a <__ieee754_rem_pio2f+0x5e>
 80072ec:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80074fc <__ieee754_rem_pio2f+0x250>
 80072f0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80072f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072f8:	ed80 0a00 	vstr	s0, [r0]
 80072fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007300:	2001      	movs	r0, #1
 8007302:	edc4 7a01 	vstr	s15, [r4, #4]
 8007306:	b007      	add	sp, #28
 8007308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007500 <__ieee754_rem_pio2f+0x254>
 800730e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007504 <__ieee754_rem_pio2f+0x258>
 8007312:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007316:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800731a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800731e:	edc0 6a00 	vstr	s13, [r0]
 8007322:	e7eb      	b.n	80072fc <__ieee754_rem_pio2f+0x50>
 8007324:	429d      	cmp	r5, r3
 8007326:	ee77 7a80 	vadd.f32	s15, s15, s0
 800732a:	d00e      	beq.n	800734a <__ieee754_rem_pio2f+0x9e>
 800732c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80074fc <__ieee754_rem_pio2f+0x250>
 8007330:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007334:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007338:	ed80 0a00 	vstr	s0, [r0]
 800733c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	edc4 7a01 	vstr	s15, [r4, #4]
 8007348:	e7dd      	b.n	8007306 <__ieee754_rem_pio2f+0x5a>
 800734a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007500 <__ieee754_rem_pio2f+0x254>
 800734e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007504 <__ieee754_rem_pio2f+0x258>
 8007352:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007356:	ee77 6a87 	vadd.f32	s13, s15, s14
 800735a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800735e:	edc0 6a00 	vstr	s13, [r0]
 8007362:	e7eb      	b.n	800733c <__ieee754_rem_pio2f+0x90>
 8007364:	4b68      	ldr	r3, [pc, #416]	; (8007508 <__ieee754_rem_pio2f+0x25c>)
 8007366:	429d      	cmp	r5, r3
 8007368:	dc72      	bgt.n	8007450 <__ieee754_rem_pio2f+0x1a4>
 800736a:	f000 fc0d 	bl	8007b88 <fabsf>
 800736e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800750c <__ieee754_rem_pio2f+0x260>
 8007372:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007376:	eee0 7a07 	vfma.f32	s15, s0, s14
 800737a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800737e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007382:	ee17 0a90 	vmov	r0, s15
 8007386:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80074f4 <__ieee754_rem_pio2f+0x248>
 800738a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800738e:	281f      	cmp	r0, #31
 8007390:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80074fc <__ieee754_rem_pio2f+0x250>
 8007394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007398:	eeb1 6a47 	vneg.f32	s12, s14
 800739c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80073a0:	ee16 2a90 	vmov	r2, s13
 80073a4:	dc1c      	bgt.n	80073e0 <__ieee754_rem_pio2f+0x134>
 80073a6:	495a      	ldr	r1, [pc, #360]	; (8007510 <__ieee754_rem_pio2f+0x264>)
 80073a8:	1e47      	subs	r7, r0, #1
 80073aa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80073ae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80073b2:	428b      	cmp	r3, r1
 80073b4:	d014      	beq.n	80073e0 <__ieee754_rem_pio2f+0x134>
 80073b6:	6022      	str	r2, [r4, #0]
 80073b8:	ed94 7a00 	vldr	s14, [r4]
 80073bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80073c0:	2e00      	cmp	r6, #0
 80073c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80073c6:	ed84 0a01 	vstr	s0, [r4, #4]
 80073ca:	da9c      	bge.n	8007306 <__ieee754_rem_pio2f+0x5a>
 80073cc:	eeb1 7a47 	vneg.f32	s14, s14
 80073d0:	eeb1 0a40 	vneg.f32	s0, s0
 80073d4:	ed84 7a00 	vstr	s14, [r4]
 80073d8:	ed84 0a01 	vstr	s0, [r4, #4]
 80073dc:	4240      	negs	r0, r0
 80073de:	e792      	b.n	8007306 <__ieee754_rem_pio2f+0x5a>
 80073e0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80073e4:	15eb      	asrs	r3, r5, #23
 80073e6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80073ea:	2d08      	cmp	r5, #8
 80073ec:	dde3      	ble.n	80073b6 <__ieee754_rem_pio2f+0x10a>
 80073ee:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007500 <__ieee754_rem_pio2f+0x254>
 80073f2:	eef0 6a40 	vmov.f32	s13, s0
 80073f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80073fa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80073fe:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007402:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007504 <__ieee754_rem_pio2f+0x258>
 8007406:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800740a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800740e:	eef0 7a40 	vmov.f32	s15, s0
 8007412:	ee15 2a90 	vmov	r2, s11
 8007416:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800741a:	1a5b      	subs	r3, r3, r1
 800741c:	2b19      	cmp	r3, #25
 800741e:	dc04      	bgt.n	800742a <__ieee754_rem_pio2f+0x17e>
 8007420:	edc4 5a00 	vstr	s11, [r4]
 8007424:	eeb0 0a66 	vmov.f32	s0, s13
 8007428:	e7c6      	b.n	80073b8 <__ieee754_rem_pio2f+0x10c>
 800742a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007514 <__ieee754_rem_pio2f+0x268>
 800742e:	eeb0 0a66 	vmov.f32	s0, s13
 8007432:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007436:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800743a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007518 <__ieee754_rem_pio2f+0x26c>
 800743e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007442:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007446:	ee30 7a67 	vsub.f32	s14, s0, s15
 800744a:	ed84 7a00 	vstr	s14, [r4]
 800744e:	e7b3      	b.n	80073b8 <__ieee754_rem_pio2f+0x10c>
 8007450:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007454:	db06      	blt.n	8007464 <__ieee754_rem_pio2f+0x1b8>
 8007456:	ee70 7a40 	vsub.f32	s15, s0, s0
 800745a:	edc0 7a01 	vstr	s15, [r0, #4]
 800745e:	edc0 7a00 	vstr	s15, [r0]
 8007462:	e733      	b.n	80072cc <__ieee754_rem_pio2f+0x20>
 8007464:	15ea      	asrs	r2, r5, #23
 8007466:	3a86      	subs	r2, #134	; 0x86
 8007468:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007474:	eddf 6a29 	vldr	s13, [pc, #164]	; 800751c <__ieee754_rem_pio2f+0x270>
 8007478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800747c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007480:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007484:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007488:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800748c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007494:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007498:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800749c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a4:	edcd 7a05 	vstr	s15, [sp, #20]
 80074a8:	d11e      	bne.n	80074e8 <__ieee754_rem_pio2f+0x23c>
 80074aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	bf14      	ite	ne
 80074b4:	2302      	movne	r3, #2
 80074b6:	2301      	moveq	r3, #1
 80074b8:	4919      	ldr	r1, [pc, #100]	; (8007520 <__ieee754_rem_pio2f+0x274>)
 80074ba:	9101      	str	r1, [sp, #4]
 80074bc:	2102      	movs	r1, #2
 80074be:	9100      	str	r1, [sp, #0]
 80074c0:	a803      	add	r0, sp, #12
 80074c2:	4621      	mov	r1, r4
 80074c4:	f000 f88e 	bl	80075e4 <__kernel_rem_pio2f>
 80074c8:	2e00      	cmp	r6, #0
 80074ca:	f6bf af1c 	bge.w	8007306 <__ieee754_rem_pio2f+0x5a>
 80074ce:	edd4 7a00 	vldr	s15, [r4]
 80074d2:	eef1 7a67 	vneg.f32	s15, s15
 80074d6:	edc4 7a00 	vstr	s15, [r4]
 80074da:	edd4 7a01 	vldr	s15, [r4, #4]
 80074de:	eef1 7a67 	vneg.f32	s15, s15
 80074e2:	edc4 7a01 	vstr	s15, [r4, #4]
 80074e6:	e779      	b.n	80073dc <__ieee754_rem_pio2f+0x130>
 80074e8:	2303      	movs	r3, #3
 80074ea:	e7e5      	b.n	80074b8 <__ieee754_rem_pio2f+0x20c>
 80074ec:	3f490fd8 	.word	0x3f490fd8
 80074f0:	4016cbe3 	.word	0x4016cbe3
 80074f4:	3fc90f80 	.word	0x3fc90f80
 80074f8:	3fc90fd0 	.word	0x3fc90fd0
 80074fc:	37354443 	.word	0x37354443
 8007500:	37354400 	.word	0x37354400
 8007504:	2e85a308 	.word	0x2e85a308
 8007508:	43490f80 	.word	0x43490f80
 800750c:	3f22f984 	.word	0x3f22f984
 8007510:	0800a7cc 	.word	0x0800a7cc
 8007514:	2e85a300 	.word	0x2e85a300
 8007518:	248d3132 	.word	0x248d3132
 800751c:	43800000 	.word	0x43800000
 8007520:	0800a84c 	.word	0x0800a84c

08007524 <__kernel_cosf>:
 8007524:	ee10 3a10 	vmov	r3, s0
 8007528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800752c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007530:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007534:	da05      	bge.n	8007542 <__kernel_cosf+0x1e>
 8007536:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800753a:	ee17 2a90 	vmov	r2, s15
 800753e:	2a00      	cmp	r2, #0
 8007540:	d03d      	beq.n	80075be <__kernel_cosf+0x9a>
 8007542:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007546:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80075c4 <__kernel_cosf+0xa0>
 800754a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80075c8 <__kernel_cosf+0xa4>
 800754e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80075cc <__kernel_cosf+0xa8>
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <__kernel_cosf+0xac>)
 8007554:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007558:	4293      	cmp	r3, r2
 800755a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80075d4 <__kernel_cosf+0xb0>
 800755e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007562:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80075d8 <__kernel_cosf+0xb4>
 8007566:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800756a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80075dc <__kernel_cosf+0xb8>
 800756e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007572:	eeb0 7a66 	vmov.f32	s14, s13
 8007576:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800757a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800757e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007582:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007586:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800758a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800758e:	dc04      	bgt.n	800759a <__kernel_cosf+0x76>
 8007590:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007594:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007598:	4770      	bx	lr
 800759a:	4a11      	ldr	r2, [pc, #68]	; (80075e0 <__kernel_cosf+0xbc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	bfda      	itte	le
 80075a0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80075a4:	ee06 3a90 	vmovle	s13, r3
 80075a8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80075ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075b0:	ee36 0a66 	vsub.f32	s0, s12, s13
 80075b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80075bc:	4770      	bx	lr
 80075be:	eeb0 0a46 	vmov.f32	s0, s12
 80075c2:	4770      	bx	lr
 80075c4:	ad47d74e 	.word	0xad47d74e
 80075c8:	310f74f6 	.word	0x310f74f6
 80075cc:	3d2aaaab 	.word	0x3d2aaaab
 80075d0:	3e999999 	.word	0x3e999999
 80075d4:	b493f27c 	.word	0xb493f27c
 80075d8:	37d00d01 	.word	0x37d00d01
 80075dc:	bab60b61 	.word	0xbab60b61
 80075e0:	3f480000 	.word	0x3f480000

080075e4 <__kernel_rem_pio2f>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	ed2d 8b04 	vpush	{d8-d9}
 80075ec:	b0d7      	sub	sp, #348	; 0x15c
 80075ee:	4616      	mov	r6, r2
 80075f0:	4698      	mov	r8, r3
 80075f2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80075f4:	4bbb      	ldr	r3, [pc, #748]	; (80078e4 <__kernel_rem_pio2f+0x300>)
 80075f6:	9001      	str	r0, [sp, #4]
 80075f8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80075fc:	1d33      	adds	r3, r6, #4
 80075fe:	460d      	mov	r5, r1
 8007600:	f108 39ff 	add.w	r9, r8, #4294967295
 8007604:	db29      	blt.n	800765a <__kernel_rem_pio2f+0x76>
 8007606:	1ef1      	subs	r1, r6, #3
 8007608:	bf48      	it	mi
 800760a:	1d31      	addmi	r1, r6, #4
 800760c:	10c9      	asrs	r1, r1, #3
 800760e:	1c4c      	adds	r4, r1, #1
 8007610:	00e3      	lsls	r3, r4, #3
 8007612:	9302      	str	r3, [sp, #8]
 8007614:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007616:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80078f4 <__kernel_rem_pio2f+0x310>
 800761a:	eba1 0009 	sub.w	r0, r1, r9
 800761e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007622:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007626:	eb07 0c09 	add.w	ip, r7, r9
 800762a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800762e:	2300      	movs	r3, #0
 8007630:	4563      	cmp	r3, ip
 8007632:	dd14      	ble.n	800765e <__kernel_rem_pio2f+0x7a>
 8007634:	ab1a      	add	r3, sp, #104	; 0x68
 8007636:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800763a:	46cc      	mov	ip, r9
 800763c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007640:	f1c8 0b01 	rsb	fp, r8, #1
 8007644:	eb0b 020c 	add.w	r2, fp, ip
 8007648:	4297      	cmp	r7, r2
 800764a:	db27      	blt.n	800769c <__kernel_rem_pio2f+0xb8>
 800764c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007650:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80078f4 <__kernel_rem_pio2f+0x310>
 8007654:	4618      	mov	r0, r3
 8007656:	2200      	movs	r2, #0
 8007658:	e016      	b.n	8007688 <__kernel_rem_pio2f+0xa4>
 800765a:	2100      	movs	r1, #0
 800765c:	e7d7      	b.n	800760e <__kernel_rem_pio2f+0x2a>
 800765e:	42d8      	cmn	r0, r3
 8007660:	bf5d      	ittte	pl
 8007662:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007666:	ee07 2a90 	vmovpl	s15, r2
 800766a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800766e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007672:	ecea 7a01 	vstmia	sl!, {s15}
 8007676:	3301      	adds	r3, #1
 8007678:	e7da      	b.n	8007630 <__kernel_rem_pio2f+0x4c>
 800767a:	ecfe 6a01 	vldmia	lr!, {s13}
 800767e:	ed90 7a00 	vldr	s14, [r0]
 8007682:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007686:	3201      	adds	r2, #1
 8007688:	454a      	cmp	r2, r9
 800768a:	f1a0 0004 	sub.w	r0, r0, #4
 800768e:	ddf4      	ble.n	800767a <__kernel_rem_pio2f+0x96>
 8007690:	ecea 7a01 	vstmia	sl!, {s15}
 8007694:	3304      	adds	r3, #4
 8007696:	f10c 0c01 	add.w	ip, ip, #1
 800769a:	e7d3      	b.n	8007644 <__kernel_rem_pio2f+0x60>
 800769c:	ab06      	add	r3, sp, #24
 800769e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80076a6:	eddf 8a92 	vldr	s17, [pc, #584]	; 80078f0 <__kernel_rem_pio2f+0x30c>
 80076aa:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80078ec <__kernel_rem_pio2f+0x308>
 80076ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80076b2:	9303      	str	r3, [sp, #12]
 80076b4:	46ba      	mov	sl, r7
 80076b6:	ab56      	add	r3, sp, #344	; 0x158
 80076b8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80076bc:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80076c0:	ab06      	add	r3, sp, #24
 80076c2:	4618      	mov	r0, r3
 80076c4:	4652      	mov	r2, sl
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	dc51      	bgt.n	800776e <__kernel_rem_pio2f+0x18a>
 80076ca:	4620      	mov	r0, r4
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	f000 faa5 	bl	8007c1c <scalbnf>
 80076d2:	eeb0 8a40 	vmov.f32	s16, s0
 80076d6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80076da:	ee28 0a00 	vmul.f32	s0, s16, s0
 80076de:	f000 fa5b 	bl	8007b98 <floorf>
 80076e2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80076e6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80076f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80076f6:	edcd 7a00 	vstr	s15, [sp]
 80076fa:	ee38 8a40 	vsub.f32	s16, s16, s0
 80076fe:	dd4b      	ble.n	8007798 <__kernel_rem_pio2f+0x1b4>
 8007700:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007704:	aa06      	add	r2, sp, #24
 8007706:	f1c4 0e08 	rsb	lr, r4, #8
 800770a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800770e:	ee17 1a90 	vmov	r1, s15
 8007712:	fa42 f00e 	asr.w	r0, r2, lr
 8007716:	4401      	add	r1, r0
 8007718:	9100      	str	r1, [sp, #0]
 800771a:	fa00 f00e 	lsl.w	r0, r0, lr
 800771e:	a906      	add	r1, sp, #24
 8007720:	1a12      	subs	r2, r2, r0
 8007722:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007726:	f1c4 0007 	rsb	r0, r4, #7
 800772a:	fa42 fb00 	asr.w	fp, r2, r0
 800772e:	f1bb 0f00 	cmp.w	fp, #0
 8007732:	dd43      	ble.n	80077bc <__kernel_rem_pio2f+0x1d8>
 8007734:	9a00      	ldr	r2, [sp, #0]
 8007736:	f04f 0e00 	mov.w	lr, #0
 800773a:	3201      	adds	r2, #1
 800773c:	9200      	str	r2, [sp, #0]
 800773e:	4670      	mov	r0, lr
 8007740:	45f2      	cmp	sl, lr
 8007742:	dc6c      	bgt.n	800781e <__kernel_rem_pio2f+0x23a>
 8007744:	2c00      	cmp	r4, #0
 8007746:	dd04      	ble.n	8007752 <__kernel_rem_pio2f+0x16e>
 8007748:	2c01      	cmp	r4, #1
 800774a:	d079      	beq.n	8007840 <__kernel_rem_pio2f+0x25c>
 800774c:	2c02      	cmp	r4, #2
 800774e:	f000 8082 	beq.w	8007856 <__kernel_rem_pio2f+0x272>
 8007752:	f1bb 0f02 	cmp.w	fp, #2
 8007756:	d131      	bne.n	80077bc <__kernel_rem_pio2f+0x1d8>
 8007758:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800775c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007760:	b360      	cbz	r0, 80077bc <__kernel_rem_pio2f+0x1d8>
 8007762:	4620      	mov	r0, r4
 8007764:	f000 fa5a 	bl	8007c1c <scalbnf>
 8007768:	ee38 8a40 	vsub.f32	s16, s16, s0
 800776c:	e026      	b.n	80077bc <__kernel_rem_pio2f+0x1d8>
 800776e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007772:	3a01      	subs	r2, #1
 8007774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007778:	a942      	add	r1, sp, #264	; 0x108
 800777a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800777e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007782:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007786:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800778a:	eca0 0a01 	vstmia	r0!, {s0}
 800778e:	ed9c 0a00 	vldr	s0, [ip]
 8007792:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007796:	e796      	b.n	80076c6 <__kernel_rem_pio2f+0xe2>
 8007798:	d107      	bne.n	80077aa <__kernel_rem_pio2f+0x1c6>
 800779a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800779e:	a906      	add	r1, sp, #24
 80077a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80077a4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80077a8:	e7c1      	b.n	800772e <__kernel_rem_pio2f+0x14a>
 80077aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80077ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	da2f      	bge.n	8007818 <__kernel_rem_pio2f+0x234>
 80077b8:	f04f 0b00 	mov.w	fp, #0
 80077bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80077c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c4:	f040 8098 	bne.w	80078f8 <__kernel_rem_pio2f+0x314>
 80077c8:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077cc:	469c      	mov	ip, r3
 80077ce:	2200      	movs	r2, #0
 80077d0:	45bc      	cmp	ip, r7
 80077d2:	da48      	bge.n	8007866 <__kernel_rem_pio2f+0x282>
 80077d4:	2a00      	cmp	r2, #0
 80077d6:	d05f      	beq.n	8007898 <__kernel_rem_pio2f+0x2b4>
 80077d8:	aa06      	add	r2, sp, #24
 80077da:	3c08      	subs	r4, #8
 80077dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80077e0:	2900      	cmp	r1, #0
 80077e2:	d07d      	beq.n	80078e0 <__kernel_rem_pio2f+0x2fc>
 80077e4:	4620      	mov	r0, r4
 80077e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	f000 fa16 	bl	8007c1c <scalbnf>
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80078f0 <__kernel_rem_pio2f+0x30c>
 80077f6:	4619      	mov	r1, r3
 80077f8:	2900      	cmp	r1, #0
 80077fa:	f280 80af 	bge.w	800795c <__kernel_rem_pio2f+0x378>
 80077fe:	4618      	mov	r0, r3
 8007800:	2400      	movs	r4, #0
 8007802:	2800      	cmp	r0, #0
 8007804:	f2c0 80d0 	blt.w	80079a8 <__kernel_rem_pio2f+0x3c4>
 8007808:	a942      	add	r1, sp, #264	; 0x108
 800780a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800780e:	4a36      	ldr	r2, [pc, #216]	; (80078e8 <__kernel_rem_pio2f+0x304>)
 8007810:	eddf 7a38 	vldr	s15, [pc, #224]	; 80078f4 <__kernel_rem_pio2f+0x310>
 8007814:	2100      	movs	r1, #0
 8007816:	e0bb      	b.n	8007990 <__kernel_rem_pio2f+0x3ac>
 8007818:	f04f 0b02 	mov.w	fp, #2
 800781c:	e78a      	b.n	8007734 <__kernel_rem_pio2f+0x150>
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	b948      	cbnz	r0, 8007836 <__kernel_rem_pio2f+0x252>
 8007822:	b11a      	cbz	r2, 800782c <__kernel_rem_pio2f+0x248>
 8007824:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	2201      	movs	r2, #1
 800782c:	f10e 0e01 	add.w	lr, lr, #1
 8007830:	3304      	adds	r3, #4
 8007832:	4610      	mov	r0, r2
 8007834:	e784      	b.n	8007740 <__kernel_rem_pio2f+0x15c>
 8007836:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	4602      	mov	r2, r0
 800783e:	e7f5      	b.n	800782c <__kernel_rem_pio2f+0x248>
 8007840:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007844:	ab06      	add	r3, sp, #24
 8007846:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800784a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784e:	aa06      	add	r2, sp, #24
 8007850:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007854:	e77d      	b.n	8007752 <__kernel_rem_pio2f+0x16e>
 8007856:	f10a 3cff 	add.w	ip, sl, #4294967295
 800785a:	ab06      	add	r3, sp, #24
 800785c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007864:	e7f3      	b.n	800784e <__kernel_rem_pio2f+0x26a>
 8007866:	a906      	add	r1, sp, #24
 8007868:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800786c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007870:	4302      	orrs	r2, r0
 8007872:	e7ad      	b.n	80077d0 <__kernel_rem_pio2f+0x1ec>
 8007874:	3001      	adds	r0, #1
 8007876:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800787a:	2a00      	cmp	r2, #0
 800787c:	d0fa      	beq.n	8007874 <__kernel_rem_pio2f+0x290>
 800787e:	a91a      	add	r1, sp, #104	; 0x68
 8007880:	eb0a 0208 	add.w	r2, sl, r8
 8007884:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007888:	f10a 0301 	add.w	r3, sl, #1
 800788c:	eb0a 0100 	add.w	r1, sl, r0
 8007890:	4299      	cmp	r1, r3
 8007892:	da04      	bge.n	800789e <__kernel_rem_pio2f+0x2ba>
 8007894:	468a      	mov	sl, r1
 8007896:	e70e      	b.n	80076b6 <__kernel_rem_pio2f+0xd2>
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	2001      	movs	r0, #1
 800789c:	e7eb      	b.n	8007876 <__kernel_rem_pio2f+0x292>
 800789e:	9803      	ldr	r0, [sp, #12]
 80078a0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80078a4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80078a8:	9000      	str	r0, [sp, #0]
 80078aa:	ee07 0a90 	vmov	s15, r0
 80078ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078b2:	2000      	movs	r0, #0
 80078b4:	ece2 7a01 	vstmia	r2!, {s15}
 80078b8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80078f4 <__kernel_rem_pio2f+0x310>
 80078bc:	4696      	mov	lr, r2
 80078be:	4548      	cmp	r0, r9
 80078c0:	dd06      	ble.n	80078d0 <__kernel_rem_pio2f+0x2ec>
 80078c2:	a842      	add	r0, sp, #264	; 0x108
 80078c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80078c8:	edc0 7a00 	vstr	s15, [r0]
 80078cc:	3301      	adds	r3, #1
 80078ce:	e7df      	b.n	8007890 <__kernel_rem_pio2f+0x2ac>
 80078d0:	ecfc 6a01 	vldmia	ip!, {s13}
 80078d4:	ed3e 7a01 	vldmdb	lr!, {s14}
 80078d8:	3001      	adds	r0, #1
 80078da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078de:	e7ee      	b.n	80078be <__kernel_rem_pio2f+0x2da>
 80078e0:	3b01      	subs	r3, #1
 80078e2:	e779      	b.n	80077d8 <__kernel_rem_pio2f+0x1f4>
 80078e4:	0800ab90 	.word	0x0800ab90
 80078e8:	0800ab64 	.word	0x0800ab64
 80078ec:	43800000 	.word	0x43800000
 80078f0:	3b800000 	.word	0x3b800000
 80078f4:	00000000 	.word	0x00000000
 80078f8:	9b02      	ldr	r3, [sp, #8]
 80078fa:	eeb0 0a48 	vmov.f32	s0, s16
 80078fe:	1b98      	subs	r0, r3, r6
 8007900:	f000 f98c 	bl	8007c1c <scalbnf>
 8007904:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80078ec <__kernel_rem_pio2f+0x308>
 8007908:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	db1b      	blt.n	800794a <__kernel_rem_pio2f+0x366>
 8007912:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80078f0 <__kernel_rem_pio2f+0x30c>
 8007916:	ee60 7a27 	vmul.f32	s15, s0, s15
 800791a:	aa06      	add	r2, sp, #24
 800791c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007920:	a906      	add	r1, sp, #24
 8007922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007926:	3408      	adds	r4, #8
 8007928:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800792c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007930:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007934:	ee10 3a10 	vmov	r3, s0
 8007938:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800793c:	ee17 2a90 	vmov	r2, s15
 8007940:	f10a 0301 	add.w	r3, sl, #1
 8007944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007948:	e74c      	b.n	80077e4 <__kernel_rem_pio2f+0x200>
 800794a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800794e:	aa06      	add	r2, sp, #24
 8007950:	ee10 3a10 	vmov	r3, s0
 8007954:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007958:	4653      	mov	r3, sl
 800795a:	e743      	b.n	80077e4 <__kernel_rem_pio2f+0x200>
 800795c:	aa42      	add	r2, sp, #264	; 0x108
 800795e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007962:	aa06      	add	r2, sp, #24
 8007964:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007968:	9201      	str	r2, [sp, #4]
 800796a:	ee07 2a90 	vmov	s15, r2
 800796e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007972:	3901      	subs	r1, #1
 8007974:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007978:	ee20 0a07 	vmul.f32	s0, s0, s14
 800797c:	edc0 7a00 	vstr	s15, [r0]
 8007980:	e73a      	b.n	80077f8 <__kernel_rem_pio2f+0x214>
 8007982:	ecf2 6a01 	vldmia	r2!, {s13}
 8007986:	ecb6 7a01 	vldmia	r6!, {s14}
 800798a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800798e:	3101      	adds	r1, #1
 8007990:	42b9      	cmp	r1, r7
 8007992:	dc01      	bgt.n	8007998 <__kernel_rem_pio2f+0x3b4>
 8007994:	428c      	cmp	r4, r1
 8007996:	daf4      	bge.n	8007982 <__kernel_rem_pio2f+0x39e>
 8007998:	aa56      	add	r2, sp, #344	; 0x158
 800799a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800799e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80079a2:	3801      	subs	r0, #1
 80079a4:	3401      	adds	r4, #1
 80079a6:	e72c      	b.n	8007802 <__kernel_rem_pio2f+0x21e>
 80079a8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80079aa:	2a02      	cmp	r2, #2
 80079ac:	dc0a      	bgt.n	80079c4 <__kernel_rem_pio2f+0x3e0>
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	dc61      	bgt.n	8007a76 <__kernel_rem_pio2f+0x492>
 80079b2:	d03c      	beq.n	8007a2e <__kernel_rem_pio2f+0x44a>
 80079b4:	9b00      	ldr	r3, [sp, #0]
 80079b6:	f003 0007 	and.w	r0, r3, #7
 80079ba:	b057      	add	sp, #348	; 0x15c
 80079bc:	ecbd 8b04 	vpop	{d8-d9}
 80079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80079c6:	2a03      	cmp	r2, #3
 80079c8:	d1f4      	bne.n	80079b4 <__kernel_rem_pio2f+0x3d0>
 80079ca:	aa2e      	add	r2, sp, #184	; 0xb8
 80079cc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80079d0:	4608      	mov	r0, r1
 80079d2:	461c      	mov	r4, r3
 80079d4:	2c00      	cmp	r4, #0
 80079d6:	f1a0 0004 	sub.w	r0, r0, #4
 80079da:	dc59      	bgt.n	8007a90 <__kernel_rem_pio2f+0x4ac>
 80079dc:	4618      	mov	r0, r3
 80079de:	2801      	cmp	r0, #1
 80079e0:	f1a1 0104 	sub.w	r1, r1, #4
 80079e4:	dc64      	bgt.n	8007ab0 <__kernel_rem_pio2f+0x4cc>
 80079e6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80078f4 <__kernel_rem_pio2f+0x310>
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	dc70      	bgt.n	8007ad0 <__kernel_rem_pio2f+0x4ec>
 80079ee:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80079f2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80079f6:	f1bb 0f00 	cmp.w	fp, #0
 80079fa:	d172      	bne.n	8007ae2 <__kernel_rem_pio2f+0x4fe>
 80079fc:	edc5 6a00 	vstr	s13, [r5]
 8007a00:	ed85 7a01 	vstr	s14, [r5, #4]
 8007a04:	edc5 7a02 	vstr	s15, [r5, #8]
 8007a08:	e7d4      	b.n	80079b4 <__kernel_rem_pio2f+0x3d0>
 8007a0a:	aa2e      	add	r2, sp, #184	; 0xb8
 8007a0c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007a10:	ed91 7a00 	vldr	s14, [r1]
 8007a14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	daf5      	bge.n	8007a0a <__kernel_rem_pio2f+0x426>
 8007a1e:	f1bb 0f00 	cmp.w	fp, #0
 8007a22:	d001      	beq.n	8007a28 <__kernel_rem_pio2f+0x444>
 8007a24:	eef1 7a67 	vneg.f32	s15, s15
 8007a28:	edc5 7a00 	vstr	s15, [r5]
 8007a2c:	e7c2      	b.n	80079b4 <__kernel_rem_pio2f+0x3d0>
 8007a2e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80078f4 <__kernel_rem_pio2f+0x310>
 8007a32:	e7f2      	b.n	8007a1a <__kernel_rem_pio2f+0x436>
 8007a34:	aa2e      	add	r2, sp, #184	; 0xb8
 8007a36:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007a3a:	edd0 7a00 	vldr	s15, [r0]
 8007a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a42:	3901      	subs	r1, #1
 8007a44:	2900      	cmp	r1, #0
 8007a46:	daf5      	bge.n	8007a34 <__kernel_rem_pio2f+0x450>
 8007a48:	f1bb 0f00 	cmp.w	fp, #0
 8007a4c:	d017      	beq.n	8007a7e <__kernel_rem_pio2f+0x49a>
 8007a4e:	eef1 7a47 	vneg.f32	s15, s14
 8007a52:	edc5 7a00 	vstr	s15, [r5]
 8007a56:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007a5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a5e:	a82f      	add	r0, sp, #188	; 0xbc
 8007a60:	2101      	movs	r1, #1
 8007a62:	428b      	cmp	r3, r1
 8007a64:	da0e      	bge.n	8007a84 <__kernel_rem_pio2f+0x4a0>
 8007a66:	f1bb 0f00 	cmp.w	fp, #0
 8007a6a:	d001      	beq.n	8007a70 <__kernel_rem_pio2f+0x48c>
 8007a6c:	eef1 7a67 	vneg.f32	s15, s15
 8007a70:	edc5 7a01 	vstr	s15, [r5, #4]
 8007a74:	e79e      	b.n	80079b4 <__kernel_rem_pio2f+0x3d0>
 8007a76:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80078f4 <__kernel_rem_pio2f+0x310>
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	e7e2      	b.n	8007a44 <__kernel_rem_pio2f+0x460>
 8007a7e:	eef0 7a47 	vmov.f32	s15, s14
 8007a82:	e7e6      	b.n	8007a52 <__kernel_rem_pio2f+0x46e>
 8007a84:	ecb0 7a01 	vldmia	r0!, {s14}
 8007a88:	3101      	adds	r1, #1
 8007a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a8e:	e7e8      	b.n	8007a62 <__kernel_rem_pio2f+0x47e>
 8007a90:	edd0 7a00 	vldr	s15, [r0]
 8007a94:	edd0 6a01 	vldr	s13, [r0, #4]
 8007a98:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a9c:	3c01      	subs	r4, #1
 8007a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aa2:	ed80 7a00 	vstr	s14, [r0]
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	edc0 7a01 	vstr	s15, [r0, #4]
 8007aae:	e791      	b.n	80079d4 <__kernel_rem_pio2f+0x3f0>
 8007ab0:	edd1 7a00 	vldr	s15, [r1]
 8007ab4:	edd1 6a01 	vldr	s13, [r1, #4]
 8007ab8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007abc:	3801      	subs	r0, #1
 8007abe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ac2:	ed81 7a00 	vstr	s14, [r1]
 8007ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aca:	edc1 7a01 	vstr	s15, [r1, #4]
 8007ace:	e786      	b.n	80079de <__kernel_rem_pio2f+0x3fa>
 8007ad0:	aa2e      	add	r2, sp, #184	; 0xb8
 8007ad2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007ad6:	ed91 7a00 	vldr	s14, [r1]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ae0:	e783      	b.n	80079ea <__kernel_rem_pio2f+0x406>
 8007ae2:	eef1 6a66 	vneg.f32	s13, s13
 8007ae6:	eeb1 7a47 	vneg.f32	s14, s14
 8007aea:	edc5 6a00 	vstr	s13, [r5]
 8007aee:	ed85 7a01 	vstr	s14, [r5, #4]
 8007af2:	eef1 7a67 	vneg.f32	s15, s15
 8007af6:	e785      	b.n	8007a04 <__kernel_rem_pio2f+0x420>

08007af8 <__kernel_sinf>:
 8007af8:	ee10 3a10 	vmov	r3, s0
 8007afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007b04:	da04      	bge.n	8007b10 <__kernel_sinf+0x18>
 8007b06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007b0a:	ee17 3a90 	vmov	r3, s15
 8007b0e:	b35b      	cbz	r3, 8007b68 <__kernel_sinf+0x70>
 8007b10:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007b14:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007b6c <__kernel_sinf+0x74>
 8007b18:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007b70 <__kernel_sinf+0x78>
 8007b1c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b20:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007b74 <__kernel_sinf+0x7c>
 8007b24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b28:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007b78 <__kernel_sinf+0x80>
 8007b2c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007b30:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007b7c <__kernel_sinf+0x84>
 8007b34:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007b38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b3c:	b930      	cbnz	r0, 8007b4c <__kernel_sinf+0x54>
 8007b3e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007b80 <__kernel_sinf+0x88>
 8007b42:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b46:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007b4a:	4770      	bx	lr
 8007b4c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007b50:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007b54:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007b58:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007b5c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007b84 <__kernel_sinf+0x8c>
 8007b60:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007b64:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	2f2ec9d3 	.word	0x2f2ec9d3
 8007b70:	b2d72f34 	.word	0xb2d72f34
 8007b74:	3638ef1b 	.word	0x3638ef1b
 8007b78:	b9500d01 	.word	0xb9500d01
 8007b7c:	3c088889 	.word	0x3c088889
 8007b80:	be2aaaab 	.word	0xbe2aaaab
 8007b84:	3e2aaaab 	.word	0x3e2aaaab

08007b88 <fabsf>:
 8007b88:	ee10 3a10 	vmov	r3, s0
 8007b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b90:	ee00 3a10 	vmov	s0, r3
 8007b94:	4770      	bx	lr
	...

08007b98 <floorf>:
 8007b98:	ee10 3a10 	vmov	r3, s0
 8007b9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007ba0:	3a7f      	subs	r2, #127	; 0x7f
 8007ba2:	2a16      	cmp	r2, #22
 8007ba4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ba8:	dc2a      	bgt.n	8007c00 <floorf+0x68>
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	da11      	bge.n	8007bd2 <floorf+0x3a>
 8007bae:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007c10 <floorf+0x78>
 8007bb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bb6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbe:	dd05      	ble.n	8007bcc <floorf+0x34>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	da23      	bge.n	8007c0c <floorf+0x74>
 8007bc4:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <floorf+0x7c>)
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	bf18      	it	ne
 8007bca:	4613      	movne	r3, r2
 8007bcc:	ee00 3a10 	vmov	s0, r3
 8007bd0:	4770      	bx	lr
 8007bd2:	4911      	ldr	r1, [pc, #68]	; (8007c18 <floorf+0x80>)
 8007bd4:	4111      	asrs	r1, r2
 8007bd6:	420b      	tst	r3, r1
 8007bd8:	d0fa      	beq.n	8007bd0 <floorf+0x38>
 8007bda:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007c10 <floorf+0x78>
 8007bde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007be2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bea:	ddef      	ble.n	8007bcc <floorf+0x34>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bfbe      	ittt	lt
 8007bf0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007bf4:	fa40 f202 	asrlt.w	r2, r0, r2
 8007bf8:	189b      	addlt	r3, r3, r2
 8007bfa:	ea23 0301 	bic.w	r3, r3, r1
 8007bfe:	e7e5      	b.n	8007bcc <floorf+0x34>
 8007c00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c04:	d3e4      	bcc.n	8007bd0 <floorf+0x38>
 8007c06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c0a:	4770      	bx	lr
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e7dd      	b.n	8007bcc <floorf+0x34>
 8007c10:	7149f2ca 	.word	0x7149f2ca
 8007c14:	bf800000 	.word	0xbf800000
 8007c18:	007fffff 	.word	0x007fffff

08007c1c <scalbnf>:
 8007c1c:	ee10 3a10 	vmov	r3, s0
 8007c20:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007c24:	d025      	beq.n	8007c72 <scalbnf+0x56>
 8007c26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c2a:	d302      	bcc.n	8007c32 <scalbnf+0x16>
 8007c2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c30:	4770      	bx	lr
 8007c32:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007c36:	d122      	bne.n	8007c7e <scalbnf+0x62>
 8007c38:	4b2a      	ldr	r3, [pc, #168]	; (8007ce4 <scalbnf+0xc8>)
 8007c3a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007ce8 <scalbnf+0xcc>
 8007c3e:	4298      	cmp	r0, r3
 8007c40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c44:	db16      	blt.n	8007c74 <scalbnf+0x58>
 8007c46:	ee10 3a10 	vmov	r3, s0
 8007c4a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c4e:	3a19      	subs	r2, #25
 8007c50:	4402      	add	r2, r0
 8007c52:	2afe      	cmp	r2, #254	; 0xfe
 8007c54:	dd15      	ble.n	8007c82 <scalbnf+0x66>
 8007c56:	ee10 3a10 	vmov	r3, s0
 8007c5a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007cec <scalbnf+0xd0>
 8007c5e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007cf0 <scalbnf+0xd4>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	eeb0 7a67 	vmov.f32	s14, s15
 8007c68:	bfb8      	it	lt
 8007c6a:	eef0 7a66 	vmovlt.f32	s15, s13
 8007c6e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007c72:	4770      	bx	lr
 8007c74:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007cf4 <scalbnf+0xd8>
 8007c78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c7c:	4770      	bx	lr
 8007c7e:	0dd2      	lsrs	r2, r2, #23
 8007c80:	e7e6      	b.n	8007c50 <scalbnf+0x34>
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	dd06      	ble.n	8007c94 <scalbnf+0x78>
 8007c86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c8a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c8e:	ee00 3a10 	vmov	s0, r3
 8007c92:	4770      	bx	lr
 8007c94:	f112 0f16 	cmn.w	r2, #22
 8007c98:	da1a      	bge.n	8007cd0 <scalbnf+0xb4>
 8007c9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c9e:	4298      	cmp	r0, r3
 8007ca0:	ee10 3a10 	vmov	r3, s0
 8007ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca8:	dd0a      	ble.n	8007cc0 <scalbnf+0xa4>
 8007caa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007cec <scalbnf+0xd0>
 8007cae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007cf0 <scalbnf+0xd4>
 8007cb2:	eef0 7a40 	vmov.f32	s15, s0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bf18      	it	ne
 8007cba:	eeb0 0a47 	vmovne.f32	s0, s14
 8007cbe:	e7db      	b.n	8007c78 <scalbnf+0x5c>
 8007cc0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007cf4 <scalbnf+0xd8>
 8007cc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007cf8 <scalbnf+0xdc>
 8007cc8:	eef0 7a40 	vmov.f32	s15, s0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	e7f3      	b.n	8007cb8 <scalbnf+0x9c>
 8007cd0:	3219      	adds	r2, #25
 8007cd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cd6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007cda:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007cfc <scalbnf+0xe0>
 8007cde:	ee07 3a10 	vmov	s14, r3
 8007ce2:	e7c4      	b.n	8007c6e <scalbnf+0x52>
 8007ce4:	ffff3cb0 	.word	0xffff3cb0
 8007ce8:	4c000000 	.word	0x4c000000
 8007cec:	7149f2ca 	.word	0x7149f2ca
 8007cf0:	f149f2ca 	.word	0xf149f2ca
 8007cf4:	0da24260 	.word	0x0da24260
 8007cf8:	8da24260 	.word	0x8da24260
 8007cfc:	33000000 	.word	0x33000000

08007d00 <__errno>:
 8007d00:	4b01      	ldr	r3, [pc, #4]	; (8007d08 <__errno+0x8>)
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20000184 	.word	0x20000184

08007d0c <__libc_init_array>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4d0d      	ldr	r5, [pc, #52]	; (8007d44 <__libc_init_array+0x38>)
 8007d10:	4c0d      	ldr	r4, [pc, #52]	; (8007d48 <__libc_init_array+0x3c>)
 8007d12:	1b64      	subs	r4, r4, r5
 8007d14:	10a4      	asrs	r4, r4, #2
 8007d16:	2600      	movs	r6, #0
 8007d18:	42a6      	cmp	r6, r4
 8007d1a:	d109      	bne.n	8007d30 <__libc_init_array+0x24>
 8007d1c:	4d0b      	ldr	r5, [pc, #44]	; (8007d4c <__libc_init_array+0x40>)
 8007d1e:	4c0c      	ldr	r4, [pc, #48]	; (8007d50 <__libc_init_array+0x44>)
 8007d20:	f002 fd08 	bl	800a734 <_init>
 8007d24:	1b64      	subs	r4, r4, r5
 8007d26:	10a4      	asrs	r4, r4, #2
 8007d28:	2600      	movs	r6, #0
 8007d2a:	42a6      	cmp	r6, r4
 8007d2c:	d105      	bne.n	8007d3a <__libc_init_array+0x2e>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d34:	4798      	blx	r3
 8007d36:	3601      	adds	r6, #1
 8007d38:	e7ee      	b.n	8007d18 <__libc_init_array+0xc>
 8007d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3e:	4798      	blx	r3
 8007d40:	3601      	adds	r6, #1
 8007d42:	e7f2      	b.n	8007d2a <__libc_init_array+0x1e>
 8007d44:	0800af7c 	.word	0x0800af7c
 8007d48:	0800af7c 	.word	0x0800af7c
 8007d4c:	0800af7c 	.word	0x0800af7c
 8007d50:	0800af80 	.word	0x0800af80

08007d54 <memset>:
 8007d54:	4402      	add	r2, r0
 8007d56:	4603      	mov	r3, r0
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d100      	bne.n	8007d5e <memset+0xa>
 8007d5c:	4770      	bx	lr
 8007d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d62:	e7f9      	b.n	8007d58 <memset+0x4>

08007d64 <__cvt>:
 8007d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d68:	ec55 4b10 	vmov	r4, r5, d0
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	460e      	mov	r6, r1
 8007d70:	4619      	mov	r1, r3
 8007d72:	462b      	mov	r3, r5
 8007d74:	bfbb      	ittet	lt
 8007d76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d7a:	461d      	movlt	r5, r3
 8007d7c:	2300      	movge	r3, #0
 8007d7e:	232d      	movlt	r3, #45	; 0x2d
 8007d80:	700b      	strb	r3, [r1, #0]
 8007d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d88:	4691      	mov	r9, r2
 8007d8a:	f023 0820 	bic.w	r8, r3, #32
 8007d8e:	bfbc      	itt	lt
 8007d90:	4622      	movlt	r2, r4
 8007d92:	4614      	movlt	r4, r2
 8007d94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d98:	d005      	beq.n	8007da6 <__cvt+0x42>
 8007d9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d9e:	d100      	bne.n	8007da2 <__cvt+0x3e>
 8007da0:	3601      	adds	r6, #1
 8007da2:	2102      	movs	r1, #2
 8007da4:	e000      	b.n	8007da8 <__cvt+0x44>
 8007da6:	2103      	movs	r1, #3
 8007da8:	ab03      	add	r3, sp, #12
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	ab02      	add	r3, sp, #8
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	ec45 4b10 	vmov	d0, r4, r5
 8007db4:	4653      	mov	r3, sl
 8007db6:	4632      	mov	r2, r6
 8007db8:	f000 fce2 	bl	8008780 <_dtoa_r>
 8007dbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	d102      	bne.n	8007dca <__cvt+0x66>
 8007dc4:	f019 0f01 	tst.w	r9, #1
 8007dc8:	d022      	beq.n	8007e10 <__cvt+0xac>
 8007dca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dce:	eb07 0906 	add.w	r9, r7, r6
 8007dd2:	d110      	bne.n	8007df6 <__cvt+0x92>
 8007dd4:	783b      	ldrb	r3, [r7, #0]
 8007dd6:	2b30      	cmp	r3, #48	; 0x30
 8007dd8:	d10a      	bne.n	8007df0 <__cvt+0x8c>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de6:	b918      	cbnz	r0, 8007df0 <__cvt+0x8c>
 8007de8:	f1c6 0601 	rsb	r6, r6, #1
 8007dec:	f8ca 6000 	str.w	r6, [sl]
 8007df0:	f8da 3000 	ldr.w	r3, [sl]
 8007df4:	4499      	add	r9, r3
 8007df6:	2200      	movs	r2, #0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7f8 fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e02:	b108      	cbz	r0, 8007e08 <__cvt+0xa4>
 8007e04:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e08:	2230      	movs	r2, #48	; 0x30
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	454b      	cmp	r3, r9
 8007e0e:	d307      	bcc.n	8007e20 <__cvt+0xbc>
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e14:	1bdb      	subs	r3, r3, r7
 8007e16:	4638      	mov	r0, r7
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	b004      	add	sp, #16
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	1c59      	adds	r1, r3, #1
 8007e22:	9103      	str	r1, [sp, #12]
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	e7f0      	b.n	8007e0a <__cvt+0xa6>

08007e28 <__exponent>:
 8007e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	bfb8      	it	lt
 8007e30:	4249      	neglt	r1, r1
 8007e32:	f803 2b02 	strb.w	r2, [r3], #2
 8007e36:	bfb4      	ite	lt
 8007e38:	222d      	movlt	r2, #45	; 0x2d
 8007e3a:	222b      	movge	r2, #43	; 0x2b
 8007e3c:	2909      	cmp	r1, #9
 8007e3e:	7042      	strb	r2, [r0, #1]
 8007e40:	dd2a      	ble.n	8007e98 <__exponent+0x70>
 8007e42:	f10d 0407 	add.w	r4, sp, #7
 8007e46:	46a4      	mov	ip, r4
 8007e48:	270a      	movs	r7, #10
 8007e4a:	46a6      	mov	lr, r4
 8007e4c:	460a      	mov	r2, r1
 8007e4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e52:	fb07 1516 	mls	r5, r7, r6, r1
 8007e56:	3530      	adds	r5, #48	; 0x30
 8007e58:	2a63      	cmp	r2, #99	; 0x63
 8007e5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e62:	4631      	mov	r1, r6
 8007e64:	dcf1      	bgt.n	8007e4a <__exponent+0x22>
 8007e66:	3130      	adds	r1, #48	; 0x30
 8007e68:	f1ae 0502 	sub.w	r5, lr, #2
 8007e6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e70:	1c44      	adds	r4, r0, #1
 8007e72:	4629      	mov	r1, r5
 8007e74:	4561      	cmp	r1, ip
 8007e76:	d30a      	bcc.n	8007e8e <__exponent+0x66>
 8007e78:	f10d 0209 	add.w	r2, sp, #9
 8007e7c:	eba2 020e 	sub.w	r2, r2, lr
 8007e80:	4565      	cmp	r5, ip
 8007e82:	bf88      	it	hi
 8007e84:	2200      	movhi	r2, #0
 8007e86:	4413      	add	r3, r2
 8007e88:	1a18      	subs	r0, r3, r0
 8007e8a:	b003      	add	sp, #12
 8007e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e96:	e7ed      	b.n	8007e74 <__exponent+0x4c>
 8007e98:	2330      	movs	r3, #48	; 0x30
 8007e9a:	3130      	adds	r1, #48	; 0x30
 8007e9c:	7083      	strb	r3, [r0, #2]
 8007e9e:	70c1      	strb	r1, [r0, #3]
 8007ea0:	1d03      	adds	r3, r0, #4
 8007ea2:	e7f1      	b.n	8007e88 <__exponent+0x60>

08007ea4 <_printf_float>:
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	ed2d 8b02 	vpush	{d8}
 8007eac:	b08d      	sub	sp, #52	; 0x34
 8007eae:	460c      	mov	r4, r1
 8007eb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	4605      	mov	r5, r0
 8007eba:	f001 fb43 	bl	8009544 <_localeconv_r>
 8007ebe:	f8d0 a000 	ldr.w	sl, [r0]
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	f7f8 f984 	bl	80001d0 <strlen>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	930a      	str	r3, [sp, #40]	; 0x28
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ed8:	3307      	adds	r3, #7
 8007eda:	f023 0307 	bic.w	r3, r3, #7
 8007ede:	f103 0208 	add.w	r2, r3, #8
 8007ee2:	f8c8 2000 	str.w	r2, [r8]
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007eee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ef2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007efc:	ee08 0a10 	vmov	s16, r0
 8007f00:	4b9f      	ldr	r3, [pc, #636]	; (8008180 <_printf_float+0x2dc>)
 8007f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0a:	f7f8 fe0f 	bl	8000b2c <__aeabi_dcmpun>
 8007f0e:	bb88      	cbnz	r0, 8007f74 <_printf_float+0xd0>
 8007f10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f14:	4b9a      	ldr	r3, [pc, #616]	; (8008180 <_printf_float+0x2dc>)
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	f7f8 fde9 	bl	8000af0 <__aeabi_dcmple>
 8007f1e:	bb48      	cbnz	r0, 8007f74 <_printf_float+0xd0>
 8007f20:	2200      	movs	r2, #0
 8007f22:	2300      	movs	r3, #0
 8007f24:	4640      	mov	r0, r8
 8007f26:	4649      	mov	r1, r9
 8007f28:	f7f8 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8007f2c:	b110      	cbz	r0, 8007f34 <_printf_float+0x90>
 8007f2e:	232d      	movs	r3, #45	; 0x2d
 8007f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f34:	4b93      	ldr	r3, [pc, #588]	; (8008184 <_printf_float+0x2e0>)
 8007f36:	4894      	ldr	r0, [pc, #592]	; (8008188 <_printf_float+0x2e4>)
 8007f38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f3c:	bf94      	ite	ls
 8007f3e:	4698      	movls	r8, r3
 8007f40:	4680      	movhi	r8, r0
 8007f42:	2303      	movs	r3, #3
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	9b05      	ldr	r3, [sp, #20]
 8007f48:	f023 0204 	bic.w	r2, r3, #4
 8007f4c:	6022      	str	r2, [r4, #0]
 8007f4e:	f04f 0900 	mov.w	r9, #0
 8007f52:	9700      	str	r7, [sp, #0]
 8007f54:	4633      	mov	r3, r6
 8007f56:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 f9d8 	bl	8008310 <_printf_common>
 8007f60:	3001      	adds	r0, #1
 8007f62:	f040 8090 	bne.w	8008086 <_printf_float+0x1e2>
 8007f66:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6a:	b00d      	add	sp, #52	; 0x34
 8007f6c:	ecbd 8b02 	vpop	{d8}
 8007f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f74:	4642      	mov	r2, r8
 8007f76:	464b      	mov	r3, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	f7f8 fdd6 	bl	8000b2c <__aeabi_dcmpun>
 8007f80:	b140      	cbz	r0, 8007f94 <_printf_float+0xf0>
 8007f82:	464b      	mov	r3, r9
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfbc      	itt	lt
 8007f88:	232d      	movlt	r3, #45	; 0x2d
 8007f8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f8e:	487f      	ldr	r0, [pc, #508]	; (800818c <_printf_float+0x2e8>)
 8007f90:	4b7f      	ldr	r3, [pc, #508]	; (8008190 <_printf_float+0x2ec>)
 8007f92:	e7d1      	b.n	8007f38 <_printf_float+0x94>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f9a:	9206      	str	r2, [sp, #24]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	d13f      	bne.n	8008020 <_printf_float+0x17c>
 8007fa0:	2306      	movs	r3, #6
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	9b05      	ldr	r3, [sp, #20]
 8007fa6:	6861      	ldr	r1, [r4, #4]
 8007fa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fac:	2300      	movs	r3, #0
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	ab0a      	add	r3, sp, #40	; 0x28
 8007fb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fb6:	ab09      	add	r3, sp, #36	; 0x24
 8007fb8:	ec49 8b10 	vmov	d0, r8, r9
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	6022      	str	r2, [r4, #0]
 8007fc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f7ff fecd 	bl	8007d64 <__cvt>
 8007fca:	9b06      	ldr	r3, [sp, #24]
 8007fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fce:	2b47      	cmp	r3, #71	; 0x47
 8007fd0:	4680      	mov	r8, r0
 8007fd2:	d108      	bne.n	8007fe6 <_printf_float+0x142>
 8007fd4:	1cc8      	adds	r0, r1, #3
 8007fd6:	db02      	blt.n	8007fde <_printf_float+0x13a>
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	4299      	cmp	r1, r3
 8007fdc:	dd41      	ble.n	8008062 <_printf_float+0x1be>
 8007fde:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fe2:	fa5f fb8b 	uxtb.w	fp, fp
 8007fe6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fea:	d820      	bhi.n	800802e <_printf_float+0x18a>
 8007fec:	3901      	subs	r1, #1
 8007fee:	465a      	mov	r2, fp
 8007ff0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ff4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ff6:	f7ff ff17 	bl	8007e28 <__exponent>
 8007ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ffc:	1813      	adds	r3, r2, r0
 8007ffe:	2a01      	cmp	r2, #1
 8008000:	4681      	mov	r9, r0
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	dc02      	bgt.n	800800c <_printf_float+0x168>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	07d2      	lsls	r2, r2, #31
 800800a:	d501      	bpl.n	8008010 <_printf_float+0x16c>
 800800c:	3301      	adds	r3, #1
 800800e:	6123      	str	r3, [r4, #16]
 8008010:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008014:	2b00      	cmp	r3, #0
 8008016:	d09c      	beq.n	8007f52 <_printf_float+0xae>
 8008018:	232d      	movs	r3, #45	; 0x2d
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801e:	e798      	b.n	8007f52 <_printf_float+0xae>
 8008020:	9a06      	ldr	r2, [sp, #24]
 8008022:	2a47      	cmp	r2, #71	; 0x47
 8008024:	d1be      	bne.n	8007fa4 <_printf_float+0x100>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1bc      	bne.n	8007fa4 <_printf_float+0x100>
 800802a:	2301      	movs	r3, #1
 800802c:	e7b9      	b.n	8007fa2 <_printf_float+0xfe>
 800802e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008032:	d118      	bne.n	8008066 <_printf_float+0x1c2>
 8008034:	2900      	cmp	r1, #0
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	dd0b      	ble.n	8008052 <_printf_float+0x1ae>
 800803a:	6121      	str	r1, [r4, #16]
 800803c:	b913      	cbnz	r3, 8008044 <_printf_float+0x1a0>
 800803e:	6822      	ldr	r2, [r4, #0]
 8008040:	07d0      	lsls	r0, r2, #31
 8008042:	d502      	bpl.n	800804a <_printf_float+0x1a6>
 8008044:	3301      	adds	r3, #1
 8008046:	440b      	add	r3, r1
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	65a1      	str	r1, [r4, #88]	; 0x58
 800804c:	f04f 0900 	mov.w	r9, #0
 8008050:	e7de      	b.n	8008010 <_printf_float+0x16c>
 8008052:	b913      	cbnz	r3, 800805a <_printf_float+0x1b6>
 8008054:	6822      	ldr	r2, [r4, #0]
 8008056:	07d2      	lsls	r2, r2, #31
 8008058:	d501      	bpl.n	800805e <_printf_float+0x1ba>
 800805a:	3302      	adds	r3, #2
 800805c:	e7f4      	b.n	8008048 <_printf_float+0x1a4>
 800805e:	2301      	movs	r3, #1
 8008060:	e7f2      	b.n	8008048 <_printf_float+0x1a4>
 8008062:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	4299      	cmp	r1, r3
 800806a:	db05      	blt.n	8008078 <_printf_float+0x1d4>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	6121      	str	r1, [r4, #16]
 8008070:	07d8      	lsls	r0, r3, #31
 8008072:	d5ea      	bpl.n	800804a <_printf_float+0x1a6>
 8008074:	1c4b      	adds	r3, r1, #1
 8008076:	e7e7      	b.n	8008048 <_printf_float+0x1a4>
 8008078:	2900      	cmp	r1, #0
 800807a:	bfd4      	ite	le
 800807c:	f1c1 0202 	rsble	r2, r1, #2
 8008080:	2201      	movgt	r2, #1
 8008082:	4413      	add	r3, r2
 8008084:	e7e0      	b.n	8008048 <_printf_float+0x1a4>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	055a      	lsls	r2, r3, #21
 800808a:	d407      	bmi.n	800809c <_printf_float+0x1f8>
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	4642      	mov	r2, r8
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	d12c      	bne.n	80080f4 <_printf_float+0x250>
 800809a:	e764      	b.n	8007f66 <_printf_float+0xc2>
 800809c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080a0:	f240 80e0 	bls.w	8008264 <_printf_float+0x3c0>
 80080a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080a8:	2200      	movs	r2, #0
 80080aa:	2300      	movs	r3, #0
 80080ac:	f7f8 fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d034      	beq.n	800811e <_printf_float+0x27a>
 80080b4:	4a37      	ldr	r2, [pc, #220]	; (8008194 <_printf_float+0x2f0>)
 80080b6:	2301      	movs	r3, #1
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	f43f af51 	beq.w	8007f66 <_printf_float+0xc2>
 80080c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080c8:	429a      	cmp	r2, r3
 80080ca:	db02      	blt.n	80080d2 <_printf_float+0x22e>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	07d8      	lsls	r0, r3, #31
 80080d0:	d510      	bpl.n	80080f4 <_printf_float+0x250>
 80080d2:	ee18 3a10 	vmov	r3, s16
 80080d6:	4652      	mov	r2, sl
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f43f af41 	beq.w	8007f66 <_printf_float+0xc2>
 80080e4:	f04f 0800 	mov.w	r8, #0
 80080e8:	f104 091a 	add.w	r9, r4, #26
 80080ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ee:	3b01      	subs	r3, #1
 80080f0:	4543      	cmp	r3, r8
 80080f2:	dc09      	bgt.n	8008108 <_printf_float+0x264>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	079b      	lsls	r3, r3, #30
 80080f8:	f100 8105 	bmi.w	8008306 <_printf_float+0x462>
 80080fc:	68e0      	ldr	r0, [r4, #12]
 80080fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008100:	4298      	cmp	r0, r3
 8008102:	bfb8      	it	lt
 8008104:	4618      	movlt	r0, r3
 8008106:	e730      	b.n	8007f6a <_printf_float+0xc6>
 8008108:	2301      	movs	r3, #1
 800810a:	464a      	mov	r2, r9
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	f43f af27 	beq.w	8007f66 <_printf_float+0xc2>
 8008118:	f108 0801 	add.w	r8, r8, #1
 800811c:	e7e6      	b.n	80080ec <_printf_float+0x248>
 800811e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	dc39      	bgt.n	8008198 <_printf_float+0x2f4>
 8008124:	4a1b      	ldr	r2, [pc, #108]	; (8008194 <_printf_float+0x2f0>)
 8008126:	2301      	movs	r3, #1
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f43f af19 	beq.w	8007f66 <_printf_float+0xc2>
 8008134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008138:	4313      	orrs	r3, r2
 800813a:	d102      	bne.n	8008142 <_printf_float+0x29e>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	07d9      	lsls	r1, r3, #31
 8008140:	d5d8      	bpl.n	80080f4 <_printf_float+0x250>
 8008142:	ee18 3a10 	vmov	r3, s16
 8008146:	4652      	mov	r2, sl
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f af09 	beq.w	8007f66 <_printf_float+0xc2>
 8008154:	f04f 0900 	mov.w	r9, #0
 8008158:	f104 0a1a 	add.w	sl, r4, #26
 800815c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815e:	425b      	negs	r3, r3
 8008160:	454b      	cmp	r3, r9
 8008162:	dc01      	bgt.n	8008168 <_printf_float+0x2c4>
 8008164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008166:	e792      	b.n	800808e <_printf_float+0x1ea>
 8008168:	2301      	movs	r3, #1
 800816a:	4652      	mov	r2, sl
 800816c:	4631      	mov	r1, r6
 800816e:	4628      	mov	r0, r5
 8008170:	47b8      	blx	r7
 8008172:	3001      	adds	r0, #1
 8008174:	f43f aef7 	beq.w	8007f66 <_printf_float+0xc2>
 8008178:	f109 0901 	add.w	r9, r9, #1
 800817c:	e7ee      	b.n	800815c <_printf_float+0x2b8>
 800817e:	bf00      	nop
 8008180:	7fefffff 	.word	0x7fefffff
 8008184:	0800aba0 	.word	0x0800aba0
 8008188:	0800aba4 	.word	0x0800aba4
 800818c:	0800abac 	.word	0x0800abac
 8008190:	0800aba8 	.word	0x0800aba8
 8008194:	0800abb0 	.word	0x0800abb0
 8008198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800819a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800819c:	429a      	cmp	r2, r3
 800819e:	bfa8      	it	ge
 80081a0:	461a      	movge	r2, r3
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	4691      	mov	r9, r2
 80081a6:	dc37      	bgt.n	8008218 <_printf_float+0x374>
 80081a8:	f04f 0b00 	mov.w	fp, #0
 80081ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081b0:	f104 021a 	add.w	r2, r4, #26
 80081b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	eba3 0309 	sub.w	r3, r3, r9
 80081bc:	455b      	cmp	r3, fp
 80081be:	dc33      	bgt.n	8008228 <_printf_float+0x384>
 80081c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081c4:	429a      	cmp	r2, r3
 80081c6:	db3b      	blt.n	8008240 <_printf_float+0x39c>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	07da      	lsls	r2, r3, #31
 80081cc:	d438      	bmi.n	8008240 <_printf_float+0x39c>
 80081ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d0:	9b05      	ldr	r3, [sp, #20]
 80081d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	eba2 0901 	sub.w	r9, r2, r1
 80081da:	4599      	cmp	r9, r3
 80081dc:	bfa8      	it	ge
 80081de:	4699      	movge	r9, r3
 80081e0:	f1b9 0f00 	cmp.w	r9, #0
 80081e4:	dc35      	bgt.n	8008252 <_printf_float+0x3ae>
 80081e6:	f04f 0800 	mov.w	r8, #0
 80081ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ee:	f104 0a1a 	add.w	sl, r4, #26
 80081f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	eba3 0309 	sub.w	r3, r3, r9
 80081fc:	4543      	cmp	r3, r8
 80081fe:	f77f af79 	ble.w	80080f4 <_printf_float+0x250>
 8008202:	2301      	movs	r3, #1
 8008204:	4652      	mov	r2, sl
 8008206:	4631      	mov	r1, r6
 8008208:	4628      	mov	r0, r5
 800820a:	47b8      	blx	r7
 800820c:	3001      	adds	r0, #1
 800820e:	f43f aeaa 	beq.w	8007f66 <_printf_float+0xc2>
 8008212:	f108 0801 	add.w	r8, r8, #1
 8008216:	e7ec      	b.n	80081f2 <_printf_float+0x34e>
 8008218:	4613      	mov	r3, r2
 800821a:	4631      	mov	r1, r6
 800821c:	4642      	mov	r2, r8
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	d1c0      	bne.n	80081a8 <_printf_float+0x304>
 8008226:	e69e      	b.n	8007f66 <_printf_float+0xc2>
 8008228:	2301      	movs	r3, #1
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	9205      	str	r2, [sp, #20]
 8008230:	47b8      	blx	r7
 8008232:	3001      	adds	r0, #1
 8008234:	f43f ae97 	beq.w	8007f66 <_printf_float+0xc2>
 8008238:	9a05      	ldr	r2, [sp, #20]
 800823a:	f10b 0b01 	add.w	fp, fp, #1
 800823e:	e7b9      	b.n	80081b4 <_printf_float+0x310>
 8008240:	ee18 3a10 	vmov	r3, s16
 8008244:	4652      	mov	r2, sl
 8008246:	4631      	mov	r1, r6
 8008248:	4628      	mov	r0, r5
 800824a:	47b8      	blx	r7
 800824c:	3001      	adds	r0, #1
 800824e:	d1be      	bne.n	80081ce <_printf_float+0x32a>
 8008250:	e689      	b.n	8007f66 <_printf_float+0xc2>
 8008252:	9a05      	ldr	r2, [sp, #20]
 8008254:	464b      	mov	r3, r9
 8008256:	4442      	add	r2, r8
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	d1c1      	bne.n	80081e6 <_printf_float+0x342>
 8008262:	e680      	b.n	8007f66 <_printf_float+0xc2>
 8008264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008266:	2a01      	cmp	r2, #1
 8008268:	dc01      	bgt.n	800826e <_printf_float+0x3ca>
 800826a:	07db      	lsls	r3, r3, #31
 800826c:	d538      	bpl.n	80082e0 <_printf_float+0x43c>
 800826e:	2301      	movs	r3, #1
 8008270:	4642      	mov	r2, r8
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	f43f ae74 	beq.w	8007f66 <_printf_float+0xc2>
 800827e:	ee18 3a10 	vmov	r3, s16
 8008282:	4652      	mov	r2, sl
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	f43f ae6b 	beq.w	8007f66 <_printf_float+0xc2>
 8008290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008294:	2200      	movs	r2, #0
 8008296:	2300      	movs	r3, #0
 8008298:	f7f8 fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800829c:	b9d8      	cbnz	r0, 80082d6 <_printf_float+0x432>
 800829e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a0:	f108 0201 	add.w	r2, r8, #1
 80082a4:	3b01      	subs	r3, #1
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	d10e      	bne.n	80082ce <_printf_float+0x42a>
 80082b0:	e659      	b.n	8007f66 <_printf_float+0xc2>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4652      	mov	r2, sl
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f ae52 	beq.w	8007f66 <_printf_float+0xc2>
 80082c2:	f108 0801 	add.w	r8, r8, #1
 80082c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c8:	3b01      	subs	r3, #1
 80082ca:	4543      	cmp	r3, r8
 80082cc:	dcf1      	bgt.n	80082b2 <_printf_float+0x40e>
 80082ce:	464b      	mov	r3, r9
 80082d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082d4:	e6dc      	b.n	8008090 <_printf_float+0x1ec>
 80082d6:	f04f 0800 	mov.w	r8, #0
 80082da:	f104 0a1a 	add.w	sl, r4, #26
 80082de:	e7f2      	b.n	80082c6 <_printf_float+0x422>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4642      	mov	r2, r8
 80082e4:	e7df      	b.n	80082a6 <_printf_float+0x402>
 80082e6:	2301      	movs	r3, #1
 80082e8:	464a      	mov	r2, r9
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	f43f ae38 	beq.w	8007f66 <_printf_float+0xc2>
 80082f6:	f108 0801 	add.w	r8, r8, #1
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082fe:	1a5b      	subs	r3, r3, r1
 8008300:	4543      	cmp	r3, r8
 8008302:	dcf0      	bgt.n	80082e6 <_printf_float+0x442>
 8008304:	e6fa      	b.n	80080fc <_printf_float+0x258>
 8008306:	f04f 0800 	mov.w	r8, #0
 800830a:	f104 0919 	add.w	r9, r4, #25
 800830e:	e7f4      	b.n	80082fa <_printf_float+0x456>

08008310 <_printf_common>:
 8008310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	4616      	mov	r6, r2
 8008316:	4699      	mov	r9, r3
 8008318:	688a      	ldr	r2, [r1, #8]
 800831a:	690b      	ldr	r3, [r1, #16]
 800831c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008320:	4293      	cmp	r3, r2
 8008322:	bfb8      	it	lt
 8008324:	4613      	movlt	r3, r2
 8008326:	6033      	str	r3, [r6, #0]
 8008328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800832c:	4607      	mov	r7, r0
 800832e:	460c      	mov	r4, r1
 8008330:	b10a      	cbz	r2, 8008336 <_printf_common+0x26>
 8008332:	3301      	adds	r3, #1
 8008334:	6033      	str	r3, [r6, #0]
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	0699      	lsls	r1, r3, #26
 800833a:	bf42      	ittt	mi
 800833c:	6833      	ldrmi	r3, [r6, #0]
 800833e:	3302      	addmi	r3, #2
 8008340:	6033      	strmi	r3, [r6, #0]
 8008342:	6825      	ldr	r5, [r4, #0]
 8008344:	f015 0506 	ands.w	r5, r5, #6
 8008348:	d106      	bne.n	8008358 <_printf_common+0x48>
 800834a:	f104 0a19 	add.w	sl, r4, #25
 800834e:	68e3      	ldr	r3, [r4, #12]
 8008350:	6832      	ldr	r2, [r6, #0]
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	42ab      	cmp	r3, r5
 8008356:	dc26      	bgt.n	80083a6 <_printf_common+0x96>
 8008358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800835c:	1e13      	subs	r3, r2, #0
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	bf18      	it	ne
 8008362:	2301      	movne	r3, #1
 8008364:	0692      	lsls	r2, r2, #26
 8008366:	d42b      	bmi.n	80083c0 <_printf_common+0xb0>
 8008368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800836c:	4649      	mov	r1, r9
 800836e:	4638      	mov	r0, r7
 8008370:	47c0      	blx	r8
 8008372:	3001      	adds	r0, #1
 8008374:	d01e      	beq.n	80083b4 <_printf_common+0xa4>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	68e5      	ldr	r5, [r4, #12]
 800837a:	6832      	ldr	r2, [r6, #0]
 800837c:	f003 0306 	and.w	r3, r3, #6
 8008380:	2b04      	cmp	r3, #4
 8008382:	bf08      	it	eq
 8008384:	1aad      	subeq	r5, r5, r2
 8008386:	68a3      	ldr	r3, [r4, #8]
 8008388:	6922      	ldr	r2, [r4, #16]
 800838a:	bf0c      	ite	eq
 800838c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008390:	2500      	movne	r5, #0
 8008392:	4293      	cmp	r3, r2
 8008394:	bfc4      	itt	gt
 8008396:	1a9b      	subgt	r3, r3, r2
 8008398:	18ed      	addgt	r5, r5, r3
 800839a:	2600      	movs	r6, #0
 800839c:	341a      	adds	r4, #26
 800839e:	42b5      	cmp	r5, r6
 80083a0:	d11a      	bne.n	80083d8 <_printf_common+0xc8>
 80083a2:	2000      	movs	r0, #0
 80083a4:	e008      	b.n	80083b8 <_printf_common+0xa8>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	4649      	mov	r1, r9
 80083ac:	4638      	mov	r0, r7
 80083ae:	47c0      	blx	r8
 80083b0:	3001      	adds	r0, #1
 80083b2:	d103      	bne.n	80083bc <_printf_common+0xac>
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083bc:	3501      	adds	r5, #1
 80083be:	e7c6      	b.n	800834e <_printf_common+0x3e>
 80083c0:	18e1      	adds	r1, r4, r3
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	2030      	movs	r0, #48	; 0x30
 80083c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083ca:	4422      	add	r2, r4
 80083cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083d4:	3302      	adds	r3, #2
 80083d6:	e7c7      	b.n	8008368 <_printf_common+0x58>
 80083d8:	2301      	movs	r3, #1
 80083da:	4622      	mov	r2, r4
 80083dc:	4649      	mov	r1, r9
 80083de:	4638      	mov	r0, r7
 80083e0:	47c0      	blx	r8
 80083e2:	3001      	adds	r0, #1
 80083e4:	d0e6      	beq.n	80083b4 <_printf_common+0xa4>
 80083e6:	3601      	adds	r6, #1
 80083e8:	e7d9      	b.n	800839e <_printf_common+0x8e>
	...

080083ec <_printf_i>:
 80083ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	460c      	mov	r4, r1
 80083f2:	4691      	mov	r9, r2
 80083f4:	7e27      	ldrb	r7, [r4, #24]
 80083f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083f8:	2f78      	cmp	r7, #120	; 0x78
 80083fa:	4680      	mov	r8, r0
 80083fc:	469a      	mov	sl, r3
 80083fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008402:	d807      	bhi.n	8008414 <_printf_i+0x28>
 8008404:	2f62      	cmp	r7, #98	; 0x62
 8008406:	d80a      	bhi.n	800841e <_printf_i+0x32>
 8008408:	2f00      	cmp	r7, #0
 800840a:	f000 80d8 	beq.w	80085be <_printf_i+0x1d2>
 800840e:	2f58      	cmp	r7, #88	; 0x58
 8008410:	f000 80a3 	beq.w	800855a <_printf_i+0x16e>
 8008414:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800841c:	e03a      	b.n	8008494 <_printf_i+0xa8>
 800841e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008422:	2b15      	cmp	r3, #21
 8008424:	d8f6      	bhi.n	8008414 <_printf_i+0x28>
 8008426:	a001      	add	r0, pc, #4	; (adr r0, 800842c <_printf_i+0x40>)
 8008428:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800842c:	08008485 	.word	0x08008485
 8008430:	08008499 	.word	0x08008499
 8008434:	08008415 	.word	0x08008415
 8008438:	08008415 	.word	0x08008415
 800843c:	08008415 	.word	0x08008415
 8008440:	08008415 	.word	0x08008415
 8008444:	08008499 	.word	0x08008499
 8008448:	08008415 	.word	0x08008415
 800844c:	08008415 	.word	0x08008415
 8008450:	08008415 	.word	0x08008415
 8008454:	08008415 	.word	0x08008415
 8008458:	080085a5 	.word	0x080085a5
 800845c:	080084c9 	.word	0x080084c9
 8008460:	08008587 	.word	0x08008587
 8008464:	08008415 	.word	0x08008415
 8008468:	08008415 	.word	0x08008415
 800846c:	080085c7 	.word	0x080085c7
 8008470:	08008415 	.word	0x08008415
 8008474:	080084c9 	.word	0x080084c9
 8008478:	08008415 	.word	0x08008415
 800847c:	08008415 	.word	0x08008415
 8008480:	0800858f 	.word	0x0800858f
 8008484:	680b      	ldr	r3, [r1, #0]
 8008486:	1d1a      	adds	r2, r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	600a      	str	r2, [r1, #0]
 800848c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008494:	2301      	movs	r3, #1
 8008496:	e0a3      	b.n	80085e0 <_printf_i+0x1f4>
 8008498:	6825      	ldr	r5, [r4, #0]
 800849a:	6808      	ldr	r0, [r1, #0]
 800849c:	062e      	lsls	r6, r5, #24
 800849e:	f100 0304 	add.w	r3, r0, #4
 80084a2:	d50a      	bpl.n	80084ba <_printf_i+0xce>
 80084a4:	6805      	ldr	r5, [r0, #0]
 80084a6:	600b      	str	r3, [r1, #0]
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	da03      	bge.n	80084b4 <_printf_i+0xc8>
 80084ac:	232d      	movs	r3, #45	; 0x2d
 80084ae:	426d      	negs	r5, r5
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b4:	485e      	ldr	r0, [pc, #376]	; (8008630 <_printf_i+0x244>)
 80084b6:	230a      	movs	r3, #10
 80084b8:	e019      	b.n	80084ee <_printf_i+0x102>
 80084ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084be:	6805      	ldr	r5, [r0, #0]
 80084c0:	600b      	str	r3, [r1, #0]
 80084c2:	bf18      	it	ne
 80084c4:	b22d      	sxthne	r5, r5
 80084c6:	e7ef      	b.n	80084a8 <_printf_i+0xbc>
 80084c8:	680b      	ldr	r3, [r1, #0]
 80084ca:	6825      	ldr	r5, [r4, #0]
 80084cc:	1d18      	adds	r0, r3, #4
 80084ce:	6008      	str	r0, [r1, #0]
 80084d0:	0628      	lsls	r0, r5, #24
 80084d2:	d501      	bpl.n	80084d8 <_printf_i+0xec>
 80084d4:	681d      	ldr	r5, [r3, #0]
 80084d6:	e002      	b.n	80084de <_printf_i+0xf2>
 80084d8:	0669      	lsls	r1, r5, #25
 80084da:	d5fb      	bpl.n	80084d4 <_printf_i+0xe8>
 80084dc:	881d      	ldrh	r5, [r3, #0]
 80084de:	4854      	ldr	r0, [pc, #336]	; (8008630 <_printf_i+0x244>)
 80084e0:	2f6f      	cmp	r7, #111	; 0x6f
 80084e2:	bf0c      	ite	eq
 80084e4:	2308      	moveq	r3, #8
 80084e6:	230a      	movne	r3, #10
 80084e8:	2100      	movs	r1, #0
 80084ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ee:	6866      	ldr	r6, [r4, #4]
 80084f0:	60a6      	str	r6, [r4, #8]
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	bfa2      	ittt	ge
 80084f6:	6821      	ldrge	r1, [r4, #0]
 80084f8:	f021 0104 	bicge.w	r1, r1, #4
 80084fc:	6021      	strge	r1, [r4, #0]
 80084fe:	b90d      	cbnz	r5, 8008504 <_printf_i+0x118>
 8008500:	2e00      	cmp	r6, #0
 8008502:	d04d      	beq.n	80085a0 <_printf_i+0x1b4>
 8008504:	4616      	mov	r6, r2
 8008506:	fbb5 f1f3 	udiv	r1, r5, r3
 800850a:	fb03 5711 	mls	r7, r3, r1, r5
 800850e:	5dc7      	ldrb	r7, [r0, r7]
 8008510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008514:	462f      	mov	r7, r5
 8008516:	42bb      	cmp	r3, r7
 8008518:	460d      	mov	r5, r1
 800851a:	d9f4      	bls.n	8008506 <_printf_i+0x11a>
 800851c:	2b08      	cmp	r3, #8
 800851e:	d10b      	bne.n	8008538 <_printf_i+0x14c>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	07df      	lsls	r7, r3, #31
 8008524:	d508      	bpl.n	8008538 <_printf_i+0x14c>
 8008526:	6923      	ldr	r3, [r4, #16]
 8008528:	6861      	ldr	r1, [r4, #4]
 800852a:	4299      	cmp	r1, r3
 800852c:	bfde      	ittt	le
 800852e:	2330      	movle	r3, #48	; 0x30
 8008530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008534:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008538:	1b92      	subs	r2, r2, r6
 800853a:	6122      	str	r2, [r4, #16]
 800853c:	f8cd a000 	str.w	sl, [sp]
 8008540:	464b      	mov	r3, r9
 8008542:	aa03      	add	r2, sp, #12
 8008544:	4621      	mov	r1, r4
 8008546:	4640      	mov	r0, r8
 8008548:	f7ff fee2 	bl	8008310 <_printf_common>
 800854c:	3001      	adds	r0, #1
 800854e:	d14c      	bne.n	80085ea <_printf_i+0x1fe>
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	b004      	add	sp, #16
 8008556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855a:	4835      	ldr	r0, [pc, #212]	; (8008630 <_printf_i+0x244>)
 800855c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	680e      	ldr	r6, [r1, #0]
 8008564:	061f      	lsls	r7, r3, #24
 8008566:	f856 5b04 	ldr.w	r5, [r6], #4
 800856a:	600e      	str	r6, [r1, #0]
 800856c:	d514      	bpl.n	8008598 <_printf_i+0x1ac>
 800856e:	07d9      	lsls	r1, r3, #31
 8008570:	bf44      	itt	mi
 8008572:	f043 0320 	orrmi.w	r3, r3, #32
 8008576:	6023      	strmi	r3, [r4, #0]
 8008578:	b91d      	cbnz	r5, 8008582 <_printf_i+0x196>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	f023 0320 	bic.w	r3, r3, #32
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	2310      	movs	r3, #16
 8008584:	e7b0      	b.n	80084e8 <_printf_i+0xfc>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	f043 0320 	orr.w	r3, r3, #32
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	2378      	movs	r3, #120	; 0x78
 8008590:	4828      	ldr	r0, [pc, #160]	; (8008634 <_printf_i+0x248>)
 8008592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008596:	e7e3      	b.n	8008560 <_printf_i+0x174>
 8008598:	065e      	lsls	r6, r3, #25
 800859a:	bf48      	it	mi
 800859c:	b2ad      	uxthmi	r5, r5
 800859e:	e7e6      	b.n	800856e <_printf_i+0x182>
 80085a0:	4616      	mov	r6, r2
 80085a2:	e7bb      	b.n	800851c <_printf_i+0x130>
 80085a4:	680b      	ldr	r3, [r1, #0]
 80085a6:	6826      	ldr	r6, [r4, #0]
 80085a8:	6960      	ldr	r0, [r4, #20]
 80085aa:	1d1d      	adds	r5, r3, #4
 80085ac:	600d      	str	r5, [r1, #0]
 80085ae:	0635      	lsls	r5, r6, #24
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	d501      	bpl.n	80085b8 <_printf_i+0x1cc>
 80085b4:	6018      	str	r0, [r3, #0]
 80085b6:	e002      	b.n	80085be <_printf_i+0x1d2>
 80085b8:	0671      	lsls	r1, r6, #25
 80085ba:	d5fb      	bpl.n	80085b4 <_printf_i+0x1c8>
 80085bc:	8018      	strh	r0, [r3, #0]
 80085be:	2300      	movs	r3, #0
 80085c0:	6123      	str	r3, [r4, #16]
 80085c2:	4616      	mov	r6, r2
 80085c4:	e7ba      	b.n	800853c <_printf_i+0x150>
 80085c6:	680b      	ldr	r3, [r1, #0]
 80085c8:	1d1a      	adds	r2, r3, #4
 80085ca:	600a      	str	r2, [r1, #0]
 80085cc:	681e      	ldr	r6, [r3, #0]
 80085ce:	6862      	ldr	r2, [r4, #4]
 80085d0:	2100      	movs	r1, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7f7 fe04 	bl	80001e0 <memchr>
 80085d8:	b108      	cbz	r0, 80085de <_printf_i+0x1f2>
 80085da:	1b80      	subs	r0, r0, r6
 80085dc:	6060      	str	r0, [r4, #4]
 80085de:	6863      	ldr	r3, [r4, #4]
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	2300      	movs	r3, #0
 80085e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e8:	e7a8      	b.n	800853c <_printf_i+0x150>
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	4632      	mov	r2, r6
 80085ee:	4649      	mov	r1, r9
 80085f0:	4640      	mov	r0, r8
 80085f2:	47d0      	blx	sl
 80085f4:	3001      	adds	r0, #1
 80085f6:	d0ab      	beq.n	8008550 <_printf_i+0x164>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	079b      	lsls	r3, r3, #30
 80085fc:	d413      	bmi.n	8008626 <_printf_i+0x23a>
 80085fe:	68e0      	ldr	r0, [r4, #12]
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	4298      	cmp	r0, r3
 8008604:	bfb8      	it	lt
 8008606:	4618      	movlt	r0, r3
 8008608:	e7a4      	b.n	8008554 <_printf_i+0x168>
 800860a:	2301      	movs	r3, #1
 800860c:	4632      	mov	r2, r6
 800860e:	4649      	mov	r1, r9
 8008610:	4640      	mov	r0, r8
 8008612:	47d0      	blx	sl
 8008614:	3001      	adds	r0, #1
 8008616:	d09b      	beq.n	8008550 <_printf_i+0x164>
 8008618:	3501      	adds	r5, #1
 800861a:	68e3      	ldr	r3, [r4, #12]
 800861c:	9903      	ldr	r1, [sp, #12]
 800861e:	1a5b      	subs	r3, r3, r1
 8008620:	42ab      	cmp	r3, r5
 8008622:	dcf2      	bgt.n	800860a <_printf_i+0x21e>
 8008624:	e7eb      	b.n	80085fe <_printf_i+0x212>
 8008626:	2500      	movs	r5, #0
 8008628:	f104 0619 	add.w	r6, r4, #25
 800862c:	e7f5      	b.n	800861a <_printf_i+0x22e>
 800862e:	bf00      	nop
 8008630:	0800abb2 	.word	0x0800abb2
 8008634:	0800abc3 	.word	0x0800abc3

08008638 <iprintf>:
 8008638:	b40f      	push	{r0, r1, r2, r3}
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <iprintf+0x2c>)
 800863c:	b513      	push	{r0, r1, r4, lr}
 800863e:	681c      	ldr	r4, [r3, #0]
 8008640:	b124      	cbz	r4, 800864c <iprintf+0x14>
 8008642:	69a3      	ldr	r3, [r4, #24]
 8008644:	b913      	cbnz	r3, 800864c <iprintf+0x14>
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fede 	bl	8009408 <__sinit>
 800864c:	ab05      	add	r3, sp, #20
 800864e:	9a04      	ldr	r2, [sp, #16]
 8008650:	68a1      	ldr	r1, [r4, #8]
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	4620      	mov	r0, r4
 8008656:	f001 fbf5 	bl	8009e44 <_vfiprintf_r>
 800865a:	b002      	add	sp, #8
 800865c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008660:	b004      	add	sp, #16
 8008662:	4770      	bx	lr
 8008664:	20000184 	.word	0x20000184

08008668 <quorem>:
 8008668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	6903      	ldr	r3, [r0, #16]
 800866e:	690c      	ldr	r4, [r1, #16]
 8008670:	42a3      	cmp	r3, r4
 8008672:	4607      	mov	r7, r0
 8008674:	f2c0 8081 	blt.w	800877a <quorem+0x112>
 8008678:	3c01      	subs	r4, #1
 800867a:	f101 0814 	add.w	r8, r1, #20
 800867e:	f100 0514 	add.w	r5, r0, #20
 8008682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800868c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008690:	3301      	adds	r3, #1
 8008692:	429a      	cmp	r2, r3
 8008694:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800869c:	fbb2 f6f3 	udiv	r6, r2, r3
 80086a0:	d331      	bcc.n	8008706 <quorem+0x9e>
 80086a2:	f04f 0e00 	mov.w	lr, #0
 80086a6:	4640      	mov	r0, r8
 80086a8:	46ac      	mov	ip, r5
 80086aa:	46f2      	mov	sl, lr
 80086ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80086b0:	b293      	uxth	r3, r2
 80086b2:	fb06 e303 	mla	r3, r6, r3, lr
 80086b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	ebaa 0303 	sub.w	r3, sl, r3
 80086c0:	0c12      	lsrs	r2, r2, #16
 80086c2:	f8dc a000 	ldr.w	sl, [ip]
 80086c6:	fb06 e202 	mla	r2, r6, r2, lr
 80086ca:	fa13 f38a 	uxtah	r3, r3, sl
 80086ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086d2:	fa1f fa82 	uxth.w	sl, r2
 80086d6:	f8dc 2000 	ldr.w	r2, [ip]
 80086da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80086de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e8:	4581      	cmp	r9, r0
 80086ea:	f84c 3b04 	str.w	r3, [ip], #4
 80086ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086f2:	d2db      	bcs.n	80086ac <quorem+0x44>
 80086f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80086f8:	b92b      	cbnz	r3, 8008706 <quorem+0x9e>
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	3b04      	subs	r3, #4
 80086fe:	429d      	cmp	r5, r3
 8008700:	461a      	mov	r2, r3
 8008702:	d32e      	bcc.n	8008762 <quorem+0xfa>
 8008704:	613c      	str	r4, [r7, #16]
 8008706:	4638      	mov	r0, r7
 8008708:	f001 f9b8 	bl	8009a7c <__mcmp>
 800870c:	2800      	cmp	r0, #0
 800870e:	db24      	blt.n	800875a <quorem+0xf2>
 8008710:	3601      	adds	r6, #1
 8008712:	4628      	mov	r0, r5
 8008714:	f04f 0c00 	mov.w	ip, #0
 8008718:	f858 2b04 	ldr.w	r2, [r8], #4
 800871c:	f8d0 e000 	ldr.w	lr, [r0]
 8008720:	b293      	uxth	r3, r2
 8008722:	ebac 0303 	sub.w	r3, ip, r3
 8008726:	0c12      	lsrs	r2, r2, #16
 8008728:	fa13 f38e 	uxtah	r3, r3, lr
 800872c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008734:	b29b      	uxth	r3, r3
 8008736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800873a:	45c1      	cmp	r9, r8
 800873c:	f840 3b04 	str.w	r3, [r0], #4
 8008740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008744:	d2e8      	bcs.n	8008718 <quorem+0xb0>
 8008746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800874a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800874e:	b922      	cbnz	r2, 800875a <quorem+0xf2>
 8008750:	3b04      	subs	r3, #4
 8008752:	429d      	cmp	r5, r3
 8008754:	461a      	mov	r2, r3
 8008756:	d30a      	bcc.n	800876e <quorem+0x106>
 8008758:	613c      	str	r4, [r7, #16]
 800875a:	4630      	mov	r0, r6
 800875c:	b003      	add	sp, #12
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	3b04      	subs	r3, #4
 8008766:	2a00      	cmp	r2, #0
 8008768:	d1cc      	bne.n	8008704 <quorem+0x9c>
 800876a:	3c01      	subs	r4, #1
 800876c:	e7c7      	b.n	80086fe <quorem+0x96>
 800876e:	6812      	ldr	r2, [r2, #0]
 8008770:	3b04      	subs	r3, #4
 8008772:	2a00      	cmp	r2, #0
 8008774:	d1f0      	bne.n	8008758 <quorem+0xf0>
 8008776:	3c01      	subs	r4, #1
 8008778:	e7eb      	b.n	8008752 <quorem+0xea>
 800877a:	2000      	movs	r0, #0
 800877c:	e7ee      	b.n	800875c <quorem+0xf4>
	...

08008780 <_dtoa_r>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	ed2d 8b02 	vpush	{d8}
 8008788:	ec57 6b10 	vmov	r6, r7, d0
 800878c:	b095      	sub	sp, #84	; 0x54
 800878e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008794:	9105      	str	r1, [sp, #20]
 8008796:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800879a:	4604      	mov	r4, r0
 800879c:	9209      	str	r2, [sp, #36]	; 0x24
 800879e:	930f      	str	r3, [sp, #60]	; 0x3c
 80087a0:	b975      	cbnz	r5, 80087c0 <_dtoa_r+0x40>
 80087a2:	2010      	movs	r0, #16
 80087a4:	f000 fed6 	bl	8009554 <malloc>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6260      	str	r0, [r4, #36]	; 0x24
 80087ac:	b920      	cbnz	r0, 80087b8 <_dtoa_r+0x38>
 80087ae:	4bb2      	ldr	r3, [pc, #712]	; (8008a78 <_dtoa_r+0x2f8>)
 80087b0:	21ea      	movs	r1, #234	; 0xea
 80087b2:	48b2      	ldr	r0, [pc, #712]	; (8008a7c <_dtoa_r+0x2fc>)
 80087b4:	f001 fd9c 	bl	800a2f0 <__assert_func>
 80087b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087bc:	6005      	str	r5, [r0, #0]
 80087be:	60c5      	str	r5, [r0, #12]
 80087c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	b151      	cbz	r1, 80087dc <_dtoa_r+0x5c>
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	604a      	str	r2, [r1, #4]
 80087ca:	2301      	movs	r3, #1
 80087cc:	4093      	lsls	r3, r2
 80087ce:	608b      	str	r3, [r1, #8]
 80087d0:	4620      	mov	r0, r4
 80087d2:	f000 ff15 	bl	8009600 <_Bfree>
 80087d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	1e3b      	subs	r3, r7, #0
 80087de:	bfb9      	ittee	lt
 80087e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087e4:	9303      	strlt	r3, [sp, #12]
 80087e6:	2300      	movge	r3, #0
 80087e8:	f8c8 3000 	strge.w	r3, [r8]
 80087ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80087f0:	4ba3      	ldr	r3, [pc, #652]	; (8008a80 <_dtoa_r+0x300>)
 80087f2:	bfbc      	itt	lt
 80087f4:	2201      	movlt	r2, #1
 80087f6:	f8c8 2000 	strlt.w	r2, [r8]
 80087fa:	ea33 0309 	bics.w	r3, r3, r9
 80087fe:	d11b      	bne.n	8008838 <_dtoa_r+0xb8>
 8008800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008802:	f242 730f 	movw	r3, #9999	; 0x270f
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800880c:	4333      	orrs	r3, r6
 800880e:	f000 857a 	beq.w	8009306 <_dtoa_r+0xb86>
 8008812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008814:	b963      	cbnz	r3, 8008830 <_dtoa_r+0xb0>
 8008816:	4b9b      	ldr	r3, [pc, #620]	; (8008a84 <_dtoa_r+0x304>)
 8008818:	e024      	b.n	8008864 <_dtoa_r+0xe4>
 800881a:	4b9b      	ldr	r3, [pc, #620]	; (8008a88 <_dtoa_r+0x308>)
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	9800      	ldr	r0, [sp, #0]
 8008826:	b015      	add	sp, #84	; 0x54
 8008828:	ecbd 8b02 	vpop	{d8}
 800882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008830:	4b94      	ldr	r3, [pc, #592]	; (8008a84 <_dtoa_r+0x304>)
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	3303      	adds	r3, #3
 8008836:	e7f3      	b.n	8008820 <_dtoa_r+0xa0>
 8008838:	ed9d 7b02 	vldr	d7, [sp, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	ec51 0b17 	vmov	r0, r1, d7
 8008842:	2300      	movs	r3, #0
 8008844:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008848:	f7f8 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800884c:	4680      	mov	r8, r0
 800884e:	b158      	cbz	r0, 8008868 <_dtoa_r+0xe8>
 8008850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008852:	2301      	movs	r3, #1
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8551 	beq.w	8009300 <_dtoa_r+0xb80>
 800885e:	488b      	ldr	r0, [pc, #556]	; (8008a8c <_dtoa_r+0x30c>)
 8008860:	6018      	str	r0, [r3, #0]
 8008862:	1e43      	subs	r3, r0, #1
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	e7dd      	b.n	8008824 <_dtoa_r+0xa4>
 8008868:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800886c:	aa12      	add	r2, sp, #72	; 0x48
 800886e:	a913      	add	r1, sp, #76	; 0x4c
 8008870:	4620      	mov	r0, r4
 8008872:	f001 f9a7 	bl	8009bc4 <__d2b>
 8008876:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800887a:	4683      	mov	fp, r0
 800887c:	2d00      	cmp	r5, #0
 800887e:	d07c      	beq.n	800897a <_dtoa_r+0x1fa>
 8008880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008882:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800888a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800888e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008892:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800889a:	4b7d      	ldr	r3, [pc, #500]	; (8008a90 <_dtoa_r+0x310>)
 800889c:	2200      	movs	r2, #0
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 fcf1 	bl	8000288 <__aeabi_dsub>
 80088a6:	a36e      	add	r3, pc, #440	; (adr r3, 8008a60 <_dtoa_r+0x2e0>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 fea4 	bl	80005f8 <__aeabi_dmul>
 80088b0:	a36d      	add	r3, pc, #436	; (adr r3, 8008a68 <_dtoa_r+0x2e8>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fce9 	bl	800028c <__adddf3>
 80088ba:	4606      	mov	r6, r0
 80088bc:	4628      	mov	r0, r5
 80088be:	460f      	mov	r7, r1
 80088c0:	f7f7 fe30 	bl	8000524 <__aeabi_i2d>
 80088c4:	a36a      	add	r3, pc, #424	; (adr r3, 8008a70 <_dtoa_r+0x2f0>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fe95 	bl	80005f8 <__aeabi_dmul>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f7 fcd9 	bl	800028c <__adddf3>
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	f7f8 f93b 	bl	8000b58 <__aeabi_d2iz>
 80088e2:	2200      	movs	r2, #0
 80088e4:	4682      	mov	sl, r0
 80088e6:	2300      	movs	r3, #0
 80088e8:	4630      	mov	r0, r6
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7f8 f8f6 	bl	8000adc <__aeabi_dcmplt>
 80088f0:	b148      	cbz	r0, 8008906 <_dtoa_r+0x186>
 80088f2:	4650      	mov	r0, sl
 80088f4:	f7f7 fe16 	bl	8000524 <__aeabi_i2d>
 80088f8:	4632      	mov	r2, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	f7f8 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008900:	b908      	cbnz	r0, 8008906 <_dtoa_r+0x186>
 8008902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008906:	f1ba 0f16 	cmp.w	sl, #22
 800890a:	d854      	bhi.n	80089b6 <_dtoa_r+0x236>
 800890c:	4b61      	ldr	r3, [pc, #388]	; (8008a94 <_dtoa_r+0x314>)
 800890e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800891a:	f7f8 f8df 	bl	8000adc <__aeabi_dcmplt>
 800891e:	2800      	cmp	r0, #0
 8008920:	d04b      	beq.n	80089ba <_dtoa_r+0x23a>
 8008922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008926:	2300      	movs	r3, #0
 8008928:	930e      	str	r3, [sp, #56]	; 0x38
 800892a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800892c:	1b5d      	subs	r5, r3, r5
 800892e:	1e6b      	subs	r3, r5, #1
 8008930:	9304      	str	r3, [sp, #16]
 8008932:	bf43      	ittte	mi
 8008934:	2300      	movmi	r3, #0
 8008936:	f1c5 0801 	rsbmi	r8, r5, #1
 800893a:	9304      	strmi	r3, [sp, #16]
 800893c:	f04f 0800 	movpl.w	r8, #0
 8008940:	f1ba 0f00 	cmp.w	sl, #0
 8008944:	db3b      	blt.n	80089be <_dtoa_r+0x23e>
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800894c:	4453      	add	r3, sl
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	2300      	movs	r3, #0
 8008952:	9306      	str	r3, [sp, #24]
 8008954:	9b05      	ldr	r3, [sp, #20]
 8008956:	2b09      	cmp	r3, #9
 8008958:	d869      	bhi.n	8008a2e <_dtoa_r+0x2ae>
 800895a:	2b05      	cmp	r3, #5
 800895c:	bfc4      	itt	gt
 800895e:	3b04      	subgt	r3, #4
 8008960:	9305      	strgt	r3, [sp, #20]
 8008962:	9b05      	ldr	r3, [sp, #20]
 8008964:	f1a3 0302 	sub.w	r3, r3, #2
 8008968:	bfcc      	ite	gt
 800896a:	2500      	movgt	r5, #0
 800896c:	2501      	movle	r5, #1
 800896e:	2b03      	cmp	r3, #3
 8008970:	d869      	bhi.n	8008a46 <_dtoa_r+0x2c6>
 8008972:	e8df f003 	tbb	[pc, r3]
 8008976:	4e2c      	.short	0x4e2c
 8008978:	5a4c      	.short	0x5a4c
 800897a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800897e:	441d      	add	r5, r3
 8008980:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008984:	2b20      	cmp	r3, #32
 8008986:	bfc1      	itttt	gt
 8008988:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800898c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008990:	fa09 f303 	lslgt.w	r3, r9, r3
 8008994:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008998:	bfda      	itte	le
 800899a:	f1c3 0320 	rsble	r3, r3, #32
 800899e:	fa06 f003 	lslle.w	r0, r6, r3
 80089a2:	4318      	orrgt	r0, r3
 80089a4:	f7f7 fdae 	bl	8000504 <__aeabi_ui2d>
 80089a8:	2301      	movs	r3, #1
 80089aa:	4606      	mov	r6, r0
 80089ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80089b0:	3d01      	subs	r5, #1
 80089b2:	9310      	str	r3, [sp, #64]	; 0x40
 80089b4:	e771      	b.n	800889a <_dtoa_r+0x11a>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e7b6      	b.n	8008928 <_dtoa_r+0x1a8>
 80089ba:	900e      	str	r0, [sp, #56]	; 0x38
 80089bc:	e7b5      	b.n	800892a <_dtoa_r+0x1aa>
 80089be:	f1ca 0300 	rsb	r3, sl, #0
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	2300      	movs	r3, #0
 80089c6:	eba8 080a 	sub.w	r8, r8, sl
 80089ca:	930d      	str	r3, [sp, #52]	; 0x34
 80089cc:	e7c2      	b.n	8008954 <_dtoa_r+0x1d4>
 80089ce:	2300      	movs	r3, #0
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dc39      	bgt.n	8008a4c <_dtoa_r+0x2cc>
 80089d8:	f04f 0901 	mov.w	r9, #1
 80089dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80089e0:	464b      	mov	r3, r9
 80089e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80089e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80089e8:	2200      	movs	r2, #0
 80089ea:	6042      	str	r2, [r0, #4]
 80089ec:	2204      	movs	r2, #4
 80089ee:	f102 0614 	add.w	r6, r2, #20
 80089f2:	429e      	cmp	r6, r3
 80089f4:	6841      	ldr	r1, [r0, #4]
 80089f6:	d92f      	bls.n	8008a58 <_dtoa_r+0x2d8>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fdc1 	bl	8009580 <_Balloc>
 80089fe:	9000      	str	r0, [sp, #0]
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d14b      	bne.n	8008a9c <_dtoa_r+0x31c>
 8008a04:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <_dtoa_r+0x318>)
 8008a06:	4602      	mov	r2, r0
 8008a08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a0c:	e6d1      	b.n	80087b2 <_dtoa_r+0x32>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7de      	b.n	80089d0 <_dtoa_r+0x250>
 8008a12:	2300      	movs	r3, #0
 8008a14:	9308      	str	r3, [sp, #32]
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	eb0a 0903 	add.w	r9, sl, r3
 8008a1c:	f109 0301 	add.w	r3, r9, #1
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	bfb8      	it	lt
 8008a26:	2301      	movlt	r3, #1
 8008a28:	e7dd      	b.n	80089e6 <_dtoa_r+0x266>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e7f2      	b.n	8008a14 <_dtoa_r+0x294>
 8008a2e:	2501      	movs	r5, #1
 8008a30:	2300      	movs	r3, #0
 8008a32:	9305      	str	r3, [sp, #20]
 8008a34:	9508      	str	r5, [sp, #32]
 8008a36:	f04f 39ff 	mov.w	r9, #4294967295
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a40:	2312      	movs	r3, #18
 8008a42:	9209      	str	r2, [sp, #36]	; 0x24
 8008a44:	e7cf      	b.n	80089e6 <_dtoa_r+0x266>
 8008a46:	2301      	movs	r3, #1
 8008a48:	9308      	str	r3, [sp, #32]
 8008a4a:	e7f4      	b.n	8008a36 <_dtoa_r+0x2b6>
 8008a4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a50:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a54:	464b      	mov	r3, r9
 8008a56:	e7c6      	b.n	80089e6 <_dtoa_r+0x266>
 8008a58:	3101      	adds	r1, #1
 8008a5a:	6041      	str	r1, [r0, #4]
 8008a5c:	0052      	lsls	r2, r2, #1
 8008a5e:	e7c6      	b.n	80089ee <_dtoa_r+0x26e>
 8008a60:	636f4361 	.word	0x636f4361
 8008a64:	3fd287a7 	.word	0x3fd287a7
 8008a68:	8b60c8b3 	.word	0x8b60c8b3
 8008a6c:	3fc68a28 	.word	0x3fc68a28
 8008a70:	509f79fb 	.word	0x509f79fb
 8008a74:	3fd34413 	.word	0x3fd34413
 8008a78:	0800abe1 	.word	0x0800abe1
 8008a7c:	0800abf8 	.word	0x0800abf8
 8008a80:	7ff00000 	.word	0x7ff00000
 8008a84:	0800abdd 	.word	0x0800abdd
 8008a88:	0800abd4 	.word	0x0800abd4
 8008a8c:	0800abb1 	.word	0x0800abb1
 8008a90:	3ff80000 	.word	0x3ff80000
 8008a94:	0800ad50 	.word	0x0800ad50
 8008a98:	0800ac57 	.word	0x0800ac57
 8008a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a9e:	9a00      	ldr	r2, [sp, #0]
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	2b0e      	cmp	r3, #14
 8008aa6:	f200 80ad 	bhi.w	8008c04 <_dtoa_r+0x484>
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	f000 80aa 	beq.w	8008c04 <_dtoa_r+0x484>
 8008ab0:	f1ba 0f00 	cmp.w	sl, #0
 8008ab4:	dd36      	ble.n	8008b24 <_dtoa_r+0x3a4>
 8008ab6:	4ac3      	ldr	r2, [pc, #780]	; (8008dc4 <_dtoa_r+0x644>)
 8008ab8:	f00a 030f 	and.w	r3, sl, #15
 8008abc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ac0:	ed93 7b00 	vldr	d7, [r3]
 8008ac4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008ac8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008acc:	eeb0 8a47 	vmov.f32	s16, s14
 8008ad0:	eef0 8a67 	vmov.f32	s17, s15
 8008ad4:	d016      	beq.n	8008b04 <_dtoa_r+0x384>
 8008ad6:	4bbc      	ldr	r3, [pc, #752]	; (8008dc8 <_dtoa_r+0x648>)
 8008ad8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008adc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ae0:	f7f7 feb4 	bl	800084c <__aeabi_ddiv>
 8008ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae8:	f007 070f 	and.w	r7, r7, #15
 8008aec:	2503      	movs	r5, #3
 8008aee:	4eb6      	ldr	r6, [pc, #728]	; (8008dc8 <_dtoa_r+0x648>)
 8008af0:	b957      	cbnz	r7, 8008b08 <_dtoa_r+0x388>
 8008af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008af6:	ec53 2b18 	vmov	r2, r3, d8
 8008afa:	f7f7 fea7 	bl	800084c <__aeabi_ddiv>
 8008afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b02:	e029      	b.n	8008b58 <_dtoa_r+0x3d8>
 8008b04:	2502      	movs	r5, #2
 8008b06:	e7f2      	b.n	8008aee <_dtoa_r+0x36e>
 8008b08:	07f9      	lsls	r1, r7, #31
 8008b0a:	d508      	bpl.n	8008b1e <_dtoa_r+0x39e>
 8008b0c:	ec51 0b18 	vmov	r0, r1, d8
 8008b10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b14:	f7f7 fd70 	bl	80005f8 <__aeabi_dmul>
 8008b18:	ec41 0b18 	vmov	d8, r0, r1
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	107f      	asrs	r7, r7, #1
 8008b20:	3608      	adds	r6, #8
 8008b22:	e7e5      	b.n	8008af0 <_dtoa_r+0x370>
 8008b24:	f000 80a6 	beq.w	8008c74 <_dtoa_r+0x4f4>
 8008b28:	f1ca 0600 	rsb	r6, sl, #0
 8008b2c:	4ba5      	ldr	r3, [pc, #660]	; (8008dc4 <_dtoa_r+0x644>)
 8008b2e:	4fa6      	ldr	r7, [pc, #664]	; (8008dc8 <_dtoa_r+0x648>)
 8008b30:	f006 020f 	and.w	r2, r6, #15
 8008b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b40:	f7f7 fd5a 	bl	80005f8 <__aeabi_dmul>
 8008b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b48:	1136      	asrs	r6, r6, #4
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2502      	movs	r5, #2
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	f040 8085 	bne.w	8008c5e <_dtoa_r+0x4de>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1d2      	bne.n	8008afe <_dtoa_r+0x37e>
 8008b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 808c 	beq.w	8008c78 <_dtoa_r+0x4f8>
 8008b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b64:	4b99      	ldr	r3, [pc, #612]	; (8008dcc <_dtoa_r+0x64c>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f7 ffb6 	bl	8000adc <__aeabi_dcmplt>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f000 8081 	beq.w	8008c78 <_dtoa_r+0x4f8>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d07d      	beq.n	8008c78 <_dtoa_r+0x4f8>
 8008b7c:	f1b9 0f00 	cmp.w	r9, #0
 8008b80:	dd3c      	ble.n	8008bfc <_dtoa_r+0x47c>
 8008b82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4b91      	ldr	r3, [pc, #580]	; (8008dd0 <_dtoa_r+0x650>)
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	4639      	mov	r1, r7
 8008b90:	f7f7 fd32 	bl	80005f8 <__aeabi_dmul>
 8008b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b98:	3501      	adds	r5, #1
 8008b9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008b9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7f7 fcbe 	bl	8000524 <__aeabi_i2d>
 8008ba8:	4632      	mov	r2, r6
 8008baa:	463b      	mov	r3, r7
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	4b88      	ldr	r3, [pc, #544]	; (8008dd4 <_dtoa_r+0x654>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f7f7 fb6a 	bl	800028c <__adddf3>
 8008bb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc0:	9303      	str	r3, [sp, #12]
 8008bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d15c      	bne.n	8008c82 <_dtoa_r+0x502>
 8008bc8:	4b83      	ldr	r3, [pc, #524]	; (8008dd8 <_dtoa_r+0x658>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fb5a 	bl	8000288 <__aeabi_dsub>
 8008bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	f7f7 ff9c 	bl	8000b18 <__aeabi_dcmpgt>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f040 8296 	bne.w	8009112 <_dtoa_r+0x992>
 8008be6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008bea:	4630      	mov	r0, r6
 8008bec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	f7f7 ff73 	bl	8000adc <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f040 8288 	bne.w	800910c <_dtoa_r+0x98c>
 8008bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f2c0 8158 	blt.w	8008ebc <_dtoa_r+0x73c>
 8008c0c:	f1ba 0f0e 	cmp.w	sl, #14
 8008c10:	f300 8154 	bgt.w	8008ebc <_dtoa_r+0x73c>
 8008c14:	4b6b      	ldr	r3, [pc, #428]	; (8008dc4 <_dtoa_r+0x644>)
 8008c16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f280 80e3 	bge.w	8008dec <_dtoa_r+0x66c>
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f300 80df 	bgt.w	8008dec <_dtoa_r+0x66c>
 8008c2e:	f040 826d 	bne.w	800910c <_dtoa_r+0x98c>
 8008c32:	4b69      	ldr	r3, [pc, #420]	; (8008dd8 <_dtoa_r+0x658>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	f7f7 fcdd 	bl	80005f8 <__aeabi_dmul>
 8008c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c42:	f7f7 ff5f 	bl	8000b04 <__aeabi_dcmpge>
 8008c46:	9e01      	ldr	r6, [sp, #4]
 8008c48:	4637      	mov	r7, r6
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f040 8243 	bne.w	80090d6 <_dtoa_r+0x956>
 8008c50:	9d00      	ldr	r5, [sp, #0]
 8008c52:	2331      	movs	r3, #49	; 0x31
 8008c54:	f805 3b01 	strb.w	r3, [r5], #1
 8008c58:	f10a 0a01 	add.w	sl, sl, #1
 8008c5c:	e23f      	b.n	80090de <_dtoa_r+0x95e>
 8008c5e:	07f2      	lsls	r2, r6, #31
 8008c60:	d505      	bpl.n	8008c6e <_dtoa_r+0x4ee>
 8008c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c66:	f7f7 fcc7 	bl	80005f8 <__aeabi_dmul>
 8008c6a:	3501      	adds	r5, #1
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	1076      	asrs	r6, r6, #1
 8008c70:	3708      	adds	r7, #8
 8008c72:	e76c      	b.n	8008b4e <_dtoa_r+0x3ce>
 8008c74:	2502      	movs	r5, #2
 8008c76:	e76f      	b.n	8008b58 <_dtoa_r+0x3d8>
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c80:	e78d      	b.n	8008b9e <_dtoa_r+0x41e>
 8008c82:	9900      	ldr	r1, [sp, #0]
 8008c84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c88:	4b4e      	ldr	r3, [pc, #312]	; (8008dc4 <_dtoa_r+0x644>)
 8008c8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c8e:	4401      	add	r1, r0
 8008c90:	9102      	str	r1, [sp, #8]
 8008c92:	9908      	ldr	r1, [sp, #32]
 8008c94:	eeb0 8a47 	vmov.f32	s16, s14
 8008c98:	eef0 8a67 	vmov.f32	s17, s15
 8008c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	d045      	beq.n	8008d34 <_dtoa_r+0x5b4>
 8008ca8:	494c      	ldr	r1, [pc, #304]	; (8008ddc <_dtoa_r+0x65c>)
 8008caa:	2000      	movs	r0, #0
 8008cac:	f7f7 fdce 	bl	800084c <__aeabi_ddiv>
 8008cb0:	ec53 2b18 	vmov	r2, r3, d8
 8008cb4:	f7f7 fae8 	bl	8000288 <__aeabi_dsub>
 8008cb8:	9d00      	ldr	r5, [sp, #0]
 8008cba:	ec41 0b18 	vmov	d8, r0, r1
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7f7 ff49 	bl	8000b58 <__aeabi_d2iz>
 8008cc6:	900c      	str	r0, [sp, #48]	; 0x30
 8008cc8:	f7f7 fc2c 	bl	8000524 <__aeabi_i2d>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f7 fad8 	bl	8000288 <__aeabi_dsub>
 8008cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cda:	3330      	adds	r3, #48	; 0x30
 8008cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8008ce0:	ec53 2b18 	vmov	r2, r3, d8
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	460f      	mov	r7, r1
 8008ce8:	f7f7 fef8 	bl	8000adc <__aeabi_dcmplt>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d165      	bne.n	8008dbc <_dtoa_r+0x63c>
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	4935      	ldr	r1, [pc, #212]	; (8008dcc <_dtoa_r+0x64c>)
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f7f7 fac6 	bl	8000288 <__aeabi_dsub>
 8008cfc:	ec53 2b18 	vmov	r2, r3, d8
 8008d00:	f7f7 feec 	bl	8000adc <__aeabi_dcmplt>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f040 80b9 	bne.w	8008e7c <_dtoa_r+0x6fc>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	f43f af75 	beq.w	8008bfc <_dtoa_r+0x47c>
 8008d12:	4b2f      	ldr	r3, [pc, #188]	; (8008dd0 <_dtoa_r+0x650>)
 8008d14:	ec51 0b18 	vmov	r0, r1, d8
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f7f7 fc6d 	bl	80005f8 <__aeabi_dmul>
 8008d1e:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <_dtoa_r+0x650>)
 8008d20:	ec41 0b18 	vmov	d8, r0, r1
 8008d24:	2200      	movs	r2, #0
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f7 fc65 	bl	80005f8 <__aeabi_dmul>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460f      	mov	r7, r1
 8008d32:	e7c4      	b.n	8008cbe <_dtoa_r+0x53e>
 8008d34:	ec51 0b17 	vmov	r0, r1, d7
 8008d38:	f7f7 fc5e 	bl	80005f8 <__aeabi_dmul>
 8008d3c:	9b02      	ldr	r3, [sp, #8]
 8008d3e:	9d00      	ldr	r5, [sp, #0]
 8008d40:	930c      	str	r3, [sp, #48]	; 0x30
 8008d42:	ec41 0b18 	vmov	d8, r0, r1
 8008d46:	4639      	mov	r1, r7
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7f7 ff05 	bl	8000b58 <__aeabi_d2iz>
 8008d4e:	9011      	str	r0, [sp, #68]	; 0x44
 8008d50:	f7f7 fbe8 	bl	8000524 <__aeabi_i2d>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fa94 	bl	8000288 <__aeabi_dsub>
 8008d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d62:	3330      	adds	r3, #48	; 0x30
 8008d64:	f805 3b01 	strb.w	r3, [r5], #1
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	429d      	cmp	r5, r3
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	d134      	bne.n	8008de0 <_dtoa_r+0x660>
 8008d76:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <_dtoa_r+0x65c>)
 8008d78:	ec51 0b18 	vmov	r0, r1, d8
 8008d7c:	f7f7 fa86 	bl	800028c <__adddf3>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	f7f7 fec6 	bl	8000b18 <__aeabi_dcmpgt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d175      	bne.n	8008e7c <_dtoa_r+0x6fc>
 8008d90:	ec53 2b18 	vmov	r2, r3, d8
 8008d94:	4911      	ldr	r1, [pc, #68]	; (8008ddc <_dtoa_r+0x65c>)
 8008d96:	2000      	movs	r0, #0
 8008d98:	f7f7 fa76 	bl	8000288 <__aeabi_dsub>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fe9a 	bl	8000adc <__aeabi_dcmplt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	f43f af27 	beq.w	8008bfc <_dtoa_r+0x47c>
 8008dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008db0:	1e6b      	subs	r3, r5, #1
 8008db2:	930c      	str	r3, [sp, #48]	; 0x30
 8008db4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008db8:	2b30      	cmp	r3, #48	; 0x30
 8008dba:	d0f8      	beq.n	8008dae <_dtoa_r+0x62e>
 8008dbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008dc0:	e04a      	b.n	8008e58 <_dtoa_r+0x6d8>
 8008dc2:	bf00      	nop
 8008dc4:	0800ad50 	.word	0x0800ad50
 8008dc8:	0800ad28 	.word	0x0800ad28
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	40240000 	.word	0x40240000
 8008dd4:	401c0000 	.word	0x401c0000
 8008dd8:	40140000 	.word	0x40140000
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	4baf      	ldr	r3, [pc, #700]	; (80090a0 <_dtoa_r+0x920>)
 8008de2:	f7f7 fc09 	bl	80005f8 <__aeabi_dmul>
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	e7ac      	b.n	8008d46 <_dtoa_r+0x5c6>
 8008dec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008df0:	9d00      	ldr	r5, [sp, #0]
 8008df2:	4642      	mov	r2, r8
 8008df4:	464b      	mov	r3, r9
 8008df6:	4630      	mov	r0, r6
 8008df8:	4639      	mov	r1, r7
 8008dfa:	f7f7 fd27 	bl	800084c <__aeabi_ddiv>
 8008dfe:	f7f7 feab 	bl	8000b58 <__aeabi_d2iz>
 8008e02:	9002      	str	r0, [sp, #8]
 8008e04:	f7f7 fb8e 	bl	8000524 <__aeabi_i2d>
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	f7f7 fbf4 	bl	80005f8 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fa36 	bl	8000288 <__aeabi_dsub>
 8008e1c:	9e02      	ldr	r6, [sp, #8]
 8008e1e:	9f01      	ldr	r7, [sp, #4]
 8008e20:	3630      	adds	r6, #48	; 0x30
 8008e22:	f805 6b01 	strb.w	r6, [r5], #1
 8008e26:	9e00      	ldr	r6, [sp, #0]
 8008e28:	1bae      	subs	r6, r5, r6
 8008e2a:	42b7      	cmp	r7, r6
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	d137      	bne.n	8008ea2 <_dtoa_r+0x722>
 8008e32:	f7f7 fa2b 	bl	800028c <__adddf3>
 8008e36:	4642      	mov	r2, r8
 8008e38:	464b      	mov	r3, r9
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	f7f7 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8008e42:	b9c8      	cbnz	r0, 8008e78 <_dtoa_r+0x6f8>
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e50:	b110      	cbz	r0, 8008e58 <_dtoa_r+0x6d8>
 8008e52:	9b02      	ldr	r3, [sp, #8]
 8008e54:	07d9      	lsls	r1, r3, #31
 8008e56:	d40f      	bmi.n	8008e78 <_dtoa_r+0x6f8>
 8008e58:	4620      	mov	r0, r4
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	f000 fbd0 	bl	8009600 <_Bfree>
 8008e60:	2300      	movs	r3, #0
 8008e62:	702b      	strb	r3, [r5, #0]
 8008e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e66:	f10a 0001 	add.w	r0, sl, #1
 8008e6a:	6018      	str	r0, [r3, #0]
 8008e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f43f acd8 	beq.w	8008824 <_dtoa_r+0xa4>
 8008e74:	601d      	str	r5, [r3, #0]
 8008e76:	e4d5      	b.n	8008824 <_dtoa_r+0xa4>
 8008e78:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	461d      	mov	r5, r3
 8008e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e84:	2a39      	cmp	r2, #57	; 0x39
 8008e86:	d108      	bne.n	8008e9a <_dtoa_r+0x71a>
 8008e88:	9a00      	ldr	r2, [sp, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d1f7      	bne.n	8008e7e <_dtoa_r+0x6fe>
 8008e8e:	9a07      	ldr	r2, [sp, #28]
 8008e90:	9900      	ldr	r1, [sp, #0]
 8008e92:	3201      	adds	r2, #1
 8008e94:	9207      	str	r2, [sp, #28]
 8008e96:	2230      	movs	r2, #48	; 0x30
 8008e98:	700a      	strb	r2, [r1, #0]
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	3201      	adds	r2, #1
 8008e9e:	701a      	strb	r2, [r3, #0]
 8008ea0:	e78c      	b.n	8008dbc <_dtoa_r+0x63c>
 8008ea2:	4b7f      	ldr	r3, [pc, #508]	; (80090a0 <_dtoa_r+0x920>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f7f7 fba7 	bl	80005f8 <__aeabi_dmul>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2300      	movs	r3, #0
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460f      	mov	r7, r1
 8008eb2:	f7f7 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d09b      	beq.n	8008df2 <_dtoa_r+0x672>
 8008eba:	e7cd      	b.n	8008e58 <_dtoa_r+0x6d8>
 8008ebc:	9a08      	ldr	r2, [sp, #32]
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	f000 80c4 	beq.w	800904c <_dtoa_r+0x8cc>
 8008ec4:	9a05      	ldr	r2, [sp, #20]
 8008ec6:	2a01      	cmp	r2, #1
 8008ec8:	f300 80a8 	bgt.w	800901c <_dtoa_r+0x89c>
 8008ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	f000 80a0 	beq.w	8009014 <_dtoa_r+0x894>
 8008ed4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ed8:	9e06      	ldr	r6, [sp, #24]
 8008eda:	4645      	mov	r5, r8
 8008edc:	9a04      	ldr	r2, [sp, #16]
 8008ede:	2101      	movs	r1, #1
 8008ee0:	441a      	add	r2, r3
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	4498      	add	r8, r3
 8008ee6:	9204      	str	r2, [sp, #16]
 8008ee8:	f000 fc46 	bl	8009778 <__i2b>
 8008eec:	4607      	mov	r7, r0
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	dd0b      	ble.n	8008f0a <_dtoa_r+0x78a>
 8008ef2:	9b04      	ldr	r3, [sp, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dd08      	ble.n	8008f0a <_dtoa_r+0x78a>
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	9a04      	ldr	r2, [sp, #16]
 8008efc:	bfa8      	it	ge
 8008efe:	462b      	movge	r3, r5
 8008f00:	eba8 0803 	sub.w	r8, r8, r3
 8008f04:	1aed      	subs	r5, r5, r3
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	9304      	str	r3, [sp, #16]
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	b1fb      	cbz	r3, 8008f4e <_dtoa_r+0x7ce>
 8008f0e:	9b08      	ldr	r3, [sp, #32]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 809f 	beq.w	8009054 <_dtoa_r+0x8d4>
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	dd11      	ble.n	8008f3e <_dtoa_r+0x7be>
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fce6 	bl	80098f0 <__pow5mult>
 8008f24:	465a      	mov	r2, fp
 8008f26:	4601      	mov	r1, r0
 8008f28:	4607      	mov	r7, r0
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fc3a 	bl	80097a4 <__multiply>
 8008f30:	4659      	mov	r1, fp
 8008f32:	9007      	str	r0, [sp, #28]
 8008f34:	4620      	mov	r0, r4
 8008f36:	f000 fb63 	bl	8009600 <_Bfree>
 8008f3a:	9b07      	ldr	r3, [sp, #28]
 8008f3c:	469b      	mov	fp, r3
 8008f3e:	9b06      	ldr	r3, [sp, #24]
 8008f40:	1b9a      	subs	r2, r3, r6
 8008f42:	d004      	beq.n	8008f4e <_dtoa_r+0x7ce>
 8008f44:	4659      	mov	r1, fp
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fcd2 	bl	80098f0 <__pow5mult>
 8008f4c:	4683      	mov	fp, r0
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fc11 	bl	8009778 <__i2b>
 8008f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	dd7c      	ble.n	8009058 <_dtoa_r+0x8d8>
 8008f5e:	461a      	mov	r2, r3
 8008f60:	4601      	mov	r1, r0
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 fcc4 	bl	80098f0 <__pow5mult>
 8008f68:	9b05      	ldr	r3, [sp, #20]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	dd76      	ble.n	800905e <_dtoa_r+0x8de>
 8008f70:	2300      	movs	r3, #0
 8008f72:	9306      	str	r3, [sp, #24]
 8008f74:	6933      	ldr	r3, [r6, #16]
 8008f76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f7a:	6918      	ldr	r0, [r3, #16]
 8008f7c:	f000 fbac 	bl	80096d8 <__hi0bits>
 8008f80:	f1c0 0020 	rsb	r0, r0, #32
 8008f84:	9b04      	ldr	r3, [sp, #16]
 8008f86:	4418      	add	r0, r3
 8008f88:	f010 001f 	ands.w	r0, r0, #31
 8008f8c:	f000 8086 	beq.w	800909c <_dtoa_r+0x91c>
 8008f90:	f1c0 0320 	rsb	r3, r0, #32
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	dd7f      	ble.n	8009098 <_dtoa_r+0x918>
 8008f98:	f1c0 001c 	rsb	r0, r0, #28
 8008f9c:	9b04      	ldr	r3, [sp, #16]
 8008f9e:	4403      	add	r3, r0
 8008fa0:	4480      	add	r8, r0
 8008fa2:	4405      	add	r5, r0
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	f1b8 0f00 	cmp.w	r8, #0
 8008faa:	dd05      	ble.n	8008fb8 <_dtoa_r+0x838>
 8008fac:	4659      	mov	r1, fp
 8008fae:	4642      	mov	r2, r8
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fcf7 	bl	80099a4 <__lshift>
 8008fb6:	4683      	mov	fp, r0
 8008fb8:	9b04      	ldr	r3, [sp, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dd05      	ble.n	8008fca <_dtoa_r+0x84a>
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fcee 	bl	80099a4 <__lshift>
 8008fc8:	4606      	mov	r6, r0
 8008fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d069      	beq.n	80090a4 <_dtoa_r+0x924>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4658      	mov	r0, fp
 8008fd4:	f000 fd52 	bl	8009a7c <__mcmp>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	da63      	bge.n	80090a4 <_dtoa_r+0x924>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4659      	mov	r1, fp
 8008fe0:	220a      	movs	r2, #10
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fb2e 	bl	8009644 <__multadd>
 8008fe8:	9b08      	ldr	r3, [sp, #32]
 8008fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fee:	4683      	mov	fp, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 818f 	beq.w	8009314 <_dtoa_r+0xb94>
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	220a      	movs	r2, #10
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fb21 	bl	8009644 <__multadd>
 8009002:	f1b9 0f00 	cmp.w	r9, #0
 8009006:	4607      	mov	r7, r0
 8009008:	f300 808e 	bgt.w	8009128 <_dtoa_r+0x9a8>
 800900c:	9b05      	ldr	r3, [sp, #20]
 800900e:	2b02      	cmp	r3, #2
 8009010:	dc50      	bgt.n	80090b4 <_dtoa_r+0x934>
 8009012:	e089      	b.n	8009128 <_dtoa_r+0x9a8>
 8009014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009016:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800901a:	e75d      	b.n	8008ed8 <_dtoa_r+0x758>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	1e5e      	subs	r6, r3, #1
 8009020:	9b06      	ldr	r3, [sp, #24]
 8009022:	42b3      	cmp	r3, r6
 8009024:	bfbf      	itttt	lt
 8009026:	9b06      	ldrlt	r3, [sp, #24]
 8009028:	9606      	strlt	r6, [sp, #24]
 800902a:	1af2      	sublt	r2, r6, r3
 800902c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800902e:	bfb6      	itet	lt
 8009030:	189b      	addlt	r3, r3, r2
 8009032:	1b9e      	subge	r6, r3, r6
 8009034:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	bfb8      	it	lt
 800903a:	2600      	movlt	r6, #0
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfb5      	itete	lt
 8009040:	eba8 0503 	sublt.w	r5, r8, r3
 8009044:	9b01      	ldrge	r3, [sp, #4]
 8009046:	2300      	movlt	r3, #0
 8009048:	4645      	movge	r5, r8
 800904a:	e747      	b.n	8008edc <_dtoa_r+0x75c>
 800904c:	9e06      	ldr	r6, [sp, #24]
 800904e:	9f08      	ldr	r7, [sp, #32]
 8009050:	4645      	mov	r5, r8
 8009052:	e74c      	b.n	8008eee <_dtoa_r+0x76e>
 8009054:	9a06      	ldr	r2, [sp, #24]
 8009056:	e775      	b.n	8008f44 <_dtoa_r+0x7c4>
 8009058:	9b05      	ldr	r3, [sp, #20]
 800905a:	2b01      	cmp	r3, #1
 800905c:	dc18      	bgt.n	8009090 <_dtoa_r+0x910>
 800905e:	9b02      	ldr	r3, [sp, #8]
 8009060:	b9b3      	cbnz	r3, 8009090 <_dtoa_r+0x910>
 8009062:	9b03      	ldr	r3, [sp, #12]
 8009064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009068:	b9a3      	cbnz	r3, 8009094 <_dtoa_r+0x914>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009070:	0d1b      	lsrs	r3, r3, #20
 8009072:	051b      	lsls	r3, r3, #20
 8009074:	b12b      	cbz	r3, 8009082 <_dtoa_r+0x902>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	3301      	adds	r3, #1
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	f108 0801 	add.w	r8, r8, #1
 8009080:	2301      	movs	r3, #1
 8009082:	9306      	str	r3, [sp, #24]
 8009084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009086:	2b00      	cmp	r3, #0
 8009088:	f47f af74 	bne.w	8008f74 <_dtoa_r+0x7f4>
 800908c:	2001      	movs	r0, #1
 800908e:	e779      	b.n	8008f84 <_dtoa_r+0x804>
 8009090:	2300      	movs	r3, #0
 8009092:	e7f6      	b.n	8009082 <_dtoa_r+0x902>
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	e7f4      	b.n	8009082 <_dtoa_r+0x902>
 8009098:	d085      	beq.n	8008fa6 <_dtoa_r+0x826>
 800909a:	4618      	mov	r0, r3
 800909c:	301c      	adds	r0, #28
 800909e:	e77d      	b.n	8008f9c <_dtoa_r+0x81c>
 80090a0:	40240000 	.word	0x40240000
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	dc38      	bgt.n	800911c <_dtoa_r+0x99c>
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	dd35      	ble.n	800911c <_dtoa_r+0x99c>
 80090b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090b4:	f1b9 0f00 	cmp.w	r9, #0
 80090b8:	d10d      	bne.n	80090d6 <_dtoa_r+0x956>
 80090ba:	4631      	mov	r1, r6
 80090bc:	464b      	mov	r3, r9
 80090be:	2205      	movs	r2, #5
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fabf 	bl	8009644 <__multadd>
 80090c6:	4601      	mov	r1, r0
 80090c8:	4606      	mov	r6, r0
 80090ca:	4658      	mov	r0, fp
 80090cc:	f000 fcd6 	bl	8009a7c <__mcmp>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f73f adbd 	bgt.w	8008c50 <_dtoa_r+0x4d0>
 80090d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d8:	9d00      	ldr	r5, [sp, #0]
 80090da:	ea6f 0a03 	mvn.w	sl, r3
 80090de:	f04f 0800 	mov.w	r8, #0
 80090e2:	4631      	mov	r1, r6
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fa8b 	bl	8009600 <_Bfree>
 80090ea:	2f00      	cmp	r7, #0
 80090ec:	f43f aeb4 	beq.w	8008e58 <_dtoa_r+0x6d8>
 80090f0:	f1b8 0f00 	cmp.w	r8, #0
 80090f4:	d005      	beq.n	8009102 <_dtoa_r+0x982>
 80090f6:	45b8      	cmp	r8, r7
 80090f8:	d003      	beq.n	8009102 <_dtoa_r+0x982>
 80090fa:	4641      	mov	r1, r8
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fa7f 	bl	8009600 <_Bfree>
 8009102:	4639      	mov	r1, r7
 8009104:	4620      	mov	r0, r4
 8009106:	f000 fa7b 	bl	8009600 <_Bfree>
 800910a:	e6a5      	b.n	8008e58 <_dtoa_r+0x6d8>
 800910c:	2600      	movs	r6, #0
 800910e:	4637      	mov	r7, r6
 8009110:	e7e1      	b.n	80090d6 <_dtoa_r+0x956>
 8009112:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009118:	4637      	mov	r7, r6
 800911a:	e599      	b.n	8008c50 <_dtoa_r+0x4d0>
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80fd 	beq.w	8009322 <_dtoa_r+0xba2>
 8009128:	2d00      	cmp	r5, #0
 800912a:	dd05      	ble.n	8009138 <_dtoa_r+0x9b8>
 800912c:	4639      	mov	r1, r7
 800912e:	462a      	mov	r2, r5
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fc37 	bl	80099a4 <__lshift>
 8009136:	4607      	mov	r7, r0
 8009138:	9b06      	ldr	r3, [sp, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d05c      	beq.n	80091f8 <_dtoa_r+0xa78>
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	4620      	mov	r0, r4
 8009142:	f000 fa1d 	bl	8009580 <_Balloc>
 8009146:	4605      	mov	r5, r0
 8009148:	b928      	cbnz	r0, 8009156 <_dtoa_r+0x9d6>
 800914a:	4b80      	ldr	r3, [pc, #512]	; (800934c <_dtoa_r+0xbcc>)
 800914c:	4602      	mov	r2, r0
 800914e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009152:	f7ff bb2e 	b.w	80087b2 <_dtoa_r+0x32>
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	3202      	adds	r2, #2
 800915a:	0092      	lsls	r2, r2, #2
 800915c:	f107 010c 	add.w	r1, r7, #12
 8009160:	300c      	adds	r0, #12
 8009162:	f000 f9ff 	bl	8009564 <memcpy>
 8009166:	2201      	movs	r2, #1
 8009168:	4629      	mov	r1, r5
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fc1a 	bl	80099a4 <__lshift>
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	444b      	add	r3, r9
 800917a:	9307      	str	r3, [sp, #28]
 800917c:	9b02      	ldr	r3, [sp, #8]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	46b8      	mov	r8, r7
 8009184:	9306      	str	r3, [sp, #24]
 8009186:	4607      	mov	r7, r0
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	4631      	mov	r1, r6
 800918c:	3b01      	subs	r3, #1
 800918e:	4658      	mov	r0, fp
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	f7ff fa69 	bl	8008668 <quorem>
 8009196:	4603      	mov	r3, r0
 8009198:	3330      	adds	r3, #48	; 0x30
 800919a:	9004      	str	r0, [sp, #16]
 800919c:	4641      	mov	r1, r8
 800919e:	4658      	mov	r0, fp
 80091a0:	9308      	str	r3, [sp, #32]
 80091a2:	f000 fc6b 	bl	8009a7c <__mcmp>
 80091a6:	463a      	mov	r2, r7
 80091a8:	4681      	mov	r9, r0
 80091aa:	4631      	mov	r1, r6
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 fc81 	bl	8009ab4 <__mdiff>
 80091b2:	68c2      	ldr	r2, [r0, #12]
 80091b4:	9b08      	ldr	r3, [sp, #32]
 80091b6:	4605      	mov	r5, r0
 80091b8:	bb02      	cbnz	r2, 80091fc <_dtoa_r+0xa7c>
 80091ba:	4601      	mov	r1, r0
 80091bc:	4658      	mov	r0, fp
 80091be:	f000 fc5d 	bl	8009a7c <__mcmp>
 80091c2:	9b08      	ldr	r3, [sp, #32]
 80091c4:	4602      	mov	r2, r0
 80091c6:	4629      	mov	r1, r5
 80091c8:	4620      	mov	r0, r4
 80091ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80091ce:	f000 fa17 	bl	8009600 <_Bfree>
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d6:	9d01      	ldr	r5, [sp, #4]
 80091d8:	ea43 0102 	orr.w	r1, r3, r2
 80091dc:	9b06      	ldr	r3, [sp, #24]
 80091de:	430b      	orrs	r3, r1
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	d10d      	bne.n	8009200 <_dtoa_r+0xa80>
 80091e4:	2b39      	cmp	r3, #57	; 0x39
 80091e6:	d029      	beq.n	800923c <_dtoa_r+0xabc>
 80091e8:	f1b9 0f00 	cmp.w	r9, #0
 80091ec:	dd01      	ble.n	80091f2 <_dtoa_r+0xa72>
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	3331      	adds	r3, #49	; 0x31
 80091f2:	9a02      	ldr	r2, [sp, #8]
 80091f4:	7013      	strb	r3, [r2, #0]
 80091f6:	e774      	b.n	80090e2 <_dtoa_r+0x962>
 80091f8:	4638      	mov	r0, r7
 80091fa:	e7b9      	b.n	8009170 <_dtoa_r+0x9f0>
 80091fc:	2201      	movs	r2, #1
 80091fe:	e7e2      	b.n	80091c6 <_dtoa_r+0xa46>
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	db06      	blt.n	8009214 <_dtoa_r+0xa94>
 8009206:	9905      	ldr	r1, [sp, #20]
 8009208:	ea41 0909 	orr.w	r9, r1, r9
 800920c:	9906      	ldr	r1, [sp, #24]
 800920e:	ea59 0101 	orrs.w	r1, r9, r1
 8009212:	d120      	bne.n	8009256 <_dtoa_r+0xad6>
 8009214:	2a00      	cmp	r2, #0
 8009216:	ddec      	ble.n	80091f2 <_dtoa_r+0xa72>
 8009218:	4659      	mov	r1, fp
 800921a:	2201      	movs	r2, #1
 800921c:	4620      	mov	r0, r4
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	f000 fbc0 	bl	80099a4 <__lshift>
 8009224:	4631      	mov	r1, r6
 8009226:	4683      	mov	fp, r0
 8009228:	f000 fc28 	bl	8009a7c <__mcmp>
 800922c:	2800      	cmp	r0, #0
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	dc02      	bgt.n	8009238 <_dtoa_r+0xab8>
 8009232:	d1de      	bne.n	80091f2 <_dtoa_r+0xa72>
 8009234:	07da      	lsls	r2, r3, #31
 8009236:	d5dc      	bpl.n	80091f2 <_dtoa_r+0xa72>
 8009238:	2b39      	cmp	r3, #57	; 0x39
 800923a:	d1d8      	bne.n	80091ee <_dtoa_r+0xa6e>
 800923c:	9a02      	ldr	r2, [sp, #8]
 800923e:	2339      	movs	r3, #57	; 0x39
 8009240:	7013      	strb	r3, [r2, #0]
 8009242:	462b      	mov	r3, r5
 8009244:	461d      	mov	r5, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800924c:	2a39      	cmp	r2, #57	; 0x39
 800924e:	d050      	beq.n	80092f2 <_dtoa_r+0xb72>
 8009250:	3201      	adds	r2, #1
 8009252:	701a      	strb	r2, [r3, #0]
 8009254:	e745      	b.n	80090e2 <_dtoa_r+0x962>
 8009256:	2a00      	cmp	r2, #0
 8009258:	dd03      	ble.n	8009262 <_dtoa_r+0xae2>
 800925a:	2b39      	cmp	r3, #57	; 0x39
 800925c:	d0ee      	beq.n	800923c <_dtoa_r+0xabc>
 800925e:	3301      	adds	r3, #1
 8009260:	e7c7      	b.n	80091f2 <_dtoa_r+0xa72>
 8009262:	9a01      	ldr	r2, [sp, #4]
 8009264:	9907      	ldr	r1, [sp, #28]
 8009266:	f802 3c01 	strb.w	r3, [r2, #-1]
 800926a:	428a      	cmp	r2, r1
 800926c:	d02a      	beq.n	80092c4 <_dtoa_r+0xb44>
 800926e:	4659      	mov	r1, fp
 8009270:	2300      	movs	r3, #0
 8009272:	220a      	movs	r2, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f000 f9e5 	bl	8009644 <__multadd>
 800927a:	45b8      	cmp	r8, r7
 800927c:	4683      	mov	fp, r0
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	f04f 020a 	mov.w	r2, #10
 8009286:	4641      	mov	r1, r8
 8009288:	4620      	mov	r0, r4
 800928a:	d107      	bne.n	800929c <_dtoa_r+0xb1c>
 800928c:	f000 f9da 	bl	8009644 <__multadd>
 8009290:	4680      	mov	r8, r0
 8009292:	4607      	mov	r7, r0
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	3301      	adds	r3, #1
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	e775      	b.n	8009188 <_dtoa_r+0xa08>
 800929c:	f000 f9d2 	bl	8009644 <__multadd>
 80092a0:	4639      	mov	r1, r7
 80092a2:	4680      	mov	r8, r0
 80092a4:	2300      	movs	r3, #0
 80092a6:	220a      	movs	r2, #10
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 f9cb 	bl	8009644 <__multadd>
 80092ae:	4607      	mov	r7, r0
 80092b0:	e7f0      	b.n	8009294 <_dtoa_r+0xb14>
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	9a00      	ldr	r2, [sp, #0]
 80092b8:	bfcc      	ite	gt
 80092ba:	464d      	movgt	r5, r9
 80092bc:	2501      	movle	r5, #1
 80092be:	4415      	add	r5, r2
 80092c0:	f04f 0800 	mov.w	r8, #0
 80092c4:	4659      	mov	r1, fp
 80092c6:	2201      	movs	r2, #1
 80092c8:	4620      	mov	r0, r4
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	f000 fb6a 	bl	80099a4 <__lshift>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4683      	mov	fp, r0
 80092d4:	f000 fbd2 	bl	8009a7c <__mcmp>
 80092d8:	2800      	cmp	r0, #0
 80092da:	dcb2      	bgt.n	8009242 <_dtoa_r+0xac2>
 80092dc:	d102      	bne.n	80092e4 <_dtoa_r+0xb64>
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	07db      	lsls	r3, r3, #31
 80092e2:	d4ae      	bmi.n	8009242 <_dtoa_r+0xac2>
 80092e4:	462b      	mov	r3, r5
 80092e6:	461d      	mov	r5, r3
 80092e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ec:	2a30      	cmp	r2, #48	; 0x30
 80092ee:	d0fa      	beq.n	80092e6 <_dtoa_r+0xb66>
 80092f0:	e6f7      	b.n	80090e2 <_dtoa_r+0x962>
 80092f2:	9a00      	ldr	r2, [sp, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d1a5      	bne.n	8009244 <_dtoa_r+0xac4>
 80092f8:	f10a 0a01 	add.w	sl, sl, #1
 80092fc:	2331      	movs	r3, #49	; 0x31
 80092fe:	e779      	b.n	80091f4 <_dtoa_r+0xa74>
 8009300:	4b13      	ldr	r3, [pc, #76]	; (8009350 <_dtoa_r+0xbd0>)
 8009302:	f7ff baaf 	b.w	8008864 <_dtoa_r+0xe4>
 8009306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009308:	2b00      	cmp	r3, #0
 800930a:	f47f aa86 	bne.w	800881a <_dtoa_r+0x9a>
 800930e:	4b11      	ldr	r3, [pc, #68]	; (8009354 <_dtoa_r+0xbd4>)
 8009310:	f7ff baa8 	b.w	8008864 <_dtoa_r+0xe4>
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	dc03      	bgt.n	8009322 <_dtoa_r+0xba2>
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	2b02      	cmp	r3, #2
 800931e:	f73f aec9 	bgt.w	80090b4 <_dtoa_r+0x934>
 8009322:	9d00      	ldr	r5, [sp, #0]
 8009324:	4631      	mov	r1, r6
 8009326:	4658      	mov	r0, fp
 8009328:	f7ff f99e 	bl	8008668 <quorem>
 800932c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009330:	f805 3b01 	strb.w	r3, [r5], #1
 8009334:	9a00      	ldr	r2, [sp, #0]
 8009336:	1aaa      	subs	r2, r5, r2
 8009338:	4591      	cmp	r9, r2
 800933a:	ddba      	ble.n	80092b2 <_dtoa_r+0xb32>
 800933c:	4659      	mov	r1, fp
 800933e:	2300      	movs	r3, #0
 8009340:	220a      	movs	r2, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f000 f97e 	bl	8009644 <__multadd>
 8009348:	4683      	mov	fp, r0
 800934a:	e7eb      	b.n	8009324 <_dtoa_r+0xba4>
 800934c:	0800ac57 	.word	0x0800ac57
 8009350:	0800abb0 	.word	0x0800abb0
 8009354:	0800abd4 	.word	0x0800abd4

08009358 <std>:
 8009358:	2300      	movs	r3, #0
 800935a:	b510      	push	{r4, lr}
 800935c:	4604      	mov	r4, r0
 800935e:	e9c0 3300 	strd	r3, r3, [r0]
 8009362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009366:	6083      	str	r3, [r0, #8]
 8009368:	8181      	strh	r1, [r0, #12]
 800936a:	6643      	str	r3, [r0, #100]	; 0x64
 800936c:	81c2      	strh	r2, [r0, #14]
 800936e:	6183      	str	r3, [r0, #24]
 8009370:	4619      	mov	r1, r3
 8009372:	2208      	movs	r2, #8
 8009374:	305c      	adds	r0, #92	; 0x5c
 8009376:	f7fe fced 	bl	8007d54 <memset>
 800937a:	4b05      	ldr	r3, [pc, #20]	; (8009390 <std+0x38>)
 800937c:	6263      	str	r3, [r4, #36]	; 0x24
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <std+0x3c>)
 8009380:	62a3      	str	r3, [r4, #40]	; 0x28
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <std+0x40>)
 8009384:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std+0x44>)
 8009388:	6224      	str	r4, [r4, #32]
 800938a:	6323      	str	r3, [r4, #48]	; 0x30
 800938c:	bd10      	pop	{r4, pc}
 800938e:	bf00      	nop
 8009390:	0800a0c5 	.word	0x0800a0c5
 8009394:	0800a0e7 	.word	0x0800a0e7
 8009398:	0800a11f 	.word	0x0800a11f
 800939c:	0800a143 	.word	0x0800a143

080093a0 <_cleanup_r>:
 80093a0:	4901      	ldr	r1, [pc, #4]	; (80093a8 <_cleanup_r+0x8>)
 80093a2:	f000 b8af 	b.w	8009504 <_fwalk_reent>
 80093a6:	bf00      	nop
 80093a8:	0800a459 	.word	0x0800a459

080093ac <__sfmoreglue>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	1e4a      	subs	r2, r1, #1
 80093b0:	2568      	movs	r5, #104	; 0x68
 80093b2:	4355      	muls	r5, r2
 80093b4:	460e      	mov	r6, r1
 80093b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093ba:	f000 fcbf 	bl	8009d3c <_malloc_r>
 80093be:	4604      	mov	r4, r0
 80093c0:	b140      	cbz	r0, 80093d4 <__sfmoreglue+0x28>
 80093c2:	2100      	movs	r1, #0
 80093c4:	e9c0 1600 	strd	r1, r6, [r0]
 80093c8:	300c      	adds	r0, #12
 80093ca:	60a0      	str	r0, [r4, #8]
 80093cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093d0:	f7fe fcc0 	bl	8007d54 <memset>
 80093d4:	4620      	mov	r0, r4
 80093d6:	bd70      	pop	{r4, r5, r6, pc}

080093d8 <__sfp_lock_acquire>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__sfp_lock_acquire+0x8>)
 80093da:	f000 b8b8 	b.w	800954e <__retarget_lock_acquire_recursive>
 80093de:	bf00      	nop
 80093e0:	200005fc 	.word	0x200005fc

080093e4 <__sfp_lock_release>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__sfp_lock_release+0x8>)
 80093e6:	f000 b8b3 	b.w	8009550 <__retarget_lock_release_recursive>
 80093ea:	bf00      	nop
 80093ec:	200005fc 	.word	0x200005fc

080093f0 <__sinit_lock_acquire>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__sinit_lock_acquire+0x8>)
 80093f2:	f000 b8ac 	b.w	800954e <__retarget_lock_acquire_recursive>
 80093f6:	bf00      	nop
 80093f8:	200005f7 	.word	0x200005f7

080093fc <__sinit_lock_release>:
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <__sinit_lock_release+0x8>)
 80093fe:	f000 b8a7 	b.w	8009550 <__retarget_lock_release_recursive>
 8009402:	bf00      	nop
 8009404:	200005f7 	.word	0x200005f7

08009408 <__sinit>:
 8009408:	b510      	push	{r4, lr}
 800940a:	4604      	mov	r4, r0
 800940c:	f7ff fff0 	bl	80093f0 <__sinit_lock_acquire>
 8009410:	69a3      	ldr	r3, [r4, #24]
 8009412:	b11b      	cbz	r3, 800941c <__sinit+0x14>
 8009414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009418:	f7ff bff0 	b.w	80093fc <__sinit_lock_release>
 800941c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009420:	6523      	str	r3, [r4, #80]	; 0x50
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <__sinit+0x68>)
 8009424:	4a13      	ldr	r2, [pc, #76]	; (8009474 <__sinit+0x6c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	62a2      	str	r2, [r4, #40]	; 0x28
 800942a:	42a3      	cmp	r3, r4
 800942c:	bf04      	itt	eq
 800942e:	2301      	moveq	r3, #1
 8009430:	61a3      	streq	r3, [r4, #24]
 8009432:	4620      	mov	r0, r4
 8009434:	f000 f820 	bl	8009478 <__sfp>
 8009438:	6060      	str	r0, [r4, #4]
 800943a:	4620      	mov	r0, r4
 800943c:	f000 f81c 	bl	8009478 <__sfp>
 8009440:	60a0      	str	r0, [r4, #8]
 8009442:	4620      	mov	r0, r4
 8009444:	f000 f818 	bl	8009478 <__sfp>
 8009448:	2200      	movs	r2, #0
 800944a:	60e0      	str	r0, [r4, #12]
 800944c:	2104      	movs	r1, #4
 800944e:	6860      	ldr	r0, [r4, #4]
 8009450:	f7ff ff82 	bl	8009358 <std>
 8009454:	68a0      	ldr	r0, [r4, #8]
 8009456:	2201      	movs	r2, #1
 8009458:	2109      	movs	r1, #9
 800945a:	f7ff ff7d 	bl	8009358 <std>
 800945e:	68e0      	ldr	r0, [r4, #12]
 8009460:	2202      	movs	r2, #2
 8009462:	2112      	movs	r1, #18
 8009464:	f7ff ff78 	bl	8009358 <std>
 8009468:	2301      	movs	r3, #1
 800946a:	61a3      	str	r3, [r4, #24]
 800946c:	e7d2      	b.n	8009414 <__sinit+0xc>
 800946e:	bf00      	nop
 8009470:	0800ab9c 	.word	0x0800ab9c
 8009474:	080093a1 	.word	0x080093a1

08009478 <__sfp>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	4607      	mov	r7, r0
 800947c:	f7ff ffac 	bl	80093d8 <__sfp_lock_acquire>
 8009480:	4b1e      	ldr	r3, [pc, #120]	; (80094fc <__sfp+0x84>)
 8009482:	681e      	ldr	r6, [r3, #0]
 8009484:	69b3      	ldr	r3, [r6, #24]
 8009486:	b913      	cbnz	r3, 800948e <__sfp+0x16>
 8009488:	4630      	mov	r0, r6
 800948a:	f7ff ffbd 	bl	8009408 <__sinit>
 800948e:	3648      	adds	r6, #72	; 0x48
 8009490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009494:	3b01      	subs	r3, #1
 8009496:	d503      	bpl.n	80094a0 <__sfp+0x28>
 8009498:	6833      	ldr	r3, [r6, #0]
 800949a:	b30b      	cbz	r3, 80094e0 <__sfp+0x68>
 800949c:	6836      	ldr	r6, [r6, #0]
 800949e:	e7f7      	b.n	8009490 <__sfp+0x18>
 80094a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094a4:	b9d5      	cbnz	r5, 80094dc <__sfp+0x64>
 80094a6:	4b16      	ldr	r3, [pc, #88]	; (8009500 <__sfp+0x88>)
 80094a8:	60e3      	str	r3, [r4, #12]
 80094aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094ae:	6665      	str	r5, [r4, #100]	; 0x64
 80094b0:	f000 f84c 	bl	800954c <__retarget_lock_init_recursive>
 80094b4:	f7ff ff96 	bl	80093e4 <__sfp_lock_release>
 80094b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094c0:	6025      	str	r5, [r4, #0]
 80094c2:	61a5      	str	r5, [r4, #24]
 80094c4:	2208      	movs	r2, #8
 80094c6:	4629      	mov	r1, r5
 80094c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094cc:	f7fe fc42 	bl	8007d54 <memset>
 80094d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094d8:	4620      	mov	r0, r4
 80094da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094dc:	3468      	adds	r4, #104	; 0x68
 80094de:	e7d9      	b.n	8009494 <__sfp+0x1c>
 80094e0:	2104      	movs	r1, #4
 80094e2:	4638      	mov	r0, r7
 80094e4:	f7ff ff62 	bl	80093ac <__sfmoreglue>
 80094e8:	4604      	mov	r4, r0
 80094ea:	6030      	str	r0, [r6, #0]
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d1d5      	bne.n	800949c <__sfp+0x24>
 80094f0:	f7ff ff78 	bl	80093e4 <__sfp_lock_release>
 80094f4:	230c      	movs	r3, #12
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	e7ee      	b.n	80094d8 <__sfp+0x60>
 80094fa:	bf00      	nop
 80094fc:	0800ab9c 	.word	0x0800ab9c
 8009500:	ffff0001 	.word	0xffff0001

08009504 <_fwalk_reent>:
 8009504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009508:	4606      	mov	r6, r0
 800950a:	4688      	mov	r8, r1
 800950c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009510:	2700      	movs	r7, #0
 8009512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009516:	f1b9 0901 	subs.w	r9, r9, #1
 800951a:	d505      	bpl.n	8009528 <_fwalk_reent+0x24>
 800951c:	6824      	ldr	r4, [r4, #0]
 800951e:	2c00      	cmp	r4, #0
 8009520:	d1f7      	bne.n	8009512 <_fwalk_reent+0xe>
 8009522:	4638      	mov	r0, r7
 8009524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009528:	89ab      	ldrh	r3, [r5, #12]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d907      	bls.n	800953e <_fwalk_reent+0x3a>
 800952e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009532:	3301      	adds	r3, #1
 8009534:	d003      	beq.n	800953e <_fwalk_reent+0x3a>
 8009536:	4629      	mov	r1, r5
 8009538:	4630      	mov	r0, r6
 800953a:	47c0      	blx	r8
 800953c:	4307      	orrs	r7, r0
 800953e:	3568      	adds	r5, #104	; 0x68
 8009540:	e7e9      	b.n	8009516 <_fwalk_reent+0x12>
	...

08009544 <_localeconv_r>:
 8009544:	4800      	ldr	r0, [pc, #0]	; (8009548 <_localeconv_r+0x4>)
 8009546:	4770      	bx	lr
 8009548:	200002d8 	.word	0x200002d8

0800954c <__retarget_lock_init_recursive>:
 800954c:	4770      	bx	lr

0800954e <__retarget_lock_acquire_recursive>:
 800954e:	4770      	bx	lr

08009550 <__retarget_lock_release_recursive>:
 8009550:	4770      	bx	lr
	...

08009554 <malloc>:
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <malloc+0xc>)
 8009556:	4601      	mov	r1, r0
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	f000 bbef 	b.w	8009d3c <_malloc_r>
 800955e:	bf00      	nop
 8009560:	20000184 	.word	0x20000184

08009564 <memcpy>:
 8009564:	440a      	add	r2, r1
 8009566:	4291      	cmp	r1, r2
 8009568:	f100 33ff 	add.w	r3, r0, #4294967295
 800956c:	d100      	bne.n	8009570 <memcpy+0xc>
 800956e:	4770      	bx	lr
 8009570:	b510      	push	{r4, lr}
 8009572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800957a:	4291      	cmp	r1, r2
 800957c:	d1f9      	bne.n	8009572 <memcpy+0xe>
 800957e:	bd10      	pop	{r4, pc}

08009580 <_Balloc>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009584:	4604      	mov	r4, r0
 8009586:	460d      	mov	r5, r1
 8009588:	b976      	cbnz	r6, 80095a8 <_Balloc+0x28>
 800958a:	2010      	movs	r0, #16
 800958c:	f7ff ffe2 	bl	8009554 <malloc>
 8009590:	4602      	mov	r2, r0
 8009592:	6260      	str	r0, [r4, #36]	; 0x24
 8009594:	b920      	cbnz	r0, 80095a0 <_Balloc+0x20>
 8009596:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <_Balloc+0x78>)
 8009598:	4818      	ldr	r0, [pc, #96]	; (80095fc <_Balloc+0x7c>)
 800959a:	2166      	movs	r1, #102	; 0x66
 800959c:	f000 fea8 	bl	800a2f0 <__assert_func>
 80095a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095a4:	6006      	str	r6, [r0, #0]
 80095a6:	60c6      	str	r6, [r0, #12]
 80095a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095aa:	68f3      	ldr	r3, [r6, #12]
 80095ac:	b183      	cbz	r3, 80095d0 <_Balloc+0x50>
 80095ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095b6:	b9b8      	cbnz	r0, 80095e8 <_Balloc+0x68>
 80095b8:	2101      	movs	r1, #1
 80095ba:	fa01 f605 	lsl.w	r6, r1, r5
 80095be:	1d72      	adds	r2, r6, #5
 80095c0:	0092      	lsls	r2, r2, #2
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 fb5a 	bl	8009c7c <_calloc_r>
 80095c8:	b160      	cbz	r0, 80095e4 <_Balloc+0x64>
 80095ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095ce:	e00e      	b.n	80095ee <_Balloc+0x6e>
 80095d0:	2221      	movs	r2, #33	; 0x21
 80095d2:	2104      	movs	r1, #4
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 fb51 	bl	8009c7c <_calloc_r>
 80095da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095dc:	60f0      	str	r0, [r6, #12]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e4      	bne.n	80095ae <_Balloc+0x2e>
 80095e4:	2000      	movs	r0, #0
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	6802      	ldr	r2, [r0, #0]
 80095ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095ee:	2300      	movs	r3, #0
 80095f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095f4:	e7f7      	b.n	80095e6 <_Balloc+0x66>
 80095f6:	bf00      	nop
 80095f8:	0800abe1 	.word	0x0800abe1
 80095fc:	0800acc8 	.word	0x0800acc8

08009600 <_Bfree>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009604:	4605      	mov	r5, r0
 8009606:	460c      	mov	r4, r1
 8009608:	b976      	cbnz	r6, 8009628 <_Bfree+0x28>
 800960a:	2010      	movs	r0, #16
 800960c:	f7ff ffa2 	bl	8009554 <malloc>
 8009610:	4602      	mov	r2, r0
 8009612:	6268      	str	r0, [r5, #36]	; 0x24
 8009614:	b920      	cbnz	r0, 8009620 <_Bfree+0x20>
 8009616:	4b09      	ldr	r3, [pc, #36]	; (800963c <_Bfree+0x3c>)
 8009618:	4809      	ldr	r0, [pc, #36]	; (8009640 <_Bfree+0x40>)
 800961a:	218a      	movs	r1, #138	; 0x8a
 800961c:	f000 fe68 	bl	800a2f0 <__assert_func>
 8009620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009624:	6006      	str	r6, [r0, #0]
 8009626:	60c6      	str	r6, [r0, #12]
 8009628:	b13c      	cbz	r4, 800963a <_Bfree+0x3a>
 800962a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800962c:	6862      	ldr	r2, [r4, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009634:	6021      	str	r1, [r4, #0]
 8009636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	0800abe1 	.word	0x0800abe1
 8009640:	0800acc8 	.word	0x0800acc8

08009644 <__multadd>:
 8009644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009648:	690e      	ldr	r6, [r1, #16]
 800964a:	4607      	mov	r7, r0
 800964c:	4698      	mov	r8, r3
 800964e:	460c      	mov	r4, r1
 8009650:	f101 0014 	add.w	r0, r1, #20
 8009654:	2300      	movs	r3, #0
 8009656:	6805      	ldr	r5, [r0, #0]
 8009658:	b2a9      	uxth	r1, r5
 800965a:	fb02 8101 	mla	r1, r2, r1, r8
 800965e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009662:	0c2d      	lsrs	r5, r5, #16
 8009664:	fb02 c505 	mla	r5, r2, r5, ip
 8009668:	b289      	uxth	r1, r1
 800966a:	3301      	adds	r3, #1
 800966c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009670:	429e      	cmp	r6, r3
 8009672:	f840 1b04 	str.w	r1, [r0], #4
 8009676:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800967a:	dcec      	bgt.n	8009656 <__multadd+0x12>
 800967c:	f1b8 0f00 	cmp.w	r8, #0
 8009680:	d022      	beq.n	80096c8 <__multadd+0x84>
 8009682:	68a3      	ldr	r3, [r4, #8]
 8009684:	42b3      	cmp	r3, r6
 8009686:	dc19      	bgt.n	80096bc <__multadd+0x78>
 8009688:	6861      	ldr	r1, [r4, #4]
 800968a:	4638      	mov	r0, r7
 800968c:	3101      	adds	r1, #1
 800968e:	f7ff ff77 	bl	8009580 <_Balloc>
 8009692:	4605      	mov	r5, r0
 8009694:	b928      	cbnz	r0, 80096a2 <__multadd+0x5e>
 8009696:	4602      	mov	r2, r0
 8009698:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <__multadd+0x8c>)
 800969a:	480e      	ldr	r0, [pc, #56]	; (80096d4 <__multadd+0x90>)
 800969c:	21b5      	movs	r1, #181	; 0xb5
 800969e:	f000 fe27 	bl	800a2f0 <__assert_func>
 80096a2:	6922      	ldr	r2, [r4, #16]
 80096a4:	3202      	adds	r2, #2
 80096a6:	f104 010c 	add.w	r1, r4, #12
 80096aa:	0092      	lsls	r2, r2, #2
 80096ac:	300c      	adds	r0, #12
 80096ae:	f7ff ff59 	bl	8009564 <memcpy>
 80096b2:	4621      	mov	r1, r4
 80096b4:	4638      	mov	r0, r7
 80096b6:	f7ff ffa3 	bl	8009600 <_Bfree>
 80096ba:	462c      	mov	r4, r5
 80096bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80096c0:	3601      	adds	r6, #1
 80096c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80096c6:	6126      	str	r6, [r4, #16]
 80096c8:	4620      	mov	r0, r4
 80096ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ce:	bf00      	nop
 80096d0:	0800ac57 	.word	0x0800ac57
 80096d4:	0800acc8 	.word	0x0800acc8

080096d8 <__hi0bits>:
 80096d8:	0c03      	lsrs	r3, r0, #16
 80096da:	041b      	lsls	r3, r3, #16
 80096dc:	b9d3      	cbnz	r3, 8009714 <__hi0bits+0x3c>
 80096de:	0400      	lsls	r0, r0, #16
 80096e0:	2310      	movs	r3, #16
 80096e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096e6:	bf04      	itt	eq
 80096e8:	0200      	lsleq	r0, r0, #8
 80096ea:	3308      	addeq	r3, #8
 80096ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096f0:	bf04      	itt	eq
 80096f2:	0100      	lsleq	r0, r0, #4
 80096f4:	3304      	addeq	r3, #4
 80096f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096fa:	bf04      	itt	eq
 80096fc:	0080      	lsleq	r0, r0, #2
 80096fe:	3302      	addeq	r3, #2
 8009700:	2800      	cmp	r0, #0
 8009702:	db05      	blt.n	8009710 <__hi0bits+0x38>
 8009704:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009708:	f103 0301 	add.w	r3, r3, #1
 800970c:	bf08      	it	eq
 800970e:	2320      	moveq	r3, #32
 8009710:	4618      	mov	r0, r3
 8009712:	4770      	bx	lr
 8009714:	2300      	movs	r3, #0
 8009716:	e7e4      	b.n	80096e2 <__hi0bits+0xa>

08009718 <__lo0bits>:
 8009718:	6803      	ldr	r3, [r0, #0]
 800971a:	f013 0207 	ands.w	r2, r3, #7
 800971e:	4601      	mov	r1, r0
 8009720:	d00b      	beq.n	800973a <__lo0bits+0x22>
 8009722:	07da      	lsls	r2, r3, #31
 8009724:	d424      	bmi.n	8009770 <__lo0bits+0x58>
 8009726:	0798      	lsls	r0, r3, #30
 8009728:	bf49      	itett	mi
 800972a:	085b      	lsrmi	r3, r3, #1
 800972c:	089b      	lsrpl	r3, r3, #2
 800972e:	2001      	movmi	r0, #1
 8009730:	600b      	strmi	r3, [r1, #0]
 8009732:	bf5c      	itt	pl
 8009734:	600b      	strpl	r3, [r1, #0]
 8009736:	2002      	movpl	r0, #2
 8009738:	4770      	bx	lr
 800973a:	b298      	uxth	r0, r3
 800973c:	b9b0      	cbnz	r0, 800976c <__lo0bits+0x54>
 800973e:	0c1b      	lsrs	r3, r3, #16
 8009740:	2010      	movs	r0, #16
 8009742:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009746:	bf04      	itt	eq
 8009748:	0a1b      	lsreq	r3, r3, #8
 800974a:	3008      	addeq	r0, #8
 800974c:	071a      	lsls	r2, r3, #28
 800974e:	bf04      	itt	eq
 8009750:	091b      	lsreq	r3, r3, #4
 8009752:	3004      	addeq	r0, #4
 8009754:	079a      	lsls	r2, r3, #30
 8009756:	bf04      	itt	eq
 8009758:	089b      	lsreq	r3, r3, #2
 800975a:	3002      	addeq	r0, #2
 800975c:	07da      	lsls	r2, r3, #31
 800975e:	d403      	bmi.n	8009768 <__lo0bits+0x50>
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	f100 0001 	add.w	r0, r0, #1
 8009766:	d005      	beq.n	8009774 <__lo0bits+0x5c>
 8009768:	600b      	str	r3, [r1, #0]
 800976a:	4770      	bx	lr
 800976c:	4610      	mov	r0, r2
 800976e:	e7e8      	b.n	8009742 <__lo0bits+0x2a>
 8009770:	2000      	movs	r0, #0
 8009772:	4770      	bx	lr
 8009774:	2020      	movs	r0, #32
 8009776:	4770      	bx	lr

08009778 <__i2b>:
 8009778:	b510      	push	{r4, lr}
 800977a:	460c      	mov	r4, r1
 800977c:	2101      	movs	r1, #1
 800977e:	f7ff feff 	bl	8009580 <_Balloc>
 8009782:	4602      	mov	r2, r0
 8009784:	b928      	cbnz	r0, 8009792 <__i2b+0x1a>
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <__i2b+0x24>)
 8009788:	4805      	ldr	r0, [pc, #20]	; (80097a0 <__i2b+0x28>)
 800978a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800978e:	f000 fdaf 	bl	800a2f0 <__assert_func>
 8009792:	2301      	movs	r3, #1
 8009794:	6144      	str	r4, [r0, #20]
 8009796:	6103      	str	r3, [r0, #16]
 8009798:	bd10      	pop	{r4, pc}
 800979a:	bf00      	nop
 800979c:	0800ac57 	.word	0x0800ac57
 80097a0:	0800acc8 	.word	0x0800acc8

080097a4 <__multiply>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	4614      	mov	r4, r2
 80097aa:	690a      	ldr	r2, [r1, #16]
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	bfb8      	it	lt
 80097b2:	460b      	movlt	r3, r1
 80097b4:	460d      	mov	r5, r1
 80097b6:	bfbc      	itt	lt
 80097b8:	4625      	movlt	r5, r4
 80097ba:	461c      	movlt	r4, r3
 80097bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80097c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097c4:	68ab      	ldr	r3, [r5, #8]
 80097c6:	6869      	ldr	r1, [r5, #4]
 80097c8:	eb0a 0709 	add.w	r7, sl, r9
 80097cc:	42bb      	cmp	r3, r7
 80097ce:	b085      	sub	sp, #20
 80097d0:	bfb8      	it	lt
 80097d2:	3101      	addlt	r1, #1
 80097d4:	f7ff fed4 	bl	8009580 <_Balloc>
 80097d8:	b930      	cbnz	r0, 80097e8 <__multiply+0x44>
 80097da:	4602      	mov	r2, r0
 80097dc:	4b42      	ldr	r3, [pc, #264]	; (80098e8 <__multiply+0x144>)
 80097de:	4843      	ldr	r0, [pc, #268]	; (80098ec <__multiply+0x148>)
 80097e0:	f240 115d 	movw	r1, #349	; 0x15d
 80097e4:	f000 fd84 	bl	800a2f0 <__assert_func>
 80097e8:	f100 0614 	add.w	r6, r0, #20
 80097ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80097f0:	4633      	mov	r3, r6
 80097f2:	2200      	movs	r2, #0
 80097f4:	4543      	cmp	r3, r8
 80097f6:	d31e      	bcc.n	8009836 <__multiply+0x92>
 80097f8:	f105 0c14 	add.w	ip, r5, #20
 80097fc:	f104 0314 	add.w	r3, r4, #20
 8009800:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009804:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009808:	9202      	str	r2, [sp, #8]
 800980a:	ebac 0205 	sub.w	r2, ip, r5
 800980e:	3a15      	subs	r2, #21
 8009810:	f022 0203 	bic.w	r2, r2, #3
 8009814:	3204      	adds	r2, #4
 8009816:	f105 0115 	add.w	r1, r5, #21
 800981a:	458c      	cmp	ip, r1
 800981c:	bf38      	it	cc
 800981e:	2204      	movcc	r2, #4
 8009820:	9201      	str	r2, [sp, #4]
 8009822:	9a02      	ldr	r2, [sp, #8]
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	429a      	cmp	r2, r3
 8009828:	d808      	bhi.n	800983c <__multiply+0x98>
 800982a:	2f00      	cmp	r7, #0
 800982c:	dc55      	bgt.n	80098da <__multiply+0x136>
 800982e:	6107      	str	r7, [r0, #16]
 8009830:	b005      	add	sp, #20
 8009832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009836:	f843 2b04 	str.w	r2, [r3], #4
 800983a:	e7db      	b.n	80097f4 <__multiply+0x50>
 800983c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009840:	f1ba 0f00 	cmp.w	sl, #0
 8009844:	d020      	beq.n	8009888 <__multiply+0xe4>
 8009846:	f105 0e14 	add.w	lr, r5, #20
 800984a:	46b1      	mov	r9, r6
 800984c:	2200      	movs	r2, #0
 800984e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009852:	f8d9 b000 	ldr.w	fp, [r9]
 8009856:	b2a1      	uxth	r1, r4
 8009858:	fa1f fb8b 	uxth.w	fp, fp
 800985c:	fb0a b101 	mla	r1, sl, r1, fp
 8009860:	4411      	add	r1, r2
 8009862:	f8d9 2000 	ldr.w	r2, [r9]
 8009866:	0c24      	lsrs	r4, r4, #16
 8009868:	0c12      	lsrs	r2, r2, #16
 800986a:	fb0a 2404 	mla	r4, sl, r4, r2
 800986e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009872:	b289      	uxth	r1, r1
 8009874:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009878:	45f4      	cmp	ip, lr
 800987a:	f849 1b04 	str.w	r1, [r9], #4
 800987e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009882:	d8e4      	bhi.n	800984e <__multiply+0xaa>
 8009884:	9901      	ldr	r1, [sp, #4]
 8009886:	5072      	str	r2, [r6, r1]
 8009888:	9a03      	ldr	r2, [sp, #12]
 800988a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800988e:	3304      	adds	r3, #4
 8009890:	f1b9 0f00 	cmp.w	r9, #0
 8009894:	d01f      	beq.n	80098d6 <__multiply+0x132>
 8009896:	6834      	ldr	r4, [r6, #0]
 8009898:	f105 0114 	add.w	r1, r5, #20
 800989c:	46b6      	mov	lr, r6
 800989e:	f04f 0a00 	mov.w	sl, #0
 80098a2:	880a      	ldrh	r2, [r1, #0]
 80098a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80098a8:	fb09 b202 	mla	r2, r9, r2, fp
 80098ac:	4492      	add	sl, r2
 80098ae:	b2a4      	uxth	r4, r4
 80098b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80098b4:	f84e 4b04 	str.w	r4, [lr], #4
 80098b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80098bc:	f8be 2000 	ldrh.w	r2, [lr]
 80098c0:	0c24      	lsrs	r4, r4, #16
 80098c2:	fb09 2404 	mla	r4, r9, r4, r2
 80098c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80098ca:	458c      	cmp	ip, r1
 80098cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098d0:	d8e7      	bhi.n	80098a2 <__multiply+0xfe>
 80098d2:	9a01      	ldr	r2, [sp, #4]
 80098d4:	50b4      	str	r4, [r6, r2]
 80098d6:	3604      	adds	r6, #4
 80098d8:	e7a3      	b.n	8009822 <__multiply+0x7e>
 80098da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1a5      	bne.n	800982e <__multiply+0x8a>
 80098e2:	3f01      	subs	r7, #1
 80098e4:	e7a1      	b.n	800982a <__multiply+0x86>
 80098e6:	bf00      	nop
 80098e8:	0800ac57 	.word	0x0800ac57
 80098ec:	0800acc8 	.word	0x0800acc8

080098f0 <__pow5mult>:
 80098f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f4:	4615      	mov	r5, r2
 80098f6:	f012 0203 	ands.w	r2, r2, #3
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	d007      	beq.n	8009910 <__pow5mult+0x20>
 8009900:	4c25      	ldr	r4, [pc, #148]	; (8009998 <__pow5mult+0xa8>)
 8009902:	3a01      	subs	r2, #1
 8009904:	2300      	movs	r3, #0
 8009906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800990a:	f7ff fe9b 	bl	8009644 <__multadd>
 800990e:	4607      	mov	r7, r0
 8009910:	10ad      	asrs	r5, r5, #2
 8009912:	d03d      	beq.n	8009990 <__pow5mult+0xa0>
 8009914:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009916:	b97c      	cbnz	r4, 8009938 <__pow5mult+0x48>
 8009918:	2010      	movs	r0, #16
 800991a:	f7ff fe1b 	bl	8009554 <malloc>
 800991e:	4602      	mov	r2, r0
 8009920:	6270      	str	r0, [r6, #36]	; 0x24
 8009922:	b928      	cbnz	r0, 8009930 <__pow5mult+0x40>
 8009924:	4b1d      	ldr	r3, [pc, #116]	; (800999c <__pow5mult+0xac>)
 8009926:	481e      	ldr	r0, [pc, #120]	; (80099a0 <__pow5mult+0xb0>)
 8009928:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800992c:	f000 fce0 	bl	800a2f0 <__assert_func>
 8009930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009934:	6004      	str	r4, [r0, #0]
 8009936:	60c4      	str	r4, [r0, #12]
 8009938:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800993c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009940:	b94c      	cbnz	r4, 8009956 <__pow5mult+0x66>
 8009942:	f240 2171 	movw	r1, #625	; 0x271
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff ff16 	bl	8009778 <__i2b>
 800994c:	2300      	movs	r3, #0
 800994e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009952:	4604      	mov	r4, r0
 8009954:	6003      	str	r3, [r0, #0]
 8009956:	f04f 0900 	mov.w	r9, #0
 800995a:	07eb      	lsls	r3, r5, #31
 800995c:	d50a      	bpl.n	8009974 <__pow5mult+0x84>
 800995e:	4639      	mov	r1, r7
 8009960:	4622      	mov	r2, r4
 8009962:	4630      	mov	r0, r6
 8009964:	f7ff ff1e 	bl	80097a4 <__multiply>
 8009968:	4639      	mov	r1, r7
 800996a:	4680      	mov	r8, r0
 800996c:	4630      	mov	r0, r6
 800996e:	f7ff fe47 	bl	8009600 <_Bfree>
 8009972:	4647      	mov	r7, r8
 8009974:	106d      	asrs	r5, r5, #1
 8009976:	d00b      	beq.n	8009990 <__pow5mult+0xa0>
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	b938      	cbnz	r0, 800998c <__pow5mult+0x9c>
 800997c:	4622      	mov	r2, r4
 800997e:	4621      	mov	r1, r4
 8009980:	4630      	mov	r0, r6
 8009982:	f7ff ff0f 	bl	80097a4 <__multiply>
 8009986:	6020      	str	r0, [r4, #0]
 8009988:	f8c0 9000 	str.w	r9, [r0]
 800998c:	4604      	mov	r4, r0
 800998e:	e7e4      	b.n	800995a <__pow5mult+0x6a>
 8009990:	4638      	mov	r0, r7
 8009992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009996:	bf00      	nop
 8009998:	0800ae18 	.word	0x0800ae18
 800999c:	0800abe1 	.word	0x0800abe1
 80099a0:	0800acc8 	.word	0x0800acc8

080099a4 <__lshift>:
 80099a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	460c      	mov	r4, r1
 80099aa:	6849      	ldr	r1, [r1, #4]
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	4607      	mov	r7, r0
 80099b6:	4691      	mov	r9, r2
 80099b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099bc:	f108 0601 	add.w	r6, r8, #1
 80099c0:	42b3      	cmp	r3, r6
 80099c2:	db0b      	blt.n	80099dc <__lshift+0x38>
 80099c4:	4638      	mov	r0, r7
 80099c6:	f7ff fddb 	bl	8009580 <_Balloc>
 80099ca:	4605      	mov	r5, r0
 80099cc:	b948      	cbnz	r0, 80099e2 <__lshift+0x3e>
 80099ce:	4602      	mov	r2, r0
 80099d0:	4b28      	ldr	r3, [pc, #160]	; (8009a74 <__lshift+0xd0>)
 80099d2:	4829      	ldr	r0, [pc, #164]	; (8009a78 <__lshift+0xd4>)
 80099d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099d8:	f000 fc8a 	bl	800a2f0 <__assert_func>
 80099dc:	3101      	adds	r1, #1
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	e7ee      	b.n	80099c0 <__lshift+0x1c>
 80099e2:	2300      	movs	r3, #0
 80099e4:	f100 0114 	add.w	r1, r0, #20
 80099e8:	f100 0210 	add.w	r2, r0, #16
 80099ec:	4618      	mov	r0, r3
 80099ee:	4553      	cmp	r3, sl
 80099f0:	db33      	blt.n	8009a5a <__lshift+0xb6>
 80099f2:	6920      	ldr	r0, [r4, #16]
 80099f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099f8:	f104 0314 	add.w	r3, r4, #20
 80099fc:	f019 091f 	ands.w	r9, r9, #31
 8009a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a08:	d02b      	beq.n	8009a62 <__lshift+0xbe>
 8009a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a0e:	468a      	mov	sl, r1
 8009a10:	2200      	movs	r2, #0
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	fa00 f009 	lsl.w	r0, r0, r9
 8009a18:	4302      	orrs	r2, r0
 8009a1a:	f84a 2b04 	str.w	r2, [sl], #4
 8009a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a22:	459c      	cmp	ip, r3
 8009a24:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a28:	d8f3      	bhi.n	8009a12 <__lshift+0x6e>
 8009a2a:	ebac 0304 	sub.w	r3, ip, r4
 8009a2e:	3b15      	subs	r3, #21
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	3304      	adds	r3, #4
 8009a36:	f104 0015 	add.w	r0, r4, #21
 8009a3a:	4584      	cmp	ip, r0
 8009a3c:	bf38      	it	cc
 8009a3e:	2304      	movcc	r3, #4
 8009a40:	50ca      	str	r2, [r1, r3]
 8009a42:	b10a      	cbz	r2, 8009a48 <__lshift+0xa4>
 8009a44:	f108 0602 	add.w	r6, r8, #2
 8009a48:	3e01      	subs	r6, #1
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	612e      	str	r6, [r5, #16]
 8009a4e:	4621      	mov	r1, r4
 8009a50:	f7ff fdd6 	bl	8009600 <_Bfree>
 8009a54:	4628      	mov	r0, r5
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a5e:	3301      	adds	r3, #1
 8009a60:	e7c5      	b.n	80099ee <__lshift+0x4a>
 8009a62:	3904      	subs	r1, #4
 8009a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a68:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a6c:	459c      	cmp	ip, r3
 8009a6e:	d8f9      	bhi.n	8009a64 <__lshift+0xc0>
 8009a70:	e7ea      	b.n	8009a48 <__lshift+0xa4>
 8009a72:	bf00      	nop
 8009a74:	0800ac57 	.word	0x0800ac57
 8009a78:	0800acc8 	.word	0x0800acc8

08009a7c <__mcmp>:
 8009a7c:	b530      	push	{r4, r5, lr}
 8009a7e:	6902      	ldr	r2, [r0, #16]
 8009a80:	690c      	ldr	r4, [r1, #16]
 8009a82:	1b12      	subs	r2, r2, r4
 8009a84:	d10e      	bne.n	8009aa4 <__mcmp+0x28>
 8009a86:	f100 0314 	add.w	r3, r0, #20
 8009a8a:	3114      	adds	r1, #20
 8009a8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a9c:	42a5      	cmp	r5, r4
 8009a9e:	d003      	beq.n	8009aa8 <__mcmp+0x2c>
 8009aa0:	d305      	bcc.n	8009aae <__mcmp+0x32>
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	bd30      	pop	{r4, r5, pc}
 8009aa8:	4283      	cmp	r3, r0
 8009aaa:	d3f3      	bcc.n	8009a94 <__mcmp+0x18>
 8009aac:	e7fa      	b.n	8009aa4 <__mcmp+0x28>
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	e7f7      	b.n	8009aa4 <__mcmp+0x28>

08009ab4 <__mdiff>:
 8009ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	460c      	mov	r4, r1
 8009aba:	4606      	mov	r6, r0
 8009abc:	4611      	mov	r1, r2
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4617      	mov	r7, r2
 8009ac2:	f7ff ffdb 	bl	8009a7c <__mcmp>
 8009ac6:	1e05      	subs	r5, r0, #0
 8009ac8:	d110      	bne.n	8009aec <__mdiff+0x38>
 8009aca:	4629      	mov	r1, r5
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7ff fd57 	bl	8009580 <_Balloc>
 8009ad2:	b930      	cbnz	r0, 8009ae2 <__mdiff+0x2e>
 8009ad4:	4b39      	ldr	r3, [pc, #228]	; (8009bbc <__mdiff+0x108>)
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	f240 2132 	movw	r1, #562	; 0x232
 8009adc:	4838      	ldr	r0, [pc, #224]	; (8009bc0 <__mdiff+0x10c>)
 8009ade:	f000 fc07 	bl	800a2f0 <__assert_func>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aec:	bfa4      	itt	ge
 8009aee:	463b      	movge	r3, r7
 8009af0:	4627      	movge	r7, r4
 8009af2:	4630      	mov	r0, r6
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	bfa6      	itte	ge
 8009af8:	461c      	movge	r4, r3
 8009afa:	2500      	movge	r5, #0
 8009afc:	2501      	movlt	r5, #1
 8009afe:	f7ff fd3f 	bl	8009580 <_Balloc>
 8009b02:	b920      	cbnz	r0, 8009b0e <__mdiff+0x5a>
 8009b04:	4b2d      	ldr	r3, [pc, #180]	; (8009bbc <__mdiff+0x108>)
 8009b06:	4602      	mov	r2, r0
 8009b08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b0c:	e7e6      	b.n	8009adc <__mdiff+0x28>
 8009b0e:	693e      	ldr	r6, [r7, #16]
 8009b10:	60c5      	str	r5, [r0, #12]
 8009b12:	6925      	ldr	r5, [r4, #16]
 8009b14:	f107 0114 	add.w	r1, r7, #20
 8009b18:	f104 0914 	add.w	r9, r4, #20
 8009b1c:	f100 0e14 	add.w	lr, r0, #20
 8009b20:	f107 0210 	add.w	r2, r7, #16
 8009b24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009b28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009b2c:	46f2      	mov	sl, lr
 8009b2e:	2700      	movs	r7, #0
 8009b30:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b38:	fa1f f883 	uxth.w	r8, r3
 8009b3c:	fa17 f78b 	uxtah	r7, r7, fp
 8009b40:	0c1b      	lsrs	r3, r3, #16
 8009b42:	eba7 0808 	sub.w	r8, r7, r8
 8009b46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b4e:	fa1f f888 	uxth.w	r8, r8
 8009b52:	141f      	asrs	r7, r3, #16
 8009b54:	454d      	cmp	r5, r9
 8009b56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b5a:	f84a 3b04 	str.w	r3, [sl], #4
 8009b5e:	d8e7      	bhi.n	8009b30 <__mdiff+0x7c>
 8009b60:	1b2b      	subs	r3, r5, r4
 8009b62:	3b15      	subs	r3, #21
 8009b64:	f023 0303 	bic.w	r3, r3, #3
 8009b68:	3304      	adds	r3, #4
 8009b6a:	3415      	adds	r4, #21
 8009b6c:	42a5      	cmp	r5, r4
 8009b6e:	bf38      	it	cc
 8009b70:	2304      	movcc	r3, #4
 8009b72:	4419      	add	r1, r3
 8009b74:	4473      	add	r3, lr
 8009b76:	469e      	mov	lr, r3
 8009b78:	460d      	mov	r5, r1
 8009b7a:	4565      	cmp	r5, ip
 8009b7c:	d30e      	bcc.n	8009b9c <__mdiff+0xe8>
 8009b7e:	f10c 0203 	add.w	r2, ip, #3
 8009b82:	1a52      	subs	r2, r2, r1
 8009b84:	f022 0203 	bic.w	r2, r2, #3
 8009b88:	3903      	subs	r1, #3
 8009b8a:	458c      	cmp	ip, r1
 8009b8c:	bf38      	it	cc
 8009b8e:	2200      	movcc	r2, #0
 8009b90:	441a      	add	r2, r3
 8009b92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b96:	b17b      	cbz	r3, 8009bb8 <__mdiff+0x104>
 8009b98:	6106      	str	r6, [r0, #16]
 8009b9a:	e7a5      	b.n	8009ae8 <__mdiff+0x34>
 8009b9c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ba0:	fa17 f488 	uxtah	r4, r7, r8
 8009ba4:	1422      	asrs	r2, r4, #16
 8009ba6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009baa:	b2a4      	uxth	r4, r4
 8009bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009bb0:	f84e 4b04 	str.w	r4, [lr], #4
 8009bb4:	1417      	asrs	r7, r2, #16
 8009bb6:	e7e0      	b.n	8009b7a <__mdiff+0xc6>
 8009bb8:	3e01      	subs	r6, #1
 8009bba:	e7ea      	b.n	8009b92 <__mdiff+0xde>
 8009bbc:	0800ac57 	.word	0x0800ac57
 8009bc0:	0800acc8 	.word	0x0800acc8

08009bc4 <__d2b>:
 8009bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	4689      	mov	r9, r1
 8009bca:	2101      	movs	r1, #1
 8009bcc:	ec57 6b10 	vmov	r6, r7, d0
 8009bd0:	4690      	mov	r8, r2
 8009bd2:	f7ff fcd5 	bl	8009580 <_Balloc>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	b930      	cbnz	r0, 8009be8 <__d2b+0x24>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <__d2b+0xb0>)
 8009bde:	4826      	ldr	r0, [pc, #152]	; (8009c78 <__d2b+0xb4>)
 8009be0:	f240 310a 	movw	r1, #778	; 0x30a
 8009be4:	f000 fb84 	bl	800a2f0 <__assert_func>
 8009be8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bf0:	bb35      	cbnz	r5, 8009c40 <__d2b+0x7c>
 8009bf2:	2e00      	cmp	r6, #0
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	d028      	beq.n	8009c4a <__d2b+0x86>
 8009bf8:	4668      	mov	r0, sp
 8009bfa:	9600      	str	r6, [sp, #0]
 8009bfc:	f7ff fd8c 	bl	8009718 <__lo0bits>
 8009c00:	9900      	ldr	r1, [sp, #0]
 8009c02:	b300      	cbz	r0, 8009c46 <__d2b+0x82>
 8009c04:	9a01      	ldr	r2, [sp, #4]
 8009c06:	f1c0 0320 	rsb	r3, r0, #32
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	40c2      	lsrs	r2, r0
 8009c12:	6163      	str	r3, [r4, #20]
 8009c14:	9201      	str	r2, [sp, #4]
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	61a3      	str	r3, [r4, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	bf14      	ite	ne
 8009c1e:	2202      	movne	r2, #2
 8009c20:	2201      	moveq	r2, #1
 8009c22:	6122      	str	r2, [r4, #16]
 8009c24:	b1d5      	cbz	r5, 8009c5c <__d2b+0x98>
 8009c26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c2a:	4405      	add	r5, r0
 8009c2c:	f8c9 5000 	str.w	r5, [r9]
 8009c30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c34:	f8c8 0000 	str.w	r0, [r8]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	b003      	add	sp, #12
 8009c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c44:	e7d5      	b.n	8009bf2 <__d2b+0x2e>
 8009c46:	6161      	str	r1, [r4, #20]
 8009c48:	e7e5      	b.n	8009c16 <__d2b+0x52>
 8009c4a:	a801      	add	r0, sp, #4
 8009c4c:	f7ff fd64 	bl	8009718 <__lo0bits>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	6163      	str	r3, [r4, #20]
 8009c54:	2201      	movs	r2, #1
 8009c56:	6122      	str	r2, [r4, #16]
 8009c58:	3020      	adds	r0, #32
 8009c5a:	e7e3      	b.n	8009c24 <__d2b+0x60>
 8009c5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c64:	f8c9 0000 	str.w	r0, [r9]
 8009c68:	6918      	ldr	r0, [r3, #16]
 8009c6a:	f7ff fd35 	bl	80096d8 <__hi0bits>
 8009c6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c72:	e7df      	b.n	8009c34 <__d2b+0x70>
 8009c74:	0800ac57 	.word	0x0800ac57
 8009c78:	0800acc8 	.word	0x0800acc8

08009c7c <_calloc_r>:
 8009c7c:	b513      	push	{r0, r1, r4, lr}
 8009c7e:	434a      	muls	r2, r1
 8009c80:	4611      	mov	r1, r2
 8009c82:	9201      	str	r2, [sp, #4]
 8009c84:	f000 f85a 	bl	8009d3c <_malloc_r>
 8009c88:	4604      	mov	r4, r0
 8009c8a:	b118      	cbz	r0, 8009c94 <_calloc_r+0x18>
 8009c8c:	9a01      	ldr	r2, [sp, #4]
 8009c8e:	2100      	movs	r1, #0
 8009c90:	f7fe f860 	bl	8007d54 <memset>
 8009c94:	4620      	mov	r0, r4
 8009c96:	b002      	add	sp, #8
 8009c98:	bd10      	pop	{r4, pc}
	...

08009c9c <_free_r>:
 8009c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	d048      	beq.n	8009d34 <_free_r+0x98>
 8009ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ca6:	9001      	str	r0, [sp, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f1a1 0404 	sub.w	r4, r1, #4
 8009cae:	bfb8      	it	lt
 8009cb0:	18e4      	addlt	r4, r4, r3
 8009cb2:	f000 fca7 	bl	800a604 <__malloc_lock>
 8009cb6:	4a20      	ldr	r2, [pc, #128]	; (8009d38 <_free_r+0x9c>)
 8009cb8:	9801      	ldr	r0, [sp, #4]
 8009cba:	6813      	ldr	r3, [r2, #0]
 8009cbc:	4615      	mov	r5, r2
 8009cbe:	b933      	cbnz	r3, 8009cce <_free_r+0x32>
 8009cc0:	6063      	str	r3, [r4, #4]
 8009cc2:	6014      	str	r4, [r2, #0]
 8009cc4:	b003      	add	sp, #12
 8009cc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cca:	f000 bca1 	b.w	800a610 <__malloc_unlock>
 8009cce:	42a3      	cmp	r3, r4
 8009cd0:	d90b      	bls.n	8009cea <_free_r+0x4e>
 8009cd2:	6821      	ldr	r1, [r4, #0]
 8009cd4:	1862      	adds	r2, r4, r1
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	bf04      	itt	eq
 8009cda:	681a      	ldreq	r2, [r3, #0]
 8009cdc:	685b      	ldreq	r3, [r3, #4]
 8009cde:	6063      	str	r3, [r4, #4]
 8009ce0:	bf04      	itt	eq
 8009ce2:	1852      	addeq	r2, r2, r1
 8009ce4:	6022      	streq	r2, [r4, #0]
 8009ce6:	602c      	str	r4, [r5, #0]
 8009ce8:	e7ec      	b.n	8009cc4 <_free_r+0x28>
 8009cea:	461a      	mov	r2, r3
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	b10b      	cbz	r3, 8009cf4 <_free_r+0x58>
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	d9fa      	bls.n	8009cea <_free_r+0x4e>
 8009cf4:	6811      	ldr	r1, [r2, #0]
 8009cf6:	1855      	adds	r5, r2, r1
 8009cf8:	42a5      	cmp	r5, r4
 8009cfa:	d10b      	bne.n	8009d14 <_free_r+0x78>
 8009cfc:	6824      	ldr	r4, [r4, #0]
 8009cfe:	4421      	add	r1, r4
 8009d00:	1854      	adds	r4, r2, r1
 8009d02:	42a3      	cmp	r3, r4
 8009d04:	6011      	str	r1, [r2, #0]
 8009d06:	d1dd      	bne.n	8009cc4 <_free_r+0x28>
 8009d08:	681c      	ldr	r4, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	6053      	str	r3, [r2, #4]
 8009d0e:	4421      	add	r1, r4
 8009d10:	6011      	str	r1, [r2, #0]
 8009d12:	e7d7      	b.n	8009cc4 <_free_r+0x28>
 8009d14:	d902      	bls.n	8009d1c <_free_r+0x80>
 8009d16:	230c      	movs	r3, #12
 8009d18:	6003      	str	r3, [r0, #0]
 8009d1a:	e7d3      	b.n	8009cc4 <_free_r+0x28>
 8009d1c:	6825      	ldr	r5, [r4, #0]
 8009d1e:	1961      	adds	r1, r4, r5
 8009d20:	428b      	cmp	r3, r1
 8009d22:	bf04      	itt	eq
 8009d24:	6819      	ldreq	r1, [r3, #0]
 8009d26:	685b      	ldreq	r3, [r3, #4]
 8009d28:	6063      	str	r3, [r4, #4]
 8009d2a:	bf04      	itt	eq
 8009d2c:	1949      	addeq	r1, r1, r5
 8009d2e:	6021      	streq	r1, [r4, #0]
 8009d30:	6054      	str	r4, [r2, #4]
 8009d32:	e7c7      	b.n	8009cc4 <_free_r+0x28>
 8009d34:	b003      	add	sp, #12
 8009d36:	bd30      	pop	{r4, r5, pc}
 8009d38:	20000438 	.word	0x20000438

08009d3c <_malloc_r>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	1ccd      	adds	r5, r1, #3
 8009d40:	f025 0503 	bic.w	r5, r5, #3
 8009d44:	3508      	adds	r5, #8
 8009d46:	2d0c      	cmp	r5, #12
 8009d48:	bf38      	it	cc
 8009d4a:	250c      	movcc	r5, #12
 8009d4c:	2d00      	cmp	r5, #0
 8009d4e:	4606      	mov	r6, r0
 8009d50:	db01      	blt.n	8009d56 <_malloc_r+0x1a>
 8009d52:	42a9      	cmp	r1, r5
 8009d54:	d903      	bls.n	8009d5e <_malloc_r+0x22>
 8009d56:	230c      	movs	r3, #12
 8009d58:	6033      	str	r3, [r6, #0]
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d5e:	f000 fc51 	bl	800a604 <__malloc_lock>
 8009d62:	4921      	ldr	r1, [pc, #132]	; (8009de8 <_malloc_r+0xac>)
 8009d64:	680a      	ldr	r2, [r1, #0]
 8009d66:	4614      	mov	r4, r2
 8009d68:	b99c      	cbnz	r4, 8009d92 <_malloc_r+0x56>
 8009d6a:	4f20      	ldr	r7, [pc, #128]	; (8009dec <_malloc_r+0xb0>)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	b923      	cbnz	r3, 8009d7a <_malloc_r+0x3e>
 8009d70:	4621      	mov	r1, r4
 8009d72:	4630      	mov	r0, r6
 8009d74:	f000 f996 	bl	800a0a4 <_sbrk_r>
 8009d78:	6038      	str	r0, [r7, #0]
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f000 f991 	bl	800a0a4 <_sbrk_r>
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	d123      	bne.n	8009dce <_malloc_r+0x92>
 8009d86:	230c      	movs	r3, #12
 8009d88:	6033      	str	r3, [r6, #0]
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f000 fc40 	bl	800a610 <__malloc_unlock>
 8009d90:	e7e3      	b.n	8009d5a <_malloc_r+0x1e>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	1b5b      	subs	r3, r3, r5
 8009d96:	d417      	bmi.n	8009dc8 <_malloc_r+0x8c>
 8009d98:	2b0b      	cmp	r3, #11
 8009d9a:	d903      	bls.n	8009da4 <_malloc_r+0x68>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	441c      	add	r4, r3
 8009da0:	6025      	str	r5, [r4, #0]
 8009da2:	e004      	b.n	8009dae <_malloc_r+0x72>
 8009da4:	6863      	ldr	r3, [r4, #4]
 8009da6:	42a2      	cmp	r2, r4
 8009da8:	bf0c      	ite	eq
 8009daa:	600b      	streq	r3, [r1, #0]
 8009dac:	6053      	strne	r3, [r2, #4]
 8009dae:	4630      	mov	r0, r6
 8009db0:	f000 fc2e 	bl	800a610 <__malloc_unlock>
 8009db4:	f104 000b 	add.w	r0, r4, #11
 8009db8:	1d23      	adds	r3, r4, #4
 8009dba:	f020 0007 	bic.w	r0, r0, #7
 8009dbe:	1ac2      	subs	r2, r0, r3
 8009dc0:	d0cc      	beq.n	8009d5c <_malloc_r+0x20>
 8009dc2:	1a1b      	subs	r3, r3, r0
 8009dc4:	50a3      	str	r3, [r4, r2]
 8009dc6:	e7c9      	b.n	8009d5c <_malloc_r+0x20>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	6864      	ldr	r4, [r4, #4]
 8009dcc:	e7cc      	b.n	8009d68 <_malloc_r+0x2c>
 8009dce:	1cc4      	adds	r4, r0, #3
 8009dd0:	f024 0403 	bic.w	r4, r4, #3
 8009dd4:	42a0      	cmp	r0, r4
 8009dd6:	d0e3      	beq.n	8009da0 <_malloc_r+0x64>
 8009dd8:	1a21      	subs	r1, r4, r0
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f000 f962 	bl	800a0a4 <_sbrk_r>
 8009de0:	3001      	adds	r0, #1
 8009de2:	d1dd      	bne.n	8009da0 <_malloc_r+0x64>
 8009de4:	e7cf      	b.n	8009d86 <_malloc_r+0x4a>
 8009de6:	bf00      	nop
 8009de8:	20000438 	.word	0x20000438
 8009dec:	2000043c 	.word	0x2000043c

08009df0 <__sfputc_r>:
 8009df0:	6893      	ldr	r3, [r2, #8]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	b410      	push	{r4}
 8009df8:	6093      	str	r3, [r2, #8]
 8009dfa:	da08      	bge.n	8009e0e <__sfputc_r+0x1e>
 8009dfc:	6994      	ldr	r4, [r2, #24]
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	db01      	blt.n	8009e06 <__sfputc_r+0x16>
 8009e02:	290a      	cmp	r1, #10
 8009e04:	d103      	bne.n	8009e0e <__sfputc_r+0x1e>
 8009e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e0a:	f000 b99f 	b.w	800a14c <__swbuf_r>
 8009e0e:	6813      	ldr	r3, [r2, #0]
 8009e10:	1c58      	adds	r0, r3, #1
 8009e12:	6010      	str	r0, [r2, #0]
 8009e14:	7019      	strb	r1, [r3, #0]
 8009e16:	4608      	mov	r0, r1
 8009e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <__sfputs_r>:
 8009e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e20:	4606      	mov	r6, r0
 8009e22:	460f      	mov	r7, r1
 8009e24:	4614      	mov	r4, r2
 8009e26:	18d5      	adds	r5, r2, r3
 8009e28:	42ac      	cmp	r4, r5
 8009e2a:	d101      	bne.n	8009e30 <__sfputs_r+0x12>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e007      	b.n	8009e40 <__sfputs_r+0x22>
 8009e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e34:	463a      	mov	r2, r7
 8009e36:	4630      	mov	r0, r6
 8009e38:	f7ff ffda 	bl	8009df0 <__sfputc_r>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d1f3      	bne.n	8009e28 <__sfputs_r+0xa>
 8009e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e44 <_vfiprintf_r>:
 8009e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	460d      	mov	r5, r1
 8009e4a:	b09d      	sub	sp, #116	; 0x74
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	4698      	mov	r8, r3
 8009e50:	4606      	mov	r6, r0
 8009e52:	b118      	cbz	r0, 8009e5c <_vfiprintf_r+0x18>
 8009e54:	6983      	ldr	r3, [r0, #24]
 8009e56:	b90b      	cbnz	r3, 8009e5c <_vfiprintf_r+0x18>
 8009e58:	f7ff fad6 	bl	8009408 <__sinit>
 8009e5c:	4b89      	ldr	r3, [pc, #548]	; (800a084 <_vfiprintf_r+0x240>)
 8009e5e:	429d      	cmp	r5, r3
 8009e60:	d11b      	bne.n	8009e9a <_vfiprintf_r+0x56>
 8009e62:	6875      	ldr	r5, [r6, #4]
 8009e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e66:	07d9      	lsls	r1, r3, #31
 8009e68:	d405      	bmi.n	8009e76 <_vfiprintf_r+0x32>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	059a      	lsls	r2, r3, #22
 8009e6e:	d402      	bmi.n	8009e76 <_vfiprintf_r+0x32>
 8009e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e72:	f7ff fb6c 	bl	800954e <__retarget_lock_acquire_recursive>
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	071b      	lsls	r3, r3, #28
 8009e7a:	d501      	bpl.n	8009e80 <_vfiprintf_r+0x3c>
 8009e7c:	692b      	ldr	r3, [r5, #16]
 8009e7e:	b9eb      	cbnz	r3, 8009ebc <_vfiprintf_r+0x78>
 8009e80:	4629      	mov	r1, r5
 8009e82:	4630      	mov	r0, r6
 8009e84:	f000 f9c6 	bl	800a214 <__swsetup_r>
 8009e88:	b1c0      	cbz	r0, 8009ebc <_vfiprintf_r+0x78>
 8009e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e8c:	07dc      	lsls	r4, r3, #31
 8009e8e:	d50e      	bpl.n	8009eae <_vfiprintf_r+0x6a>
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	b01d      	add	sp, #116	; 0x74
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	4b7b      	ldr	r3, [pc, #492]	; (800a088 <_vfiprintf_r+0x244>)
 8009e9c:	429d      	cmp	r5, r3
 8009e9e:	d101      	bne.n	8009ea4 <_vfiprintf_r+0x60>
 8009ea0:	68b5      	ldr	r5, [r6, #8]
 8009ea2:	e7df      	b.n	8009e64 <_vfiprintf_r+0x20>
 8009ea4:	4b79      	ldr	r3, [pc, #484]	; (800a08c <_vfiprintf_r+0x248>)
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	bf08      	it	eq
 8009eaa:	68f5      	ldreq	r5, [r6, #12]
 8009eac:	e7da      	b.n	8009e64 <_vfiprintf_r+0x20>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	0598      	lsls	r0, r3, #22
 8009eb2:	d4ed      	bmi.n	8009e90 <_vfiprintf_r+0x4c>
 8009eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb6:	f7ff fb4b 	bl	8009550 <__retarget_lock_release_recursive>
 8009eba:	e7e9      	b.n	8009e90 <_vfiprintf_r+0x4c>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eca:	2330      	movs	r3, #48	; 0x30
 8009ecc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a090 <_vfiprintf_r+0x24c>
 8009ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed4:	f04f 0901 	mov.w	r9, #1
 8009ed8:	4623      	mov	r3, r4
 8009eda:	469a      	mov	sl, r3
 8009edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee0:	b10a      	cbz	r2, 8009ee6 <_vfiprintf_r+0xa2>
 8009ee2:	2a25      	cmp	r2, #37	; 0x25
 8009ee4:	d1f9      	bne.n	8009eda <_vfiprintf_r+0x96>
 8009ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eea:	d00b      	beq.n	8009f04 <_vfiprintf_r+0xc0>
 8009eec:	465b      	mov	r3, fp
 8009eee:	4622      	mov	r2, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7ff ff93 	bl	8009e1e <__sfputs_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	f000 80aa 	beq.w	800a052 <_vfiprintf_r+0x20e>
 8009efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f00:	445a      	add	r2, fp
 8009f02:	9209      	str	r2, [sp, #36]	; 0x24
 8009f04:	f89a 3000 	ldrb.w	r3, [sl]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 80a2 	beq.w	800a052 <_vfiprintf_r+0x20e>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295
 8009f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f18:	f10a 0a01 	add.w	sl, sl, #1
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f24:	931a      	str	r3, [sp, #104]	; 0x68
 8009f26:	4654      	mov	r4, sl
 8009f28:	2205      	movs	r2, #5
 8009f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2e:	4858      	ldr	r0, [pc, #352]	; (800a090 <_vfiprintf_r+0x24c>)
 8009f30:	f7f6 f956 	bl	80001e0 <memchr>
 8009f34:	9a04      	ldr	r2, [sp, #16]
 8009f36:	b9d8      	cbnz	r0, 8009f70 <_vfiprintf_r+0x12c>
 8009f38:	06d1      	lsls	r1, r2, #27
 8009f3a:	bf44      	itt	mi
 8009f3c:	2320      	movmi	r3, #32
 8009f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f42:	0713      	lsls	r3, r2, #28
 8009f44:	bf44      	itt	mi
 8009f46:	232b      	movmi	r3, #43	; 0x2b
 8009f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f50:	2b2a      	cmp	r3, #42	; 0x2a
 8009f52:	d015      	beq.n	8009f80 <_vfiprintf_r+0x13c>
 8009f54:	9a07      	ldr	r2, [sp, #28]
 8009f56:	4654      	mov	r4, sl
 8009f58:	2000      	movs	r0, #0
 8009f5a:	f04f 0c0a 	mov.w	ip, #10
 8009f5e:	4621      	mov	r1, r4
 8009f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f64:	3b30      	subs	r3, #48	; 0x30
 8009f66:	2b09      	cmp	r3, #9
 8009f68:	d94e      	bls.n	800a008 <_vfiprintf_r+0x1c4>
 8009f6a:	b1b0      	cbz	r0, 8009f9a <_vfiprintf_r+0x156>
 8009f6c:	9207      	str	r2, [sp, #28]
 8009f6e:	e014      	b.n	8009f9a <_vfiprintf_r+0x156>
 8009f70:	eba0 0308 	sub.w	r3, r0, r8
 8009f74:	fa09 f303 	lsl.w	r3, r9, r3
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	9304      	str	r3, [sp, #16]
 8009f7c:	46a2      	mov	sl, r4
 8009f7e:	e7d2      	b.n	8009f26 <_vfiprintf_r+0xe2>
 8009f80:	9b03      	ldr	r3, [sp, #12]
 8009f82:	1d19      	adds	r1, r3, #4
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	9103      	str	r1, [sp, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	bfbb      	ittet	lt
 8009f8c:	425b      	neglt	r3, r3
 8009f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f92:	9307      	strge	r3, [sp, #28]
 8009f94:	9307      	strlt	r3, [sp, #28]
 8009f96:	bfb8      	it	lt
 8009f98:	9204      	strlt	r2, [sp, #16]
 8009f9a:	7823      	ldrb	r3, [r4, #0]
 8009f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f9e:	d10c      	bne.n	8009fba <_vfiprintf_r+0x176>
 8009fa0:	7863      	ldrb	r3, [r4, #1]
 8009fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa4:	d135      	bne.n	800a012 <_vfiprintf_r+0x1ce>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	1d1a      	adds	r2, r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	9203      	str	r2, [sp, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfb8      	it	lt
 8009fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fb6:	3402      	adds	r4, #2
 8009fb8:	9305      	str	r3, [sp, #20]
 8009fba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0a0 <_vfiprintf_r+0x25c>
 8009fbe:	7821      	ldrb	r1, [r4, #0]
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	f7f6 f90c 	bl	80001e0 <memchr>
 8009fc8:	b140      	cbz	r0, 8009fdc <_vfiprintf_r+0x198>
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	eba0 000a 	sub.w	r0, r0, sl
 8009fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	4303      	orrs	r3, r0
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe0:	482c      	ldr	r0, [pc, #176]	; (800a094 <_vfiprintf_r+0x250>)
 8009fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fe6:	2206      	movs	r2, #6
 8009fe8:	f7f6 f8fa 	bl	80001e0 <memchr>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d03f      	beq.n	800a070 <_vfiprintf_r+0x22c>
 8009ff0:	4b29      	ldr	r3, [pc, #164]	; (800a098 <_vfiprintf_r+0x254>)
 8009ff2:	bb1b      	cbnz	r3, 800a03c <_vfiprintf_r+0x1f8>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	3307      	adds	r3, #7
 8009ff8:	f023 0307 	bic.w	r3, r3, #7
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	9303      	str	r3, [sp, #12]
 800a000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a002:	443b      	add	r3, r7
 800a004:	9309      	str	r3, [sp, #36]	; 0x24
 800a006:	e767      	b.n	8009ed8 <_vfiprintf_r+0x94>
 800a008:	fb0c 3202 	mla	r2, ip, r2, r3
 800a00c:	460c      	mov	r4, r1
 800a00e:	2001      	movs	r0, #1
 800a010:	e7a5      	b.n	8009f5e <_vfiprintf_r+0x11a>
 800a012:	2300      	movs	r3, #0
 800a014:	3401      	adds	r4, #1
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	4619      	mov	r1, r3
 800a01a:	f04f 0c0a 	mov.w	ip, #10
 800a01e:	4620      	mov	r0, r4
 800a020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a024:	3a30      	subs	r2, #48	; 0x30
 800a026:	2a09      	cmp	r2, #9
 800a028:	d903      	bls.n	800a032 <_vfiprintf_r+0x1ee>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0c5      	beq.n	8009fba <_vfiprintf_r+0x176>
 800a02e:	9105      	str	r1, [sp, #20]
 800a030:	e7c3      	b.n	8009fba <_vfiprintf_r+0x176>
 800a032:	fb0c 2101 	mla	r1, ip, r1, r2
 800a036:	4604      	mov	r4, r0
 800a038:	2301      	movs	r3, #1
 800a03a:	e7f0      	b.n	800a01e <_vfiprintf_r+0x1da>
 800a03c:	ab03      	add	r3, sp, #12
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	462a      	mov	r2, r5
 800a042:	4b16      	ldr	r3, [pc, #88]	; (800a09c <_vfiprintf_r+0x258>)
 800a044:	a904      	add	r1, sp, #16
 800a046:	4630      	mov	r0, r6
 800a048:	f7fd ff2c 	bl	8007ea4 <_printf_float>
 800a04c:	4607      	mov	r7, r0
 800a04e:	1c78      	adds	r0, r7, #1
 800a050:	d1d6      	bne.n	800a000 <_vfiprintf_r+0x1bc>
 800a052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a054:	07d9      	lsls	r1, r3, #31
 800a056:	d405      	bmi.n	800a064 <_vfiprintf_r+0x220>
 800a058:	89ab      	ldrh	r3, [r5, #12]
 800a05a:	059a      	lsls	r2, r3, #22
 800a05c:	d402      	bmi.n	800a064 <_vfiprintf_r+0x220>
 800a05e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a060:	f7ff fa76 	bl	8009550 <__retarget_lock_release_recursive>
 800a064:	89ab      	ldrh	r3, [r5, #12]
 800a066:	065b      	lsls	r3, r3, #25
 800a068:	f53f af12 	bmi.w	8009e90 <_vfiprintf_r+0x4c>
 800a06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06e:	e711      	b.n	8009e94 <_vfiprintf_r+0x50>
 800a070:	ab03      	add	r3, sp, #12
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	462a      	mov	r2, r5
 800a076:	4b09      	ldr	r3, [pc, #36]	; (800a09c <_vfiprintf_r+0x258>)
 800a078:	a904      	add	r1, sp, #16
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7fe f9b6 	bl	80083ec <_printf_i>
 800a080:	e7e4      	b.n	800a04c <_vfiprintf_r+0x208>
 800a082:	bf00      	nop
 800a084:	0800ac88 	.word	0x0800ac88
 800a088:	0800aca8 	.word	0x0800aca8
 800a08c:	0800ac68 	.word	0x0800ac68
 800a090:	0800ae24 	.word	0x0800ae24
 800a094:	0800ae2e 	.word	0x0800ae2e
 800a098:	08007ea5 	.word	0x08007ea5
 800a09c:	08009e1f 	.word	0x08009e1f
 800a0a0:	0800ae2a 	.word	0x0800ae2a

0800a0a4 <_sbrk_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d06      	ldr	r5, [pc, #24]	; (800a0c0 <_sbrk_r+0x1c>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	f7f9 fa16 	bl	80034e0 <_sbrk>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_sbrk_r+0x1a>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_sbrk_r+0x1a>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20000600 	.word	0x20000600

0800a0c4 <__sread>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0cc:	f000 faa6 	bl	800a61c <_read_r>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	bfab      	itete	ge
 800a0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0d8:	181b      	addge	r3, r3, r0
 800a0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0de:	bfac      	ite	ge
 800a0e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0e2:	81a3      	strhlt	r3, [r4, #12]
 800a0e4:	bd10      	pop	{r4, pc}

0800a0e6 <__swrite>:
 800a0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	461f      	mov	r7, r3
 800a0ec:	898b      	ldrh	r3, [r1, #12]
 800a0ee:	05db      	lsls	r3, r3, #23
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	d505      	bpl.n	800a104 <__swrite+0x1e>
 800a0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	2200      	movs	r2, #0
 800a100:	f000 f9f8 	bl	800a4f4 <_lseek_r>
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	4632      	mov	r2, r6
 800a112:	463b      	mov	r3, r7
 800a114:	4628      	mov	r0, r5
 800a116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	f000 b869 	b.w	800a1f0 <_write_r>

0800a11e <__sseek>:
 800a11e:	b510      	push	{r4, lr}
 800a120:	460c      	mov	r4, r1
 800a122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a126:	f000 f9e5 	bl	800a4f4 <_lseek_r>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	bf15      	itete	ne
 800a130:	6560      	strne	r0, [r4, #84]	; 0x54
 800a132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a13a:	81a3      	strheq	r3, [r4, #12]
 800a13c:	bf18      	it	ne
 800a13e:	81a3      	strhne	r3, [r4, #12]
 800a140:	bd10      	pop	{r4, pc}

0800a142 <__sclose>:
 800a142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a146:	f000 b8f1 	b.w	800a32c <_close_r>
	...

0800a14c <__swbuf_r>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	460e      	mov	r6, r1
 800a150:	4614      	mov	r4, r2
 800a152:	4605      	mov	r5, r0
 800a154:	b118      	cbz	r0, 800a15e <__swbuf_r+0x12>
 800a156:	6983      	ldr	r3, [r0, #24]
 800a158:	b90b      	cbnz	r3, 800a15e <__swbuf_r+0x12>
 800a15a:	f7ff f955 	bl	8009408 <__sinit>
 800a15e:	4b21      	ldr	r3, [pc, #132]	; (800a1e4 <__swbuf_r+0x98>)
 800a160:	429c      	cmp	r4, r3
 800a162:	d12b      	bne.n	800a1bc <__swbuf_r+0x70>
 800a164:	686c      	ldr	r4, [r5, #4]
 800a166:	69a3      	ldr	r3, [r4, #24]
 800a168:	60a3      	str	r3, [r4, #8]
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	071a      	lsls	r2, r3, #28
 800a16e:	d52f      	bpl.n	800a1d0 <__swbuf_r+0x84>
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	b36b      	cbz	r3, 800a1d0 <__swbuf_r+0x84>
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	1ac0      	subs	r0, r0, r3
 800a17a:	6963      	ldr	r3, [r4, #20]
 800a17c:	b2f6      	uxtb	r6, r6
 800a17e:	4283      	cmp	r3, r0
 800a180:	4637      	mov	r7, r6
 800a182:	dc04      	bgt.n	800a18e <__swbuf_r+0x42>
 800a184:	4621      	mov	r1, r4
 800a186:	4628      	mov	r0, r5
 800a188:	f000 f966 	bl	800a458 <_fflush_r>
 800a18c:	bb30      	cbnz	r0, 800a1dc <__swbuf_r+0x90>
 800a18e:	68a3      	ldr	r3, [r4, #8]
 800a190:	3b01      	subs	r3, #1
 800a192:	60a3      	str	r3, [r4, #8]
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	701e      	strb	r6, [r3, #0]
 800a19c:	6963      	ldr	r3, [r4, #20]
 800a19e:	3001      	adds	r0, #1
 800a1a0:	4283      	cmp	r3, r0
 800a1a2:	d004      	beq.n	800a1ae <__swbuf_r+0x62>
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	07db      	lsls	r3, r3, #31
 800a1a8:	d506      	bpl.n	800a1b8 <__swbuf_r+0x6c>
 800a1aa:	2e0a      	cmp	r6, #10
 800a1ac:	d104      	bne.n	800a1b8 <__swbuf_r+0x6c>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f000 f951 	bl	800a458 <_fflush_r>
 800a1b6:	b988      	cbnz	r0, 800a1dc <__swbuf_r+0x90>
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <__swbuf_r+0x9c>)
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	d101      	bne.n	800a1c6 <__swbuf_r+0x7a>
 800a1c2:	68ac      	ldr	r4, [r5, #8]
 800a1c4:	e7cf      	b.n	800a166 <__swbuf_r+0x1a>
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <__swbuf_r+0xa0>)
 800a1c8:	429c      	cmp	r4, r3
 800a1ca:	bf08      	it	eq
 800a1cc:	68ec      	ldreq	r4, [r5, #12]
 800a1ce:	e7ca      	b.n	800a166 <__swbuf_r+0x1a>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 f81e 	bl	800a214 <__swsetup_r>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d0cb      	beq.n	800a174 <__swbuf_r+0x28>
 800a1dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a1e0:	e7ea      	b.n	800a1b8 <__swbuf_r+0x6c>
 800a1e2:	bf00      	nop
 800a1e4:	0800ac88 	.word	0x0800ac88
 800a1e8:	0800aca8 	.word	0x0800aca8
 800a1ec:	0800ac68 	.word	0x0800ac68

0800a1f0 <_write_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d07      	ldr	r5, [pc, #28]	; (800a210 <_write_r+0x20>)
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f7f9 f91e 	bl	8003440 <_write>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_write_r+0x1e>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_write_r+0x1e>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	20000600 	.word	0x20000600

0800a214 <__swsetup_r>:
 800a214:	4b32      	ldr	r3, [pc, #200]	; (800a2e0 <__swsetup_r+0xcc>)
 800a216:	b570      	push	{r4, r5, r6, lr}
 800a218:	681d      	ldr	r5, [r3, #0]
 800a21a:	4606      	mov	r6, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	b125      	cbz	r5, 800a22a <__swsetup_r+0x16>
 800a220:	69ab      	ldr	r3, [r5, #24]
 800a222:	b913      	cbnz	r3, 800a22a <__swsetup_r+0x16>
 800a224:	4628      	mov	r0, r5
 800a226:	f7ff f8ef 	bl	8009408 <__sinit>
 800a22a:	4b2e      	ldr	r3, [pc, #184]	; (800a2e4 <__swsetup_r+0xd0>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	d10f      	bne.n	800a250 <__swsetup_r+0x3c>
 800a230:	686c      	ldr	r4, [r5, #4]
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a238:	0719      	lsls	r1, r3, #28
 800a23a:	d42c      	bmi.n	800a296 <__swsetup_r+0x82>
 800a23c:	06dd      	lsls	r5, r3, #27
 800a23e:	d411      	bmi.n	800a264 <__swsetup_r+0x50>
 800a240:	2309      	movs	r3, #9
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295
 800a24e:	e03e      	b.n	800a2ce <__swsetup_r+0xba>
 800a250:	4b25      	ldr	r3, [pc, #148]	; (800a2e8 <__swsetup_r+0xd4>)
 800a252:	429c      	cmp	r4, r3
 800a254:	d101      	bne.n	800a25a <__swsetup_r+0x46>
 800a256:	68ac      	ldr	r4, [r5, #8]
 800a258:	e7eb      	b.n	800a232 <__swsetup_r+0x1e>
 800a25a:	4b24      	ldr	r3, [pc, #144]	; (800a2ec <__swsetup_r+0xd8>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	bf08      	it	eq
 800a260:	68ec      	ldreq	r4, [r5, #12]
 800a262:	e7e6      	b.n	800a232 <__swsetup_r+0x1e>
 800a264:	0758      	lsls	r0, r3, #29
 800a266:	d512      	bpl.n	800a28e <__swsetup_r+0x7a>
 800a268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a26a:	b141      	cbz	r1, 800a27e <__swsetup_r+0x6a>
 800a26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a270:	4299      	cmp	r1, r3
 800a272:	d002      	beq.n	800a27a <__swsetup_r+0x66>
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff fd11 	bl	8009c9c <_free_r>
 800a27a:	2300      	movs	r3, #0
 800a27c:	6363      	str	r3, [r4, #52]	; 0x34
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a284:	81a3      	strh	r3, [r4, #12]
 800a286:	2300      	movs	r3, #0
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	f043 0308 	orr.w	r3, r3, #8
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	b94b      	cbnz	r3, 800a2ae <__swsetup_r+0x9a>
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a4:	d003      	beq.n	800a2ae <__swsetup_r+0x9a>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f000 f959 	bl	800a560 <__smakebuf_r>
 800a2ae:	89a0      	ldrh	r0, [r4, #12]
 800a2b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b4:	f010 0301 	ands.w	r3, r0, #1
 800a2b8:	d00a      	beq.n	800a2d0 <__swsetup_r+0xbc>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60a3      	str	r3, [r4, #8]
 800a2be:	6963      	ldr	r3, [r4, #20]
 800a2c0:	425b      	negs	r3, r3
 800a2c2:	61a3      	str	r3, [r4, #24]
 800a2c4:	6923      	ldr	r3, [r4, #16]
 800a2c6:	b943      	cbnz	r3, 800a2da <__swsetup_r+0xc6>
 800a2c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2cc:	d1ba      	bne.n	800a244 <__swsetup_r+0x30>
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
 800a2d0:	0781      	lsls	r1, r0, #30
 800a2d2:	bf58      	it	pl
 800a2d4:	6963      	ldrpl	r3, [r4, #20]
 800a2d6:	60a3      	str	r3, [r4, #8]
 800a2d8:	e7f4      	b.n	800a2c4 <__swsetup_r+0xb0>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	e7f7      	b.n	800a2ce <__swsetup_r+0xba>
 800a2de:	bf00      	nop
 800a2e0:	20000184 	.word	0x20000184
 800a2e4:	0800ac88 	.word	0x0800ac88
 800a2e8:	0800aca8 	.word	0x0800aca8
 800a2ec:	0800ac68 	.word	0x0800ac68

0800a2f0 <__assert_func>:
 800a2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2f2:	4614      	mov	r4, r2
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <__assert_func+0x2c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	68d8      	ldr	r0, [r3, #12]
 800a2fe:	b14c      	cbz	r4, 800a314 <__assert_func+0x24>
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <__assert_func+0x30>)
 800a302:	9100      	str	r1, [sp, #0]
 800a304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a308:	4906      	ldr	r1, [pc, #24]	; (800a324 <__assert_func+0x34>)
 800a30a:	462b      	mov	r3, r5
 800a30c:	f000 f8e0 	bl	800a4d0 <fiprintf>
 800a310:	f000 f9a3 	bl	800a65a <abort>
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <__assert_func+0x38>)
 800a316:	461c      	mov	r4, r3
 800a318:	e7f3      	b.n	800a302 <__assert_func+0x12>
 800a31a:	bf00      	nop
 800a31c:	20000184 	.word	0x20000184
 800a320:	0800ae35 	.word	0x0800ae35
 800a324:	0800ae42 	.word	0x0800ae42
 800a328:	0800ae70 	.word	0x0800ae70

0800a32c <_close_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	; (800a348 <_close_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f9 f89e 	bl	8003478 <_close>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_close_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_close_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	20000600 	.word	0x20000600

0800a34c <__sflush_r>:
 800a34c:	898a      	ldrh	r2, [r1, #12]
 800a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	4605      	mov	r5, r0
 800a354:	0710      	lsls	r0, r2, #28
 800a356:	460c      	mov	r4, r1
 800a358:	d458      	bmi.n	800a40c <__sflush_r+0xc0>
 800a35a:	684b      	ldr	r3, [r1, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	dc05      	bgt.n	800a36c <__sflush_r+0x20>
 800a360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	dc02      	bgt.n	800a36c <__sflush_r+0x20>
 800a366:	2000      	movs	r0, #0
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a36e:	2e00      	cmp	r6, #0
 800a370:	d0f9      	beq.n	800a366 <__sflush_r+0x1a>
 800a372:	2300      	movs	r3, #0
 800a374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a378:	682f      	ldr	r7, [r5, #0]
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	d032      	beq.n	800a3e4 <__sflush_r+0x98>
 800a37e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	075a      	lsls	r2, r3, #29
 800a384:	d505      	bpl.n	800a392 <__sflush_r+0x46>
 800a386:	6863      	ldr	r3, [r4, #4]
 800a388:	1ac0      	subs	r0, r0, r3
 800a38a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a38c:	b10b      	cbz	r3, 800a392 <__sflush_r+0x46>
 800a38e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a390:	1ac0      	subs	r0, r0, r3
 800a392:	2300      	movs	r3, #0
 800a394:	4602      	mov	r2, r0
 800a396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a398:	6a21      	ldr	r1, [r4, #32]
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b0      	blx	r6
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	d106      	bne.n	800a3b2 <__sflush_r+0x66>
 800a3a4:	6829      	ldr	r1, [r5, #0]
 800a3a6:	291d      	cmp	r1, #29
 800a3a8:	d82c      	bhi.n	800a404 <__sflush_r+0xb8>
 800a3aa:	4a2a      	ldr	r2, [pc, #168]	; (800a454 <__sflush_r+0x108>)
 800a3ac:	40ca      	lsrs	r2, r1
 800a3ae:	07d6      	lsls	r6, r2, #31
 800a3b0:	d528      	bpl.n	800a404 <__sflush_r+0xb8>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6062      	str	r2, [r4, #4]
 800a3b6:	04d9      	lsls	r1, r3, #19
 800a3b8:	6922      	ldr	r2, [r4, #16]
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	d504      	bpl.n	800a3c8 <__sflush_r+0x7c>
 800a3be:	1c42      	adds	r2, r0, #1
 800a3c0:	d101      	bne.n	800a3c6 <__sflush_r+0x7a>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b903      	cbnz	r3, 800a3c8 <__sflush_r+0x7c>
 800a3c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ca:	602f      	str	r7, [r5, #0]
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d0ca      	beq.n	800a366 <__sflush_r+0x1a>
 800a3d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	d002      	beq.n	800a3de <__sflush_r+0x92>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff fc5f 	bl	8009c9c <_free_r>
 800a3de:	2000      	movs	r0, #0
 800a3e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3e2:	e7c1      	b.n	800a368 <__sflush_r+0x1c>
 800a3e4:	6a21      	ldr	r1, [r4, #32]
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b0      	blx	r6
 800a3ec:	1c41      	adds	r1, r0, #1
 800a3ee:	d1c7      	bne.n	800a380 <__sflush_r+0x34>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0c4      	beq.n	800a380 <__sflush_r+0x34>
 800a3f6:	2b1d      	cmp	r3, #29
 800a3f8:	d001      	beq.n	800a3fe <__sflush_r+0xb2>
 800a3fa:	2b16      	cmp	r3, #22
 800a3fc:	d101      	bne.n	800a402 <__sflush_r+0xb6>
 800a3fe:	602f      	str	r7, [r5, #0]
 800a400:	e7b1      	b.n	800a366 <__sflush_r+0x1a>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	e7ad      	b.n	800a368 <__sflush_r+0x1c>
 800a40c:	690f      	ldr	r7, [r1, #16]
 800a40e:	2f00      	cmp	r7, #0
 800a410:	d0a9      	beq.n	800a366 <__sflush_r+0x1a>
 800a412:	0793      	lsls	r3, r2, #30
 800a414:	680e      	ldr	r6, [r1, #0]
 800a416:	bf08      	it	eq
 800a418:	694b      	ldreq	r3, [r1, #20]
 800a41a:	600f      	str	r7, [r1, #0]
 800a41c:	bf18      	it	ne
 800a41e:	2300      	movne	r3, #0
 800a420:	eba6 0807 	sub.w	r8, r6, r7
 800a424:	608b      	str	r3, [r1, #8]
 800a426:	f1b8 0f00 	cmp.w	r8, #0
 800a42a:	dd9c      	ble.n	800a366 <__sflush_r+0x1a>
 800a42c:	6a21      	ldr	r1, [r4, #32]
 800a42e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a430:	4643      	mov	r3, r8
 800a432:	463a      	mov	r2, r7
 800a434:	4628      	mov	r0, r5
 800a436:	47b0      	blx	r6
 800a438:	2800      	cmp	r0, #0
 800a43a:	dc06      	bgt.n	800a44a <__sflush_r+0xfe>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	e78e      	b.n	800a368 <__sflush_r+0x1c>
 800a44a:	4407      	add	r7, r0
 800a44c:	eba8 0800 	sub.w	r8, r8, r0
 800a450:	e7e9      	b.n	800a426 <__sflush_r+0xda>
 800a452:	bf00      	nop
 800a454:	20400001 	.word	0x20400001

0800a458 <_fflush_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	690b      	ldr	r3, [r1, #16]
 800a45c:	4605      	mov	r5, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	b913      	cbnz	r3, 800a468 <_fflush_r+0x10>
 800a462:	2500      	movs	r5, #0
 800a464:	4628      	mov	r0, r5
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	b118      	cbz	r0, 800a472 <_fflush_r+0x1a>
 800a46a:	6983      	ldr	r3, [r0, #24]
 800a46c:	b90b      	cbnz	r3, 800a472 <_fflush_r+0x1a>
 800a46e:	f7fe ffcb 	bl	8009408 <__sinit>
 800a472:	4b14      	ldr	r3, [pc, #80]	; (800a4c4 <_fflush_r+0x6c>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d11b      	bne.n	800a4b0 <_fflush_r+0x58>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0ef      	beq.n	800a462 <_fflush_r+0xa>
 800a482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a484:	07d0      	lsls	r0, r2, #31
 800a486:	d404      	bmi.n	800a492 <_fflush_r+0x3a>
 800a488:	0599      	lsls	r1, r3, #22
 800a48a:	d402      	bmi.n	800a492 <_fflush_r+0x3a>
 800a48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a48e:	f7ff f85e 	bl	800954e <__retarget_lock_acquire_recursive>
 800a492:	4628      	mov	r0, r5
 800a494:	4621      	mov	r1, r4
 800a496:	f7ff ff59 	bl	800a34c <__sflush_r>
 800a49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a49c:	07da      	lsls	r2, r3, #31
 800a49e:	4605      	mov	r5, r0
 800a4a0:	d4e0      	bmi.n	800a464 <_fflush_r+0xc>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	059b      	lsls	r3, r3, #22
 800a4a6:	d4dd      	bmi.n	800a464 <_fflush_r+0xc>
 800a4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4aa:	f7ff f851 	bl	8009550 <__retarget_lock_release_recursive>
 800a4ae:	e7d9      	b.n	800a464 <_fflush_r+0xc>
 800a4b0:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <_fflush_r+0x70>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d101      	bne.n	800a4ba <_fflush_r+0x62>
 800a4b6:	68ac      	ldr	r4, [r5, #8]
 800a4b8:	e7df      	b.n	800a47a <_fflush_r+0x22>
 800a4ba:	4b04      	ldr	r3, [pc, #16]	; (800a4cc <_fflush_r+0x74>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	bf08      	it	eq
 800a4c0:	68ec      	ldreq	r4, [r5, #12]
 800a4c2:	e7da      	b.n	800a47a <_fflush_r+0x22>
 800a4c4:	0800ac88 	.word	0x0800ac88
 800a4c8:	0800aca8 	.word	0x0800aca8
 800a4cc:	0800ac68 	.word	0x0800ac68

0800a4d0 <fiprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b503      	push	{r0, r1, lr}
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <fiprintf+0x20>)
 800a4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4de:	6800      	ldr	r0, [r0, #0]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	f7ff fcaf 	bl	8009e44 <_vfiprintf_r>
 800a4e6:	b002      	add	sp, #8
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	b003      	add	sp, #12
 800a4ee:	4770      	bx	lr
 800a4f0:	20000184 	.word	0x20000184

0800a4f4 <_lseek_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4d07      	ldr	r5, [pc, #28]	; (800a514 <_lseek_r+0x20>)
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	2200      	movs	r2, #0
 800a500:	602a      	str	r2, [r5, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	f7f8 ffdf 	bl	80034c6 <_lseek>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_lseek_r+0x1e>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_lseek_r+0x1e>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	20000600 	.word	0x20000600

0800a518 <__swhatbuf_r>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	460e      	mov	r6, r1
 800a51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a520:	2900      	cmp	r1, #0
 800a522:	b096      	sub	sp, #88	; 0x58
 800a524:	4614      	mov	r4, r2
 800a526:	461d      	mov	r5, r3
 800a528:	da07      	bge.n	800a53a <__swhatbuf_r+0x22>
 800a52a:	2300      	movs	r3, #0
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	89b3      	ldrh	r3, [r6, #12]
 800a530:	061a      	lsls	r2, r3, #24
 800a532:	d410      	bmi.n	800a556 <__swhatbuf_r+0x3e>
 800a534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a538:	e00e      	b.n	800a558 <__swhatbuf_r+0x40>
 800a53a:	466a      	mov	r2, sp
 800a53c:	f000 f894 	bl	800a668 <_fstat_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	dbf2      	blt.n	800a52a <__swhatbuf_r+0x12>
 800a544:	9a01      	ldr	r2, [sp, #4]
 800a546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a54a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a54e:	425a      	negs	r2, r3
 800a550:	415a      	adcs	r2, r3
 800a552:	602a      	str	r2, [r5, #0]
 800a554:	e7ee      	b.n	800a534 <__swhatbuf_r+0x1c>
 800a556:	2340      	movs	r3, #64	; 0x40
 800a558:	2000      	movs	r0, #0
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	b016      	add	sp, #88	; 0x58
 800a55e:	bd70      	pop	{r4, r5, r6, pc}

0800a560 <__smakebuf_r>:
 800a560:	898b      	ldrh	r3, [r1, #12]
 800a562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a564:	079d      	lsls	r5, r3, #30
 800a566:	4606      	mov	r6, r0
 800a568:	460c      	mov	r4, r1
 800a56a:	d507      	bpl.n	800a57c <__smakebuf_r+0x1c>
 800a56c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	6123      	str	r3, [r4, #16]
 800a574:	2301      	movs	r3, #1
 800a576:	6163      	str	r3, [r4, #20]
 800a578:	b002      	add	sp, #8
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	ab01      	add	r3, sp, #4
 800a57e:	466a      	mov	r2, sp
 800a580:	f7ff ffca 	bl	800a518 <__swhatbuf_r>
 800a584:	9900      	ldr	r1, [sp, #0]
 800a586:	4605      	mov	r5, r0
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff fbd7 	bl	8009d3c <_malloc_r>
 800a58e:	b948      	cbnz	r0, 800a5a4 <__smakebuf_r+0x44>
 800a590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a594:	059a      	lsls	r2, r3, #22
 800a596:	d4ef      	bmi.n	800a578 <__smakebuf_r+0x18>
 800a598:	f023 0303 	bic.w	r3, r3, #3
 800a59c:	f043 0302 	orr.w	r3, r3, #2
 800a5a0:	81a3      	strh	r3, [r4, #12]
 800a5a2:	e7e3      	b.n	800a56c <__smakebuf_r+0xc>
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <__smakebuf_r+0x7c>)
 800a5a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	6020      	str	r0, [r4, #0]
 800a5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	6163      	str	r3, [r4, #20]
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	6120      	str	r0, [r4, #16]
 800a5ba:	b15b      	cbz	r3, 800a5d4 <__smakebuf_r+0x74>
 800a5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 f863 	bl	800a68c <_isatty_r>
 800a5c6:	b128      	cbz	r0, 800a5d4 <__smakebuf_r+0x74>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f023 0303 	bic.w	r3, r3, #3
 800a5ce:	f043 0301 	orr.w	r3, r3, #1
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	89a0      	ldrh	r0, [r4, #12]
 800a5d6:	4305      	orrs	r5, r0
 800a5d8:	81a5      	strh	r5, [r4, #12]
 800a5da:	e7cd      	b.n	800a578 <__smakebuf_r+0x18>
 800a5dc:	080093a1 	.word	0x080093a1

0800a5e0 <__ascii_mbtowc>:
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	b901      	cbnz	r1, 800a5e6 <__ascii_mbtowc+0x6>
 800a5e4:	a901      	add	r1, sp, #4
 800a5e6:	b142      	cbz	r2, 800a5fa <__ascii_mbtowc+0x1a>
 800a5e8:	b14b      	cbz	r3, 800a5fe <__ascii_mbtowc+0x1e>
 800a5ea:	7813      	ldrb	r3, [r2, #0]
 800a5ec:	600b      	str	r3, [r1, #0]
 800a5ee:	7812      	ldrb	r2, [r2, #0]
 800a5f0:	1e10      	subs	r0, r2, #0
 800a5f2:	bf18      	it	ne
 800a5f4:	2001      	movne	r0, #1
 800a5f6:	b002      	add	sp, #8
 800a5f8:	4770      	bx	lr
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	e7fb      	b.n	800a5f6 <__ascii_mbtowc+0x16>
 800a5fe:	f06f 0001 	mvn.w	r0, #1
 800a602:	e7f8      	b.n	800a5f6 <__ascii_mbtowc+0x16>

0800a604 <__malloc_lock>:
 800a604:	4801      	ldr	r0, [pc, #4]	; (800a60c <__malloc_lock+0x8>)
 800a606:	f7fe bfa2 	b.w	800954e <__retarget_lock_acquire_recursive>
 800a60a:	bf00      	nop
 800a60c:	200005f8 	.word	0x200005f8

0800a610 <__malloc_unlock>:
 800a610:	4801      	ldr	r0, [pc, #4]	; (800a618 <__malloc_unlock+0x8>)
 800a612:	f7fe bf9d 	b.w	8009550 <__retarget_lock_release_recursive>
 800a616:	bf00      	nop
 800a618:	200005f8 	.word	0x200005f8

0800a61c <_read_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d07      	ldr	r5, [pc, #28]	; (800a63c <_read_r+0x20>)
 800a620:	4604      	mov	r4, r0
 800a622:	4608      	mov	r0, r1
 800a624:	4611      	mov	r1, r2
 800a626:	2200      	movs	r2, #0
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f8 feeb 	bl	8003406 <_read>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_read_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_read_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	20000600 	.word	0x20000600

0800a640 <__ascii_wctomb>:
 800a640:	b149      	cbz	r1, 800a656 <__ascii_wctomb+0x16>
 800a642:	2aff      	cmp	r2, #255	; 0xff
 800a644:	bf85      	ittet	hi
 800a646:	238a      	movhi	r3, #138	; 0x8a
 800a648:	6003      	strhi	r3, [r0, #0]
 800a64a:	700a      	strbls	r2, [r1, #0]
 800a64c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a650:	bf98      	it	ls
 800a652:	2001      	movls	r0, #1
 800a654:	4770      	bx	lr
 800a656:	4608      	mov	r0, r1
 800a658:	4770      	bx	lr

0800a65a <abort>:
 800a65a:	b508      	push	{r3, lr}
 800a65c:	2006      	movs	r0, #6
 800a65e:	f000 f84d 	bl	800a6fc <raise>
 800a662:	2001      	movs	r0, #1
 800a664:	f7f8 fec5 	bl	80033f2 <_exit>

0800a668 <_fstat_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d07      	ldr	r5, [pc, #28]	; (800a688 <_fstat_r+0x20>)
 800a66c:	2300      	movs	r3, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	4611      	mov	r1, r2
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	f7f8 ff0b 	bl	8003490 <_fstat>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d102      	bne.n	800a684 <_fstat_r+0x1c>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	b103      	cbz	r3, 800a684 <_fstat_r+0x1c>
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	bf00      	nop
 800a688:	20000600 	.word	0x20000600

0800a68c <_isatty_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d06      	ldr	r5, [pc, #24]	; (800a6a8 <_isatty_r+0x1c>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	f7f8 ff0a 	bl	80034b0 <_isatty>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_isatty_r+0x1a>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_isatty_r+0x1a>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	20000600 	.word	0x20000600

0800a6ac <_raise_r>:
 800a6ac:	291f      	cmp	r1, #31
 800a6ae:	b538      	push	{r3, r4, r5, lr}
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	d904      	bls.n	800a6c0 <_raise_r+0x14>
 800a6b6:	2316      	movs	r3, #22
 800a6b8:	6003      	str	r3, [r0, #0]
 800a6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6c2:	b112      	cbz	r2, 800a6ca <_raise_r+0x1e>
 800a6c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6c8:	b94b      	cbnz	r3, 800a6de <_raise_r+0x32>
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 f830 	bl	800a730 <_getpid_r>
 800a6d0:	462a      	mov	r2, r5
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6da:	f000 b817 	b.w	800a70c <_kill_r>
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d00a      	beq.n	800a6f8 <_raise_r+0x4c>
 800a6e2:	1c59      	adds	r1, r3, #1
 800a6e4:	d103      	bne.n	800a6ee <_raise_r+0x42>
 800a6e6:	2316      	movs	r3, #22
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	e7e7      	b.n	800a6be <_raise_r+0x12>
 800a6ee:	2400      	movs	r4, #0
 800a6f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	4798      	blx	r3
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e7e0      	b.n	800a6be <_raise_r+0x12>

0800a6fc <raise>:
 800a6fc:	4b02      	ldr	r3, [pc, #8]	; (800a708 <raise+0xc>)
 800a6fe:	4601      	mov	r1, r0
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	f7ff bfd3 	b.w	800a6ac <_raise_r>
 800a706:	bf00      	nop
 800a708:	20000184 	.word	0x20000184

0800a70c <_kill_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d07      	ldr	r5, [pc, #28]	; (800a72c <_kill_r+0x20>)
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	4611      	mov	r1, r2
 800a718:	602b      	str	r3, [r5, #0]
 800a71a:	f7f8 fe5a 	bl	80033d2 <_kill>
 800a71e:	1c43      	adds	r3, r0, #1
 800a720:	d102      	bne.n	800a728 <_kill_r+0x1c>
 800a722:	682b      	ldr	r3, [r5, #0]
 800a724:	b103      	cbz	r3, 800a728 <_kill_r+0x1c>
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	bd38      	pop	{r3, r4, r5, pc}
 800a72a:	bf00      	nop
 800a72c:	20000600 	.word	0x20000600

0800a730 <_getpid_r>:
 800a730:	f7f8 be47 	b.w	80033c2 <_getpid>

0800a734 <_init>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr

0800a740 <_fini>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	bf00      	nop
 800a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a746:	bc08      	pop	{r3}
 800a748:	469e      	mov	lr, r3
 800a74a:	4770      	bx	lr
