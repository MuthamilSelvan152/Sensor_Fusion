
Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009948  08009948  00019948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d9c  08009d9c  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  08009d9c  08009d9c  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d9c  08009d9c  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da0  08009da0  00019da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08009da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020354  2**0
                  CONTENTS
 10 .bss          0000022c  20000354  20000354  00020354  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  00020354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a008  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e5  00000000  00000000  0003a38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0003dc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  0003ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bad  00000000  00000000  0003fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017af9  00000000  00000000  0006074d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8a8d  00000000  00000000  00078246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00130cd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005100  00000000  00000000  00130d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800992c 	.word	0x0800992c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800992c 	.word	0x0800992c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000bb6:	f001 fa6f 	bl	8002098 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 faab 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000bd8:	f107 030f 	add.w	r3, r7, #15
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2123      	movs	r1, #35	; 0x23
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fa9f 	bl	8002124 <GYRO_IO_Write>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000c02:	f001 fa49 	bl	8002098 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2201      	movs	r2, #1
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fabb 	bl	8002188 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	2124      	movs	r1, #36	; 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 faad 	bl	8002188 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2124      	movs	r1, #36	; 0x24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fa70 	bl	8002124 <GYRO_IO_Write>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fa5b 	bl	8002124 <GYRO_IO_Write>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000c88:	f107 030f 	add.w	r3, r7, #15
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2130      	movs	r1, #48	; 0x30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fa79 	bl	8002188 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000c96:	f107 030e 	add.w	r3, r7, #14
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2122      	movs	r1, #34	; 0x22
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fa72 	bl	8002188 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	121b      	asrs	r3, r3, #8
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	f023 0320 	bic.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000cd8:	f107 030f 	add.w	r3, r7, #15
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2130      	movs	r1, #48	; 0x30
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fa1f 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000ce6:	f107 030e 	add.w	r3, r7, #14
 8000cea:	2201      	movs	r2, #1
 8000cec:	2122      	movs	r1, #34	; 0x22
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fa18 	bl	8002124 <GYRO_IO_Write>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2122      	movs	r1, #34	; 0x22
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fa3a 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e00c      	b.n	8000d4a <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d109      	bne.n	8000d4a <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f023 0308 	bic.w	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d4a:	f107 030f 	add.w	r3, r7, #15
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2122      	movs	r1, #34	; 0x22
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f9e6 	bl	8002124 <GYRO_IO_Write>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d6a:	f107 030f 	add.w	r3, r7, #15
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2122      	movs	r1, #34	; 0x22
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fa08 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e009      	b.n	8000da2 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0308 	bic.w	r3, r3, #8
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000da2:	f107 030f 	add.w	r3, r7, #15
 8000da6:	2201      	movs	r2, #1
 8000da8:	2122      	movs	r1, #34	; 0x22
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f9ba 	bl	8002124 <GYRO_IO_Write>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2121      	movs	r1, #33	; 0x21
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 f9dc 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	2201      	movs	r2, #1
 8000dea:	2121      	movs	r1, #33	; 0x21
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f999 	bl	8002124 <GYRO_IO_Write>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e04:	f107 030f 	add.w	r3, r7, #15
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2124      	movs	r1, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f9bb 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f023 0310 	bic.w	r3, r3, #16
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e26:	f107 030f 	add.w	r3, r7, #15
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2124      	movs	r1, #36	; 0x24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f978 	bl	8002124 <GYRO_IO_Write>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000e64:	f107 030f 	add.w	r3, r7, #15
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2123      	movs	r1, #35	; 0x23
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f98b 	bl	8002188 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2206      	movs	r2, #6
 8000e78:	2128      	movs	r1, #40	; 0x28
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f984 	bl	8002188 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d126      	bne.n	8000ed8 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
 8000e8e:	e01f      	b.n	8000ed0 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	3301      	adds	r3, #1
 8000e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eae:	440b      	add	r3, r1
 8000eb0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	dddc      	ble.n	8000e90 <I3G4250D_ReadXYZAngRate+0x54>
 8000ed6:	e025      	b.n	8000f24 <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	e01f      	b.n	8000f1e <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000efc:	440b      	add	r3, r1
 8000efe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f12:	440b      	add	r3, r1
 8000f14:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	dddc      	ble.n	8000ede <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f2a:	2b20      	cmp	r3, #32
 8000f2c:	d00c      	beq.n	8000f48 <I3G4250D_ReadXYZAngRate+0x10c>
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	dc0d      	bgt.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d003      	beq.n	8000f42 <I3G4250D_ReadXYZAngRate+0x106>
 8000f3a:	e008      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <I3G4250D_ReadXYZAngRate+0x158>)
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f40:	e005      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <I3G4250D_ReadXYZAngRate+0x15c>)
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f46:	e002      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <I3G4250D_ReadXYZAngRate+0x160>)
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f4c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	e017      	b.n	8000f84 <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	3301      	adds	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	dde4      	ble.n	8000f54 <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	410c0000 	.word	0x410c0000
 8000f98:	418c0000 	.word	0x418c0000
 8000f9c:	428c0000 	.word	0x428c0000

08000fa0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000fae:	f001 f873 	bl	8002098 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000fb8:	f107 030f 	add.w	r3, r7, #15
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 f8af 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000fd0:	f107 030f 	add.w	r3, r7, #15
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2123      	movs	r1, #35	; 0x23
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f8a3 	bl	8002124 <GYRO_IO_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ffa:	f001 f84d 	bl	8002098 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	2201      	movs	r2, #1
 8001002:	210f      	movs	r1, #15
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f8bf 	bl	8002188 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	2201      	movs	r2, #1
 800101e:	2124      	movs	r1, #36	; 0x24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f8b1 	bl	8002188 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102c:	b2db      	uxtb	r3, r3
 800102e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	2124      	movs	r1, #36	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f874 	bl	8002124 <GYRO_IO_Write>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001058:	f107 030f 	add.w	r3, r7, #15
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f85f 	bl	8002124 <GYRO_IO_Write>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	2300      	movs	r3, #0
 800107e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f87d 	bl	8002188 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	2201      	movs	r2, #1
 8001094:	2122      	movs	r1, #34	; 0x22
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f876 	bl	8002188 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	121b      	asrs	r3, r3, #8
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	f023 0320 	bic.w	r3, r3, #32
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	2130      	movs	r1, #48	; 0x30
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f823 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80010de:	f107 030e 	add.w	r3, r7, #14
 80010e2:	2201      	movs	r2, #1
 80010e4:	2122      	movs	r1, #34	; 0x22
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 f81c 	bl	8002124 <GYRO_IO_Write>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	2201      	movs	r2, #1
 8001104:	2122      	movs	r1, #34	; 0x22
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f83e 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10a      	bne.n	8001128 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e00c      	b.n	8001142 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d109      	bne.n	8001142 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f023 0308 	bic.w	r3, r3, #8
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001142:	f107 030f 	add.w	r3, r7, #15
 8001146:	2201      	movs	r2, #1
 8001148:	2122      	movs	r1, #34	; 0x22
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ffea 	bl	8002124 <GYRO_IO_Write>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001162:	f107 030f 	add.w	r3, r7, #15
 8001166:	2201      	movs	r2, #1
 8001168:	2122      	movs	r1, #34	; 0x22
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f80c 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e009      	b.n	800119a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f023 0308 	bic.w	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	2201      	movs	r2, #1
 80011a0:	2122      	movs	r1, #34	; 0x22
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ffbe 	bl	8002124 <GYRO_IO_Write>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011ba:	f107 030f 	add.w	r3, r7, #15
 80011be:	2201      	movs	r2, #1
 80011c0:	2121      	movs	r1, #33	; 0x21
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffe0 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011dc:	f107 030f 	add.w	r3, r7, #15
 80011e0:	2201      	movs	r2, #1
 80011e2:	2121      	movs	r1, #33	; 0x21
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ff9d 	bl	8002124 <GYRO_IO_Write>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	2201      	movs	r2, #1
 8001202:	2124      	movs	r1, #36	; 0x24
 8001204:	4618      	mov	r0, r3
 8001206:	f000 ffbf 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0310 	bic.w	r3, r3, #16
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4313      	orrs	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	2201      	movs	r2, #1
 8001224:	2124      	movs	r1, #36	; 0x24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ff7c 	bl	8002124 <GYRO_IO_Write>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	2300      	movs	r3, #0
 8001242:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800125c:	f107 030f 	add.w	r3, r7, #15
 8001260:	2201      	movs	r2, #1
 8001262:	2123      	movs	r1, #35	; 0x23
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ff8f 	bl	8002188 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	2206      	movs	r2, #6
 8001270:	2128      	movs	r1, #40	; 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f000 ff88 	bl	8002188 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d126      	bne.n	80012d0 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	e01f      	b.n	80012c8 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	3301      	adds	r3, #1
 800128e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001292:	4413      	add	r3, r2
 8001294:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001298:	b29b      	uxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a6:	440b      	add	r3, r1
 80012a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012bc:	440b      	add	r3, r1
 80012be:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	dddc      	ble.n	8001288 <L3GD20_ReadXYZAngRate+0x54>
 80012ce:	e025      	b.n	800131c <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	e01f      	b.n	8001316 <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012de:	4413      	add	r3, r2
 80012e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	3301      	adds	r3, #1
 80012f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012f4:	440b      	add	r3, r1
 80012f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21a      	sxth	r2, r3
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800130a:	440b      	add	r3, r1
 800130c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	3301      	adds	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	2b02      	cmp	r3, #2
 800131a:	dddc      	ble.n	80012d6 <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001322:	2b20      	cmp	r3, #32
 8001324:	d00c      	beq.n	8001340 <L3GD20_ReadXYZAngRate+0x10c>
 8001326:	2b20      	cmp	r3, #32
 8001328:	dc0d      	bgt.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <L3GD20_ReadXYZAngRate+0x100>
 800132e:	2b10      	cmp	r3, #16
 8001330:	d003      	beq.n	800133a <L3GD20_ReadXYZAngRate+0x106>
 8001332:	e008      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <L3GD20_ReadXYZAngRate+0x158>)
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001338:	e005      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <L3GD20_ReadXYZAngRate+0x15c>)
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800133e:	e002      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <L3GD20_ReadXYZAngRate+0x160>)
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001344:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	e017      	b.n	800137c <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001354:	4413      	add	r3, r2
 8001356:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	3301      	adds	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b02      	cmp	r3, #2
 8001380:	dde4      	ble.n	800134c <L3GD20_ReadXYZAngRate+0x118>
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	410c0000 	.word	0x410c0000
 8001390:	418c0000 	.word	0x418c0000
 8001394:	428c0000 	.word	0x428c0000

08001398 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80013a6:	f000 ff29 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2120      	movs	r1, #32
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f000 ff99 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	461a      	mov	r2, r3
 80013c2:	2123      	movs	r1, #35	; 0x23
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f000 ff91 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80013ea:	f000 ff07 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80013ee:	210f      	movs	r1, #15
 80013f0:	2032      	movs	r0, #50	; 0x32
 80013f2:	f000 ff8e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800140a:	2124      	movs	r1, #36	; 0x24
 800140c:	2032      	movs	r0, #50	; 0x32
 800140e:	f000 ff80 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	461a      	mov	r2, r3
 8001422:	2124      	movs	r1, #36	; 0x24
 8001424:	2032      	movs	r0, #50	; 0x32
 8001426:	f000 ff61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800143c:	2121      	movs	r1, #33	; 0x21
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f000 ff67 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4313      	orrs	r3, r2
 8001456:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	461a      	mov	r2, r3
 800145c:	2121      	movs	r1, #33	; 0x21
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f000 ff44 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001476:	2121      	movs	r1, #33	; 0x21
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f000 ff4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f023 0308 	bic.w	r3, r3, #8
 8001488:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4313      	orrs	r3, r2
 8001490:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	461a      	mov	r2, r3
 8001496:	2121      	movs	r1, #33	; 0x21
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 ff27 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b088      	sub	sp, #32
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80014ae:	2300      	movs	r3, #0
 80014b0:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80014ba:	2123      	movs	r1, #35	; 0x23
 80014bc:	2032      	movs	r0, #50	; 0x32
 80014be:	f000 ff28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80014c6:	2124      	movs	r1, #36	; 0x24
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f000 ff22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80014d2:	2128      	movs	r1, #40	; 0x28
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f000 ff1c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014da:	4603      	mov	r3, r0
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80014e0:	2129      	movs	r1, #41	; 0x29
 80014e2:	2032      	movs	r0, #50	; 0x32
 80014e4:	f000 ff15 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80014ee:	212a      	movs	r1, #42	; 0x2a
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f000 ff0e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80014fc:	212b      	movs	r1, #43	; 0x2b
 80014fe:	2032      	movs	r0, #50	; 0x32
 8001500:	f000 ff07 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	b25b      	sxtb	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f000 ff00 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001512:	4603      	mov	r3, r0
 8001514:	b25b      	sxtb	r3, r3
 8001516:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001518:	212d      	movs	r1, #45	; 0x2d
 800151a:	2032      	movs	r0, #50	; 0x32
 800151c:	f000 fef9 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	b25b      	sxtb	r3, r3
 8001524:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001526:	7d3b      	ldrb	r3, [r7, #20]
 8001528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d126      	bne.n	800157e <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
 8001534:	e01f      	b.n	8001576 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3301      	adds	r3, #1
 800153c:	f107 0220 	add.w	r2, r7, #32
 8001540:	4413      	add	r3, r2
 8001542:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b29a      	uxth	r2, r3
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	f107 0120 	add.w	r1, r7, #32
 8001554:	440b      	add	r3, r1
 8001556:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	b212      	sxth	r2, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	f107 0120 	add.w	r1, r7, #32
 800156a:	440b      	add	r3, r1
 800156c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3301      	adds	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d9dc      	bls.n	8001536 <LSM303AGR_AccReadXYZ+0x90>
 800157c:	e025      	b.n	80015ca <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	77fb      	strb	r3, [r7, #31]
 8001582:	e01f      	b.n	80015c4 <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	f107 0220 	add.w	r2, r7, #32
 800158c:	4413      	add	r3, r2
 800158e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	3301      	adds	r3, #1
 800159e:	f107 0120 	add.w	r1, r7, #32
 80015a2:	440b      	add	r3, r1
 80015a4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	b212      	sxth	r2, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	f107 0120 	add.w	r1, r7, #32
 80015b8:	440b      	add	r3, r1
 80015ba:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80015be:	7ffb      	ldrb	r3, [r7, #31]
 80015c0:	3301      	adds	r3, #1
 80015c2:	77fb      	strb	r3, [r7, #31]
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d9dc      	bls.n	8001584 <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80015ca:	7d3b      	ldrb	r3, [r7, #20]
 80015cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015d0:	2b30      	cmp	r3, #48	; 0x30
 80015d2:	d013      	beq.n	80015fc <LSM303AGR_AccReadXYZ+0x156>
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	dc14      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d00c      	beq.n	80015f6 <LSM303AGR_AccReadXYZ+0x150>
 80015dc:	2b20      	cmp	r3, #32
 80015de:	dc10      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <LSM303AGR_AccReadXYZ+0x144>
 80015e4:	2b10      	cmp	r3, #16
 80015e6:	d003      	beq.n	80015f0 <LSM303AGR_AccReadXYZ+0x14a>
 80015e8:	e00b      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77bb      	strb	r3, [r7, #30]
    break;
 80015ee:	e008      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80015f0:	2302      	movs	r3, #2
 80015f2:	77bb      	strb	r3, [r7, #30]
    break;
 80015f4:	e005      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80015f6:	2304      	movs	r3, #4
 80015f8:	77bb      	strb	r3, [r7, #30]
    break;
 80015fa:	e002      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80015fc:	230c      	movs	r3, #12
 80015fe:	77bb      	strb	r3, [r7, #30]
    break;
 8001600:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	e015      	b.n	8001634 <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	f107 0220 	add.w	r2, r7, #32
 8001610:	4413      	add	r3, r2
 8001612:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001616:	b29a      	uxth	r2, r3
 8001618:	7fbb      	ldrb	r3, [r7, #30]
 800161a:	b29b      	uxth	r3, r3
 800161c:	fb12 f303 	smulbb	r3, r2, r3
 8001620:	b299      	uxth	r1, r3
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b20a      	sxth	r2, r1
 800162c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	3301      	adds	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d9e6      	bls.n	8001608 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001652:	2121      	movs	r1, #33	; 0x21
 8001654:	2032      	movs	r0, #50	; 0x32
 8001656:	f000 fe5c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4313      	orrs	r3, r2
 800166c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	461a      	mov	r2, r3
 8001672:	2121      	movs	r1, #33	; 0x21
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 fe39 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001690:	2122      	movs	r1, #34	; 0x22
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f000 fe3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2122      	movs	r1, #34	; 0x22
 80016aa:	2032      	movs	r0, #50	; 0x32
 80016ac:	f000 fe1e 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80016c6:	2138      	movs	r1, #56	; 0x38
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 fe22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	461a      	mov	r2, r3
 80016de:	2138      	movs	r1, #56	; 0x38
 80016e0:	2032      	movs	r0, #50	; 0x32
 80016e2:	f000 fe03 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80016e6:	230a      	movs	r3, #10
 80016e8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	461a      	mov	r2, r3
 80016ee:	213a      	movs	r1, #58	; 0x3a
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f000 fdfb 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80016f6:	2305      	movs	r3, #5
 80016f8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	461a      	mov	r2, r3
 80016fe:	213b      	movs	r1, #59	; 0x3b
 8001700:	2032      	movs	r0, #50	; 0x32
 8001702:	f000 fdf3 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	461a      	mov	r2, r3
 800170a:	213c      	movs	r1, #60	; 0x3c
 800170c:	2032      	movs	r0, #50	; 0x32
 800170e:	f000 fded 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	461a      	mov	r2, r3
 800171a:	213d      	movs	r1, #61	; 0x3d
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f000 fde5 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800172e:	f000 fdaf 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001732:	2080      	movs	r0, #128	; 0x80
 8001734:	f7ff ffa5 	bl	8001682 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001738:	2004      	movs	r0, #4
 800173a:	f7ff ff83 	bl	8001644 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff ffba 	bl	80016b8 <LSM303AGR_AccClickITEnable>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001756:	f000 fd51 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	461a      	mov	r2, r3
 8001762:	2120      	movs	r1, #32
 8001764:	2032      	movs	r0, #50	; 0x32
 8001766:	f000 fdc1 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	461a      	mov	r2, r3
 8001772:	2123      	movs	r1, #35	; 0x23
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f000 fdb9 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800179a:	f000 fd2f 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800179e:	210f      	movs	r1, #15
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f000 fdb6 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80017ba:	2124      	movs	r1, #36	; 0x24
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f000 fda8 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017cc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2124      	movs	r1, #36	; 0x24
 80017d4:	2032      	movs	r0, #50	; 0x32
 80017d6:	f000 fd89 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80017ec:	2121      	movs	r1, #33	; 0x21
 80017ee:	2032      	movs	r0, #50	; 0x32
 80017f0:	f000 fd8f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4313      	orrs	r3, r2
 8001806:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	461a      	mov	r2, r3
 800180c:	2121      	movs	r1, #33	; 0x21
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f000 fd6c 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001826:	2121      	movs	r1, #33	; 0x21
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f000 fd72 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f023 0308 	bic.w	r3, r3, #8
 8001838:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4313      	orrs	r3, r2
 8001840:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	461a      	mov	r2, r3
 8001846:	2121      	movs	r1, #33	; 0x21
 8001848:	2032      	movs	r0, #50	; 0x32
 800184a:	f000 fd4f 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800185e:	2300      	movs	r3, #0
 8001860:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001866:	2301      	movs	r3, #1
 8001868:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800186a:	2123      	movs	r1, #35	; 0x23
 800186c:	2032      	movs	r0, #50	; 0x32
 800186e:	f000 fd50 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001872:	4603      	mov	r3, r0
 8001874:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001876:	2124      	movs	r1, #36	; 0x24
 8001878:	2032      	movs	r0, #50	; 0x32
 800187a:	f000 fd4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800187e:	4603      	mov	r3, r0
 8001880:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001882:	2128      	movs	r1, #40	; 0x28
 8001884:	2032      	movs	r0, #50	; 0x32
 8001886:	f000 fd44 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800188a:	4603      	mov	r3, r0
 800188c:	b25b      	sxtb	r3, r3
 800188e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001890:	2129      	movs	r1, #41	; 0x29
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f000 fd3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001898:	4603      	mov	r3, r0
 800189a:	b25b      	sxtb	r3, r3
 800189c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800189e:	212a      	movs	r1, #42	; 0x2a
 80018a0:	2032      	movs	r0, #50	; 0x32
 80018a2:	f000 fd36 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80018ac:	212b      	movs	r1, #43	; 0x2b
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f000 fd2f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	2032      	movs	r0, #50	; 0x32
 80018be:	f000 fd28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80018c8:	212d      	movs	r1, #45	; 0x2d
 80018ca:	2032      	movs	r0, #50	; 0x32
 80018cc:	f000 fd21 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80018d6:	7d3b      	ldrb	r3, [r7, #20]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d126      	bne.n	800192e <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
 80018e4:	e01f      	b.n	8001926 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	3301      	adds	r3, #1
 80018ec:	f107 0220 	add.w	r2, r7, #32
 80018f0:	4413      	add	r3, r2
 80018f2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	f107 0120 	add.w	r1, r7, #32
 8001904:	440b      	add	r3, r1
 8001906:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4413      	add	r3, r2
 800190e:	b29a      	uxth	r2, r3
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	b212      	sxth	r2, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f107 0120 	add.w	r1, r7, #32
 800191a:	440b      	add	r3, r1
 800191c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	3301      	adds	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d9dc      	bls.n	80018e6 <LSM303DLHC_AccReadXYZ+0x90>
 800192c:	e025      	b.n	800197a <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	77fb      	strb	r3, [r7, #31]
 8001932:	e01f      	b.n	8001974 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	f107 0220 	add.w	r2, r7, #32
 800193c:	4413      	add	r3, r2
 800193e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	3301      	adds	r3, #1
 800194e:	f107 0120 	add.w	r1, r7, #32
 8001952:	440b      	add	r3, r1
 8001954:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4413      	add	r3, r2
 800195c:	b29a      	uxth	r2, r3
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	b212      	sxth	r2, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	f107 0120 	add.w	r1, r7, #32
 8001968:	440b      	add	r3, r1
 800196a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	3301      	adds	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d9dc      	bls.n	8001934 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800197a:	7d3b      	ldrb	r3, [r7, #20]
 800197c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001980:	2b30      	cmp	r3, #48	; 0x30
 8001982:	d013      	beq.n	80019ac <LSM303DLHC_AccReadXYZ+0x156>
 8001984:	2b30      	cmp	r3, #48	; 0x30
 8001986:	dc14      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001988:	2b20      	cmp	r3, #32
 800198a:	d00c      	beq.n	80019a6 <LSM303DLHC_AccReadXYZ+0x150>
 800198c:	2b20      	cmp	r3, #32
 800198e:	dc10      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <LSM303DLHC_AccReadXYZ+0x144>
 8001994:	2b10      	cmp	r3, #16
 8001996:	d003      	beq.n	80019a0 <LSM303DLHC_AccReadXYZ+0x14a>
 8001998:	e00b      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800199a:	2301      	movs	r3, #1
 800199c:	77bb      	strb	r3, [r7, #30]
    break;
 800199e:	e008      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80019a0:	2302      	movs	r3, #2
 80019a2:	77bb      	strb	r3, [r7, #30]
    break;
 80019a4:	e005      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80019a6:	2304      	movs	r3, #4
 80019a8:	77bb      	strb	r3, [r7, #30]
    break;
 80019aa:	e002      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80019ac:	230c      	movs	r3, #12
 80019ae:	77bb      	strb	r3, [r7, #30]
    break;
 80019b0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	e015      	b.n	80019e4 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	f107 0220 	add.w	r2, r7, #32
 80019c0:	4413      	add	r3, r2
 80019c2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	7fbb      	ldrb	r3, [r7, #30]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	fb12 f303 	smulbb	r3, r2, r3
 80019d0:	b299      	uxth	r1, r3
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	b20a      	sxth	r2, r1
 80019dc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	3301      	adds	r3, #1
 80019e2:	77fb      	strb	r3, [r7, #31]
 80019e4:	7ffb      	ldrb	r3, [r7, #31]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d9e6      	bls.n	80019b8 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001a02:	2121      	movs	r1, #33	; 0x21
 8001a04:	2032      	movs	r0, #50	; 0x32
 8001a06:	f000 fc84 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2121      	movs	r1, #33	; 0x21
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f000 fc61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001a40:	2122      	movs	r1, #34	; 0x22
 8001a42:	2032      	movs	r0, #50	; 0x32
 8001a44:	f000 fc65 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	461a      	mov	r2, r3
 8001a58:	2122      	movs	r1, #34	; 0x22
 8001a5a:	2032      	movs	r0, #50	; 0x32
 8001a5c:	f000 fc46 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001a76:	2138      	movs	r1, #56	; 0x38
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f000 fc4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2138      	movs	r1, #56	; 0x38
 8001a90:	2032      	movs	r0, #50	; 0x32
 8001a92:	f000 fc2b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a96:	230a      	movs	r3, #10
 8001a98:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	213a      	movs	r1, #58	; 0x3a
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f000 fc23 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	461a      	mov	r2, r3
 8001aae:	213b      	movs	r1, #59	; 0x3b
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f000 fc1b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	213c      	movs	r1, #60	; 0x3c
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f000 fc15 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001ac2:	2332      	movs	r3, #50	; 0x32
 8001ac4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	213d      	movs	r1, #61	; 0x3d
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f000 fc0d 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001ade:	f000 fbd7 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001ae2:	2080      	movs	r0, #128	; 0x80
 8001ae4:	f7ff ffa5 	bl	8001a32 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7ff ff83 	bl	80019f4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001aee:	2010      	movs	r0, #16
 8001af0:	f7ff ffba 	bl	8001a68 <LSM303DLHC_AccClickITEnable>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10c      	bne.n	8001b22 <BSP_LED_Init+0x2a>
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6153      	str	r3, [r2, #20]
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	e06e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10c      	bne.n	8001b42 <BSP_LED_Init+0x4a>
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6153      	str	r3, [r2, #20]
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	e05e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d10c      	bne.n	8001b62 <BSP_LED_Init+0x6a>
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b52:	6153      	str	r3, [r2, #20]
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	e04e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d10c      	bne.n	8001b82 <BSP_LED_Init+0x8a>
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b72:	6153      	str	r3, [r2, #20]
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e03e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d10c      	bne.n	8001ba2 <BSP_LED_Init+0xaa>
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	6153      	str	r3, [r2, #20]
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	e02e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d10c      	bne.n	8001bc2 <BSP_LED_Init+0xca>
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <BSP_LED_Init+0x154>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb2:	6153      	str	r3, [r2, #20]
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	e01e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b06      	cmp	r3, #6
 8001bc6:	d10c      	bne.n	8001be2 <BSP_LED_Init+0xea>
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6153      	str	r3, [r2, #20]
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	e00e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d10b      	bne.n	8001c00 <BSP_LED_Init+0x108>
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6153      	str	r3, [r2, #20]
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fd45 	bl	80036b4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f001 ffa7 	bl	8003b90 <HAL_GPIO_WritePin>
}
 8001c42:	bf00      	nop
 8001c44:	3740      	adds	r7, #64	; 0x40
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08009970 	.word	0x08009970
 8001c54:	200000d0 	.word	0x200000d0

08001c58 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <BSP_LED_On+0x2c>)
 8001c66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <BSP_LED_On+0x30>)
 8001c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	f001 ff8b 	bl	8003b90 <HAL_GPIO_WritePin>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000d0 	.word	0x200000d0
 8001c88:	08009970 	.word	0x08009970

08001c8c <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <BSP_LED_Off+0x2c>)
 8001c9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <BSP_LED_Off+0x30>)
 8001ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f001 ff71 	bl	8003b90 <HAL_GPIO_WritePin>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200000d0 	.word	0x200000d0
 8001cbc:	08009970 	.word	0x08009970

08001cc0 <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <BSP_LED_Toggle+0x2c>)
 8001cce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <BSP_LED_Toggle+0x30>)
 8001cd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f001 ff6f 	bl	8003bc0 <HAL_GPIO_TogglePin>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000d0 	.word	0x200000d0
 8001cf0:	08009970 	.word	0x08009970

08001cf4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <BSP_PB_Init+0x2e>
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <BSP_PB_Init+0x70>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	f107 0214 	add.w	r2, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fca8 	bl	80036b4 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d11e      	bne.n	8001da8 <BSP_PB_Init+0xb4>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	f107 0214 	add.w	r2, r7, #20
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 fc92 	bl	80036b4 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001d90:	2306      	movs	r3, #6
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	210f      	movs	r1, #15
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fc54 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001d9e:	2306      	movs	r3, #6
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fc6b 	bl	800367e <HAL_NVIC_EnableIRQ>
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	200000f0 	.word	0x200000f0

08001db8 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <BSP_PB_GetState+0x28>)
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fec6 	bl	8003b60 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000f0 	.word	0x200000f0

08001de4 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df6:	6153      	str	r3, [r2, #20]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001e14:	2304      	movs	r3, #4
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <I2Cx_MspInit+0x64>)
 8001e20:	f001 fc48 	bl	80036b4 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	61d3      	str	r3, [r2, #28]
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e52:	f002 f9d3 	bl	80041fc <HAL_I2C_GetState>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11a      	bne.n	8001e92 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <I2Cx_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e64:	2232      	movs	r2, #50	; 0x32
 8001e66:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e86:	4804      	ldr	r0, [pc, #16]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e88:	f7ff ffac 	bl	8001de4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e8e:	f001 fec9 	bl	8003c24 <HAL_I2C_Init>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200003d4 	.word	0x200003d4
 8001e9c:	40005400 	.word	0x40005400

08001ea0 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	717b      	strb	r3, [r7, #5]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <I2Cx_WriteData+0x48>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	88f9      	ldrh	r1, [r7, #6]
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <I2Cx_WriteData+0x4c>)
 8001ece:	f001 ff67 	bl	8003da0 <HAL_I2C_Mem_Write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001edc:	f000 f834 	bl	8001f48 <I2Cx_Error>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200000f8 	.word	0x200000f8
 8001eec:	200003d4 	.word	0x200003d4

08001ef0 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460a      	mov	r2, r1
 8001efa:	80fb      	strh	r3, [r7, #6]
 8001efc:	4613      	mov	r3, r2
 8001efe:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001f08:	797b      	ldrb	r3, [r7, #5]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <I2Cx_ReadData+0x50>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	88f9      	ldrh	r1, [r7, #6]
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	f107 030e 	add.w	r3, r7, #14
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4808      	ldr	r0, [pc, #32]	; (8001f44 <I2Cx_ReadData+0x54>)
 8001f22:	f002 f851 	bl	8003fc8 <HAL_I2C_Mem_Read>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001f30:	f000 f80a 	bl	8001f48 <I2Cx_Error>
  
  }
  return value;
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000f8 	.word	0x200000f8
 8001f44:	200003d4 	.word	0x200003d4

08001f48 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <I2Cx_Error+0x14>)
 8001f4e:	f001 fef8 	bl	8003d42 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001f52:	f7ff ff7b 	bl	8001e4c <I2Cx_Init>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003d4 	.word	0x200003d4

08001f60 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f64:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <SPIx_Init+0x70>)
 8001f66:	f004 f9ef 	bl	8006348 <HAL_SPI_GetState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d12c      	bne.n	8001fca <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <SPIx_Init+0x70>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <SPIx_Init+0x74>)
 8001f74:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <SPIx_Init+0x70>)
 8001f78:	2218      	movs	r2, #24
 8001f7a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <SPIx_Init+0x70>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <SPIx_Init+0x70>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <SPIx_Init+0x70>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <SPIx_Init+0x70>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <SPIx_Init+0x70>)
 8001f96:	2207      	movs	r2, #7
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <SPIx_Init+0x70>)
 8001f9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa0:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <SPIx_Init+0x70>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <SPIx_Init+0x70>)
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fbc:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc0:	f000 f836 	bl	8002030 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc6:	f003 fed9 	bl	8005d7c <HAL_SPI_Init>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000370 	.word	0x20000370
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SPIx_WriteRead+0x38>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f107 020f 	add.w	r2, r7, #15
 8001fee:	1df9      	adds	r1, r7, #7
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <SPIx_WriteRead+0x3c>)
 8001ff6:	f003 ff94 	bl	8005f22 <HAL_SPI_TransmitReceive>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002000:	f000 f80a 	bl	8002018 <SPIx_Error>
  }
  
  return receivedbyte;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200000f4 	.word	0x200000f4
 8002014:	20000370 	.word	0x20000370

08002018 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <SPIx_Error+0x14>)
 800201e:	f003 ff58 	bl	8005ed2 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8002022:	f7ff ff9d 	bl	8001f60 <SPIx_Init>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000370 	.word	0x20000370

08002030 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <SPIx_MspInit+0x64>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <SPIx_MspInit+0x64>)
 800203e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <SPIx_MspInit+0x64>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <SPIx_MspInit+0x64>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <SPIx_MspInit+0x64>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	6153      	str	r3, [r2, #20]
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <SPIx_MspInit+0x64>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002068:	23e0      	movs	r3, #224	; 0xe0
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002078:	2305      	movs	r3, #5
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f001 fb15 	bl	80036b4 <HAL_GPIO_Init>
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <GYRO_IO_Init+0x84>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <GYRO_IO_Init+0x84>)
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	6153      	str	r3, [r2, #20]
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <GYRO_IO_Init+0x84>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80020b6:	2308      	movs	r3, #8
 80020b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4619      	mov	r1, r3
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <GYRO_IO_Init+0x88>)
 80020ce:	f001 faf1 	bl	80036b4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80020d2:	2201      	movs	r2, #1
 80020d4:	2108      	movs	r1, #8
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <GYRO_IO_Init+0x88>)
 80020d8:	f001 fd5a 	bl	8003b90 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <GYRO_IO_Init+0x84>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <GYRO_IO_Init+0x84>)
 80020e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e6:	6153      	str	r3, [r2, #20]
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <GYRO_IO_Init+0x84>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80020f4:	2303      	movs	r3, #3
 80020f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <GYRO_IO_Init+0x88>)
 800210c:	f001 fad2 	bl	80036b4 <HAL_GPIO_Init>
  
  SPIx_Init();
 8002110:	f7ff ff26 	bl	8001f60 <SPIx_Init>
}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	48001000 	.word	0x48001000

08002124 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
 8002130:	4613      	mov	r3, r2
 8002132:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002134:	883b      	ldrh	r3, [r7, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d903      	bls.n	8002142 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002140:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002142:	2200      	movs	r2, #0
 8002144:	2108      	movs	r1, #8
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <GYRO_IO_Write+0x60>)
 8002148:	f001 fd22 	bl	8003b90 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff42 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002154:	e00a      	b.n	800216c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff3c 	bl	8001fd8 <SPIx_WriteRead>
    NumByteToWrite--;
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800216c:	883b      	ldrh	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f1      	bne.n	8002156 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002172:	2201      	movs	r2, #1
 8002174:	2108      	movs	r1, #8
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <GYRO_IO_Write+0x60>)
 8002178:	f001 fd0a 	bl	8003b90 <HAL_GPIO_WritePin>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	48001000 	.word	0x48001000

08002188 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	4613      	mov	r3, r2
 8002196:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002198:	883b      	ldrh	r3, [r7, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d904      	bls.n	80021a8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80021a4:	70fb      	strb	r3, [r7, #3]
 80021a6:	e003      	b.n	80021b0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ae:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80021b0:	2200      	movs	r2, #0
 80021b2:	2108      	movs	r1, #8
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021b6:	f001 fceb 	bl	8003b90 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff0b 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80021c2:	e00c      	b.n	80021de <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff ff07 	bl	8001fd8 <SPIx_WriteRead>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80021d2:	883b      	ldrh	r3, [r7, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ef      	bne.n	80021c4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80021e4:	2201      	movs	r2, #1
 80021e6:	2108      	movs	r1, #8
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021ea:	f001 fcd1 	bl	8003b90 <HAL_GPIO_WritePin>
}  
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	48001000 	.word	0x48001000

080021fc <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220c:	6153      	str	r3, [r2, #20]
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002224:	6153      	str	r3, [r2, #20]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002232:	2304      	movs	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	4619      	mov	r1, r3
 8002248:	4810      	ldr	r0, [pc, #64]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 800224a:	f001 fa33 	bl	80036b4 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 800224e:	2200      	movs	r2, #0
 8002250:	210f      	movs	r1, #15
 8002252:	2008      	movs	r0, #8
 8002254:	f001 f9f7 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8002258:	2008      	movs	r0, #8
 800225a:	f001 fa10 	bl	800367e <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800225e:	2330      	movs	r3, #48	; 0x30
 8002260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 8002276:	f001 fa1d 	bl	80036b4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800227a:	f7ff fde7 	bl	8001e4c <I2Cx_Init>
}
 800227e:	bf00      	nop
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	48001000 	.word	0x48001000

08002290 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800229c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a0:	6153      	str	r3, [r2, #20]
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80022ae:	2330      	movs	r3, #48	; 0x30
 80022b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80022b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022c6:	f001 f9f5 	bl	80036b4 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80022ca:	2200      	movs	r2, #0
 80022cc:	210f      	movs	r1, #15
 80022ce:	200a      	movs	r0, #10
 80022d0:	f001 f9b9 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80022d4:	200a      	movs	r0, #10
 80022d6:	f001 f9d2 	bl	800367e <HAL_NVIC_EnableIRQ>
  
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48001000 	.word	0x48001000

080022ec <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
 80022f6:	460b      	mov	r3, r1
 80022f8:	717b      	strb	r3, [r7, #5]
 80022fa:	4613      	mov	r3, r2
 80022fc:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80022fe:	793a      	ldrb	r2, [r7, #4]
 8002300:	7979      	ldrb	r1, [r7, #5]
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdcb 	bl	8001ea0 <I2Cx_WriteData>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	460a      	mov	r2, r1
 800231c:	80fb      	strh	r3, [r7, #6]
 800231e:	4613      	mov	r3, r2
 8002320:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002322:	797a      	ldrb	r2, [r7, #5]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fde1 	bl	8001ef0 <I2Cx_ReadData>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002342:	2300      	movs	r3, #0
 8002344:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800234e:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4798      	blx	r3
 8002354:	4603      	mov	r3, r0
 8002356:	2b33      	cmp	r3, #51	; 0x33
 8002358:	d14f      	bne.n	80023fa <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 800235e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002360:	2300      	movs	r3, #0
 8002362:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002368:	2307      	movs	r3, #7
 800236a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 800236c:	2300      	movs	r3, #0
 800236e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002370:	2300      	movs	r3, #0
 8002372:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002374:	2300      	movs	r3, #0
 8002376:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002378:	2308      	movs	r3, #8
 800237a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800237c:	7b3a      	ldrb	r2, [r7, #12]
 800237e:	7b7b      	ldrb	r3, [r7, #13]
 8002380:	4313      	orrs	r3, r2
 8002382:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002384:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002386:	4313      	orrs	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	8abb      	ldrh	r3, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002392:	7c3a      	ldrb	r2, [r7, #16]
 8002394:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002396:	4313      	orrs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	7cbb      	ldrb	r3, [r7, #18]
 800239c:	4313      	orrs	r3, r2
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023a8:	b21a      	sxth	r2, r3
 80023aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	8aba      	ldrh	r2, [r7, #20]
 80023bc:	4610      	mov	r0, r2
 80023be:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80023c4:	2310      	movs	r3, #16
 80023c6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80023d2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80023d8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023da:	4313      	orrs	r3, r2
 80023dc:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80023de:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	8aba      	ldrh	r2, [r7, #20]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	4610      	mov	r0, r2
 80023f2:	4798      	blx	r3

    ret = ACCELERO_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	e054      	b.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4798      	blx	r3
 8002400:	4603      	mov	r3, r0
 8002402:	2b33      	cmp	r3, #51	; 0x33
 8002404:	d14e      	bne.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 800240a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800240c:	2300      	movs	r3, #0
 800240e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002414:	2307      	movs	r3, #7
 8002416:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002418:	2300      	movs	r3, #0
 800241a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800241c:	2300      	movs	r3, #0
 800241e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002420:	2300      	movs	r3, #0
 8002422:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002424:	2308      	movs	r3, #8
 8002426:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002428:	7b3a      	ldrb	r2, [r7, #12]
 800242a:	7b7b      	ldrb	r3, [r7, #13]
 800242c:	4313      	orrs	r3, r2
 800242e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002430:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002432:	4313      	orrs	r3, r2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	b29a      	uxth	r2, r3
 8002438:	8abb      	ldrh	r3, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800243e:	7c3a      	ldrb	r2, [r7, #16]
 8002440:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002442:	4313      	orrs	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	7cbb      	ldrb	r3, [r7, #18]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	4313      	orrs	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002454:	b21a      	sxth	r2, r3
 8002456:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	b21b      	sxth	r3, r3
 800245e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	8aba      	ldrh	r2, [r7, #20]
 8002468:	4610      	mov	r0, r2
 800246a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002470:	2310      	movs	r3, #16
 8002472:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800247c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800247e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002480:	4313      	orrs	r3, r2
 8002482:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002484:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800248a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800248c:	4313      	orrs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	8aba      	ldrh	r2, [r7, #20]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3

    ret = ACCELERO_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000009c 	.word	0x2000009c
 80024b4:	20000420 	.word	0x20000420
 80024b8:	20000068 	.word	0x20000068

080024bc <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000420 	.word	0x20000420

080024e4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80024ee:	2300      	movs	r3, #0
 80024f0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80024f2:	2300      	movs	r3, #0
 80024f4:	703b      	strb	r3, [r7, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80024fa:	4b52      	ldr	r3, [pc, #328]	; (8002644 <BSP_GYRO_Init+0x160>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4798      	blx	r3
 8002500:	4603      	mov	r3, r0
 8002502:	2bd4      	cmp	r3, #212	; 0xd4
 8002504:	d005      	beq.n	8002512 <BSP_GYRO_Init+0x2e>
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4798      	blx	r3
 800250c:	4603      	mov	r3, r0
 800250e:	2bd5      	cmp	r3, #213	; 0xd5
 8002510:	d146      	bne.n	80025a0 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002516:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002518:	2308      	movs	r3, #8
 800251a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800251c:	2300      	movs	r3, #0
 800251e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002520:	2307      	movs	r3, #7
 8002522:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002524:	2330      	movs	r3, #48	; 0x30
 8002526:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002528:	2300      	movs	r3, #0
 800252a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800252c:	2300      	movs	r3, #0
 800252e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002530:	2310      	movs	r3, #16
 8002532:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002534:	793a      	ldrb	r2, [r7, #4]
 8002536:	797b      	ldrb	r3, [r7, #5]
 8002538:	4313      	orrs	r3, r2
 800253a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800253c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800253e:	4313      	orrs	r3, r2
 8002540:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002542:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002544:	4313      	orrs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800254a:	7a3a      	ldrb	r2, [r7, #8]
 800254c:	7a7b      	ldrb	r3, [r7, #9]
 800254e:	4313      	orrs	r3, r2
 8002550:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002552:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002554:	4313      	orrs	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b29a      	uxth	r2, r3
 800255e:	89bb      	ldrh	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002564:	4b38      	ldr	r3, [pc, #224]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	89ba      	ldrh	r2, [r7, #12]
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002570:	2300      	movs	r3, #0
 8002572:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002574:	2300      	movs	r3, #0
 8002576:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002578:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800257a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800257c:	4313      	orrs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	89ba      	ldrh	r2, [r7, #12]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2010      	movs	r0, #16
 8002598:	4798      	blx	r3

    ret = GYRO_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e04b      	b.n	8002638 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <BSP_GYRO_Init+0x168>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4798      	blx	r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	2bd3      	cmp	r3, #211	; 0xd3
 80025aa:	d145      	bne.n	8002638 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <BSP_GYRO_Init+0x164>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <BSP_GYRO_Init+0x168>)
 80025b0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80025b2:	2308      	movs	r3, #8
 80025b4:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80025ba:	2307      	movs	r3, #7
 80025bc:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80025be:	2330      	movs	r3, #48	; 0x30
 80025c0:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80025c2:	2300      	movs	r3, #0
 80025c4:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80025c6:	2300      	movs	r3, #0
 80025c8:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80025ca:	2310      	movs	r3, #16
 80025cc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025ce:	793a      	ldrb	r2, [r7, #4]
 80025d0:	797b      	ldrb	r3, [r7, #5]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025d6:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025de:	4313      	orrs	r3, r2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025e4:	7a3a      	ldrb	r2, [r7, #8]
 80025e6:	7a7b      	ldrb	r3, [r7, #9]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80025ec:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	89bb      	ldrh	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	89ba      	ldrh	r2, [r7, #12]
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800260a:	2300      	movs	r3, #0
 800260c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800260e:	2300      	movs	r3, #0
 8002610:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002612:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002614:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002616:	4313      	orrs	r3, r2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <BSP_GYRO_Init+0x164>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	89ba      	ldrh	r2, [r7, #12]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4610      	mov	r0, r2
 8002628:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <BSP_GYRO_Init+0x164>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	2010      	movs	r0, #16
 8002632:	4798      	blx	r3

    ret = GYRO_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000034 	.word	0x20000034
 8002648:	20000424 	.word	0x20000424
 800264c:	20000000 	.word	0x20000000

08002650 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000424 	.word	0x20000424

08002678 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800268e:	4b40      	ldr	r3, [pc, #256]	; (8002790 <MX_GPIO_Init+0x118>)
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <MX_GPIO_Init+0x118>)
 8002694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002698:	6153      	str	r3, [r2, #20]
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <MX_GPIO_Init+0x118>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a6:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <MX_GPIO_Init+0x118>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4a39      	ldr	r2, [pc, #228]	; (8002790 <MX_GPIO_Init+0x118>)
 80026ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026b0:	6153      	str	r3, [r2, #20]
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <MX_GPIO_Init+0x118>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026be:	4b34      	ldr	r3, [pc, #208]	; (8002790 <MX_GPIO_Init+0x118>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4a33      	ldr	r2, [pc, #204]	; (8002790 <MX_GPIO_Init+0x118>)
 80026c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026c8:	6153      	str	r3, [r2, #20]
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <MX_GPIO_Init+0x118>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <MX_GPIO_Init+0x118>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <MX_GPIO_Init+0x118>)
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	6153      	str	r3, [r2, #20]
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <MX_GPIO_Init+0x118>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <MX_GPIO_Init+0x118>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4a27      	ldr	r2, [pc, #156]	; (8002790 <MX_GPIO_Init+0x118>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6153      	str	r3, [r2, #20]
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <MX_GPIO_Init+0x118>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002706:	2200      	movs	r2, #0
 8002708:	f64f 7108 	movw	r1, #65288	; 0xff08
 800270c:	4821      	ldr	r0, [pc, #132]	; (8002794 <MX_GPIO_Init+0x11c>)
 800270e:	f001 fa3f 	bl	8003b90 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002712:	2337      	movs	r3, #55	; 0x37
 8002714:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002716:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800271a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4619      	mov	r1, r3
 8002726:	481b      	ldr	r0, [pc, #108]	; (8002794 <MX_GPIO_Init+0x11c>)
 8002728:	f000 ffc4 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800272c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002730:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	4813      	ldr	r0, [pc, #76]	; (8002794 <MX_GPIO_Init+0x11c>)
 8002746:	f000 ffb5 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800274a:	2301      	movs	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002760:	f000 ffa8 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002764:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002776:	230e      	movs	r3, #14
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f000 ff96 	bl	80036b4 <HAL_GPIO_Init>

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	48001000 	.word	0x48001000

08002798 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_I2C1_Init+0x74>)
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <MX_I2C1_Init+0x78>)
 80027a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_I2C1_Init+0x74>)
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <MX_I2C1_Init+0x7c>)
 80027a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_I2C1_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <MX_I2C1_Init+0x74>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <MX_I2C1_Init+0x74>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_I2C1_Init+0x74>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <MX_I2C1_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_I2C1_Init+0x74>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <MX_I2C1_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027d2:	480e      	ldr	r0, [pc, #56]	; (800280c <MX_I2C1_Init+0x74>)
 80027d4:	f001 fa26 	bl	8003c24 <HAL_I2C_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027de:	f000 f9ad 	bl	8002b3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027e2:	2100      	movs	r1, #0
 80027e4:	4809      	ldr	r0, [pc, #36]	; (800280c <MX_I2C1_Init+0x74>)
 80027e6:	f001 ff43 	bl	8004670 <HAL_I2CEx_ConfigAnalogFilter>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027f0:	f000 f9a4 	bl	8002b3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027f4:	2100      	movs	r1, #0
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_I2C1_Init+0x74>)
 80027f8:	f001 ff85 	bl	8004706 <HAL_I2CEx_ConfigDigitalFilter>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002802:	f000 f99b 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000438 	.word	0x20000438
 8002810:	40005400 	.word	0x40005400
 8002814:	2000090e 	.word	0x2000090e

08002818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <HAL_I2C_MspInit+0x7c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d127      	bne.n	800288a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_I2C_MspInit+0x80>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_I2C_MspInit+0x80>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6153      	str	r3, [r2, #20]
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_I2C_MspInit+0x80>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002856:	2312      	movs	r3, #18
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002862:	2304      	movs	r3, #4
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	480b      	ldr	r0, [pc, #44]	; (800289c <HAL_I2C_MspInit+0x84>)
 800286e:	f000 ff21 	bl	80036b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_I2C_MspInit+0x80>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_I2C_MspInit+0x80>)
 8002878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800287c:	61d3      	str	r3, [r2, #28]
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_I2C_MspInit+0x80>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40005400 	.word	0x40005400
 8002898:	40021000 	.word	0x40021000
 800289c:	48000400 	.word	0x48000400

080028a0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_I2C_MspDeInit+0x38>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10d      	bne.n	80028ce <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_I2C_MspDeInit+0x3c>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_I2C_MspDeInit+0x3c>)
 80028b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028bc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 80028be:	2140      	movs	r1, #64	; 0x40
 80028c0:	4807      	ldr	r0, [pc, #28]	; (80028e0 <HAL_I2C_MspDeInit+0x40>)
 80028c2:	f001 f871 	bl	80039a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	4805      	ldr	r0, [pc, #20]	; (80028e0 <HAL_I2C_MspDeInit+0x40>)
 80028ca:	f001 f86d 	bl	80039a8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40005400 	.word	0x40005400
 80028dc:	40021000 	.word	0x40021000
 80028e0:	48000400 	.word	0x48000400

080028e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e8:	f000 fd48 	bl	800337c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ec:	f000 f870 	bl	80029d0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f0:	f7ff fec2 	bl	8002678 <MX_GPIO_Init>
  MX_I2C1_Init();
 80028f4:	f7ff ff50 	bl	8002798 <MX_I2C1_Init>
  MX_SPI1_Init();
 80028f8:	f000 fada 	bl	8002eb0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80028fc:	f000 fca0 	bl	8003240 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED4);
 8002900:	2001      	movs	r0, #1
 8002902:	f7ff f8f9 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff f8f6 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 800290c:	2002      	movs	r0, #2
 800290e:	f7ff f8f3 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 8002912:	2004      	movs	r0, #4
 8002914:	f7ff f8f0 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 8002918:	2006      	movs	r0, #6
 800291a:	f7ff f8ed 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 800291e:	2007      	movs	r0, #7
 8002920:	f7ff f8ea 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 8002924:	2005      	movs	r0, #5
 8002926:	f7ff f8e7 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 800292a:	2003      	movs	r0, #3
 800292c:	f7ff f8e4 	bl	8001af8 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002930:	2101      	movs	r1, #1
 8002932:	2000      	movs	r0, #0
 8002934:	f7ff f9de 	bl	8001cf4 <BSP_PB_Init>

  while (!UserPressButton) Toggle_Leds();
 8002938:	e001      	b.n	800293e <main+0x5a>
 800293a:	f000 f8b9 	bl	8002ab0 <Toggle_Leds>
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <main+0xe0>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f8      	beq.n	800293a <main+0x56>
  BSP_LED_Off(LED3);
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff f99f 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 800294e:	2001      	movs	r0, #1
 8002950:	f7ff f99c 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8002954:	2002      	movs	r0, #2
 8002956:	f7ff f999 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 800295a:	2003      	movs	r0, #3
 800295c:	f7ff f996 	bl	8001c8c <BSP_LED_Off>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1,data,7,HAL_MAX_DELAY);

	  UserPressButton = 0;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <main+0xe0>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
	  BSP_examples[DemoIndex++].DemoFunc();
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <main+0xe4>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	b2d1      	uxtb	r1, r2
 800296e:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <main+0xe4>)
 8002970:	7011      	strb	r1, [r2, #0]
 8002972:	4619      	mov	r1, r3
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <main+0xe8>)
 8002976:	460b      	mov	r3, r1
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a5b      	subs	r3, r3, r1
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4798      	blx	r3

	  /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
	  if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <main+0xe4>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d902      	bls.n	8002992 <main+0xae>
	  {
		DemoIndex = 0;
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <main+0xe4>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
	  }
	  /* Toggle LEDs between each Test */
	  UserPressButton = 0;
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <main+0xe0>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
	  while (!UserPressButton) Toggle_Leds();
 8002998:	e001      	b.n	800299e <main+0xba>
 800299a:	f000 f889 	bl	8002ab0 <Toggle_Leds>
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <main+0xe0>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f8      	beq.n	800299a <main+0xb6>
	  BSP_LED_Off(LED3);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7ff f96f 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED4);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff f96c 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED5);
 80029b4:	2002      	movs	r0, #2
 80029b6:	f7ff f969 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED6);
 80029ba:	2003      	movs	r0, #3
 80029bc:	f7ff f966 	bl	8001c8c <BSP_LED_Off>
	  UserPressButton = 0;
 80029c0:	e7ce      	b.n	8002960 <main+0x7c>
 80029c2:	bf00      	nop
 80029c4:	20000429 	.word	0x20000429
 80029c8:	20000428 	.word	0x20000428
 80029cc:	200000fc 	.word	0x200000fc

080029d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b09e      	sub	sp, #120	; 0x78
 80029d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029da:	2228      	movs	r2, #40	; 0x28
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fab4 	bl	8006f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029f4:	463b      	mov	r3, r7
 80029f6:	223c      	movs	r2, #60	; 0x3c
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 faa6 	bl	8006f4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a00:	2302      	movs	r3, #2
 8002a02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a04:	2301      	movs	r3, #1
 8002a06:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a08:	2310      	movs	r3, #16
 8002a0a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a10:	2300      	movs	r3, #0
 8002a12:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002a14:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002a18:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 febe 	bl	80047a0 <HAL_RCC_OscConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002a2a:	f000 f887 	bl	8002b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a2e:	230f      	movs	r3, #15
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a32:	2302      	movs	r3, #2
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fdb0 	bl	80055b0 <HAL_RCC_ClockConfig>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002a56:	f000 f871 	bl	8002b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002a5a:	2321      	movs	r3, #33	; 0x21
 8002a5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a66:	463b      	mov	r3, r7
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f002 ffd7 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002a74:	f000 f862 	bl	8002b3c <Error_Handler>
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3778      	adds	r7, #120	; 0x78
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	80fb      	strh	r3, [r7, #6]
  if (USER_BUTTON_PIN == GPIO_Pin)
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d109      	bne.n	8002aa4 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 8002a90:	bf00      	nop
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7ff f990 	bl	8001db8 <BSP_PB_GetState>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f9      	bne.n	8002a92 <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8002a9e:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_GPIO_EXTI_Callback+0x2c>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000429 	.word	0x20000429

08002ab0 <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED3);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff f903 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002aba:	2064      	movs	r0, #100	; 0x64
 8002abc:	f000 fcc4 	bl	8003448 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff f8fd 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002ac6:	2064      	movs	r0, #100	; 0x64
 8002ac8:	f000 fcbe 	bl	8003448 <HAL_Delay>
    BSP_LED_Toggle(LED6);
 8002acc:	2003      	movs	r0, #3
 8002ace:	f7ff f8f7 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002ad2:	2064      	movs	r0, #100	; 0x64
 8002ad4:	f000 fcb8 	bl	8003448 <HAL_Delay>
    BSP_LED_Toggle(LED8);
 8002ad8:	2005      	movs	r0, #5
 8002ada:	f7ff f8f1 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002ade:	2064      	movs	r0, #100	; 0x64
 8002ae0:	f000 fcb2 	bl	8003448 <HAL_Delay>
    BSP_LED_Toggle(LED10);
 8002ae4:	2007      	movs	r0, #7
 8002ae6:	f7ff f8eb 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002aea:	2064      	movs	r0, #100	; 0x64
 8002aec:	f000 fcac 	bl	8003448 <HAL_Delay>
    BSP_LED_Toggle(LED9);
 8002af0:	2006      	movs	r0, #6
 8002af2:	f7ff f8e5 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002af6:	2064      	movs	r0, #100	; 0x64
 8002af8:	f000 fca6 	bl	8003448 <HAL_Delay>
    BSP_LED_Toggle(LED7);
 8002afc:	2004      	movs	r0, #4
 8002afe:	f7ff f8df 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002b02:	2064      	movs	r0, #100	; 0x64
 8002b04:	f000 fca0 	bl	8003448 <HAL_Delay>
    BSP_LED_Toggle(LED5);
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f7ff f8d9 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002b0e:	2064      	movs	r0, #100	; 0x64
 8002b10:	f000 fc9a 	bl	8003448 <HAL_Delay>
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <__io_putchar>:


int __io_putchar(int ch)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t *)&ch , 1 , 0xFFFF);
 8002b20:	1d39      	adds	r1, r7, #4
 8002b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b26:	2201      	movs	r2, #1
 8002b28:	4803      	ldr	r0, [pc, #12]	; (8002b38 <__io_putchar+0x20>)
 8002b2a:	f003 fdcd 	bl	80066c8 <HAL_UART_Transmit>
	return ch;
 8002b2e:	687b      	ldr	r3, [r7, #4]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200004e8 	.word	0x200004e8

08002b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 8002b40:	2007      	movs	r0, #7
 8002b42:	f7ff f889 	bl	8001c58 <BSP_LED_On>
    BSP_LED_On(LED3);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7ff f886 	bl	8001c58 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b4c:	b672      	cpsid	i
}
 8002b4e:	bf00      	nop
  __disable_irq();
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <Error_Handler+0x14>
	...

08002b54 <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
  {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002b58:	f7ff fbee 	bl	8002338 <BSP_ACCELERO_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002b62:	f7ff ffeb 	bl	8002b3c <Error_Handler>
  }
  
  UserPressButton = 0;
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <ACCELERO_MEMS_Test+0x30>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002b6c:	e001      	b.n	8002b72 <ACCELERO_MEMS_Test+0x1e>
  {
    ACCELERO_ReadAcc();
 8002b6e:	f000 f80b 	bl	8002b88 <ACCELERO_ReadAcc>
  while(!UserPressButton)
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <ACCELERO_MEMS_Test+0x30>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f8      	beq.n	8002b6e <ACCELERO_MEMS_Test+0x1a>
  }
}  
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000429 	.word	0x20000429

08002b88 <ACCELERO_ReadAcc>:

static void ACCELERO_ReadAcc(void)
{
 8002b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af04      	add	r7, sp, #16
  int16_t buffer[3] = {0};
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval = 0x00;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	81fb      	strh	r3, [r7, #14]
  
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fc8c 	bl	80024bc <BSP_ACCELERO_GetXYZ>
 
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	81bb      	strh	r3, [r7, #12]
  yval = buffer[1];
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	81fb      	strh	r3, [r7, #14]

  //printf("x: %6d \t y: %6d \t z: %6d \r\n",buffer[0],buffer[1],buffer[2]);
  printf("x: %.3f g \t y: %.3f g \t z: %.3f g \r\n",
		  0.061035*buffer[0]/1000, 0.061035*buffer[1]/1000, 0.061035*buffer[2]/1000);
 8002bac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fcb7 	bl	8000524 <__aeabi_i2d>
 8002bb6:	a35a      	add	r3, pc, #360	; (adr r3, 8002d20 <ACCELERO_ReadAcc+0x198>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fd1c 	bl	80005f8 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
  printf("x: %.3f g \t y: %.3f g \t z: %.3f g \r\n",
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	4b56      	ldr	r3, [pc, #344]	; (8002d28 <ACCELERO_ReadAcc+0x1a0>)
 8002bce:	f7fd fe3d 	bl	800084c <__aeabi_ddiv>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	4699      	mov	r9, r3
		  0.061035*buffer[0]/1000, 0.061035*buffer[1]/1000, 0.061035*buffer[2]/1000);
 8002bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fca0 	bl	8000524 <__aeabi_i2d>
 8002be4:	a34e      	add	r3, pc, #312	; (adr r3, 8002d20 <ACCELERO_ReadAcc+0x198>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fd05 	bl	80005f8 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
  printf("x: %.3f g \t y: %.3f g \t z: %.3f g \r\n",
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <ACCELERO_ReadAcc+0x1a0>)
 8002bfc:	f7fd fe26 	bl	800084c <__aeabi_ddiv>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4614      	mov	r4, r2
 8002c06:	461d      	mov	r5, r3
		  0.061035*buffer[0]/1000, 0.061035*buffer[1]/1000, 0.061035*buffer[2]/1000);
 8002c08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fc89 	bl	8000524 <__aeabi_i2d>
 8002c12:	a343      	add	r3, pc, #268	; (adr r3, 8002d20 <ACCELERO_ReadAcc+0x198>)
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f7fd fcee 	bl	80005f8 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
  printf("x: %.3f g \t y: %.3f g \t z: %.3f g \r\n",
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	4b3f      	ldr	r3, [pc, #252]	; (8002d28 <ACCELERO_ReadAcc+0x1a0>)
 8002c2a:	f7fd fe0f 	bl	800084c <__aeabi_ddiv>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c36:	e9cd 4500 	strd	r4, r5, [sp]
 8002c3a:	4642      	mov	r2, r8
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	483b      	ldr	r0, [pc, #236]	; (8002d2c <ACCELERO_ReadAcc+0x1a4>)
 8002c40:	f004 fdf6 	bl	8007830 <iprintf>
  HAL_Delay(500);
 8002c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c48:	f000 fbfe 	bl	8003448 <HAL_Delay>

  if((ABS(xval))>(ABS(yval)))
 8002c4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bfb8      	it	lt
 8002c54:	425b      	neglt	r3, r3
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bfb8      	it	lt
 8002c60:	425b      	neglt	r3, r3
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d91f      	bls.n	8002ca8 <ACCELERO_ReadAcc+0x120>
  {
    if(xval > ThresholdHigh)
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <ACCELERO_ReadAcc+0x1a8>)
 8002c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dd06      	ble.n	8002c84 <ACCELERO_ReadAcc+0xfc>
    { 
      /* LED10 On */
      BSP_LED_On(LED10);
 8002c76:	2007      	movs	r0, #7
 8002c78:	f7fe ffee 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002c7c:	200a      	movs	r0, #10
 8002c7e:	f000 fbe3 	bl	8003448 <HAL_Delay>
 8002c82:	e030      	b.n	8002ce6 <ACCELERO_ReadAcc+0x15e>
    }
    else if(xval < ThresholdLow)
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <ACCELERO_ReadAcc+0x1ac>)
 8002c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	da06      	bge.n	8002ca0 <ACCELERO_ReadAcc+0x118>
    { 
      /* LED3 On */
      BSP_LED_On(LED3);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fe ffe0 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002c98:	200a      	movs	r0, #10
 8002c9a:	f000 fbd5 	bl	8003448 <HAL_Delay>
 8002c9e:	e022      	b.n	8002ce6 <ACCELERO_ReadAcc+0x15e>
    }
    else
    { 
      HAL_Delay(10);
 8002ca0:	200a      	movs	r0, #10
 8002ca2:	f000 fbd1 	bl	8003448 <HAL_Delay>
 8002ca6:	e01e      	b.n	8002ce6 <ACCELERO_ReadAcc+0x15e>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <ACCELERO_ReadAcc+0x1ac>)
 8002caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	da06      	bge.n	8002cc4 <ACCELERO_ReadAcc+0x13c>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 8002cb6:	2003      	movs	r0, #3
 8002cb8:	f7fe ffce 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002cbc:	200a      	movs	r0, #10
 8002cbe:	f000 fbc3 	bl	8003448 <HAL_Delay>
 8002cc2:	e010      	b.n	8002ce6 <ACCELERO_ReadAcc+0x15e>
    }
    else if(yval > ThresholdHigh)
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <ACCELERO_ReadAcc+0x1a8>)
 8002cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dd06      	ble.n	8002ce0 <ACCELERO_ReadAcc+0x158>
    {
      /* LED7 On */
      BSP_LED_On(LED7);
 8002cd2:	2004      	movs	r0, #4
 8002cd4:	f7fe ffc0 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002cd8:	200a      	movs	r0, #10
 8002cda:	f000 fbb5 	bl	8003448 <HAL_Delay>
 8002cde:	e002      	b.n	8002ce6 <ACCELERO_ReadAcc+0x15e>
    } 
    else
  {	    
      HAL_Delay(10);
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	f000 fbb1 	bl	8003448 <HAL_Delay>
    }
  } 
  
     BSP_LED_Off(LED3);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe ffd0 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED6);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f7fe ffcd 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED7);
 8002cf2:	2004      	movs	r0, #4
 8002cf4:	f7fe ffca 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED4);
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7fe ffc7 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED10);
 8002cfe:	2007      	movs	r0, #7
 8002d00:	f7fe ffc4 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED8);
 8002d04:	2005      	movs	r0, #5
 8002d06:	f7fe ffc1 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED9);
 8002d0a:	2006      	movs	r0, #6
 8002d0c:	f7fe ffbe 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED5);
 8002d10:	2002      	movs	r0, #2
 8002d12:	f7fe ffbb 	bl	8001c8c <BSP_LED_Off>
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d20:	c1d29dc7 	.word	0xc1d29dc7
 8002d24:	3faf3ffa 	.word	0x3faf3ffa
 8002d28:	408f4000 	.word	0x408f4000
 8002d2c:	08009948 	.word	0x08009948
 8002d30:	20000174 	.word	0x20000174
 8002d34:	20000176 	.word	0x20000176

08002d38 <GYRO_MEMS_Test>:
  *   MEMS peripheral.
  * @param None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002d3c:	f7ff fafc 	bl	8002338 <BSP_ACCELERO_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <GYRO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002d46:	f7ff fef9 	bl	8002b3c <Error_Handler>
  }
  
  UserPressButton = 0;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <GYRO_MEMS_Test+0x30>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002d50:	e001      	b.n	8002d56 <GYRO_MEMS_Test+0x1e>
  {
    GYRO_ReadAng();
 8002d52:	f000 f80b 	bl	8002d6c <GYRO_ReadAng>
  while(!UserPressButton)
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <GYRO_MEMS_Test+0x30>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f8      	beq.n	8002d52 <GYRO_MEMS_Test+0x1a>
  }
}  
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000429 	.word	0x20000429

08002d6c <GYRO_ReadAng>:

static void GYRO_ReadAng(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
  /* Gyroscope variable */
  float Buffer[3];
  float Xval,Yval = 0x00;
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  /* Init Gyroscope Mems */
  if(BSP_GYRO_Init() != HAL_OK)
 8002d78:	f7ff fbb4 	bl	80024e4 <BSP_GYRO_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <GYRO_ReadAng+0x1a>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002d82:	f7ff fedb 	bl	8002b3c <Error_Handler>
  }

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fc61 	bl	8002650 <BSP_GYRO_GetXYZ>
     
  /* Update autoreload and capture compare registers value*/
  Xval = ABS((Buffer[0]));
 8002d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d504      	bpl.n	8002da6 <GYRO_ReadAng+0x3a>
 8002d9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002da0:	eef1 7a67 	vneg.f32	s15, s15
 8002da4:	e001      	b.n	8002daa <GYRO_ReadAng+0x3e>
 8002da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002daa:	edc7 7a04 	vstr	s15, [r7, #16]
  Yval = ABS((Buffer[1])); 
 8002dae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d504      	bpl.n	8002dc6 <GYRO_ReadAng+0x5a>
 8002dbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc0:	eef1 7a67 	vneg.f32	s15, s15
 8002dc4:	e001      	b.n	8002dca <GYRO_ReadAng+0x5e>
 8002dc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dca:	edc7 7a05 	vstr	s15, [r7, #20]
      
  if(Xval>Yval)
 8002dce:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	dd23      	ble.n	8002e28 <GYRO_ReadAng+0xbc>
   {
    if(Buffer[0] > 5000.0f)
 8002de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002de4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002ea8 <GYRO_ReadAng+0x13c>
 8002de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df0:	dd06      	ble.n	8002e00 <GYRO_ReadAng+0x94>
     { 
        /* LD10 On */
        BSP_LED_On(LED10);
 8002df2:	2007      	movs	r0, #7
 8002df4:	f7fe ff30 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8002df8:	200a      	movs	r0, #10
 8002dfa:	f000 fb25 	bl	8003448 <HAL_Delay>
 8002dfe:	e036      	b.n	8002e6e <GYRO_ReadAng+0x102>
     }
     else if(Buffer[0] < -5000.0f)
 8002e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e04:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002eac <GYRO_ReadAng+0x140>
 8002e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	d506      	bpl.n	8002e20 <GYRO_ReadAng+0xb4>
     { 
        /* LED3 On */
        BSP_LED_On(LED3);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe ff20 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8002e18:	200a      	movs	r0, #10
 8002e1a:	f000 fb15 	bl	8003448 <HAL_Delay>
 8002e1e:	e026      	b.n	8002e6e <GYRO_ReadAng+0x102>
     }      
    else
    { 
      HAL_Delay(10);
 8002e20:	200a      	movs	r0, #10
 8002e22:	f000 fb11 	bl	8003448 <HAL_Delay>
 8002e26:	e022      	b.n	8002e6e <GYRO_ReadAng+0x102>
    }
   }
  else
   {
    if(Buffer[1] < -5000.0f)
 8002e28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e2c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002eac <GYRO_ReadAng+0x140>
 8002e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	d506      	bpl.n	8002e48 <GYRO_ReadAng+0xdc>
     {
        /* LD6 on */
        BSP_LED_On(LED6);           
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	f7fe ff0c 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8002e40:	200a      	movs	r0, #10
 8002e42:	f000 fb01 	bl	8003448 <HAL_Delay>
 8002e46:	e012      	b.n	8002e6e <GYRO_ReadAng+0x102>
     }
    else if(Buffer[1] > 5000.0f)
 8002e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e4c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002ea8 <GYRO_ReadAng+0x13c>
 8002e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	dd06      	ble.n	8002e68 <GYRO_ReadAng+0xfc>
     {
        /* LD7 On */
        BSP_LED_On(LED7);        
 8002e5a:	2004      	movs	r0, #4
 8002e5c:	f7fe fefc 	bl	8001c58 <BSP_LED_On>
	HAL_Delay(10);
 8002e60:	200a      	movs	r0, #10
 8002e62:	f000 faf1 	bl	8003448 <HAL_Delay>
 8002e66:	e002      	b.n	8002e6e <GYRO_ReadAng+0x102>
     }     
        else
        { 
            HAL_Delay(10);
 8002e68:	200a      	movs	r0, #10
 8002e6a:	f000 faed 	bl	8003448 <HAL_Delay>
        }  	
      } 
    BSP_LED_Off(LED3);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fe ff0c 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8002e74:	2003      	movs	r0, #3
 8002e76:	f7fe ff09 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED7);
 8002e7a:	2004      	movs	r0, #4
 8002e7c:	f7fe ff06 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7fe ff03 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED10);
 8002e86:	2007      	movs	r0, #7
 8002e88:	f7fe ff00 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED8);
 8002e8c:	2005      	movs	r0, #5
 8002e8e:	f7fe fefd 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED9);
 8002e92:	2006      	movs	r0, #6
 8002e94:	f7fe fefa 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8002e98:	2002      	movs	r0, #2
 8002e9a:	f7fe fef7 	bl	8001c8c <BSP_LED_Off>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	459c4000 	.word	0x459c4000
 8002eac:	c59c4000 	.word	0xc59c4000

08002eb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <MX_SPI1_Init+0x78>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002eca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ece:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002efe:	2207      	movs	r2, #7
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_SPI1_Init+0x74>)
 8002f10:	f002 ff34 	bl	8005d7c <HAL_SPI_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f1a:	f7ff fe0f 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000484 	.word	0x20000484
 8002f28:	40013000 	.word	0x40013000

08002f2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_SPI_MspInit+0x7c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d128      	bne.n	8002fa0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_SPI_MspInit+0x80>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	4a16      	ldr	r2, [pc, #88]	; (8002fac <HAL_SPI_MspInit+0x80>)
 8002f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f58:	6193      	str	r3, [r2, #24]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <HAL_SPI_MspInit+0x80>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_SPI_MspInit+0x80>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_SPI_MspInit+0x80>)
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	6153      	str	r3, [r2, #20]
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_SPI_MspInit+0x80>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002f7e:	23e0      	movs	r3, #224	; 0xe0
 8002f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f8e:	2305      	movs	r3, #5
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f9c:	f000 fb8a 	bl	80036b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3728      	adds	r7, #40	; 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013000 	.word	0x40013000
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a08      	ldr	r2, [pc, #32]	; (8002fe0 <HAL_SPI_MspDeInit+0x30>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_SPI_MspDeInit+0x34>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	4a07      	ldr	r2, [pc, #28]	; (8002fe4 <HAL_SPI_MspDeInit+0x34>)
 8002fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fcc:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8002fce:	21e0      	movs	r1, #224	; 0xe0
 8002fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd4:	f000 fce8 	bl	80039a8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40013000 	.word	0x40013000
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_MspInit+0x44>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_MspInit+0x44>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6193      	str	r3, [r2, #24]
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_MspInit+0x44>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_MspInit+0x44>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <HAL_MspInit+0x44>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	61d3      	str	r3, [r2, #28]
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_MspInit+0x44>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800301e:	2007      	movs	r0, #7
 8003020:	f000 fb06 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000

08003030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <NMI_Handler+0x4>

08003036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <HardFault_Handler+0x4>

0800303c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <MemManage_Handler+0x4>

08003042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003046:	e7fe      	b.n	8003046 <BusFault_Handler+0x4>

08003048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800304c:	e7fe      	b.n	800304c <UsageFault_Handler+0x4>

0800304e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800307c:	f000 f9c4 	bl	8003408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}

08003084 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8003088:	2001      	movs	r0, #1
 800308a:	f000 fdb3 	bl	8003bf4 <HAL_GPIO_EXTI_IRQHandler>
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}

08003092 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
	return 1;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_kill>:

int _kill(int pid, int sig)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030ac:	f003 ff24 	bl	8006ef8 <__errno>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2216      	movs	r2, #22
 80030b4:	601a      	str	r2, [r3, #0]
	return -1;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_exit>:

void _exit (int status)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030ca:	f04f 31ff 	mov.w	r1, #4294967295
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffe7 	bl	80030a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030d4:	e7fe      	b.n	80030d4 <_exit+0x12>

080030d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e00a      	b.n	80030fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030e8:	f3af 8000 	nop.w
 80030ec:	4601      	mov	r1, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	60ba      	str	r2, [r7, #8]
 80030f4:	b2ca      	uxtb	r2, r1
 80030f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3301      	adds	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	dbf0      	blt.n	80030e8 <_read+0x12>
	}

return len;
 8003106:	687b      	ldr	r3, [r7, #4]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e009      	b.n	8003136 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fcf4 	bl	8002b18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3301      	adds	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	dbf1      	blt.n	8003122 <_write+0x12>
	}
	return len;
 800313e:	687b      	ldr	r3, [r7, #4]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <_close>:

int _close(int file)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	return -1;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003170:	605a      	str	r2, [r3, #4]
	return 0;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <_isatty>:

int _isatty(int file)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	return 1;
 8003188:	2301      	movs	r3, #1
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
	return 0;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <_sbrk+0x5c>)
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <_sbrk+0x60>)
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <_sbrk+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <_sbrk+0x64>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <_sbrk+0x68>)
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <_sbrk+0x64>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d207      	bcs.n	80031f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e0:	f003 fe8a 	bl	8006ef8 <__errno>
 80031e4:	4603      	mov	r3, r0
 80031e6:	220c      	movs	r2, #12
 80031e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	e009      	b.n	8003204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <_sbrk+0x64>)
 8003200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	2000a000 	.word	0x2000a000
 8003210:	00000400 	.word	0x00000400
 8003214:	2000042c 	.word	0x2000042c
 8003218:	20000580 	.word	0x20000580

0800321c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <SystemInit+0x20>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <SystemInit+0x20>)
 8003228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800322c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <MX_USART1_UART_Init+0x58>)
 8003246:	4a15      	ldr	r2, [pc, #84]	; (800329c <MX_USART1_UART_Init+0x5c>)
 8003248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <MX_USART1_UART_Init+0x58>)
 800324c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <MX_USART1_UART_Init+0x58>)
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <MX_USART1_UART_Init+0x58>)
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <MX_USART1_UART_Init+0x58>)
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <MX_USART1_UART_Init+0x58>)
 8003266:	220c      	movs	r2, #12
 8003268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <MX_USART1_UART_Init+0x58>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <MX_USART1_UART_Init+0x58>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <MX_USART1_UART_Init+0x58>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <MX_USART1_UART_Init+0x58>)
 800327e:	2200      	movs	r2, #0
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003282:	4805      	ldr	r0, [pc, #20]	; (8003298 <MX_USART1_UART_Init+0x58>)
 8003284:	f003 f9d2 	bl	800662c <HAL_UART_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800328e:	f7ff fc55 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200004e8 	.word	0x200004e8
 800329c:	40013800 	.word	0x40013800

080032a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a17      	ldr	r2, [pc, #92]	; (800331c <HAL_UART_MspInit+0x7c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d127      	bne.n	8003312 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_UART_MspInit+0x80>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4a16      	ldr	r2, [pc, #88]	; (8003320 <HAL_UART_MspInit+0x80>)
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6193      	str	r3, [r2, #24]
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_UART_MspInit+0x80>)
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_UART_MspInit+0x80>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_UART_MspInit+0x80>)
 80032e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032e4:	6153      	str	r3, [r2, #20]
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_UART_MspInit+0x80>)
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032f2:	2330      	movs	r3, #48	; 0x30
 80032f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032fe:	2303      	movs	r3, #3
 8003300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003302:	2307      	movs	r3, #7
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	4619      	mov	r1, r3
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <HAL_UART_MspInit+0x84>)
 800330e:	f000 f9d1 	bl	80036b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40013800 	.word	0x40013800
 8003320:	40021000 	.word	0x40021000
 8003324:	48000800 	.word	0x48000800

08003328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003360 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <LoopForever+0x6>)
  ldr r1, =_edata
 800332e:	490e      	ldr	r1, [pc, #56]	; (8003368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <LoopForever+0xe>)
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003334:	e002      	b.n	800333c <LoopCopyDataInit>

08003336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333a:	3304      	adds	r3, #4

0800333c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800333c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800333e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003340:	d3f9      	bcc.n	8003336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003344:	4c0b      	ldr	r4, [pc, #44]	; (8003374 <LoopForever+0x16>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003348:	e001      	b.n	800334e <LoopFillZerobss>

0800334a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800334c:	3204      	adds	r2, #4

0800334e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800334e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003350:	d3fb      	bcc.n	800334a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003352:	f7ff ff63 	bl	800321c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003356:	f003 fdd5 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800335a:	f7ff fac3 	bl	80028e4 <main>

0800335e <LoopForever>:

LoopForever:
    b LoopForever
 800335e:	e7fe      	b.n	800335e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003360:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003368:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 800336c:	08009da4 	.word	0x08009da4
  ldr r2, =_sbss
 8003370:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8003374:	20000580 	.word	0x20000580

08003378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003378:	e7fe      	b.n	8003378 <ADC1_2_IRQHandler>
	...

0800337c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_Init+0x28>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_Init+0x28>)
 8003386:	f043 0310 	orr.w	r3, r3, #16
 800338a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800338c:	2003      	movs	r0, #3
 800338e:	f000 f94f 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003392:	2000      	movs	r0, #0
 8003394:	f000 f808 	bl	80033a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003398:	f7ff fe26 	bl	8002fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40022000 	.word	0x40022000

080033a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_InitTick+0x54>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_InitTick+0x58>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033be:	fbb3 f3f1 	udiv	r3, r3, r1
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f967 	bl	800369a <HAL_SYSTICK_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00e      	b.n	80033f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d80a      	bhi.n	80033f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033dc:	2200      	movs	r2, #0
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f000 f92f 	bl	8003646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e8:	4a06      	ldr	r2, [pc, #24]	; (8003404 <HAL_InitTick+0x5c>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e000      	b.n	80033f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000178 	.word	0x20000178
 8003400:	20000180 	.word	0x20000180
 8003404:	2000017c 	.word	0x2000017c

08003408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_IncTick+0x20>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x24>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4413      	add	r3, r2
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_IncTick+0x24>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000180 	.word	0x20000180
 800342c:	2000056c 	.word	0x2000056c

08003430 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return uwTick;  
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_GetTick+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000056c 	.word	0x2000056c

08003448 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff ffee 	bl	8003430 <HAL_GetTick>
 8003454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d005      	beq.n	800346e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_Delay+0x44>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800346e:	bf00      	nop
 8003470:	f7ff ffde 	bl	8003430 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	d8f7      	bhi.n	8003470 <HAL_Delay+0x28>
  {
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000180 	.word	0x20000180

08003490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ac:	4013      	ands	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c2:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60d3      	str	r3, [r2, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <__NVIC_GetPriorityGrouping+0x18>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 0307 	and.w	r3, r3, #7
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db0b      	blt.n	800351e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <__NVIC_EnableIRQ+0x38>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2001      	movs	r0, #1
 8003516:	fa00 f202 	lsl.w	r2, r0, r2
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f7ff ff8e 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff29 	bl	8003490 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff3e 	bl	80034d8 <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff8e 	bl	8003584 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5d 	bl	8003530 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff31 	bl	80034f4 <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa2 	bl	80035ec <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	e154      	b.n	800396e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8146 	beq.w	8003968 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d005      	beq.n	80036f4 <HAL_GPIO_Init+0x40>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d130      	bne.n	8003756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800372a:	2201      	movs	r2, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 0201 	and.w	r2, r3, #1
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b03      	cmp	r3, #3
 8003760:	d017      	beq.n	8003792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d123      	bne.n	80037e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	6939      	ldr	r1, [r7, #16]
 80037e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	2203      	movs	r2, #3
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80a0 	beq.w	8003968 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003828:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_GPIO_Init+0x2d8>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4a57      	ldr	r2, [pc, #348]	; (800398c <HAL_GPIO_Init+0x2d8>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6193      	str	r3, [r2, #24]
 8003834:	4b55      	ldr	r3, [pc, #340]	; (800398c <HAL_GPIO_Init+0x2d8>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003840:	4a53      	ldr	r2, [pc, #332]	; (8003990 <HAL_GPIO_Init+0x2dc>)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	3302      	adds	r3, #2
 8003848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	220f      	movs	r2, #15
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800386a:	d019      	beq.n	80038a0 <HAL_GPIO_Init+0x1ec>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a49      	ldr	r2, [pc, #292]	; (8003994 <HAL_GPIO_Init+0x2e0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_GPIO_Init+0x1e8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a48      	ldr	r2, [pc, #288]	; (8003998 <HAL_GPIO_Init+0x2e4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00d      	beq.n	8003898 <HAL_GPIO_Init+0x1e4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <HAL_GPIO_Init+0x2e8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <HAL_GPIO_Init+0x1e0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a46      	ldr	r2, [pc, #280]	; (80039a0 <HAL_GPIO_Init+0x2ec>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_GPIO_Init+0x1dc>
 800388c:	2304      	movs	r3, #4
 800388e:	e008      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003890:	2305      	movs	r3, #5
 8003892:	e006      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003894:	2303      	movs	r3, #3
 8003896:	e004      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003898:	2302      	movs	r3, #2
 800389a:	e002      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 80038a0:	2300      	movs	r3, #0
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	f002 0203 	and.w	r2, r2, #3
 80038a8:	0092      	lsls	r2, r2, #2
 80038aa:	4093      	lsls	r3, r2
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038b2:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_GPIO_Init+0x2dc>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c0:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038e4:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038ea:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800390e:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003914:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003962:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3301      	adds	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f aea3 	bne.w	80036c4 <HAL_GPIO_Init+0x10>
  }
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40021000 	.word	0x40021000
 8003990:	40010000 	.word	0x40010000
 8003994:	48000400 	.word	0x48000400
 8003998:	48000800 	.word	0x48000800
 800399c:	48000c00 	.word	0x48000c00
 80039a0:	48001000 	.word	0x48001000
 80039a4:	40010400 	.word	0x40010400

080039a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80039b6:	e0b8      	b.n	8003b2a <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80039b8:	2201      	movs	r2, #1
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80ab 	beq.w	8003b24 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80039ce:	4a5e      	ldr	r2, [pc, #376]	; (8003b48 <HAL_GPIO_DeInit+0x1a0>)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039f6:	d019      	beq.n	8003a2c <HAL_GPIO_DeInit+0x84>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a54      	ldr	r2, [pc, #336]	; (8003b4c <HAL_GPIO_DeInit+0x1a4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_GPIO_DeInit+0x80>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a53      	ldr	r2, [pc, #332]	; (8003b50 <HAL_GPIO_DeInit+0x1a8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00d      	beq.n	8003a24 <HAL_GPIO_DeInit+0x7c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_GPIO_DeInit+0x1ac>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <HAL_GPIO_DeInit+0x78>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a51      	ldr	r2, [pc, #324]	; (8003b58 <HAL_GPIO_DeInit+0x1b0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_GPIO_DeInit+0x74>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	e008      	b.n	8003a2e <HAL_GPIO_DeInit+0x86>
 8003a1c:	2305      	movs	r3, #5
 8003a1e:	e006      	b.n	8003a2e <HAL_GPIO_DeInit+0x86>
 8003a20:	2303      	movs	r3, #3
 8003a22:	e004      	b.n	8003a2e <HAL_GPIO_DeInit+0x86>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e002      	b.n	8003a2e <HAL_GPIO_DeInit+0x86>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_GPIO_DeInit+0x86>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	f002 0203 	and.w	r2, r2, #3
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	4093      	lsls	r3, r2
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d132      	bne.n	8003aa4 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	4945      	ldr	r1, [pc, #276]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a4c:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	4941      	ldr	r1, [pc, #260]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a5a:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	493e      	ldr	r1, [pc, #248]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a68:	4b3c      	ldr	r3, [pc, #240]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	493a      	ldr	r1, [pc, #232]	; (8003b5c <HAL_GPIO_DeInit+0x1b4>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	220f      	movs	r2, #15
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a86:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <HAL_GPIO_DeInit+0x1a0>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	43da      	mvns	r2, r3
 8003a96:	482c      	ldr	r0, [pc, #176]	; (8003b48 <HAL_GPIO_DeInit+0x1a0>)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2103      	movs	r1, #3
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	401a      	ands	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	220f      	movs	r2, #15
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	08d2      	lsrs	r2, r2, #3
 8003ada:	4019      	ands	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2103      	movs	r1, #3
 8003aee:	fa01 f303 	lsl.w	r3, r1, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	401a      	ands	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	2101      	movs	r1, #1
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	401a      	ands	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2103      	movs	r1, #3
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	401a      	ands	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3301      	adds	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f47f af40 	bne.w	80039b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	48000400 	.word	0x48000400
 8003b50:	48000800 	.word	0x48000800
 8003b54:	48000c00 	.word	0x48000c00
 8003b58:	48001000 	.word	0x48001000
 8003b5c:	40010400 	.word	0x40010400

08003b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e001      	b.n	8003b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	041a      	lsls	r2, r3, #16
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	43d9      	mvns	r1, r3
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	400b      	ands	r3, r1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d006      	beq.n	8003c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c0a:	4a05      	ldr	r2, [pc, #20]	; (8003c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe ff34 	bl	8002a80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40010400 	.word	0x40010400

08003c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e081      	b.n	8003d3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe fde4 	bl	8002818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e006      	b.n	8003cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d104      	bne.n	8003cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e021      	b.n	8003d98 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fe fd97 	bl	80028a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	461a      	mov	r2, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	817b      	strh	r3, [r7, #10]
 8003db2:	460b      	mov	r3, r1
 8003db4:	813b      	strh	r3, [r7, #8]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	f040 80f9 	bne.w	8003fba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x34>
 8003dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0ed      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Mem_Write+0x4e>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0e6      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003df6:	f7ff fb1b 	bl	8003430 <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2319      	movs	r3, #25
 8003e02:	2201      	movs	r2, #1
 8003e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fad1 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0d1      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2221      	movs	r2, #33	; 0x21
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2240      	movs	r2, #64	; 0x40
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a3a      	ldr	r2, [r7, #32]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e40:	88f8      	ldrh	r0, [r7, #6]
 8003e42:	893a      	ldrh	r2, [r7, #8]
 8003e44:	8979      	ldrh	r1, [r7, #10]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	4603      	mov	r3, r0
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f9e1 	bl	8004218 <I2C_RequestMemoryWrite>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0a9      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2bff      	cmp	r3, #255	; 0xff
 8003e70:	d90e      	bls.n	8003e90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	22ff      	movs	r2, #255	; 0xff
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	8979      	ldrh	r1, [r7, #10]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fbc3 	bl	8004614 <I2C_TransferConfig>
 8003e8e:	e00f      	b.n	8003eb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fbb2 	bl	8004614 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fabb 	bl	8004430 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e07b      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d034      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x1c8>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d130      	bne.n	8003f68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa4d 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e04d      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2bff      	cmp	r3, #255	; 0xff
 8003f28:	d90e      	bls.n	8003f48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	22ff      	movs	r2, #255	; 0xff
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	8979      	ldrh	r1, [r7, #10]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fb67 	bl	8004614 <I2C_TransferConfig>
 8003f46:	e00f      	b.n	8003f68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fb56 	bl	8004614 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d19e      	bne.n	8003eb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa9a 	bl	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e01a      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_I2C_Mem_Write+0x224>)
 8003f9a:	400b      	ands	r3, r1
 8003f9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
  }
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	fe00e800 	.word	0xfe00e800

08003fc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	813b      	strh	r3, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	f040 80fd 	bne.w	80041ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x34>
 8003ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0f1      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Mem_Read+0x4e>
 8004012:	2302      	movs	r3, #2
 8004014:	e0ea      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800401e:	f7ff fa07 	bl	8003430 <HAL_GetTick>
 8004022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	2319      	movs	r3, #25
 800402a:	2201      	movs	r2, #1
 800402c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f9bd 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0d5      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2222      	movs	r2, #34	; 0x22
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2240      	movs	r2, #64	; 0x40
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004068:	88f8      	ldrh	r0, [r7, #6]
 800406a:	893a      	ldrh	r2, [r7, #8]
 800406c:	8979      	ldrh	r1, [r7, #10]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4603      	mov	r3, r0
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f921 	bl	80042c0 <I2C_RequestMemoryRead>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0ad      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2bff      	cmp	r3, #255	; 0xff
 8004098:	d90e      	bls.n	80040b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	8979      	ldrh	r1, [r7, #10]
 80040a8:	4b52      	ldr	r3, [pc, #328]	; (80041f4 <HAL_I2C_Mem_Read+0x22c>)
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 faaf 	bl	8004614 <I2C_TransferConfig>
 80040b6:	e00f      	b.n	80040d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	8979      	ldrh	r1, [r7, #10]
 80040ca:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <HAL_I2C_Mem_Read+0x22c>)
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fa9e 	bl	8004614 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	2200      	movs	r2, #0
 80040e0:	2104      	movs	r1, #4
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f964 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07c      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d034      	beq.n	8004198 <HAL_I2C_Mem_Read+0x1d0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	2b00      	cmp	r3, #0
 8004134:	d130      	bne.n	8004198 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	2200      	movs	r2, #0
 800413e:	2180      	movs	r1, #128	; 0x80
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f935 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e04d      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	2bff      	cmp	r3, #255	; 0xff
 8004158:	d90e      	bls.n	8004178 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	b2da      	uxtb	r2, r3
 8004166:	8979      	ldrh	r1, [r7, #10]
 8004168:	2300      	movs	r3, #0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fa4f 	bl	8004614 <I2C_TransferConfig>
 8004176:	e00f      	b.n	8004198 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	b2da      	uxtb	r2, r3
 8004188:	8979      	ldrh	r1, [r7, #10]
 800418a:	2300      	movs	r3, #0
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fa3e 	bl	8004614 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d19a      	bne.n	80040d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f982 	bl	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e01a      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2220      	movs	r2, #32
 80041bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_I2C_Mem_Read+0x230>)
 80041ca:	400b      	ands	r3, r1
 80041cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	80002400 	.word	0x80002400
 80041f8:	fe00e800 	.word	0xfe00e800

080041fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420a:	b2db      	uxtb	r3, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	461a      	mov	r2, r3
 8004226:	4603      	mov	r3, r0
 8004228:	817b      	strh	r3, [r7, #10]
 800422a:	460b      	mov	r3, r1
 800422c:	813b      	strh	r3, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	8979      	ldrh	r1, [r7, #10]
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <I2C_RequestMemoryWrite+0xa4>)
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f9e7 	bl	8004614 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8f0 	bl	8004430 <I2C_WaitOnTXISFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e02c      	b.n	80042b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	629a      	str	r2, [r3, #40]	; 0x28
 800426a:	e015      	b.n	8004298 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	b29b      	uxth	r3, r3
 8004272:	b2da      	uxtb	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f8d6 	bl	8004430 <I2C_WaitOnTXISFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e012      	b.n	80042b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800428e:	893b      	ldrh	r3, [r7, #8]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2200      	movs	r2, #0
 80042a0:	2180      	movs	r1, #128	; 0x80
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f884 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	80002000 	.word	0x80002000

080042c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	4608      	mov	r0, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	461a      	mov	r2, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	817b      	strh	r3, [r7, #10]
 80042d2:	460b      	mov	r3, r1
 80042d4:	813b      	strh	r3, [r7, #8]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	8979      	ldrh	r1, [r7, #10]
 80042e0:	4b20      	ldr	r3, [pc, #128]	; (8004364 <I2C_RequestMemoryRead+0xa4>)
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f994 	bl	8004614 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f89d 	bl	8004430 <I2C_WaitOnTXISFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e02c      	b.n	800435a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d105      	bne.n	8004312 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004306:	893b      	ldrh	r3, [r7, #8]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
 8004310:	e015      	b.n	800433e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004312:	893b      	ldrh	r3, [r7, #8]
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	b29b      	uxth	r3, r3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f883 	bl	8004430 <I2C_WaitOnTXISFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e012      	b.n	800435a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2200      	movs	r2, #0
 8004346:	2140      	movs	r1, #64	; 0x40
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f831 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	80002000 	.word	0x80002000

08004368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d103      	bne.n	8004386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d007      	beq.n	80043a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	619a      	str	r2, [r3, #24]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c0:	e022      	b.n	8004408 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d01e      	beq.n	8004408 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7ff f831 	bl	8003430 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d113      	bne.n	8004408 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e00f      	b.n	8004428 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	429a      	cmp	r2, r3
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	429a      	cmp	r2, r3
 8004424:	d0cd      	beq.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800443c:	e02c      	b.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f870 	bl	8004528 <I2C_IsAcknowledgeFailed>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02a      	b.n	80044a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d01e      	beq.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fe ffe9 	bl	8003430 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d113      	bne.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e007      	b.n	80044a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d1cb      	bne.n	800443e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044bc:	e028      	b.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f830 	bl	8004528 <I2C_IsAcknowledgeFailed>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e026      	b.n	8004520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe ffad 	bl	8003430 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d113      	bne.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e007      	b.n	8004520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d1cf      	bne.n	80044be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b10      	cmp	r3, #16
 8004540:	d161      	bne.n	8004606 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004550:	d02b      	beq.n	80045aa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004560:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004562:	e022      	b.n	80045aa <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d01e      	beq.n	80045aa <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456c:	f7fe ff60 	bl	8003430 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <I2C_IsAcknowledgeFailed+0x5a>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d113      	bne.n	80045aa <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e02e      	b.n	8004608 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d1d5      	bne.n	8004564 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2210      	movs	r2, #16
 80045be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2220      	movs	r2, #32
 80045c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff fecd 	bl	8004368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <I2C_IsAcknowledgeFailed+0xe8>)
 80045da:	400b      	ands	r3, r1
 80045dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f043 0204 	orr.w	r2, r3, #4
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	fe00e800 	.word	0xfe00e800

08004614 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	817b      	strh	r3, [r7, #10]
 8004622:	4613      	mov	r3, r2
 8004624:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	0d5b      	lsrs	r3, r3, #21
 8004630:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <I2C_TransferConfig+0x58>)
 8004636:	430b      	orrs	r3, r1
 8004638:	43db      	mvns	r3, r3
 800463a:	ea02 0103 	and.w	r1, r2, r3
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004644:	7a7b      	ldrb	r3, [r7, #9]
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	431a      	orrs	r2, r3
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	03ff63ff 	.word	0x03ff63ff

08004670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b20      	cmp	r3, #32
 8004684:	d138      	bne.n	80046f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004690:	2302      	movs	r3, #2
 8004692:	e032      	b.n	80046fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2224      	movs	r2, #36	; 0x24
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0201 	bic.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b20      	cmp	r3, #32
 800471a:	d139      	bne.n	8004790 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004726:	2302      	movs	r3, #2
 8004728:	e033      	b.n	8004792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2224      	movs	r2, #36	; 0x24
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004758:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	1d3b      	adds	r3, r7, #4
 80047aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f000 bef4 	b.w	80055a2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 816a 	beq.w	8004a9e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047ca:	4bb3      	ldr	r3, [pc, #716]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d00c      	beq.n	80047f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047d6:	4bb0      	ldr	r3, [pc, #704]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d159      	bne.n	8004896 <HAL_RCC_OscConfig+0xf6>
 80047e2:	4bad      	ldr	r3, [pc, #692]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ee:	d152      	bne.n	8004896 <HAL_RCC_OscConfig+0xf6>
 80047f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004804:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d102      	bne.n	8004822 <HAL_RCC_OscConfig+0x82>
 800481c:	4b9e      	ldr	r3, [pc, #632]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	e015      	b.n	800484e <HAL_RCC_OscConfig+0xae>
 8004822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004826:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800483a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800483e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800484a:	4b93      	ldr	r3, [pc, #588]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004852:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004856:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800485a:	fa92 f2a2 	rbit	r2, r2
 800485e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004862:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004866:	fab2 f282 	clz	r2, r2
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	f042 0220 	orr.w	r2, r2, #32
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	f002 021f 	and.w	r2, r2, #31
 8004876:	2101      	movs	r1, #1
 8004878:	fa01 f202 	lsl.w	r2, r1, r2
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 810c 	beq.w	8004a9c <HAL_RCC_OscConfig+0x2fc>
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f040 8106 	bne.w	8004a9c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f000 be86 	b.w	80055a2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x110>
 80048a2:	4b7d      	ldr	r3, [pc, #500]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a7c      	ldr	r2, [pc, #496]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e030      	b.n	8004912 <HAL_RCC_OscConfig+0x172>
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x134>
 80048ba:	4b77      	ldr	r3, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a76      	ldr	r2, [pc, #472]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a73      	ldr	r2, [pc, #460]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e01e      	b.n	8004912 <HAL_RCC_OscConfig+0x172>
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048de:	d10c      	bne.n	80048fa <HAL_RCC_OscConfig+0x15a>
 80048e0:	4b6d      	ldr	r3, [pc, #436]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a6c      	ldr	r2, [pc, #432]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a69      	ldr	r2, [pc, #420]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e00b      	b.n	8004912 <HAL_RCC_OscConfig+0x172>
 80048fa:	4b67      	ldr	r3, [pc, #412]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a66      	ldr	r2, [pc, #408]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 8004900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b64      	ldr	r3, [pc, #400]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a63      	ldr	r2, [pc, #396]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 800490c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004910:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004912:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	f023 020f 	bic.w	r2, r3, #15
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	495d      	ldr	r1, [pc, #372]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d059      	beq.n	80049e4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fe fd7e 	bl	8003430 <HAL_GetTick>
 8004934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004938:	e00a      	b.n	8004950 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800493a:	f7fe fd79 	bl	8003430 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d902      	bls.n	8004950 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	f000 be29 	b.w	80055a2 <HAL_RCC_OscConfig+0xe02>
 8004950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004954:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004964:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d102      	bne.n	8004982 <HAL_RCC_OscConfig+0x1e2>
 800497c:	4b46      	ldr	r3, [pc, #280]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	e015      	b.n	80049ae <HAL_RCC_OscConfig+0x20e>
 8004982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004986:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800498e:	fa93 f3a3 	rbit	r3, r3
 8004992:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800499a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800499e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80049b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80049ba:	fa92 f2a2 	rbit	r2, r2
 80049be:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80049c2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80049c6:	fab2 f282 	clz	r2, r2
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	f042 0220 	orr.w	r2, r2, #32
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	f002 021f 	and.w	r2, r2, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f202 	lsl.w	r2, r1, r2
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ab      	beq.n	800493a <HAL_RCC_OscConfig+0x19a>
 80049e2:	e05c      	b.n	8004a9e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fe fd24 	bl	8003430 <HAL_GetTick>
 80049e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ee:	f7fe fd1f 	bl	8003430 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d902      	bls.n	8004a04 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	f000 bdcf 	b.w	80055a2 <HAL_RCC_OscConfig+0xe02>
 8004a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004a18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HAL_RCC_OscConfig+0x296>
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	e015      	b.n	8004a62 <HAL_RCC_OscConfig+0x2c2>
 8004a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a52:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <HAL_RCC_OscConfig+0x2f8>)
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a6e:	fa92 f2a2 	rbit	r2, r2
 8004a72:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a76:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a7a:	fab2 f282 	clz	r2, r2
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	f042 0220 	orr.w	r2, r2, #32
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	f002 021f 	and.w	r2, r2, #31
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ab      	bne.n	80049ee <HAL_RCC_OscConfig+0x24e>
 8004a96:	e002      	b.n	8004a9e <HAL_RCC_OscConfig+0x2fe>
 8004a98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 816f 	beq.w	8004d8c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004aae:	4bd0      	ldr	r3, [pc, #832]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004aba:	4bcd      	ldr	r3, [pc, #820]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d16c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x400>
 8004ac6:	4bca      	ldr	r3, [pc, #808]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d166      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x400>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004ae4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d102      	bne.n	8004b02 <HAL_RCC_OscConfig+0x362>
 8004afc:	4bbc      	ldr	r3, [pc, #752]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	e013      	b.n	8004b2a <HAL_RCC_OscConfig+0x38a>
 8004b02:	2302      	movs	r3, #2
 8004b04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b14:	2302      	movs	r3, #2
 8004b16:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004b26:	4bb2      	ldr	r3, [pc, #712]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004b30:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b34:	fa92 f2a2 	rbit	r2, r2
 8004b38:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004b3c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b40:	fab2 f282 	clz	r2, r2
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	f042 0220 	orr.w	r2, r2, #32
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	f002 021f 	and.w	r2, r2, #31
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f202 	lsl.w	r2, r1, r2
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_RCC_OscConfig+0x3cc>
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d002      	beq.n	8004b6c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f000 bd1b 	b.w	80055a2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4ba0      	ldr	r3, [pc, #640]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	21f8      	movs	r1, #248	; 0xf8
 8004b7c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b84:	fa91 f1a1 	rbit	r1, r1
 8004b88:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b8c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b90:	fab1 f181 	clz	r1, r1
 8004b94:	b2c9      	uxtb	r1, r1
 8004b96:	408b      	lsls	r3, r1
 8004b98:	4995      	ldr	r1, [pc, #596]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9e:	e0f5      	b.n	8004d8c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8085 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x516>
 8004bac:	2301      	movs	r3, #1
 8004bae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004bb6:	fa93 f3a3 	rbit	r3, r3
 8004bba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004bbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fe fc2a 	bl	8003430 <HAL_GetTick>
 8004bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be2:	f7fe fc25 	bl	8003430 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d902      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	f000 bcd5 	b.w	80055a2 <HAL_RCC_OscConfig+0xe02>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004c0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d102      	bne.n	8004c28 <HAL_RCC_OscConfig+0x488>
 8004c22:	4b73      	ldr	r3, [pc, #460]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	e013      	b.n	8004c50 <HAL_RCC_OscConfig+0x4b0>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c32:	fa93 f3a3 	rbit	r3, r3
 8004c36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c4c:	4b68      	ldr	r3, [pc, #416]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2202      	movs	r2, #2
 8004c52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c5a:	fa92 f2a2 	rbit	r2, r2
 8004c5e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c66:	fab2 f282 	clz	r2, r2
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	f042 0220 	orr.w	r2, r2, #32
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	f002 021f 	and.w	r2, r2, #31
 8004c76:	2101      	movs	r1, #1
 8004c78:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0af      	beq.n	8004be2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	4b5b      	ldr	r3, [pc, #364]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8a:	1d3b      	adds	r3, r7, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	21f8      	movs	r1, #248	; 0xf8
 8004c92:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c9a:	fa91 f1a1 	rbit	r1, r1
 8004c9e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ca2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ca6:	fab1 f181 	clz	r1, r1
 8004caa:	b2c9      	uxtb	r1, r1
 8004cac:	408b      	lsls	r3, r1
 8004cae:	4950      	ldr	r1, [pc, #320]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]
 8004cb4:	e06a      	b.n	8004d8c <HAL_RCC_OscConfig+0x5ec>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004cc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7fe fba5 	bl	8003430 <HAL_GetTick>
 8004ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cec:	f7fe fba0 	bl	8003430 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d902      	bls.n	8004d02 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	f000 bc50 	b.w	80055a2 <HAL_RCC_OscConfig+0xe02>
 8004d02:	2302      	movs	r3, #2
 8004d04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d102      	bne.n	8004d32 <HAL_RCC_OscConfig+0x592>
 8004d2c:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	e013      	b.n	8004d5a <HAL_RCC_OscConfig+0x5ba>
 8004d32:	2302      	movs	r3, #2
 8004d34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d44:	2302      	movs	r3, #2
 8004d46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d56:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <HAL_RCC_OscConfig+0x650>)
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d60:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d64:	fa92 f2a2 	rbit	r2, r2
 8004d68:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004d6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d70:	fab2 f282 	clz	r2, r2
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	f042 0220 	orr.w	r2, r2, #32
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	f002 021f 	and.w	r2, r2, #31
 8004d80:	2101      	movs	r1, #1
 8004d82:	fa01 f202 	lsl.w	r2, r1, r2
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1af      	bne.n	8004cec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8c:	1d3b      	adds	r3, r7, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80da 	beq.w	8004f50 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d069      	beq.n	8004e7a <HAL_RCC_OscConfig+0x6da>
 8004da6:	2301      	movs	r3, #1
 8004da8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dbc:	fab3 f383 	clz	r3, r3
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_OscConfig+0x654>)
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2301      	movs	r3, #1
 8004dce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd0:	f7fe fb2e 	bl	8003430 <HAL_GetTick>
 8004dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd8:	e00e      	b.n	8004df8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fe fb29 	bl	8003430 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d906      	bls.n	8004df8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e3d9      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	10908120 	.word	0x10908120
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e0e:	2202      	movs	r2, #2
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	fa93 f2a3 	rbit	r2, r3
 8004e1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004e26:	2202      	movs	r2, #2
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	fa93 f2a3 	rbit	r2, r3
 8004e34:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	4ba5      	ldr	r3, [pc, #660]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e3e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e42:	2102      	movs	r1, #2
 8004e44:	6019      	str	r1, [r3, #0]
 8004e46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	fa93 f1a3 	rbit	r1, r3
 8004e50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e54:	6019      	str	r1, [r3, #0]
  return result;
 8004e56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0b0      	beq.n	8004dda <HAL_RCC_OscConfig+0x63a>
 8004e78:	e06a      	b.n	8004f50 <HAL_RCC_OscConfig+0x7b0>
 8004e7a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	fa93 f2a3 	rbit	r2, r3
 8004e8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e90:	601a      	str	r2, [r3, #0]
  return result;
 8004e92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e98:	fab3 f383 	clz	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4b8c      	ldr	r3, [pc, #560]	; (80050d4 <HAL_RCC_OscConfig+0x934>)
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eac:	f7fe fac0 	bl	8003430 <HAL_GetTick>
 8004eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	e009      	b.n	8004eca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fe fabb 	bl	8003430 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e36b      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
 8004eca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004ece:	2202      	movs	r2, #2
 8004ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	fa93 f2a3 	rbit	r2, r3
 8004edc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	fa93 f2a3 	rbit	r2, r3
 8004ef4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004efe:	2202      	movs	r2, #2
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	fa93 f2a3 	rbit	r2, r3
 8004f0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f12:	4b6f      	ldr	r3, [pc, #444]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	6019      	str	r1, [r3, #0]
 8004f1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	fa93 f1a3 	rbit	r1, r3
 8004f28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004f2c:	6019      	str	r1, [r3, #0]
  return result;
 8004f2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1b2      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8158 	beq.w	8005210 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f66:	4b5a      	ldr	r3, [pc, #360]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d112      	bne.n	8004f98 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	4b57      	ldr	r3, [pc, #348]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	4a56      	ldr	r2, [pc, #344]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	61d3      	str	r3, [r2, #28]
 8004f7e:	4b54      	ldr	r3, [pc, #336]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f107 0308 	add.w	r3, r7, #8
 8004f90:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <HAL_RCC_OscConfig+0x938>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d11a      	bne.n	8004fda <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa4:	4b4c      	ldr	r3, [pc, #304]	; (80050d8 <HAL_RCC_OscConfig+0x938>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4b      	ldr	r2, [pc, #300]	; (80050d8 <HAL_RCC_OscConfig+0x938>)
 8004faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb0:	f7fe fa3e 	bl	8003430 <HAL_GetTick>
 8004fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb8:	e009      	b.n	8004fce <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fba:	f7fe fa39 	bl	8003430 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	; 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e2e9      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fce:	4b42      	ldr	r3, [pc, #264]	; (80050d8 <HAL_RCC_OscConfig+0x938>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0ef      	beq.n	8004fba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d106      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x852>
 8004fe4:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	4a39      	ldr	r2, [pc, #228]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	6213      	str	r3, [r2, #32]
 8004ff0:	e02f      	b.n	8005052 <HAL_RCC_OscConfig+0x8b2>
 8004ff2:	1d3b      	adds	r3, r7, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCC_OscConfig+0x876>
 8004ffc:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	4a33      	ldr	r2, [pc, #204]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	6213      	str	r3, [r2, #32]
 8005008:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 800500e:	f023 0304 	bic.w	r3, r3, #4
 8005012:	6213      	str	r3, [r2, #32]
 8005014:	e01d      	b.n	8005052 <HAL_RCC_OscConfig+0x8b2>
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b05      	cmp	r3, #5
 800501e:	d10c      	bne.n	800503a <HAL_RCC_OscConfig+0x89a>
 8005020:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	6213      	str	r3, [r2, #32]
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6213      	str	r3, [r2, #32]
 8005038:	e00b      	b.n	8005052 <HAL_RCC_OscConfig+0x8b2>
 800503a:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	6213      	str	r3, [r2, #32]
 8005046:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 800504c:	f023 0304 	bic.w	r3, r3, #4
 8005050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d06b      	beq.n	8005134 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505c:	f7fe f9e8 	bl	8003430 <HAL_GetTick>
 8005060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005064:	e00b      	b.n	800507e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fe f9e3 	bl	8003430 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e291      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
 800507e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005082:	2202      	movs	r2, #2
 8005084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005086:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	fa93 f2a3 	rbit	r2, r3
 8005090:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800509a:	2202      	movs	r2, #2
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	fa93 f2a3 	rbit	r2, r3
 80050a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050ac:	601a      	str	r2, [r3, #0]
  return result;
 80050ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b4:	fab3 f383 	clz	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d109      	bne.n	80050dc <HAL_RCC_OscConfig+0x93c>
 80050c8:	4b01      	ldr	r3, [pc, #4]	; (80050d0 <HAL_RCC_OscConfig+0x930>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	e014      	b.n	80050f8 <HAL_RCC_OscConfig+0x958>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	10908120 	.word	0x10908120
 80050d8:	40007000 	.word	0x40007000
 80050dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80050e0:	2202      	movs	r2, #2
 80050e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	fa93 f2a3 	rbit	r2, r3
 80050ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	4bbb      	ldr	r3, [pc, #748]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050fc:	2102      	movs	r1, #2
 80050fe:	6011      	str	r1, [r2, #0]
 8005100:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	fa92 f1a2 	rbit	r1, r2
 800510a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800510e:	6011      	str	r1, [r2, #0]
  return result;
 8005110:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	fab2 f282 	clz	r2, r2
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	f002 021f 	and.w	r2, r2, #31
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f202 	lsl.w	r2, r1, r2
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d099      	beq.n	8005066 <HAL_RCC_OscConfig+0x8c6>
 8005132:	e063      	b.n	80051fc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005134:	f7fe f97c 	bl	8003430 <HAL_GetTick>
 8005138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fe f977 	bl	8003430 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e225      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
 8005156:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800515a:	2202      	movs	r2, #2
 800515c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	fa93 f2a3 	rbit	r2, r3
 8005168:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fa93 f2a3 	rbit	r2, r3
 8005180:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005184:	601a      	str	r2, [r3, #0]
  return result;
 8005186:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800518a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	b2db      	uxtb	r3, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f043 0302 	orr.w	r3, r3, #2
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d102      	bne.n	80051a6 <HAL_RCC_OscConfig+0xa06>
 80051a0:	4b90      	ldr	r3, [pc, #576]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	e00d      	b.n	80051c2 <HAL_RCC_OscConfig+0xa22>
 80051a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80051aa:	2202      	movs	r2, #2
 80051ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	fa93 f2a3 	rbit	r2, r3
 80051b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	4b89      	ldr	r3, [pc, #548]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051c6:	2102      	movs	r1, #2
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	fa92 f1a2 	rbit	r1, r2
 80051d4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80051d8:	6011      	str	r1, [r2, #0]
  return result;
 80051da:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	fab2 f282 	clz	r2, r2
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	f002 021f 	and.w	r2, r2, #31
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f202 	lsl.w	r2, r1, r2
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1a0      	bne.n	800513e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005204:	4b77      	ldr	r3, [pc, #476]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	4a76      	ldr	r2, [pc, #472]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 800520a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 81c2 	beq.w	80055a0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800521c:	4b71      	ldr	r3, [pc, #452]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	f000 819c 	beq.w	8005562 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	2b02      	cmp	r3, #2
 8005232:	f040 8114 	bne.w	800545e <HAL_RCC_OscConfig+0xcbe>
 8005236:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800523a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800523e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	fa93 f2a3 	rbit	r2, r3
 800524a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800524e:	601a      	str	r2, [r3, #0]
  return result;
 8005250:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005254:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	461a      	mov	r2, r3
 8005268:	2300      	movs	r3, #0
 800526a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fe f8e0 	bl	8003430 <HAL_GetTick>
 8005270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005274:	e009      	b.n	800528a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005276:	f7fe f8db 	bl	8003430 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e18b      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
 800528a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800528e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005294:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	fa93 f2a3 	rbit	r2, r3
 800529e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052a2:	601a      	str	r2, [r3, #0]
  return result;
 80052a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_RCC_OscConfig+0xb24>
 80052be:	4b49      	ldr	r3, [pc, #292]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	e01b      	b.n	80052fc <HAL_RCC_OscConfig+0xb5c>
 80052c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	fa93 f2a3 	rbit	r2, r3
 80052d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	fa93 f2a3 	rbit	r2, r3
 80052f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	4b3a      	ldr	r3, [pc, #232]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	fa92 f1a2 	rbit	r1, r2
 8005310:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005314:	6011      	str	r1, [r2, #0]
  return result;
 8005316:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	fab2 f282 	clz	r2, r2
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	f042 0220 	orr.w	r2, r2, #32
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	f002 021f 	and.w	r2, r2, #31
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f202 	lsl.w	r2, r1, r2
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d19e      	bne.n	8005276 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005338:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	430b      	orrs	r3, r1
 800534e:	4925      	ldr	r1, [pc, #148]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 8005350:	4313      	orrs	r3, r2
 8005352:	604b      	str	r3, [r1, #4]
 8005354:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800535c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	fa93 f2a3 	rbit	r2, r3
 8005368:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800536c:	601a      	str	r2, [r3, #0]
  return result;
 800536e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005372:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005374:	fab3 f383 	clz	r3, r3
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800537e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	461a      	mov	r2, r3
 8005386:	2301      	movs	r3, #1
 8005388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538a:	f7fe f851 	bl	8003430 <HAL_GetTick>
 800538e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005392:	e009      	b.n	80053a8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005394:	f7fe f84c 	bl	8003430 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e0fc      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
 80053a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	fa93 f2a3 	rbit	r2, r3
 80053bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053c0:	601a      	str	r2, [r3, #0]
  return result;
 80053c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0xc48>
 80053dc:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <HAL_RCC_OscConfig+0xc44>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	e01e      	b.n	8005420 <HAL_RCC_OscConfig+0xc80>
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	fa93 f2a3 	rbit	r2, r3
 80053fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	fa93 f2a3 	rbit	r2, r3
 8005416:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	4b63      	ldr	r3, [pc, #396]	; (80055ac <HAL_RCC_OscConfig+0xe0c>)
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005424:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005428:	6011      	str	r1, [r2, #0]
 800542a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	fa92 f1a2 	rbit	r1, r2
 8005434:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005438:	6011      	str	r1, [r2, #0]
  return result;
 800543a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	fab2 f282 	clz	r2, r2
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	f042 0220 	orr.w	r2, r2, #32
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	f002 021f 	and.w	r2, r2, #31
 8005450:	2101      	movs	r1, #1
 8005452:	fa01 f202 	lsl.w	r2, r1, r2
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d09b      	beq.n	8005394 <HAL_RCC_OscConfig+0xbf4>
 800545c:	e0a0      	b.n	80055a0 <HAL_RCC_OscConfig+0xe00>
 800545e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	fa93 f2a3 	rbit	r2, r3
 8005472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005476:	601a      	str	r2, [r3, #0]
  return result;
 8005478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800547c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005488:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fd ffcc 	bl	8003430 <HAL_GetTick>
 8005498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800549c:	e009      	b.n	80054b2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800549e:	f7fd ffc7 	bl	8003430 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e077      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
 80054b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	fa93 f2a3 	rbit	r2, r3
 80054c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ca:	601a      	str	r2, [r3, #0]
  return result;
 80054cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d2:	fab3 f383 	clz	r3, r3
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d102      	bne.n	80054ec <HAL_RCC_OscConfig+0xd4c>
 80054e6:	4b31      	ldr	r3, [pc, #196]	; (80055ac <HAL_RCC_OscConfig+0xe0c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	e01b      	b.n	8005524 <HAL_RCC_OscConfig+0xd84>
 80054ec:	f107 0320 	add.w	r3, r7, #32
 80054f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	f107 0320 	add.w	r3, r7, #32
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	fa93 f2a3 	rbit	r2, r3
 8005500:	f107 031c 	add.w	r3, r7, #28
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f107 0318 	add.w	r3, r7, #24
 800550a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f107 0318 	add.w	r3, r7, #24
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fa93 f2a3 	rbit	r2, r3
 800551a:	f107 0314 	add.w	r3, r7, #20
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	4b22      	ldr	r3, [pc, #136]	; (80055ac <HAL_RCC_OscConfig+0xe0c>)
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	f107 0210 	add.w	r2, r7, #16
 8005528:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800552c:	6011      	str	r1, [r2, #0]
 800552e:	f107 0210 	add.w	r2, r7, #16
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	fa92 f1a2 	rbit	r1, r2
 8005538:	f107 020c 	add.w	r2, r7, #12
 800553c:	6011      	str	r1, [r2, #0]
  return result;
 800553e:	f107 020c 	add.w	r2, r7, #12
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	fab2 f282 	clz	r2, r2
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	f042 0220 	orr.w	r2, r2, #32
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	f002 021f 	and.w	r2, r2, #31
 8005554:	2101      	movs	r1, #1
 8005556:	fa01 f202 	lsl.w	r2, r1, r2
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d19e      	bne.n	800549e <HAL_RCC_OscConfig+0xcfe>
 8005560:	e01e      	b.n	80055a0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e018      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <HAL_RCC_OscConfig+0xe0c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005578:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800557c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	429a      	cmp	r2, r3
 8005588:	d108      	bne.n	800559c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800558a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800558e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005598:	429a      	cmp	r2, r3
 800559a:	d001      	beq.n	80055a0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000

080055b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b09e      	sub	sp, #120	; 0x78
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e162      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055c8:	4b90      	ldr	r3, [pc, #576]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d910      	bls.n	80055f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b8d      	ldr	r3, [pc, #564]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 0207 	bic.w	r2, r3, #7
 80055de:	498b      	ldr	r1, [pc, #556]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b89      	ldr	r3, [pc, #548]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e14a      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005604:	4b82      	ldr	r3, [pc, #520]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	497f      	ldr	r1, [pc, #508]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005612:	4313      	orrs	r3, r2
 8005614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80dc 	beq.w	80057dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d13c      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xf6>
 800562c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005630:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800563a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d102      	bne.n	8005656 <HAL_RCC_ClockConfig+0xa6>
 8005650:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e00f      	b.n	8005676 <HAL_RCC_ClockConfig+0xc6>
 8005656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800565a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800565e:	fa93 f3a3 	rbit	r3, r3
 8005662:	667b      	str	r3, [r7, #100]	; 0x64
 8005664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
 800566a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005672:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800567a:	65ba      	str	r2, [r7, #88]	; 0x58
 800567c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800567e:	fa92 f2a2 	rbit	r2, r2
 8005682:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005686:	fab2 f282 	clz	r2, r2
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	f042 0220 	orr.w	r2, r2, #32
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	f002 021f 	and.w	r2, r2, #31
 8005696:	2101      	movs	r1, #1
 8005698:	fa01 f202 	lsl.w	r2, r1, r2
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d17b      	bne.n	800579a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0f3      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d13c      	bne.n	8005728 <HAL_RCC_ClockConfig+0x178>
 80056ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	fa93 f3a3 	rbit	r3, r3
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80056bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x128>
 80056d2:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	e00f      	b.n	80056f8 <HAL_RCC_ClockConfig+0x148>
 80056d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	fa93 f3a3 	rbit	r3, r3
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
 80056e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	fa93 f3a3 	rbit	r3, r3
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	4b46      	ldr	r3, [pc, #280]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80056fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005700:	fa92 f2a2 	rbit	r2, r2
 8005704:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005708:	fab2 f282 	clz	r2, r2
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	f042 0220 	orr.w	r2, r2, #32
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	f002 021f 	and.w	r2, r2, #31
 8005718:	2101      	movs	r1, #1
 800571a:	fa01 f202 	lsl.w	r2, r1, r2
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d13a      	bne.n	800579a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0b2      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
 8005728:	2302      	movs	r3, #2
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	fa93 f3a3 	rbit	r3, r3
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005736:	fab3 f383 	clz	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d102      	bne.n	8005750 <HAL_RCC_ClockConfig+0x1a0>
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	e00d      	b.n	800576c <HAL_RCC_ClockConfig+0x1bc>
 8005750:	2302      	movs	r3, #2
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	2302      	movs	r3, #2
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	4b29      	ldr	r3, [pc, #164]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2202      	movs	r2, #2
 800576e:	61ba      	str	r2, [r7, #24]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	fa92 f2a2 	rbit	r2, r2
 8005776:	617a      	str	r2, [r7, #20]
  return result;
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	fab2 f282 	clz	r2, r2
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	f042 0220 	orr.w	r2, r2, #32
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f002 021f 	and.w	r2, r2, #31
 800578a:	2101      	movs	r1, #1
 800578c:	fa01 f202 	lsl.w	r2, r1, r2
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e079      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	491a      	ldr	r1, [pc, #104]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057ac:	f7fd fe40 	bl	8003430 <HAL_GetTick>
 80057b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7fd fe3c 	bl	8003430 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e061      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <HAL_RCC_ClockConfig+0x260>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 020c 	and.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1eb      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d214      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b08      	ldr	r3, [pc, #32]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 0207 	bic.w	r2, r3, #7
 80057f2:	4906      	ldr	r1, [pc, #24]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <HAL_RCC_ClockConfig+0x25c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e040      	b.n	800588e <HAL_RCC_ClockConfig+0x2de>
 800580c:	40022000 	.word	0x40022000
 8005810:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005820:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	491a      	ldr	r1, [pc, #104]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 800582e:	4313      	orrs	r3, r2
 8005830:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800583e:	4b16      	ldr	r3, [pc, #88]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4912      	ldr	r1, [pc, #72]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 800584e:	4313      	orrs	r3, r2
 8005850:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005852:	f000 f829 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005856:	4601      	mov	r1, r0
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <HAL_RCC_ClockConfig+0x2e8>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005860:	22f0      	movs	r2, #240	; 0xf0
 8005862:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	fa92 f2a2 	rbit	r2, r2
 800586a:	60fa      	str	r2, [r7, #12]
  return result;
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	fab2 f282 	clz	r2, r2
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	40d3      	lsrs	r3, r2
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <HAL_RCC_ClockConfig+0x2ec>)
 8005878:	5cd3      	ldrb	r3, [r2, r3]
 800587a:	fa21 f303 	lsr.w	r3, r1, r3
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <HAL_RCC_ClockConfig+0x2f0>)
 8005880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <HAL_RCC_ClockConfig+0x2f4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fd fd8e 	bl	80033a8 <HAL_InitTick>
  
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3778      	adds	r7, #120	; 0x78
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40021000 	.word	0x40021000
 800589c:	08009980 	.word	0x08009980
 80058a0:	20000178 	.word	0x20000178
 80058a4:	2000017c 	.word	0x2000017c

080058a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b08b      	sub	sp, #44	; 0x2c
 80058ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80058c2:	4b29      	ldr	r3, [pc, #164]	; (8005968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d002      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x30>
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d003      	beq.n	80058de <HAL_RCC_GetSysClockFreq+0x36>
 80058d6:	e03c      	b.n	8005952 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058d8:	4b24      	ldr	r3, [pc, #144]	; (800596c <HAL_RCC_GetSysClockFreq+0xc4>)
 80058da:	623b      	str	r3, [r7, #32]
      break;
 80058dc:	e03c      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80058e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80058e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	fa92 f2a2 	rbit	r2, r2
 80058f0:	607a      	str	r2, [r7, #4]
  return result;
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	fab2 f282 	clz	r2, r2
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	40d3      	lsrs	r3, r2
 80058fc:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <HAL_RCC_GetSysClockFreq+0xc8>)
 80058fe:	5cd3      	ldrb	r3, [r2, r3]
 8005900:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005902:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	220f      	movs	r2, #15
 800590c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	fa92 f2a2 	rbit	r2, r2
 8005914:	60fa      	str	r2, [r7, #12]
  return result;
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	fab2 f282 	clz	r2, r2
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	40d3      	lsrs	r3, r2
 8005920:	4a14      	ldr	r2, [pc, #80]	; (8005974 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005922:	5cd3      	ldrb	r3, [r2, r3]
 8005924:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005930:	4a0e      	ldr	r2, [pc, #56]	; (800596c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	fbb2 f2f3 	udiv	r2, r2, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
 8005940:	e004      	b.n	800594c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	4a0c      	ldr	r2, [pc, #48]	; (8005978 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	623b      	str	r3, [r7, #32]
      break;
 8005950:	e002      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005954:	623b      	str	r3, [r7, #32]
      break;
 8005956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005958:	6a3b      	ldr	r3, [r7, #32]
}
 800595a:	4618      	mov	r0, r3
 800595c:	372c      	adds	r7, #44	; 0x2c
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
 800596c:	007a1200 	.word	0x007a1200
 8005970:	08009998 	.word	0x08009998
 8005974:	080099a8 	.word	0x080099a8
 8005978:	003d0900 	.word	0x003d0900

0800597c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_RCC_GetHCLKFreq+0x14>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000178 	.word	0x20000178

08005994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800599a:	f7ff ffef 	bl	800597c <HAL_RCC_GetHCLKFreq>
 800599e:	4601      	mov	r1, r0
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	fa92 f2a2 	rbit	r2, r2
 80059b4:	603a      	str	r2, [r7, #0]
  return result;
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	fab2 f282 	clz	r2, r2
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	40d3      	lsrs	r3, r2
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000
 80059d4:	08009990 	.word	0x08009990

080059d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80059de:	f7ff ffcd 	bl	800597c <HAL_RCC_GetHCLKFreq>
 80059e2:	4601      	mov	r1, r0
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80059ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80059f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	fa92 f2a2 	rbit	r2, r2
 80059f8:	603a      	str	r2, [r7, #0]
  return result;
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	fab2 f282 	clz	r2, r2
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	40d3      	lsrs	r3, r2
 8005a04:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a06:	5cd3      	ldrb	r3, [r2, r3]
 8005a08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	08009990 	.word	0x08009990

08005a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b092      	sub	sp, #72	; 0x48
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80d4 	beq.w	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a40:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10e      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4c:	4b4b      	ldr	r3, [pc, #300]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	4a4a      	ldr	r2, [pc, #296]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a56:	61d3      	str	r3, [r2, #28]
 8005a58:	4b48      	ldr	r3, [pc, #288]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6a:	4b45      	ldr	r3, [pc, #276]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d118      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a76:	4b42      	ldr	r3, [pc, #264]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a41      	ldr	r2, [pc, #260]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a82:	f7fd fcd5 	bl	8003430 <HAL_GetTick>
 8005a86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a88:	e008      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8a:	f7fd fcd1 	bl	8003430 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b64      	cmp	r3, #100	; 0x64
 8005a96:	d901      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e169      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	4b38      	ldr	r3, [pc, #224]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aa8:	4b34      	ldr	r3, [pc, #208]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8084 	beq.w	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d07c      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac8:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	fa93 f3a3 	rbit	r3, r3
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	461a      	mov	r2, r3
 8005af2:	2301      	movs	r3, #1
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	fa93 f3a3 	rbit	r3, r3
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b06:	fab3 f383 	clz	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b1a:	4a18      	ldr	r2, [pc, #96]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d04b      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2a:	f7fd fc81 	bl	8003430 <HAL_GetTick>
 8005b2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b30:	e00a      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b32:	f7fd fc7d 	bl	8003430 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e113      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
 8005b54:	2302      	movs	r3, #2
 8005b56:	623b      	str	r3, [r7, #32]
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	fa93 f3a3 	rbit	r3, r3
 8005b5e:	61fb      	str	r3, [r7, #28]
  return result;
 8005b60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b62:	fab3 f383 	clz	r3, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f043 0302 	orr.w	r3, r3, #2
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d108      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b76:	4b01      	ldr	r3, [pc, #4]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	e00d      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40007000 	.word	0x40007000
 8005b84:	10908100 	.word	0x10908100
 8005b88:	2302      	movs	r3, #2
 8005b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	4b78      	ldr	r3, [pc, #480]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2202      	movs	r2, #2
 8005b9a:	613a      	str	r2, [r7, #16]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	fa92 f2a2 	rbit	r2, r2
 8005ba2:	60fa      	str	r2, [r7, #12]
  return result;
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	fab2 f282 	clz	r2, r2
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	f002 021f 	and.w	r2, r2, #31
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0b7      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005bc2:	4b6d      	ldr	r3, [pc, #436]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	496a      	ldr	r1, [pc, #424]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bdc:	4b66      	ldr	r3, [pc, #408]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	4a65      	ldr	r2, [pc, #404]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bf4:	4b60      	ldr	r3, [pc, #384]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	f023 0203 	bic.w	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	495d      	ldr	r1, [pc, #372]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c12:	4b59      	ldr	r3, [pc, #356]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	4956      	ldr	r1, [pc, #344]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c30:	4b51      	ldr	r3, [pc, #324]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	494e      	ldr	r1, [pc, #312]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	f023 0210 	bic.w	r2, r3, #16
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4947      	ldr	r1, [pc, #284]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c6c:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	493f      	ldr	r1, [pc, #252]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c8a:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	f023 0220 	bic.w	r2, r3, #32
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	4938      	ldr	r1, [pc, #224]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ca8:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	4930      	ldr	r1, [pc, #192]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cc6:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	4929      	ldr	r1, [pc, #164]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ce4:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4921      	ldr	r1, [pc, #132]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	491a      	ldr	r1, [pc, #104]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d20:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	4912      	ldr	r1, [pc, #72]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	490b      	ldr	r1, [pc, #44]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	4903      	ldr	r1, [pc, #12]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3748      	adds	r7, #72	; 0x48
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40021000 	.word	0x40021000

08005d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e09d      	b.n	8005eca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d108      	bne.n	8005da8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9e:	d009      	beq.n	8005db4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	61da      	str	r2, [r3, #28]
 8005da6:	e005      	b.n	8005db4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fd f8ac 	bl	8002f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005df4:	d902      	bls.n	8005dfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e002      	b.n	8005e02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e0a:	d007      	beq.n	8005e1c <HAL_SPI_Init+0xa0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e14:	d002      	beq.n	8005e1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5e:	ea42 0103 	orr.w	r1, r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	0c1b      	lsrs	r3, r3, #16
 8005e78:	f003 0204 	and.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e98:	ea42 0103 	orr.w	r1, r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e01a      	b.n	8005f1a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fd f857 	bl	8002fb0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b08a      	sub	sp, #40	; 0x28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f30:	2301      	movs	r3, #1
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x26>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e1fb      	b.n	8006340 <HAL_SPI_TransmitReceive+0x41e>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f50:	f7fd fa6e 	bl	8003430 <HAL_GetTick>
 8005f54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f64:	887b      	ldrh	r3, [r7, #2]
 8005f66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005f68:	887b      	ldrh	r3, [r7, #2]
 8005f6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f6c:	7efb      	ldrb	r3, [r7, #27]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d00e      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x6e>
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f78:	d106      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x66>
 8005f82:	7efb      	ldrb	r3, [r7, #27]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d003      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f8e:	e1cd      	b.n	800632c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x80>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x80>
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005fa8:	e1c0      	b.n	800632c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d003      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2205      	movs	r2, #5
 8005fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	887a      	ldrh	r2, [r7, #2]
 8005fce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	887a      	ldrh	r2, [r7, #2]
 8005fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	887a      	ldrh	r2, [r7, #2]
 8005fea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006000:	d802      	bhi.n	8006008 <HAL_SPI_TransmitReceive+0xe6>
 8006002:	8a3b      	ldrh	r3, [r7, #16]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d908      	bls.n	800601a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006016:	605a      	str	r2, [r3, #4]
 8006018:	e007      	b.n	800602a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006028:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d007      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006050:	d97c      	bls.n	800614c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_SPI_TransmitReceive+0x13e>
 800605a:	8a7b      	ldrh	r3, [r7, #18]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d169      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006084:	e056      	b.n	8006134 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d11b      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x1aa>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x1aa>
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d113      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	881a      	ldrh	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	1c9a      	adds	r2, r3, #2
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d11c      	bne.n	8006114 <HAL_SPI_TransmitReceive+0x1f2>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	b292      	uxth	r2, r2
 80060f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	1c9a      	adds	r2, r3, #2
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006110:	2301      	movs	r3, #1
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006114:	f7fd f98c 	bl	8003430 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006120:	429a      	cmp	r2, r3
 8006122:	d807      	bhi.n	8006134 <HAL_SPI_TransmitReceive+0x212>
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d003      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006132:	e0fb      	b.n	800632c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1a3      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x164>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d19d      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x164>
 800614a:	e0df      	b.n	800630c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_SPI_TransmitReceive+0x23a>
 8006154:	8a7b      	ldrh	r3, [r7, #18]
 8006156:	2b01      	cmp	r3, #1
 8006158:	f040 80cb 	bne.w	80062f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d912      	bls.n	800618c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	881a      	ldrh	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	1c9a      	adds	r2, r3, #2
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b02      	subs	r3, #2
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800618a:	e0b2      	b.n	80062f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b2:	e09e      	b.n	80062f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d134      	bne.n	800622c <HAL_SPI_TransmitReceive+0x30a>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d02f      	beq.n	800622c <HAL_SPI_TransmitReceive+0x30a>
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d12c      	bne.n	800622c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d912      	bls.n	8006202 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	881a      	ldrh	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b02      	subs	r3, #2
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006200:	e012      	b.n	8006228 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b01      	cmp	r3, #1
 8006238:	d148      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x3aa>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d042      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d923      	bls.n	800629a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	b292      	uxth	r2, r2
 800625e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	1c9a      	adds	r2, r3, #2
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b02      	subs	r3, #2
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d81f      	bhi.n	80062c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	e016      	b.n	80062c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f103 020c 	add.w	r2, r3, #12
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	7812      	ldrb	r2, [r2, #0]
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062c8:	2301      	movs	r3, #1
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062cc:	f7fd f8b0 	bl	8003430 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d8:	429a      	cmp	r2, r3
 80062da:	d803      	bhi.n	80062e4 <HAL_SPI_TransmitReceive+0x3c2>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d102      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x3c8>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062f0:	e01c      	b.n	800632c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f47f af5b 	bne.w	80061b4 <HAL_SPI_TransmitReceive+0x292>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	f47f af54 	bne.w	80061b4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f945 	bl	80065a0 <SPI_EndRxTxTransaction>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d006      	beq.n	800632a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	661a      	str	r2, [r3, #96]	; 0x60
 8006328:	e000      	b.n	800632c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800632a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800633c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006340:	4618      	mov	r0, r3
 8006342:	3728      	adds	r7, #40	; 0x28
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006356:	b2db      	uxtb	r3, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006374:	f7fd f85c 	bl	8003430 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	4413      	add	r3, r2
 8006382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006384:	f7fd f854 	bl	8003430 <HAL_GetTick>
 8006388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	015b      	lsls	r3, r3, #5
 8006390:	0d1b      	lsrs	r3, r3, #20
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	fb02 f303 	mul.w	r3, r2, r3
 8006398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800639a:	e054      	b.n	8006446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d050      	beq.n	8006446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063a4:	f7fd f844 	bl	8003430 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d902      	bls.n	80063ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d13d      	bne.n	8006436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d2:	d111      	bne.n	80063f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063dc:	d004      	beq.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e6:	d107      	bne.n	80063f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006400:	d10f      	bne.n	8006422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e017      	b.n	8006466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3b01      	subs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4013      	ands	r3, r2
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	429a      	cmp	r2, r3
 8006462:	d19b      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000178 	.word	0x20000178

08006474 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006486:	f7fc ffd3 	bl	8003430 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	4413      	add	r3, r2
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006496:	f7fc ffcb 	bl	8003430 <HAL_GetTick>
 800649a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064a4:	4b3d      	ldr	r3, [pc, #244]	; (800659c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	00da      	lsls	r2, r3, #3
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	0d1b      	lsrs	r3, r3, #20
 80064b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064bc:	e060      	b.n	8006580 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064c4:	d107      	bne.n	80064d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d050      	beq.n	8006580 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064de:	f7fc ffa7 	bl	8003430 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d902      	bls.n	80064f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d13d      	bne.n	8006570 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006502:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650c:	d111      	bne.n	8006532 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006516:	d004      	beq.n	8006522 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006520:	d107      	bne.n	8006532 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006530:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653a:	d10f      	bne.n	800655c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800655a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e010      	b.n	8006592 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	3b01      	subs	r3, #1
 800657e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d196      	bne.n	80064be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3728      	adds	r7, #40	; 0x28
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000178 	.word	0x20000178

080065a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff ff5b 	bl	8006474 <SPI_WaitFifoStateUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c8:	f043 0220 	orr.w	r2, r3, #32
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e027      	b.n	8006624 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7ff fec0 	bl	8006364 <SPI_WaitFlagStateUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ee:	f043 0220 	orr.w	r2, r3, #32
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e014      	b.n	8006624 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2200      	movs	r2, #0
 8006602:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff ff34 	bl	8006474 <SPI_WaitFifoStateUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006616:	f043 0220 	orr.w	r2, r3, #32
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e000      	b.n	8006624 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e040      	b.n	80066c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fc fe26 	bl	80032a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	; 0x24
 8006658:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8c0 	bl	80067f0 <UART_SetConfig>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e022      	b.n	80066c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa88 	bl	8006b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fb0f 	bl	8006cdc <UART_CheckIdleState>
 80066be:	4603      	mov	r3, r0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066dc:	2b20      	cmp	r3, #32
 80066de:	f040 8082 	bne.w	80067e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_UART_Transmit+0x26>
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e07a      	b.n	80067e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_UART_Transmit+0x38>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e073      	b.n	80067e8 <HAL_UART_Transmit+0x120>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2221      	movs	r2, #33	; 0x21
 8006714:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006716:	f7fc fe8b 	bl	8003430 <HAL_GetTick>
 800671a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	d108      	bne.n	8006748 <HAL_UART_Transmit+0x80>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e003      	b.n	8006750 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006758:	e02d      	b.n	80067b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2200      	movs	r2, #0
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fb02 	bl	8006d6e <UART_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e039      	b.n	80067e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10b      	bne.n	8006792 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	881a      	ldrh	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006786:	b292      	uxth	r2, r2
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	3302      	adds	r3, #2
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	e008      	b.n	80067a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	b292      	uxth	r2, r2
 800679c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1cb      	bne.n	800675a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2140      	movs	r1, #64	; 0x40
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 face 	bl	8006d6e <UART_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e005      	b.n	80067e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
  }
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800681e:	f023 030c 	bic.w	r3, r3, #12
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	6979      	ldr	r1, [r7, #20]
 8006828:	430b      	orrs	r3, r1
 800682a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	430a      	orrs	r2, r1
 8006864:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4aae      	ldr	r2, [pc, #696]	; (8006b24 <UART_SetConfig+0x334>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d120      	bne.n	80068b2 <UART_SetConfig+0xc2>
 8006870:	4bad      	ldr	r3, [pc, #692]	; (8006b28 <UART_SetConfig+0x338>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	2b03      	cmp	r3, #3
 800687a:	d817      	bhi.n	80068ac <UART_SetConfig+0xbc>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x94>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	08006895 	.word	0x08006895
 8006888:	080068a1 	.word	0x080068a1
 800688c:	080068a7 	.word	0x080068a7
 8006890:	0800689b 	.word	0x0800689b
 8006894:	2301      	movs	r3, #1
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e0b5      	b.n	8006a06 <UART_SetConfig+0x216>
 800689a:	2302      	movs	r3, #2
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e0b2      	b.n	8006a06 <UART_SetConfig+0x216>
 80068a0:	2304      	movs	r3, #4
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e0af      	b.n	8006a06 <UART_SetConfig+0x216>
 80068a6:	2308      	movs	r3, #8
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e0ac      	b.n	8006a06 <UART_SetConfig+0x216>
 80068ac:	2310      	movs	r3, #16
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e0a9      	b.n	8006a06 <UART_SetConfig+0x216>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a9d      	ldr	r2, [pc, #628]	; (8006b2c <UART_SetConfig+0x33c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d124      	bne.n	8006906 <UART_SetConfig+0x116>
 80068bc:	4b9a      	ldr	r3, [pc, #616]	; (8006b28 <UART_SetConfig+0x338>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c8:	d011      	beq.n	80068ee <UART_SetConfig+0xfe>
 80068ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068ce:	d817      	bhi.n	8006900 <UART_SetConfig+0x110>
 80068d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d4:	d011      	beq.n	80068fa <UART_SetConfig+0x10a>
 80068d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068da:	d811      	bhi.n	8006900 <UART_SetConfig+0x110>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <UART_SetConfig+0xf8>
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e4:	d006      	beq.n	80068f4 <UART_SetConfig+0x104>
 80068e6:	e00b      	b.n	8006900 <UART_SetConfig+0x110>
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e08b      	b.n	8006a06 <UART_SetConfig+0x216>
 80068ee:	2302      	movs	r3, #2
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e088      	b.n	8006a06 <UART_SetConfig+0x216>
 80068f4:	2304      	movs	r3, #4
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e085      	b.n	8006a06 <UART_SetConfig+0x216>
 80068fa:	2308      	movs	r3, #8
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e082      	b.n	8006a06 <UART_SetConfig+0x216>
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e07f      	b.n	8006a06 <UART_SetConfig+0x216>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a89      	ldr	r2, [pc, #548]	; (8006b30 <UART_SetConfig+0x340>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d124      	bne.n	800695a <UART_SetConfig+0x16a>
 8006910:	4b85      	ldr	r3, [pc, #532]	; (8006b28 <UART_SetConfig+0x338>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006918:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800691c:	d011      	beq.n	8006942 <UART_SetConfig+0x152>
 800691e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006922:	d817      	bhi.n	8006954 <UART_SetConfig+0x164>
 8006924:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006928:	d011      	beq.n	800694e <UART_SetConfig+0x15e>
 800692a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800692e:	d811      	bhi.n	8006954 <UART_SetConfig+0x164>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <UART_SetConfig+0x14c>
 8006934:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006938:	d006      	beq.n	8006948 <UART_SetConfig+0x158>
 800693a:	e00b      	b.n	8006954 <UART_SetConfig+0x164>
 800693c:	2300      	movs	r3, #0
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e061      	b.n	8006a06 <UART_SetConfig+0x216>
 8006942:	2302      	movs	r3, #2
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e05e      	b.n	8006a06 <UART_SetConfig+0x216>
 8006948:	2304      	movs	r3, #4
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e05b      	b.n	8006a06 <UART_SetConfig+0x216>
 800694e:	2308      	movs	r3, #8
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e058      	b.n	8006a06 <UART_SetConfig+0x216>
 8006954:	2310      	movs	r3, #16
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e055      	b.n	8006a06 <UART_SetConfig+0x216>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a75      	ldr	r2, [pc, #468]	; (8006b34 <UART_SetConfig+0x344>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d124      	bne.n	80069ae <UART_SetConfig+0x1be>
 8006964:	4b70      	ldr	r3, [pc, #448]	; (8006b28 <UART_SetConfig+0x338>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800696c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006970:	d011      	beq.n	8006996 <UART_SetConfig+0x1a6>
 8006972:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006976:	d817      	bhi.n	80069a8 <UART_SetConfig+0x1b8>
 8006978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800697c:	d011      	beq.n	80069a2 <UART_SetConfig+0x1b2>
 800697e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006982:	d811      	bhi.n	80069a8 <UART_SetConfig+0x1b8>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <UART_SetConfig+0x1a0>
 8006988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698c:	d006      	beq.n	800699c <UART_SetConfig+0x1ac>
 800698e:	e00b      	b.n	80069a8 <UART_SetConfig+0x1b8>
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e037      	b.n	8006a06 <UART_SetConfig+0x216>
 8006996:	2302      	movs	r3, #2
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e034      	b.n	8006a06 <UART_SetConfig+0x216>
 800699c:	2304      	movs	r3, #4
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e031      	b.n	8006a06 <UART_SetConfig+0x216>
 80069a2:	2308      	movs	r3, #8
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e02e      	b.n	8006a06 <UART_SetConfig+0x216>
 80069a8:	2310      	movs	r3, #16
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e02b      	b.n	8006a06 <UART_SetConfig+0x216>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a61      	ldr	r2, [pc, #388]	; (8006b38 <UART_SetConfig+0x348>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d124      	bne.n	8006a02 <UART_SetConfig+0x212>
 80069b8:	4b5b      	ldr	r3, [pc, #364]	; (8006b28 <UART_SetConfig+0x338>)
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069c4:	d011      	beq.n	80069ea <UART_SetConfig+0x1fa>
 80069c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069ca:	d817      	bhi.n	80069fc <UART_SetConfig+0x20c>
 80069cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d0:	d011      	beq.n	80069f6 <UART_SetConfig+0x206>
 80069d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d6:	d811      	bhi.n	80069fc <UART_SetConfig+0x20c>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <UART_SetConfig+0x1f4>
 80069dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e0:	d006      	beq.n	80069f0 <UART_SetConfig+0x200>
 80069e2:	e00b      	b.n	80069fc <UART_SetConfig+0x20c>
 80069e4:	2300      	movs	r3, #0
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e00d      	b.n	8006a06 <UART_SetConfig+0x216>
 80069ea:	2302      	movs	r3, #2
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e00a      	b.n	8006a06 <UART_SetConfig+0x216>
 80069f0:	2304      	movs	r3, #4
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e007      	b.n	8006a06 <UART_SetConfig+0x216>
 80069f6:	2308      	movs	r3, #8
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e004      	b.n	8006a06 <UART_SetConfig+0x216>
 80069fc:	2310      	movs	r3, #16
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e001      	b.n	8006a06 <UART_SetConfig+0x216>
 8006a02:	2310      	movs	r3, #16
 8006a04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0e:	d15c      	bne.n	8006aca <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006a10:	7ffb      	ldrb	r3, [r7, #31]
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d827      	bhi.n	8006a66 <UART_SetConfig+0x276>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x22c>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	08006a67 	.word	0x08006a67
 8006a2c:	08006a57 	.word	0x08006a57
 8006a30:	08006a67 	.word	0x08006a67
 8006a34:	08006a67 	.word	0x08006a67
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a5f 	.word	0x08006a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fe ffa8 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006a44:	61b8      	str	r0, [r7, #24]
        break;
 8006a46:	e013      	b.n	8006a70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a48:	f7fe ffc6 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 8006a4c:	61b8      	str	r0, [r7, #24]
        break;
 8006a4e:	e00f      	b.n	8006a70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a50:	4b3a      	ldr	r3, [pc, #232]	; (8006b3c <UART_SetConfig+0x34c>)
 8006a52:	61bb      	str	r3, [r7, #24]
        break;
 8006a54:	e00c      	b.n	8006a70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fe ff27 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8006a5a:	61b8      	str	r0, [r7, #24]
        break;
 8006a5c:	e008      	b.n	8006a70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a62:	61bb      	str	r3, [r7, #24]
        break;
 8006a64:	e004      	b.n	8006a70 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8085 	beq.w	8006b82 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	005a      	lsls	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	441a      	add	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b0f      	cmp	r3, #15
 8006a94:	d916      	bls.n	8006ac4 <UART_SetConfig+0x2d4>
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a9c:	d212      	bcs.n	8006ac4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f023 030f 	bic.w	r3, r3, #15
 8006aa6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	89fa      	ldrh	r2, [r7, #14]
 8006ac0:	60da      	str	r2, [r3, #12]
 8006ac2:	e05e      	b.n	8006b82 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	77bb      	strb	r3, [r7, #30]
 8006ac8:	e05b      	b.n	8006b82 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aca:	7ffb      	ldrb	r3, [r7, #31]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d837      	bhi.n	8006b40 <UART_SetConfig+0x350>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <UART_SetConfig+0x2e8>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b05 	.word	0x08006b05
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	08006b41 	.word	0x08006b41
 8006ae8:	08006b13 	.word	0x08006b13
 8006aec:	08006b41 	.word	0x08006b41
 8006af0:	08006b41 	.word	0x08006b41
 8006af4:	08006b41 	.word	0x08006b41
 8006af8:	08006b1b 	.word	0x08006b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006afc:	f7fe ff4a 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006b00:	61b8      	str	r0, [r7, #24]
        break;
 8006b02:	e022      	b.n	8006b4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b04:	f7fe ff68 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 8006b08:	61b8      	str	r0, [r7, #24]
        break;
 8006b0a:	e01e      	b.n	8006b4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <UART_SetConfig+0x34c>)
 8006b0e:	61bb      	str	r3, [r7, #24]
        break;
 8006b10:	e01b      	b.n	8006b4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b12:	f7fe fec9 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8006b16:	61b8      	str	r0, [r7, #24]
        break;
 8006b18:	e017      	b.n	8006b4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b1e:	61bb      	str	r3, [r7, #24]
        break;
 8006b20:	e013      	b.n	8006b4a <UART_SetConfig+0x35a>
 8006b22:	bf00      	nop
 8006b24:	40013800 	.word	0x40013800
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	40004400 	.word	0x40004400
 8006b30:	40004800 	.word	0x40004800
 8006b34:	40004c00 	.word	0x40004c00
 8006b38:	40005000 	.word	0x40005000
 8006b3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	77bb      	strb	r3, [r7, #30]
        break;
 8006b48:	bf00      	nop
    }

    if (pclk != 0U)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d018      	beq.n	8006b82 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	085a      	lsrs	r2, r3, #1
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	441a      	add	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b0f      	cmp	r3, #15
 8006b6a:	d908      	bls.n	8006b7e <UART_SetConfig+0x38e>
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b72:	d204      	bcs.n	8006b7e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	60da      	str	r2, [r3, #12]
 8006b7c:	e001      	b.n	8006b82 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b8e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01a      	beq.n	8006cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c96:	d10a      	bne.n	8006cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cec:	f7fc fba0 	bl	8003430 <HAL_GetTick>
 8006cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d10e      	bne.n	8006d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f82d 	bl	8006d6e <UART_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e023      	b.n	8006d66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d10e      	bne.n	8006d4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f817 	bl	8006d6e <UART_WaitOnFlagUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e00d      	b.n	8006d66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b09c      	sub	sp, #112	; 0x70
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7e:	e0a5      	b.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	f000 80a1 	beq.w	8006ecc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8a:	f7fc fb51 	bl	8003430 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d13e      	bne.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006db4:	667b      	str	r3, [r7, #100]	; 0x64
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	663b      	str	r3, [r7, #96]	; 0x60
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006df2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006df4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e5      	bne.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e067      	b.n	8006eee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d04f      	beq.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3a:	d147      	bne.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
 8006e66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e6      	bne.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e98:	623a      	str	r2, [r7, #32]
 8006e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e010      	b.n	8006eee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69da      	ldr	r2, [r3, #28]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	bf0c      	ite	eq
 8006edc:	2301      	moveq	r3, #1
 8006ede:	2300      	movne	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	f43f af4a 	beq.w	8006d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3770      	adds	r7, #112	; 0x70
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <__errno>:
 8006ef8:	4b01      	ldr	r3, [pc, #4]	; (8006f00 <__errno+0x8>)
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000184 	.word	0x20000184

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4d0d      	ldr	r5, [pc, #52]	; (8006f3c <__libc_init_array+0x38>)
 8006f08:	4c0d      	ldr	r4, [pc, #52]	; (8006f40 <__libc_init_array+0x3c>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	2600      	movs	r6, #0
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	4d0b      	ldr	r5, [pc, #44]	; (8006f44 <__libc_init_array+0x40>)
 8006f16:	4c0c      	ldr	r4, [pc, #48]	; (8006f48 <__libc_init_array+0x44>)
 8006f18:	f002 fd08 	bl	800992c <_init>
 8006f1c:	1b64      	subs	r4, r4, r5
 8006f1e:	10a4      	asrs	r4, r4, #2
 8006f20:	2600      	movs	r6, #0
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08009d9c 	.word	0x08009d9c
 8006f40:	08009d9c 	.word	0x08009d9c
 8006f44:	08009d9c 	.word	0x08009d9c
 8006f48:	08009da0 	.word	0x08009da0

08006f4c <memset>:
 8006f4c:	4402      	add	r2, r0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d100      	bne.n	8006f56 <memset+0xa>
 8006f54:	4770      	bx	lr
 8006f56:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5a:	e7f9      	b.n	8006f50 <memset+0x4>

08006f5c <__cvt>:
 8006f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	ec55 4b10 	vmov	r4, r5, d0
 8006f64:	2d00      	cmp	r5, #0
 8006f66:	460e      	mov	r6, r1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	bfbb      	ittet	lt
 8006f6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f72:	461d      	movlt	r5, r3
 8006f74:	2300      	movge	r3, #0
 8006f76:	232d      	movlt	r3, #45	; 0x2d
 8006f78:	700b      	strb	r3, [r1, #0]
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f80:	4691      	mov	r9, r2
 8006f82:	f023 0820 	bic.w	r8, r3, #32
 8006f86:	bfbc      	itt	lt
 8006f88:	4622      	movlt	r2, r4
 8006f8a:	4614      	movlt	r4, r2
 8006f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f90:	d005      	beq.n	8006f9e <__cvt+0x42>
 8006f92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f96:	d100      	bne.n	8006f9a <__cvt+0x3e>
 8006f98:	3601      	adds	r6, #1
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	e000      	b.n	8006fa0 <__cvt+0x44>
 8006f9e:	2103      	movs	r1, #3
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	ab02      	add	r3, sp, #8
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	ec45 4b10 	vmov	d0, r4, r5
 8006fac:	4653      	mov	r3, sl
 8006fae:	4632      	mov	r2, r6
 8006fb0:	f000 fce2 	bl	8007978 <_dtoa_r>
 8006fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fb8:	4607      	mov	r7, r0
 8006fba:	d102      	bne.n	8006fc2 <__cvt+0x66>
 8006fbc:	f019 0f01 	tst.w	r9, #1
 8006fc0:	d022      	beq.n	8007008 <__cvt+0xac>
 8006fc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc6:	eb07 0906 	add.w	r9, r7, r6
 8006fca:	d110      	bne.n	8006fee <__cvt+0x92>
 8006fcc:	783b      	ldrb	r3, [r7, #0]
 8006fce:	2b30      	cmp	r3, #48	; 0x30
 8006fd0:	d10a      	bne.n	8006fe8 <__cvt+0x8c>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fde:	b918      	cbnz	r0, 8006fe8 <__cvt+0x8c>
 8006fe0:	f1c6 0601 	rsb	r6, r6, #1
 8006fe4:	f8ca 6000 	str.w	r6, [sl]
 8006fe8:	f8da 3000 	ldr.w	r3, [sl]
 8006fec:	4499      	add	r9, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7f9 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ffa:	b108      	cbz	r0, 8007000 <__cvt+0xa4>
 8006ffc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007000:	2230      	movs	r2, #48	; 0x30
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	454b      	cmp	r3, r9
 8007006:	d307      	bcc.n	8007018 <__cvt+0xbc>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700c:	1bdb      	subs	r3, r3, r7
 800700e:	4638      	mov	r0, r7
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	b004      	add	sp, #16
 8007014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	9103      	str	r1, [sp, #12]
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e7f0      	b.n	8007002 <__cvt+0xa6>

08007020 <__exponent>:
 8007020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007022:	4603      	mov	r3, r0
 8007024:	2900      	cmp	r1, #0
 8007026:	bfb8      	it	lt
 8007028:	4249      	neglt	r1, r1
 800702a:	f803 2b02 	strb.w	r2, [r3], #2
 800702e:	bfb4      	ite	lt
 8007030:	222d      	movlt	r2, #45	; 0x2d
 8007032:	222b      	movge	r2, #43	; 0x2b
 8007034:	2909      	cmp	r1, #9
 8007036:	7042      	strb	r2, [r0, #1]
 8007038:	dd2a      	ble.n	8007090 <__exponent+0x70>
 800703a:	f10d 0407 	add.w	r4, sp, #7
 800703e:	46a4      	mov	ip, r4
 8007040:	270a      	movs	r7, #10
 8007042:	46a6      	mov	lr, r4
 8007044:	460a      	mov	r2, r1
 8007046:	fb91 f6f7 	sdiv	r6, r1, r7
 800704a:	fb07 1516 	mls	r5, r7, r6, r1
 800704e:	3530      	adds	r5, #48	; 0x30
 8007050:	2a63      	cmp	r2, #99	; 0x63
 8007052:	f104 34ff 	add.w	r4, r4, #4294967295
 8007056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800705a:	4631      	mov	r1, r6
 800705c:	dcf1      	bgt.n	8007042 <__exponent+0x22>
 800705e:	3130      	adds	r1, #48	; 0x30
 8007060:	f1ae 0502 	sub.w	r5, lr, #2
 8007064:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007068:	1c44      	adds	r4, r0, #1
 800706a:	4629      	mov	r1, r5
 800706c:	4561      	cmp	r1, ip
 800706e:	d30a      	bcc.n	8007086 <__exponent+0x66>
 8007070:	f10d 0209 	add.w	r2, sp, #9
 8007074:	eba2 020e 	sub.w	r2, r2, lr
 8007078:	4565      	cmp	r5, ip
 800707a:	bf88      	it	hi
 800707c:	2200      	movhi	r2, #0
 800707e:	4413      	add	r3, r2
 8007080:	1a18      	subs	r0, r3, r0
 8007082:	b003      	add	sp, #12
 8007084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800708a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800708e:	e7ed      	b.n	800706c <__exponent+0x4c>
 8007090:	2330      	movs	r3, #48	; 0x30
 8007092:	3130      	adds	r1, #48	; 0x30
 8007094:	7083      	strb	r3, [r0, #2]
 8007096:	70c1      	strb	r1, [r0, #3]
 8007098:	1d03      	adds	r3, r0, #4
 800709a:	e7f1      	b.n	8007080 <__exponent+0x60>

0800709c <_printf_float>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	ed2d 8b02 	vpush	{d8}
 80070a4:	b08d      	sub	sp, #52	; 0x34
 80070a6:	460c      	mov	r4, r1
 80070a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070ac:	4616      	mov	r6, r2
 80070ae:	461f      	mov	r7, r3
 80070b0:	4605      	mov	r5, r0
 80070b2:	f001 fb43 	bl	800873c <_localeconv_r>
 80070b6:	f8d0 a000 	ldr.w	sl, [r0]
 80070ba:	4650      	mov	r0, sl
 80070bc:	f7f9 f888 	bl	80001d0 <strlen>
 80070c0:	2300      	movs	r3, #0
 80070c2:	930a      	str	r3, [sp, #40]	; 0x28
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	9305      	str	r3, [sp, #20]
 80070c8:	f8d8 3000 	ldr.w	r3, [r8]
 80070cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070d0:	3307      	adds	r3, #7
 80070d2:	f023 0307 	bic.w	r3, r3, #7
 80070d6:	f103 0208 	add.w	r2, r3, #8
 80070da:	f8c8 2000 	str.w	r2, [r8]
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80070f4:	ee08 0a10 	vmov	s16, r0
 80070f8:	4b9f      	ldr	r3, [pc, #636]	; (8007378 <_printf_float+0x2dc>)
 80070fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	f7f9 fd13 	bl	8000b2c <__aeabi_dcmpun>
 8007106:	bb88      	cbnz	r0, 800716c <_printf_float+0xd0>
 8007108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800710c:	4b9a      	ldr	r3, [pc, #616]	; (8007378 <_printf_float+0x2dc>)
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	f7f9 fced 	bl	8000af0 <__aeabi_dcmple>
 8007116:	bb48      	cbnz	r0, 800716c <_printf_float+0xd0>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8007124:	b110      	cbz	r0, 800712c <_printf_float+0x90>
 8007126:	232d      	movs	r3, #45	; 0x2d
 8007128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800712c:	4b93      	ldr	r3, [pc, #588]	; (800737c <_printf_float+0x2e0>)
 800712e:	4894      	ldr	r0, [pc, #592]	; (8007380 <_printf_float+0x2e4>)
 8007130:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007134:	bf94      	ite	ls
 8007136:	4698      	movls	r8, r3
 8007138:	4680      	movhi	r8, r0
 800713a:	2303      	movs	r3, #3
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	f023 0204 	bic.w	r2, r3, #4
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	9700      	str	r7, [sp, #0]
 800714c:	4633      	mov	r3, r6
 800714e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f9d8 	bl	8007508 <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	f040 8090 	bne.w	800727e <_printf_float+0x1e2>
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	b00d      	add	sp, #52	; 0x34
 8007164:	ecbd 8b02 	vpop	{d8}
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fcda 	bl	8000b2c <__aeabi_dcmpun>
 8007178:	b140      	cbz	r0, 800718c <_printf_float+0xf0>
 800717a:	464b      	mov	r3, r9
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfbc      	itt	lt
 8007180:	232d      	movlt	r3, #45	; 0x2d
 8007182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007186:	487f      	ldr	r0, [pc, #508]	; (8007384 <_printf_float+0x2e8>)
 8007188:	4b7f      	ldr	r3, [pc, #508]	; (8007388 <_printf_float+0x2ec>)
 800718a:	e7d1      	b.n	8007130 <_printf_float+0x94>
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007192:	9206      	str	r2, [sp, #24]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	d13f      	bne.n	8007218 <_printf_float+0x17c>
 8007198:	2306      	movs	r3, #6
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	6861      	ldr	r1, [r4, #4]
 80071a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071a4:	2300      	movs	r3, #0
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	ab0a      	add	r3, sp, #40	; 0x28
 80071aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071ae:	ab09      	add	r3, sp, #36	; 0x24
 80071b0:	ec49 8b10 	vmov	d0, r8, r9
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071bc:	4628      	mov	r0, r5
 80071be:	f7ff fecd 	bl	8006f5c <__cvt>
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071c6:	2b47      	cmp	r3, #71	; 0x47
 80071c8:	4680      	mov	r8, r0
 80071ca:	d108      	bne.n	80071de <_printf_float+0x142>
 80071cc:	1cc8      	adds	r0, r1, #3
 80071ce:	db02      	blt.n	80071d6 <_printf_float+0x13a>
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	4299      	cmp	r1, r3
 80071d4:	dd41      	ble.n	800725a <_printf_float+0x1be>
 80071d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80071da:	fa5f fb8b 	uxtb.w	fp, fp
 80071de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071e2:	d820      	bhi.n	8007226 <_printf_float+0x18a>
 80071e4:	3901      	subs	r1, #1
 80071e6:	465a      	mov	r2, fp
 80071e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071ec:	9109      	str	r1, [sp, #36]	; 0x24
 80071ee:	f7ff ff17 	bl	8007020 <__exponent>
 80071f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f4:	1813      	adds	r3, r2, r0
 80071f6:	2a01      	cmp	r2, #1
 80071f8:	4681      	mov	r9, r0
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	dc02      	bgt.n	8007204 <_printf_float+0x168>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	07d2      	lsls	r2, r2, #31
 8007202:	d501      	bpl.n	8007208 <_printf_float+0x16c>
 8007204:	3301      	adds	r3, #1
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800720c:	2b00      	cmp	r3, #0
 800720e:	d09c      	beq.n	800714a <_printf_float+0xae>
 8007210:	232d      	movs	r3, #45	; 0x2d
 8007212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007216:	e798      	b.n	800714a <_printf_float+0xae>
 8007218:	9a06      	ldr	r2, [sp, #24]
 800721a:	2a47      	cmp	r2, #71	; 0x47
 800721c:	d1be      	bne.n	800719c <_printf_float+0x100>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1bc      	bne.n	800719c <_printf_float+0x100>
 8007222:	2301      	movs	r3, #1
 8007224:	e7b9      	b.n	800719a <_printf_float+0xfe>
 8007226:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800722a:	d118      	bne.n	800725e <_printf_float+0x1c2>
 800722c:	2900      	cmp	r1, #0
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	dd0b      	ble.n	800724a <_printf_float+0x1ae>
 8007232:	6121      	str	r1, [r4, #16]
 8007234:	b913      	cbnz	r3, 800723c <_printf_float+0x1a0>
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	07d0      	lsls	r0, r2, #31
 800723a:	d502      	bpl.n	8007242 <_printf_float+0x1a6>
 800723c:	3301      	adds	r3, #1
 800723e:	440b      	add	r3, r1
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	65a1      	str	r1, [r4, #88]	; 0x58
 8007244:	f04f 0900 	mov.w	r9, #0
 8007248:	e7de      	b.n	8007208 <_printf_float+0x16c>
 800724a:	b913      	cbnz	r3, 8007252 <_printf_float+0x1b6>
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	07d2      	lsls	r2, r2, #31
 8007250:	d501      	bpl.n	8007256 <_printf_float+0x1ba>
 8007252:	3302      	adds	r3, #2
 8007254:	e7f4      	b.n	8007240 <_printf_float+0x1a4>
 8007256:	2301      	movs	r3, #1
 8007258:	e7f2      	b.n	8007240 <_printf_float+0x1a4>
 800725a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800725e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007260:	4299      	cmp	r1, r3
 8007262:	db05      	blt.n	8007270 <_printf_float+0x1d4>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	6121      	str	r1, [r4, #16]
 8007268:	07d8      	lsls	r0, r3, #31
 800726a:	d5ea      	bpl.n	8007242 <_printf_float+0x1a6>
 800726c:	1c4b      	adds	r3, r1, #1
 800726e:	e7e7      	b.n	8007240 <_printf_float+0x1a4>
 8007270:	2900      	cmp	r1, #0
 8007272:	bfd4      	ite	le
 8007274:	f1c1 0202 	rsble	r2, r1, #2
 8007278:	2201      	movgt	r2, #1
 800727a:	4413      	add	r3, r2
 800727c:	e7e0      	b.n	8007240 <_printf_float+0x1a4>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	055a      	lsls	r2, r3, #21
 8007282:	d407      	bmi.n	8007294 <_printf_float+0x1f8>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	4642      	mov	r2, r8
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	d12c      	bne.n	80072ec <_printf_float+0x250>
 8007292:	e764      	b.n	800715e <_printf_float+0xc2>
 8007294:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007298:	f240 80e0 	bls.w	800745c <_printf_float+0x3c0>
 800729c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a0:	2200      	movs	r2, #0
 80072a2:	2300      	movs	r3, #0
 80072a4:	f7f9 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d034      	beq.n	8007316 <_printf_float+0x27a>
 80072ac:	4a37      	ldr	r2, [pc, #220]	; (800738c <_printf_float+0x2f0>)
 80072ae:	2301      	movs	r3, #1
 80072b0:	4631      	mov	r1, r6
 80072b2:	4628      	mov	r0, r5
 80072b4:	47b8      	blx	r7
 80072b6:	3001      	adds	r0, #1
 80072b8:	f43f af51 	beq.w	800715e <_printf_float+0xc2>
 80072bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c0:	429a      	cmp	r2, r3
 80072c2:	db02      	blt.n	80072ca <_printf_float+0x22e>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	07d8      	lsls	r0, r3, #31
 80072c8:	d510      	bpl.n	80072ec <_printf_float+0x250>
 80072ca:	ee18 3a10 	vmov	r3, s16
 80072ce:	4652      	mov	r2, sl
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f af41 	beq.w	800715e <_printf_float+0xc2>
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	f104 091a 	add.w	r9, r4, #26
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4543      	cmp	r3, r8
 80072ea:	dc09      	bgt.n	8007300 <_printf_float+0x264>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	079b      	lsls	r3, r3, #30
 80072f0:	f100 8105 	bmi.w	80074fe <_printf_float+0x462>
 80072f4:	68e0      	ldr	r0, [r4, #12]
 80072f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f8:	4298      	cmp	r0, r3
 80072fa:	bfb8      	it	lt
 80072fc:	4618      	movlt	r0, r3
 80072fe:	e730      	b.n	8007162 <_printf_float+0xc6>
 8007300:	2301      	movs	r3, #1
 8007302:	464a      	mov	r2, r9
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f af27 	beq.w	800715e <_printf_float+0xc2>
 8007310:	f108 0801 	add.w	r8, r8, #1
 8007314:	e7e6      	b.n	80072e4 <_printf_float+0x248>
 8007316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	dc39      	bgt.n	8007390 <_printf_float+0x2f4>
 800731c:	4a1b      	ldr	r2, [pc, #108]	; (800738c <_printf_float+0x2f0>)
 800731e:	2301      	movs	r3, #1
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f af19 	beq.w	800715e <_printf_float+0xc2>
 800732c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007330:	4313      	orrs	r3, r2
 8007332:	d102      	bne.n	800733a <_printf_float+0x29e>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07d9      	lsls	r1, r3, #31
 8007338:	d5d8      	bpl.n	80072ec <_printf_float+0x250>
 800733a:	ee18 3a10 	vmov	r3, s16
 800733e:	4652      	mov	r2, sl
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f af09 	beq.w	800715e <_printf_float+0xc2>
 800734c:	f04f 0900 	mov.w	r9, #0
 8007350:	f104 0a1a 	add.w	sl, r4, #26
 8007354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007356:	425b      	negs	r3, r3
 8007358:	454b      	cmp	r3, r9
 800735a:	dc01      	bgt.n	8007360 <_printf_float+0x2c4>
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	e792      	b.n	8007286 <_printf_float+0x1ea>
 8007360:	2301      	movs	r3, #1
 8007362:	4652      	mov	r2, sl
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f aef7 	beq.w	800715e <_printf_float+0xc2>
 8007370:	f109 0901 	add.w	r9, r9, #1
 8007374:	e7ee      	b.n	8007354 <_printf_float+0x2b8>
 8007376:	bf00      	nop
 8007378:	7fefffff 	.word	0x7fefffff
 800737c:	080099bc 	.word	0x080099bc
 8007380:	080099c0 	.word	0x080099c0
 8007384:	080099c8 	.word	0x080099c8
 8007388:	080099c4 	.word	0x080099c4
 800738c:	080099cc 	.word	0x080099cc
 8007390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007394:	429a      	cmp	r2, r3
 8007396:	bfa8      	it	ge
 8007398:	461a      	movge	r2, r3
 800739a:	2a00      	cmp	r2, #0
 800739c:	4691      	mov	r9, r2
 800739e:	dc37      	bgt.n	8007410 <_printf_float+0x374>
 80073a0:	f04f 0b00 	mov.w	fp, #0
 80073a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a8:	f104 021a 	add.w	r2, r4, #26
 80073ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ae:	9305      	str	r3, [sp, #20]
 80073b0:	eba3 0309 	sub.w	r3, r3, r9
 80073b4:	455b      	cmp	r3, fp
 80073b6:	dc33      	bgt.n	8007420 <_printf_float+0x384>
 80073b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073bc:	429a      	cmp	r2, r3
 80073be:	db3b      	blt.n	8007438 <_printf_float+0x39c>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07da      	lsls	r2, r3, #31
 80073c4:	d438      	bmi.n	8007438 <_printf_float+0x39c>
 80073c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c8:	9b05      	ldr	r3, [sp, #20]
 80073ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	eba2 0901 	sub.w	r9, r2, r1
 80073d2:	4599      	cmp	r9, r3
 80073d4:	bfa8      	it	ge
 80073d6:	4699      	movge	r9, r3
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	dc35      	bgt.n	800744a <_printf_float+0x3ae>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073e6:	f104 0a1a 	add.w	sl, r4, #26
 80073ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	eba3 0309 	sub.w	r3, r3, r9
 80073f4:	4543      	cmp	r3, r8
 80073f6:	f77f af79 	ble.w	80072ec <_printf_float+0x250>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4652      	mov	r2, sl
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f aeaa 	beq.w	800715e <_printf_float+0xc2>
 800740a:	f108 0801 	add.w	r8, r8, #1
 800740e:	e7ec      	b.n	80073ea <_printf_float+0x34e>
 8007410:	4613      	mov	r3, r2
 8007412:	4631      	mov	r1, r6
 8007414:	4642      	mov	r2, r8
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	d1c0      	bne.n	80073a0 <_printf_float+0x304>
 800741e:	e69e      	b.n	800715e <_printf_float+0xc2>
 8007420:	2301      	movs	r3, #1
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	9205      	str	r2, [sp, #20]
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae97 	beq.w	800715e <_printf_float+0xc2>
 8007430:	9a05      	ldr	r2, [sp, #20]
 8007432:	f10b 0b01 	add.w	fp, fp, #1
 8007436:	e7b9      	b.n	80073ac <_printf_float+0x310>
 8007438:	ee18 3a10 	vmov	r3, s16
 800743c:	4652      	mov	r2, sl
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d1be      	bne.n	80073c6 <_printf_float+0x32a>
 8007448:	e689      	b.n	800715e <_printf_float+0xc2>
 800744a:	9a05      	ldr	r2, [sp, #20]
 800744c:	464b      	mov	r3, r9
 800744e:	4442      	add	r2, r8
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	d1c1      	bne.n	80073de <_printf_float+0x342>
 800745a:	e680      	b.n	800715e <_printf_float+0xc2>
 800745c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800745e:	2a01      	cmp	r2, #1
 8007460:	dc01      	bgt.n	8007466 <_printf_float+0x3ca>
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d538      	bpl.n	80074d8 <_printf_float+0x43c>
 8007466:	2301      	movs	r3, #1
 8007468:	4642      	mov	r2, r8
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f ae74 	beq.w	800715e <_printf_float+0xc2>
 8007476:	ee18 3a10 	vmov	r3, s16
 800747a:	4652      	mov	r2, sl
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f ae6b 	beq.w	800715e <_printf_float+0xc2>
 8007488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	f7f9 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007494:	b9d8      	cbnz	r0, 80074ce <_printf_float+0x432>
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	f108 0201 	add.w	r2, r8, #1
 800749c:	3b01      	subs	r3, #1
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	d10e      	bne.n	80074c6 <_printf_float+0x42a>
 80074a8:	e659      	b.n	800715e <_printf_float+0xc2>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4652      	mov	r2, sl
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae52 	beq.w	800715e <_printf_float+0xc2>
 80074ba:	f108 0801 	add.w	r8, r8, #1
 80074be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4543      	cmp	r3, r8
 80074c4:	dcf1      	bgt.n	80074aa <_printf_float+0x40e>
 80074c6:	464b      	mov	r3, r9
 80074c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074cc:	e6dc      	b.n	8007288 <_printf_float+0x1ec>
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	f104 0a1a 	add.w	sl, r4, #26
 80074d6:	e7f2      	b.n	80074be <_printf_float+0x422>
 80074d8:	2301      	movs	r3, #1
 80074da:	4642      	mov	r2, r8
 80074dc:	e7df      	b.n	800749e <_printf_float+0x402>
 80074de:	2301      	movs	r3, #1
 80074e0:	464a      	mov	r2, r9
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae38 	beq.w	800715e <_printf_float+0xc2>
 80074ee:	f108 0801 	add.w	r8, r8, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	4543      	cmp	r3, r8
 80074fa:	dcf0      	bgt.n	80074de <_printf_float+0x442>
 80074fc:	e6fa      	b.n	80072f4 <_printf_float+0x258>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	f104 0919 	add.w	r9, r4, #25
 8007506:	e7f4      	b.n	80074f2 <_printf_float+0x456>

08007508 <_printf_common>:
 8007508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	4616      	mov	r6, r2
 800750e:	4699      	mov	r9, r3
 8007510:	688a      	ldr	r2, [r1, #8]
 8007512:	690b      	ldr	r3, [r1, #16]
 8007514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007518:	4293      	cmp	r3, r2
 800751a:	bfb8      	it	lt
 800751c:	4613      	movlt	r3, r2
 800751e:	6033      	str	r3, [r6, #0]
 8007520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007524:	4607      	mov	r7, r0
 8007526:	460c      	mov	r4, r1
 8007528:	b10a      	cbz	r2, 800752e <_printf_common+0x26>
 800752a:	3301      	adds	r3, #1
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	0699      	lsls	r1, r3, #26
 8007532:	bf42      	ittt	mi
 8007534:	6833      	ldrmi	r3, [r6, #0]
 8007536:	3302      	addmi	r3, #2
 8007538:	6033      	strmi	r3, [r6, #0]
 800753a:	6825      	ldr	r5, [r4, #0]
 800753c:	f015 0506 	ands.w	r5, r5, #6
 8007540:	d106      	bne.n	8007550 <_printf_common+0x48>
 8007542:	f104 0a19 	add.w	sl, r4, #25
 8007546:	68e3      	ldr	r3, [r4, #12]
 8007548:	6832      	ldr	r2, [r6, #0]
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	42ab      	cmp	r3, r5
 800754e:	dc26      	bgt.n	800759e <_printf_common+0x96>
 8007550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007554:	1e13      	subs	r3, r2, #0
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	bf18      	it	ne
 800755a:	2301      	movne	r3, #1
 800755c:	0692      	lsls	r2, r2, #26
 800755e:	d42b      	bmi.n	80075b8 <_printf_common+0xb0>
 8007560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007564:	4649      	mov	r1, r9
 8007566:	4638      	mov	r0, r7
 8007568:	47c0      	blx	r8
 800756a:	3001      	adds	r0, #1
 800756c:	d01e      	beq.n	80075ac <_printf_common+0xa4>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	68e5      	ldr	r5, [r4, #12]
 8007572:	6832      	ldr	r2, [r6, #0]
 8007574:	f003 0306 	and.w	r3, r3, #6
 8007578:	2b04      	cmp	r3, #4
 800757a:	bf08      	it	eq
 800757c:	1aad      	subeq	r5, r5, r2
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	6922      	ldr	r2, [r4, #16]
 8007582:	bf0c      	ite	eq
 8007584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007588:	2500      	movne	r5, #0
 800758a:	4293      	cmp	r3, r2
 800758c:	bfc4      	itt	gt
 800758e:	1a9b      	subgt	r3, r3, r2
 8007590:	18ed      	addgt	r5, r5, r3
 8007592:	2600      	movs	r6, #0
 8007594:	341a      	adds	r4, #26
 8007596:	42b5      	cmp	r5, r6
 8007598:	d11a      	bne.n	80075d0 <_printf_common+0xc8>
 800759a:	2000      	movs	r0, #0
 800759c:	e008      	b.n	80075b0 <_printf_common+0xa8>
 800759e:	2301      	movs	r3, #1
 80075a0:	4652      	mov	r2, sl
 80075a2:	4649      	mov	r1, r9
 80075a4:	4638      	mov	r0, r7
 80075a6:	47c0      	blx	r8
 80075a8:	3001      	adds	r0, #1
 80075aa:	d103      	bne.n	80075b4 <_printf_common+0xac>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b4:	3501      	adds	r5, #1
 80075b6:	e7c6      	b.n	8007546 <_printf_common+0x3e>
 80075b8:	18e1      	adds	r1, r4, r3
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	2030      	movs	r0, #48	; 0x30
 80075be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075c2:	4422      	add	r2, r4
 80075c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075cc:	3302      	adds	r3, #2
 80075ce:	e7c7      	b.n	8007560 <_printf_common+0x58>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4622      	mov	r2, r4
 80075d4:	4649      	mov	r1, r9
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c0      	blx	r8
 80075da:	3001      	adds	r0, #1
 80075dc:	d0e6      	beq.n	80075ac <_printf_common+0xa4>
 80075de:	3601      	adds	r6, #1
 80075e0:	e7d9      	b.n	8007596 <_printf_common+0x8e>
	...

080075e4 <_printf_i>:
 80075e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	460c      	mov	r4, r1
 80075ea:	4691      	mov	r9, r2
 80075ec:	7e27      	ldrb	r7, [r4, #24]
 80075ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075f0:	2f78      	cmp	r7, #120	; 0x78
 80075f2:	4680      	mov	r8, r0
 80075f4:	469a      	mov	sl, r3
 80075f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075fa:	d807      	bhi.n	800760c <_printf_i+0x28>
 80075fc:	2f62      	cmp	r7, #98	; 0x62
 80075fe:	d80a      	bhi.n	8007616 <_printf_i+0x32>
 8007600:	2f00      	cmp	r7, #0
 8007602:	f000 80d8 	beq.w	80077b6 <_printf_i+0x1d2>
 8007606:	2f58      	cmp	r7, #88	; 0x58
 8007608:	f000 80a3 	beq.w	8007752 <_printf_i+0x16e>
 800760c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007614:	e03a      	b.n	800768c <_printf_i+0xa8>
 8007616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800761a:	2b15      	cmp	r3, #21
 800761c:	d8f6      	bhi.n	800760c <_printf_i+0x28>
 800761e:	a001      	add	r0, pc, #4	; (adr r0, 8007624 <_printf_i+0x40>)
 8007620:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007624:	0800767d 	.word	0x0800767d
 8007628:	08007691 	.word	0x08007691
 800762c:	0800760d 	.word	0x0800760d
 8007630:	0800760d 	.word	0x0800760d
 8007634:	0800760d 	.word	0x0800760d
 8007638:	0800760d 	.word	0x0800760d
 800763c:	08007691 	.word	0x08007691
 8007640:	0800760d 	.word	0x0800760d
 8007644:	0800760d 	.word	0x0800760d
 8007648:	0800760d 	.word	0x0800760d
 800764c:	0800760d 	.word	0x0800760d
 8007650:	0800779d 	.word	0x0800779d
 8007654:	080076c1 	.word	0x080076c1
 8007658:	0800777f 	.word	0x0800777f
 800765c:	0800760d 	.word	0x0800760d
 8007660:	0800760d 	.word	0x0800760d
 8007664:	080077bf 	.word	0x080077bf
 8007668:	0800760d 	.word	0x0800760d
 800766c:	080076c1 	.word	0x080076c1
 8007670:	0800760d 	.word	0x0800760d
 8007674:	0800760d 	.word	0x0800760d
 8007678:	08007787 	.word	0x08007787
 800767c:	680b      	ldr	r3, [r1, #0]
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	600a      	str	r2, [r1, #0]
 8007684:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800768c:	2301      	movs	r3, #1
 800768e:	e0a3      	b.n	80077d8 <_printf_i+0x1f4>
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	6808      	ldr	r0, [r1, #0]
 8007694:	062e      	lsls	r6, r5, #24
 8007696:	f100 0304 	add.w	r3, r0, #4
 800769a:	d50a      	bpl.n	80076b2 <_printf_i+0xce>
 800769c:	6805      	ldr	r5, [r0, #0]
 800769e:	600b      	str	r3, [r1, #0]
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	da03      	bge.n	80076ac <_printf_i+0xc8>
 80076a4:	232d      	movs	r3, #45	; 0x2d
 80076a6:	426d      	negs	r5, r5
 80076a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ac:	485e      	ldr	r0, [pc, #376]	; (8007828 <_printf_i+0x244>)
 80076ae:	230a      	movs	r3, #10
 80076b0:	e019      	b.n	80076e6 <_printf_i+0x102>
 80076b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076b6:	6805      	ldr	r5, [r0, #0]
 80076b8:	600b      	str	r3, [r1, #0]
 80076ba:	bf18      	it	ne
 80076bc:	b22d      	sxthne	r5, r5
 80076be:	e7ef      	b.n	80076a0 <_printf_i+0xbc>
 80076c0:	680b      	ldr	r3, [r1, #0]
 80076c2:	6825      	ldr	r5, [r4, #0]
 80076c4:	1d18      	adds	r0, r3, #4
 80076c6:	6008      	str	r0, [r1, #0]
 80076c8:	0628      	lsls	r0, r5, #24
 80076ca:	d501      	bpl.n	80076d0 <_printf_i+0xec>
 80076cc:	681d      	ldr	r5, [r3, #0]
 80076ce:	e002      	b.n	80076d6 <_printf_i+0xf2>
 80076d0:	0669      	lsls	r1, r5, #25
 80076d2:	d5fb      	bpl.n	80076cc <_printf_i+0xe8>
 80076d4:	881d      	ldrh	r5, [r3, #0]
 80076d6:	4854      	ldr	r0, [pc, #336]	; (8007828 <_printf_i+0x244>)
 80076d8:	2f6f      	cmp	r7, #111	; 0x6f
 80076da:	bf0c      	ite	eq
 80076dc:	2308      	moveq	r3, #8
 80076de:	230a      	movne	r3, #10
 80076e0:	2100      	movs	r1, #0
 80076e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076e6:	6866      	ldr	r6, [r4, #4]
 80076e8:	60a6      	str	r6, [r4, #8]
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	bfa2      	ittt	ge
 80076ee:	6821      	ldrge	r1, [r4, #0]
 80076f0:	f021 0104 	bicge.w	r1, r1, #4
 80076f4:	6021      	strge	r1, [r4, #0]
 80076f6:	b90d      	cbnz	r5, 80076fc <_printf_i+0x118>
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	d04d      	beq.n	8007798 <_printf_i+0x1b4>
 80076fc:	4616      	mov	r6, r2
 80076fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007702:	fb03 5711 	mls	r7, r3, r1, r5
 8007706:	5dc7      	ldrb	r7, [r0, r7]
 8007708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800770c:	462f      	mov	r7, r5
 800770e:	42bb      	cmp	r3, r7
 8007710:	460d      	mov	r5, r1
 8007712:	d9f4      	bls.n	80076fe <_printf_i+0x11a>
 8007714:	2b08      	cmp	r3, #8
 8007716:	d10b      	bne.n	8007730 <_printf_i+0x14c>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07df      	lsls	r7, r3, #31
 800771c:	d508      	bpl.n	8007730 <_printf_i+0x14c>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	6861      	ldr	r1, [r4, #4]
 8007722:	4299      	cmp	r1, r3
 8007724:	bfde      	ittt	le
 8007726:	2330      	movle	r3, #48	; 0x30
 8007728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800772c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007730:	1b92      	subs	r2, r2, r6
 8007732:	6122      	str	r2, [r4, #16]
 8007734:	f8cd a000 	str.w	sl, [sp]
 8007738:	464b      	mov	r3, r9
 800773a:	aa03      	add	r2, sp, #12
 800773c:	4621      	mov	r1, r4
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff fee2 	bl	8007508 <_printf_common>
 8007744:	3001      	adds	r0, #1
 8007746:	d14c      	bne.n	80077e2 <_printf_i+0x1fe>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	b004      	add	sp, #16
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	4835      	ldr	r0, [pc, #212]	; (8007828 <_printf_i+0x244>)
 8007754:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	680e      	ldr	r6, [r1, #0]
 800775c:	061f      	lsls	r7, r3, #24
 800775e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007762:	600e      	str	r6, [r1, #0]
 8007764:	d514      	bpl.n	8007790 <_printf_i+0x1ac>
 8007766:	07d9      	lsls	r1, r3, #31
 8007768:	bf44      	itt	mi
 800776a:	f043 0320 	orrmi.w	r3, r3, #32
 800776e:	6023      	strmi	r3, [r4, #0]
 8007770:	b91d      	cbnz	r5, 800777a <_printf_i+0x196>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f023 0320 	bic.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	2310      	movs	r3, #16
 800777c:	e7b0      	b.n	80076e0 <_printf_i+0xfc>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	f043 0320 	orr.w	r3, r3, #32
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	2378      	movs	r3, #120	; 0x78
 8007788:	4828      	ldr	r0, [pc, #160]	; (800782c <_printf_i+0x248>)
 800778a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800778e:	e7e3      	b.n	8007758 <_printf_i+0x174>
 8007790:	065e      	lsls	r6, r3, #25
 8007792:	bf48      	it	mi
 8007794:	b2ad      	uxthmi	r5, r5
 8007796:	e7e6      	b.n	8007766 <_printf_i+0x182>
 8007798:	4616      	mov	r6, r2
 800779a:	e7bb      	b.n	8007714 <_printf_i+0x130>
 800779c:	680b      	ldr	r3, [r1, #0]
 800779e:	6826      	ldr	r6, [r4, #0]
 80077a0:	6960      	ldr	r0, [r4, #20]
 80077a2:	1d1d      	adds	r5, r3, #4
 80077a4:	600d      	str	r5, [r1, #0]
 80077a6:	0635      	lsls	r5, r6, #24
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0x1cc>
 80077ac:	6018      	str	r0, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <_printf_i+0x1d2>
 80077b0:	0671      	lsls	r1, r6, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0x1c8>
 80077b4:	8018      	strh	r0, [r3, #0]
 80077b6:	2300      	movs	r3, #0
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	4616      	mov	r6, r2
 80077bc:	e7ba      	b.n	8007734 <_printf_i+0x150>
 80077be:	680b      	ldr	r3, [r1, #0]
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	600a      	str	r2, [r1, #0]
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7f8 fd08 	bl	80001e0 <memchr>
 80077d0:	b108      	cbz	r0, 80077d6 <_printf_i+0x1f2>
 80077d2:	1b80      	subs	r0, r0, r6
 80077d4:	6060      	str	r0, [r4, #4]
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	2300      	movs	r3, #0
 80077dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e0:	e7a8      	b.n	8007734 <_printf_i+0x150>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	4632      	mov	r2, r6
 80077e6:	4649      	mov	r1, r9
 80077e8:	4640      	mov	r0, r8
 80077ea:	47d0      	blx	sl
 80077ec:	3001      	adds	r0, #1
 80077ee:	d0ab      	beq.n	8007748 <_printf_i+0x164>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	079b      	lsls	r3, r3, #30
 80077f4:	d413      	bmi.n	800781e <_printf_i+0x23a>
 80077f6:	68e0      	ldr	r0, [r4, #12]
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	4298      	cmp	r0, r3
 80077fc:	bfb8      	it	lt
 80077fe:	4618      	movlt	r0, r3
 8007800:	e7a4      	b.n	800774c <_printf_i+0x168>
 8007802:	2301      	movs	r3, #1
 8007804:	4632      	mov	r2, r6
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d09b      	beq.n	8007748 <_printf_i+0x164>
 8007810:	3501      	adds	r5, #1
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	9903      	ldr	r1, [sp, #12]
 8007816:	1a5b      	subs	r3, r3, r1
 8007818:	42ab      	cmp	r3, r5
 800781a:	dcf2      	bgt.n	8007802 <_printf_i+0x21e>
 800781c:	e7eb      	b.n	80077f6 <_printf_i+0x212>
 800781e:	2500      	movs	r5, #0
 8007820:	f104 0619 	add.w	r6, r4, #25
 8007824:	e7f5      	b.n	8007812 <_printf_i+0x22e>
 8007826:	bf00      	nop
 8007828:	080099ce 	.word	0x080099ce
 800782c:	080099df 	.word	0x080099df

08007830 <iprintf>:
 8007830:	b40f      	push	{r0, r1, r2, r3}
 8007832:	4b0a      	ldr	r3, [pc, #40]	; (800785c <iprintf+0x2c>)
 8007834:	b513      	push	{r0, r1, r4, lr}
 8007836:	681c      	ldr	r4, [r3, #0]
 8007838:	b124      	cbz	r4, 8007844 <iprintf+0x14>
 800783a:	69a3      	ldr	r3, [r4, #24]
 800783c:	b913      	cbnz	r3, 8007844 <iprintf+0x14>
 800783e:	4620      	mov	r0, r4
 8007840:	f000 fede 	bl	8008600 <__sinit>
 8007844:	ab05      	add	r3, sp, #20
 8007846:	9a04      	ldr	r2, [sp, #16]
 8007848:	68a1      	ldr	r1, [r4, #8]
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	4620      	mov	r0, r4
 800784e:	f001 fbf5 	bl	800903c <_vfiprintf_r>
 8007852:	b002      	add	sp, #8
 8007854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007858:	b004      	add	sp, #16
 800785a:	4770      	bx	lr
 800785c:	20000184 	.word	0x20000184

08007860 <quorem>:
 8007860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	6903      	ldr	r3, [r0, #16]
 8007866:	690c      	ldr	r4, [r1, #16]
 8007868:	42a3      	cmp	r3, r4
 800786a:	4607      	mov	r7, r0
 800786c:	f2c0 8081 	blt.w	8007972 <quorem+0x112>
 8007870:	3c01      	subs	r4, #1
 8007872:	f101 0814 	add.w	r8, r1, #20
 8007876:	f100 0514 	add.w	r5, r0, #20
 800787a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007888:	3301      	adds	r3, #1
 800788a:	429a      	cmp	r2, r3
 800788c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007890:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007894:	fbb2 f6f3 	udiv	r6, r2, r3
 8007898:	d331      	bcc.n	80078fe <quorem+0x9e>
 800789a:	f04f 0e00 	mov.w	lr, #0
 800789e:	4640      	mov	r0, r8
 80078a0:	46ac      	mov	ip, r5
 80078a2:	46f2      	mov	sl, lr
 80078a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80078a8:	b293      	uxth	r3, r2
 80078aa:	fb06 e303 	mla	r3, r6, r3, lr
 80078ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ebaa 0303 	sub.w	r3, sl, r3
 80078b8:	0c12      	lsrs	r2, r2, #16
 80078ba:	f8dc a000 	ldr.w	sl, [ip]
 80078be:	fb06 e202 	mla	r2, r6, r2, lr
 80078c2:	fa13 f38a 	uxtah	r3, r3, sl
 80078c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078ca:	fa1f fa82 	uxth.w	sl, r2
 80078ce:	f8dc 2000 	ldr.w	r2, [ip]
 80078d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80078d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078da:	b29b      	uxth	r3, r3
 80078dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078e0:	4581      	cmp	r9, r0
 80078e2:	f84c 3b04 	str.w	r3, [ip], #4
 80078e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078ea:	d2db      	bcs.n	80078a4 <quorem+0x44>
 80078ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80078f0:	b92b      	cbnz	r3, 80078fe <quorem+0x9e>
 80078f2:	9b01      	ldr	r3, [sp, #4]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	429d      	cmp	r5, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	d32e      	bcc.n	800795a <quorem+0xfa>
 80078fc:	613c      	str	r4, [r7, #16]
 80078fe:	4638      	mov	r0, r7
 8007900:	f001 f9b8 	bl	8008c74 <__mcmp>
 8007904:	2800      	cmp	r0, #0
 8007906:	db24      	blt.n	8007952 <quorem+0xf2>
 8007908:	3601      	adds	r6, #1
 800790a:	4628      	mov	r0, r5
 800790c:	f04f 0c00 	mov.w	ip, #0
 8007910:	f858 2b04 	ldr.w	r2, [r8], #4
 8007914:	f8d0 e000 	ldr.w	lr, [r0]
 8007918:	b293      	uxth	r3, r2
 800791a:	ebac 0303 	sub.w	r3, ip, r3
 800791e:	0c12      	lsrs	r2, r2, #16
 8007920:	fa13 f38e 	uxtah	r3, r3, lr
 8007924:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800792c:	b29b      	uxth	r3, r3
 800792e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007932:	45c1      	cmp	r9, r8
 8007934:	f840 3b04 	str.w	r3, [r0], #4
 8007938:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800793c:	d2e8      	bcs.n	8007910 <quorem+0xb0>
 800793e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007946:	b922      	cbnz	r2, 8007952 <quorem+0xf2>
 8007948:	3b04      	subs	r3, #4
 800794a:	429d      	cmp	r5, r3
 800794c:	461a      	mov	r2, r3
 800794e:	d30a      	bcc.n	8007966 <quorem+0x106>
 8007950:	613c      	str	r4, [r7, #16]
 8007952:	4630      	mov	r0, r6
 8007954:	b003      	add	sp, #12
 8007956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	3b04      	subs	r3, #4
 800795e:	2a00      	cmp	r2, #0
 8007960:	d1cc      	bne.n	80078fc <quorem+0x9c>
 8007962:	3c01      	subs	r4, #1
 8007964:	e7c7      	b.n	80078f6 <quorem+0x96>
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	3b04      	subs	r3, #4
 800796a:	2a00      	cmp	r2, #0
 800796c:	d1f0      	bne.n	8007950 <quorem+0xf0>
 800796e:	3c01      	subs	r4, #1
 8007970:	e7eb      	b.n	800794a <quorem+0xea>
 8007972:	2000      	movs	r0, #0
 8007974:	e7ee      	b.n	8007954 <quorem+0xf4>
	...

08007978 <_dtoa_r>:
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	ed2d 8b02 	vpush	{d8}
 8007980:	ec57 6b10 	vmov	r6, r7, d0
 8007984:	b095      	sub	sp, #84	; 0x54
 8007986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800798c:	9105      	str	r1, [sp, #20]
 800798e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007992:	4604      	mov	r4, r0
 8007994:	9209      	str	r2, [sp, #36]	; 0x24
 8007996:	930f      	str	r3, [sp, #60]	; 0x3c
 8007998:	b975      	cbnz	r5, 80079b8 <_dtoa_r+0x40>
 800799a:	2010      	movs	r0, #16
 800799c:	f000 fed6 	bl	800874c <malloc>
 80079a0:	4602      	mov	r2, r0
 80079a2:	6260      	str	r0, [r4, #36]	; 0x24
 80079a4:	b920      	cbnz	r0, 80079b0 <_dtoa_r+0x38>
 80079a6:	4bb2      	ldr	r3, [pc, #712]	; (8007c70 <_dtoa_r+0x2f8>)
 80079a8:	21ea      	movs	r1, #234	; 0xea
 80079aa:	48b2      	ldr	r0, [pc, #712]	; (8007c74 <_dtoa_r+0x2fc>)
 80079ac:	f001 fd9c 	bl	80094e8 <__assert_func>
 80079b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079b4:	6005      	str	r5, [r0, #0]
 80079b6:	60c5      	str	r5, [r0, #12]
 80079b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ba:	6819      	ldr	r1, [r3, #0]
 80079bc:	b151      	cbz	r1, 80079d4 <_dtoa_r+0x5c>
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	604a      	str	r2, [r1, #4]
 80079c2:	2301      	movs	r3, #1
 80079c4:	4093      	lsls	r3, r2
 80079c6:	608b      	str	r3, [r1, #8]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 ff15 	bl	80087f8 <_Bfree>
 80079ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	1e3b      	subs	r3, r7, #0
 80079d6:	bfb9      	ittee	lt
 80079d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079dc:	9303      	strlt	r3, [sp, #12]
 80079de:	2300      	movge	r3, #0
 80079e0:	f8c8 3000 	strge.w	r3, [r8]
 80079e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80079e8:	4ba3      	ldr	r3, [pc, #652]	; (8007c78 <_dtoa_r+0x300>)
 80079ea:	bfbc      	itt	lt
 80079ec:	2201      	movlt	r2, #1
 80079ee:	f8c8 2000 	strlt.w	r2, [r8]
 80079f2:	ea33 0309 	bics.w	r3, r3, r9
 80079f6:	d11b      	bne.n	8007a30 <_dtoa_r+0xb8>
 80079f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a04:	4333      	orrs	r3, r6
 8007a06:	f000 857a 	beq.w	80084fe <_dtoa_r+0xb86>
 8007a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a0c:	b963      	cbnz	r3, 8007a28 <_dtoa_r+0xb0>
 8007a0e:	4b9b      	ldr	r3, [pc, #620]	; (8007c7c <_dtoa_r+0x304>)
 8007a10:	e024      	b.n	8007a5c <_dtoa_r+0xe4>
 8007a12:	4b9b      	ldr	r3, [pc, #620]	; (8007c80 <_dtoa_r+0x308>)
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	9800      	ldr	r0, [sp, #0]
 8007a1e:	b015      	add	sp, #84	; 0x54
 8007a20:	ecbd 8b02 	vpop	{d8}
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	4b94      	ldr	r3, [pc, #592]	; (8007c7c <_dtoa_r+0x304>)
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	3303      	adds	r3, #3
 8007a2e:	e7f3      	b.n	8007a18 <_dtoa_r+0xa0>
 8007a30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	ec51 0b17 	vmov	r0, r1, d7
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a40:	f7f9 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a44:	4680      	mov	r8, r0
 8007a46:	b158      	cbz	r0, 8007a60 <_dtoa_r+0xe8>
 8007a48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 8551 	beq.w	80084f8 <_dtoa_r+0xb80>
 8007a56:	488b      	ldr	r0, [pc, #556]	; (8007c84 <_dtoa_r+0x30c>)
 8007a58:	6018      	str	r0, [r3, #0]
 8007a5a:	1e43      	subs	r3, r0, #1
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	e7dd      	b.n	8007a1c <_dtoa_r+0xa4>
 8007a60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a64:	aa12      	add	r2, sp, #72	; 0x48
 8007a66:	a913      	add	r1, sp, #76	; 0x4c
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f001 f9a7 	bl	8008dbc <__d2b>
 8007a6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a72:	4683      	mov	fp, r0
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	d07c      	beq.n	8007b72 <_dtoa_r+0x1fa>
 8007a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007a86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a92:	4b7d      	ldr	r3, [pc, #500]	; (8007c88 <_dtoa_r+0x310>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	f7f8 fbf5 	bl	8000288 <__aeabi_dsub>
 8007a9e:	a36e      	add	r3, pc, #440	; (adr r3, 8007c58 <_dtoa_r+0x2e0>)
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f7f8 fda8 	bl	80005f8 <__aeabi_dmul>
 8007aa8:	a36d      	add	r3, pc, #436	; (adr r3, 8007c60 <_dtoa_r+0x2e8>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f7f8 fbed 	bl	800028c <__adddf3>
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	460f      	mov	r7, r1
 8007ab8:	f7f8 fd34 	bl	8000524 <__aeabi_i2d>
 8007abc:	a36a      	add	r3, pc, #424	; (adr r3, 8007c68 <_dtoa_r+0x2f0>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f7f8 fd99 	bl	80005f8 <__aeabi_dmul>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4630      	mov	r0, r6
 8007acc:	4639      	mov	r1, r7
 8007ace:	f7f8 fbdd 	bl	800028c <__adddf3>
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	f7f9 f83f 	bl	8000b58 <__aeabi_d2iz>
 8007ada:	2200      	movs	r2, #0
 8007adc:	4682      	mov	sl, r0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f8 fffa 	bl	8000adc <__aeabi_dcmplt>
 8007ae8:	b148      	cbz	r0, 8007afe <_dtoa_r+0x186>
 8007aea:	4650      	mov	r0, sl
 8007aec:	f7f8 fd1a 	bl	8000524 <__aeabi_i2d>
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	f7f8 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af8:	b908      	cbnz	r0, 8007afe <_dtoa_r+0x186>
 8007afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007afe:	f1ba 0f16 	cmp.w	sl, #22
 8007b02:	d854      	bhi.n	8007bae <_dtoa_r+0x236>
 8007b04:	4b61      	ldr	r3, [pc, #388]	; (8007c8c <_dtoa_r+0x314>)
 8007b06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b12:	f7f8 ffe3 	bl	8000adc <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d04b      	beq.n	8007bb2 <_dtoa_r+0x23a>
 8007b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b1e:	2300      	movs	r3, #0
 8007b20:	930e      	str	r3, [sp, #56]	; 0x38
 8007b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b24:	1b5d      	subs	r5, r3, r5
 8007b26:	1e6b      	subs	r3, r5, #1
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	bf43      	ittte	mi
 8007b2c:	2300      	movmi	r3, #0
 8007b2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007b32:	9304      	strmi	r3, [sp, #16]
 8007b34:	f04f 0800 	movpl.w	r8, #0
 8007b38:	f1ba 0f00 	cmp.w	sl, #0
 8007b3c:	db3b      	blt.n	8007bb6 <_dtoa_r+0x23e>
 8007b3e:	9b04      	ldr	r3, [sp, #16]
 8007b40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007b44:	4453      	add	r3, sl
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9306      	str	r3, [sp, #24]
 8007b4c:	9b05      	ldr	r3, [sp, #20]
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d869      	bhi.n	8007c26 <_dtoa_r+0x2ae>
 8007b52:	2b05      	cmp	r3, #5
 8007b54:	bfc4      	itt	gt
 8007b56:	3b04      	subgt	r3, #4
 8007b58:	9305      	strgt	r3, [sp, #20]
 8007b5a:	9b05      	ldr	r3, [sp, #20]
 8007b5c:	f1a3 0302 	sub.w	r3, r3, #2
 8007b60:	bfcc      	ite	gt
 8007b62:	2500      	movgt	r5, #0
 8007b64:	2501      	movle	r5, #1
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d869      	bhi.n	8007c3e <_dtoa_r+0x2c6>
 8007b6a:	e8df f003 	tbb	[pc, r3]
 8007b6e:	4e2c      	.short	0x4e2c
 8007b70:	5a4c      	.short	0x5a4c
 8007b72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007b76:	441d      	add	r5, r3
 8007b78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	bfc1      	itttt	gt
 8007b80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b88:	fa09 f303 	lslgt.w	r3, r9, r3
 8007b8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b90:	bfda      	itte	le
 8007b92:	f1c3 0320 	rsble	r3, r3, #32
 8007b96:	fa06 f003 	lslle.w	r0, r6, r3
 8007b9a:	4318      	orrgt	r0, r3
 8007b9c:	f7f8 fcb2 	bl	8000504 <__aeabi_ui2d>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ba8:	3d01      	subs	r5, #1
 8007baa:	9310      	str	r3, [sp, #64]	; 0x40
 8007bac:	e771      	b.n	8007a92 <_dtoa_r+0x11a>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e7b6      	b.n	8007b20 <_dtoa_r+0x1a8>
 8007bb2:	900e      	str	r0, [sp, #56]	; 0x38
 8007bb4:	e7b5      	b.n	8007b22 <_dtoa_r+0x1aa>
 8007bb6:	f1ca 0300 	rsb	r3, sl, #0
 8007bba:	9306      	str	r3, [sp, #24]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	eba8 080a 	sub.w	r8, r8, sl
 8007bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8007bc4:	e7c2      	b.n	8007b4c <_dtoa_r+0x1d4>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9308      	str	r3, [sp, #32]
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dc39      	bgt.n	8007c44 <_dtoa_r+0x2cc>
 8007bd0:	f04f 0901 	mov.w	r9, #1
 8007bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bd8:	464b      	mov	r3, r9
 8007bda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007bde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007be0:	2200      	movs	r2, #0
 8007be2:	6042      	str	r2, [r0, #4]
 8007be4:	2204      	movs	r2, #4
 8007be6:	f102 0614 	add.w	r6, r2, #20
 8007bea:	429e      	cmp	r6, r3
 8007bec:	6841      	ldr	r1, [r0, #4]
 8007bee:	d92f      	bls.n	8007c50 <_dtoa_r+0x2d8>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fdc1 	bl	8008778 <_Balloc>
 8007bf6:	9000      	str	r0, [sp, #0]
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d14b      	bne.n	8007c94 <_dtoa_r+0x31c>
 8007bfc:	4b24      	ldr	r3, [pc, #144]	; (8007c90 <_dtoa_r+0x318>)
 8007bfe:	4602      	mov	r2, r0
 8007c00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c04:	e6d1      	b.n	80079aa <_dtoa_r+0x32>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e7de      	b.n	8007bc8 <_dtoa_r+0x250>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9308      	str	r3, [sp, #32]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	eb0a 0903 	add.w	r9, sl, r3
 8007c14:	f109 0301 	add.w	r3, r9, #1
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	bfb8      	it	lt
 8007c1e:	2301      	movlt	r3, #1
 8007c20:	e7dd      	b.n	8007bde <_dtoa_r+0x266>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e7f2      	b.n	8007c0c <_dtoa_r+0x294>
 8007c26:	2501      	movs	r5, #1
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	9508      	str	r5, [sp, #32]
 8007c2e:	f04f 39ff 	mov.w	r9, #4294967295
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c38:	2312      	movs	r3, #18
 8007c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c3c:	e7cf      	b.n	8007bde <_dtoa_r+0x266>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	9308      	str	r3, [sp, #32]
 8007c42:	e7f4      	b.n	8007c2e <_dtoa_r+0x2b6>
 8007c44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007c48:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	e7c6      	b.n	8007bde <_dtoa_r+0x266>
 8007c50:	3101      	adds	r1, #1
 8007c52:	6041      	str	r1, [r0, #4]
 8007c54:	0052      	lsls	r2, r2, #1
 8007c56:	e7c6      	b.n	8007be6 <_dtoa_r+0x26e>
 8007c58:	636f4361 	.word	0x636f4361
 8007c5c:	3fd287a7 	.word	0x3fd287a7
 8007c60:	8b60c8b3 	.word	0x8b60c8b3
 8007c64:	3fc68a28 	.word	0x3fc68a28
 8007c68:	509f79fb 	.word	0x509f79fb
 8007c6c:	3fd34413 	.word	0x3fd34413
 8007c70:	080099fd 	.word	0x080099fd
 8007c74:	08009a14 	.word	0x08009a14
 8007c78:	7ff00000 	.word	0x7ff00000
 8007c7c:	080099f9 	.word	0x080099f9
 8007c80:	080099f0 	.word	0x080099f0
 8007c84:	080099cd 	.word	0x080099cd
 8007c88:	3ff80000 	.word	0x3ff80000
 8007c8c:	08009b70 	.word	0x08009b70
 8007c90:	08009a73 	.word	0x08009a73
 8007c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c96:	9a00      	ldr	r2, [sp, #0]
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	2b0e      	cmp	r3, #14
 8007c9e:	f200 80ad 	bhi.w	8007dfc <_dtoa_r+0x484>
 8007ca2:	2d00      	cmp	r5, #0
 8007ca4:	f000 80aa 	beq.w	8007dfc <_dtoa_r+0x484>
 8007ca8:	f1ba 0f00 	cmp.w	sl, #0
 8007cac:	dd36      	ble.n	8007d1c <_dtoa_r+0x3a4>
 8007cae:	4ac3      	ldr	r2, [pc, #780]	; (8007fbc <_dtoa_r+0x644>)
 8007cb0:	f00a 030f 	and.w	r3, sl, #15
 8007cb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cb8:	ed93 7b00 	vldr	d7, [r3]
 8007cbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007cc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007cc4:	eeb0 8a47 	vmov.f32	s16, s14
 8007cc8:	eef0 8a67 	vmov.f32	s17, s15
 8007ccc:	d016      	beq.n	8007cfc <_dtoa_r+0x384>
 8007cce:	4bbc      	ldr	r3, [pc, #752]	; (8007fc0 <_dtoa_r+0x648>)
 8007cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cd8:	f7f8 fdb8 	bl	800084c <__aeabi_ddiv>
 8007cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce0:	f007 070f 	and.w	r7, r7, #15
 8007ce4:	2503      	movs	r5, #3
 8007ce6:	4eb6      	ldr	r6, [pc, #728]	; (8007fc0 <_dtoa_r+0x648>)
 8007ce8:	b957      	cbnz	r7, 8007d00 <_dtoa_r+0x388>
 8007cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cee:	ec53 2b18 	vmov	r2, r3, d8
 8007cf2:	f7f8 fdab 	bl	800084c <__aeabi_ddiv>
 8007cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cfa:	e029      	b.n	8007d50 <_dtoa_r+0x3d8>
 8007cfc:	2502      	movs	r5, #2
 8007cfe:	e7f2      	b.n	8007ce6 <_dtoa_r+0x36e>
 8007d00:	07f9      	lsls	r1, r7, #31
 8007d02:	d508      	bpl.n	8007d16 <_dtoa_r+0x39e>
 8007d04:	ec51 0b18 	vmov	r0, r1, d8
 8007d08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d0c:	f7f8 fc74 	bl	80005f8 <__aeabi_dmul>
 8007d10:	ec41 0b18 	vmov	d8, r0, r1
 8007d14:	3501      	adds	r5, #1
 8007d16:	107f      	asrs	r7, r7, #1
 8007d18:	3608      	adds	r6, #8
 8007d1a:	e7e5      	b.n	8007ce8 <_dtoa_r+0x370>
 8007d1c:	f000 80a6 	beq.w	8007e6c <_dtoa_r+0x4f4>
 8007d20:	f1ca 0600 	rsb	r6, sl, #0
 8007d24:	4ba5      	ldr	r3, [pc, #660]	; (8007fbc <_dtoa_r+0x644>)
 8007d26:	4fa6      	ldr	r7, [pc, #664]	; (8007fc0 <_dtoa_r+0x648>)
 8007d28:	f006 020f 	and.w	r2, r6, #15
 8007d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d38:	f7f8 fc5e 	bl	80005f8 <__aeabi_dmul>
 8007d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d40:	1136      	asrs	r6, r6, #4
 8007d42:	2300      	movs	r3, #0
 8007d44:	2502      	movs	r5, #2
 8007d46:	2e00      	cmp	r6, #0
 8007d48:	f040 8085 	bne.w	8007e56 <_dtoa_r+0x4de>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1d2      	bne.n	8007cf6 <_dtoa_r+0x37e>
 8007d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 808c 	beq.w	8007e70 <_dtoa_r+0x4f8>
 8007d58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d5c:	4b99      	ldr	r3, [pc, #612]	; (8007fc4 <_dtoa_r+0x64c>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 feba 	bl	8000adc <__aeabi_dcmplt>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f000 8081 	beq.w	8007e70 <_dtoa_r+0x4f8>
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d07d      	beq.n	8007e70 <_dtoa_r+0x4f8>
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	dd3c      	ble.n	8007df4 <_dtoa_r+0x47c>
 8007d7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007d7e:	9307      	str	r3, [sp, #28]
 8007d80:	2200      	movs	r2, #0
 8007d82:	4b91      	ldr	r3, [pc, #580]	; (8007fc8 <_dtoa_r+0x650>)
 8007d84:	4630      	mov	r0, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d90:	3501      	adds	r5, #1
 8007d92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007d96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7f8 fbc2 	bl	8000524 <__aeabi_i2d>
 8007da0:	4632      	mov	r2, r6
 8007da2:	463b      	mov	r3, r7
 8007da4:	f7f8 fc28 	bl	80005f8 <__aeabi_dmul>
 8007da8:	4b88      	ldr	r3, [pc, #544]	; (8007fcc <_dtoa_r+0x654>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	f7f8 fa6e 	bl	800028c <__adddf3>
 8007db0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db8:	9303      	str	r3, [sp, #12]
 8007dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d15c      	bne.n	8007e7a <_dtoa_r+0x502>
 8007dc0:	4b83      	ldr	r3, [pc, #524]	; (8007fd0 <_dtoa_r+0x658>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f7f8 fa5e 	bl	8000288 <__aeabi_dsub>
 8007dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	460f      	mov	r7, r1
 8007dd4:	f7f8 fea0 	bl	8000b18 <__aeabi_dcmpgt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f040 8296 	bne.w	800830a <_dtoa_r+0x992>
 8007dde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007de2:	4630      	mov	r0, r6
 8007de4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007de8:	4639      	mov	r1, r7
 8007dea:	f7f8 fe77 	bl	8000adc <__aeabi_dcmplt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f040 8288 	bne.w	8008304 <_dtoa_r+0x98c>
 8007df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f2c0 8158 	blt.w	80080b4 <_dtoa_r+0x73c>
 8007e04:	f1ba 0f0e 	cmp.w	sl, #14
 8007e08:	f300 8154 	bgt.w	80080b4 <_dtoa_r+0x73c>
 8007e0c:	4b6b      	ldr	r3, [pc, #428]	; (8007fbc <_dtoa_r+0x644>)
 8007e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f280 80e3 	bge.w	8007fe4 <_dtoa_r+0x66c>
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f300 80df 	bgt.w	8007fe4 <_dtoa_r+0x66c>
 8007e26:	f040 826d 	bne.w	8008304 <_dtoa_r+0x98c>
 8007e2a:	4b69      	ldr	r3, [pc, #420]	; (8007fd0 <_dtoa_r+0x658>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4649      	mov	r1, r9
 8007e32:	f7f8 fbe1 	bl	80005f8 <__aeabi_dmul>
 8007e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e3a:	f7f8 fe63 	bl	8000b04 <__aeabi_dcmpge>
 8007e3e:	9e01      	ldr	r6, [sp, #4]
 8007e40:	4637      	mov	r7, r6
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f040 8243 	bne.w	80082ce <_dtoa_r+0x956>
 8007e48:	9d00      	ldr	r5, [sp, #0]
 8007e4a:	2331      	movs	r3, #49	; 0x31
 8007e4c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e50:	f10a 0a01 	add.w	sl, sl, #1
 8007e54:	e23f      	b.n	80082d6 <_dtoa_r+0x95e>
 8007e56:	07f2      	lsls	r2, r6, #31
 8007e58:	d505      	bpl.n	8007e66 <_dtoa_r+0x4ee>
 8007e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5e:	f7f8 fbcb 	bl	80005f8 <__aeabi_dmul>
 8007e62:	3501      	adds	r5, #1
 8007e64:	2301      	movs	r3, #1
 8007e66:	1076      	asrs	r6, r6, #1
 8007e68:	3708      	adds	r7, #8
 8007e6a:	e76c      	b.n	8007d46 <_dtoa_r+0x3ce>
 8007e6c:	2502      	movs	r5, #2
 8007e6e:	e76f      	b.n	8007d50 <_dtoa_r+0x3d8>
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e76:	930c      	str	r3, [sp, #48]	; 0x30
 8007e78:	e78d      	b.n	8007d96 <_dtoa_r+0x41e>
 8007e7a:	9900      	ldr	r1, [sp, #0]
 8007e7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e80:	4b4e      	ldr	r3, [pc, #312]	; (8007fbc <_dtoa_r+0x644>)
 8007e82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e86:	4401      	add	r1, r0
 8007e88:	9102      	str	r1, [sp, #8]
 8007e8a:	9908      	ldr	r1, [sp, #32]
 8007e8c:	eeb0 8a47 	vmov.f32	s16, s14
 8007e90:	eef0 8a67 	vmov.f32	s17, s15
 8007e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	d045      	beq.n	8007f2c <_dtoa_r+0x5b4>
 8007ea0:	494c      	ldr	r1, [pc, #304]	; (8007fd4 <_dtoa_r+0x65c>)
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f7f8 fcd2 	bl	800084c <__aeabi_ddiv>
 8007ea8:	ec53 2b18 	vmov	r2, r3, d8
 8007eac:	f7f8 f9ec 	bl	8000288 <__aeabi_dsub>
 8007eb0:	9d00      	ldr	r5, [sp, #0]
 8007eb2:	ec41 0b18 	vmov	d8, r0, r1
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7f8 fe4d 	bl	8000b58 <__aeabi_d2iz>
 8007ebe:	900c      	str	r0, [sp, #48]	; 0x30
 8007ec0:	f7f8 fb30 	bl	8000524 <__aeabi_i2d>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 f9dc 	bl	8000288 <__aeabi_dsub>
 8007ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed2:	3330      	adds	r3, #48	; 0x30
 8007ed4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ed8:	ec53 2b18 	vmov	r2, r3, d8
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	f7f8 fdfc 	bl	8000adc <__aeabi_dcmplt>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d165      	bne.n	8007fb4 <_dtoa_r+0x63c>
 8007ee8:	4632      	mov	r2, r6
 8007eea:	463b      	mov	r3, r7
 8007eec:	4935      	ldr	r1, [pc, #212]	; (8007fc4 <_dtoa_r+0x64c>)
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f7f8 f9ca 	bl	8000288 <__aeabi_dsub>
 8007ef4:	ec53 2b18 	vmov	r2, r3, d8
 8007ef8:	f7f8 fdf0 	bl	8000adc <__aeabi_dcmplt>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f040 80b9 	bne.w	8008074 <_dtoa_r+0x6fc>
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	429d      	cmp	r5, r3
 8007f06:	f43f af75 	beq.w	8007df4 <_dtoa_r+0x47c>
 8007f0a:	4b2f      	ldr	r3, [pc, #188]	; (8007fc8 <_dtoa_r+0x650>)
 8007f0c:	ec51 0b18 	vmov	r0, r1, d8
 8007f10:	2200      	movs	r2, #0
 8007f12:	f7f8 fb71 	bl	80005f8 <__aeabi_dmul>
 8007f16:	4b2c      	ldr	r3, [pc, #176]	; (8007fc8 <_dtoa_r+0x650>)
 8007f18:	ec41 0b18 	vmov	d8, r0, r1
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4639      	mov	r1, r7
 8007f22:	f7f8 fb69 	bl	80005f8 <__aeabi_dmul>
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	e7c4      	b.n	8007eb6 <_dtoa_r+0x53e>
 8007f2c:	ec51 0b17 	vmov	r0, r1, d7
 8007f30:	f7f8 fb62 	bl	80005f8 <__aeabi_dmul>
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	9d00      	ldr	r5, [sp, #0]
 8007f38:	930c      	str	r3, [sp, #48]	; 0x30
 8007f3a:	ec41 0b18 	vmov	d8, r0, r1
 8007f3e:	4639      	mov	r1, r7
 8007f40:	4630      	mov	r0, r6
 8007f42:	f7f8 fe09 	bl	8000b58 <__aeabi_d2iz>
 8007f46:	9011      	str	r0, [sp, #68]	; 0x44
 8007f48:	f7f8 faec 	bl	8000524 <__aeabi_i2d>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 f998 	bl	8000288 <__aeabi_dsub>
 8007f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f5a:	3330      	adds	r3, #48	; 0x30
 8007f5c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f60:	9b02      	ldr	r3, [sp, #8]
 8007f62:	429d      	cmp	r5, r3
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	d134      	bne.n	8007fd8 <_dtoa_r+0x660>
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <_dtoa_r+0x65c>)
 8007f70:	ec51 0b18 	vmov	r0, r1, d8
 8007f74:	f7f8 f98a 	bl	800028c <__adddf3>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	4639      	mov	r1, r7
 8007f80:	f7f8 fdca 	bl	8000b18 <__aeabi_dcmpgt>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d175      	bne.n	8008074 <_dtoa_r+0x6fc>
 8007f88:	ec53 2b18 	vmov	r2, r3, d8
 8007f8c:	4911      	ldr	r1, [pc, #68]	; (8007fd4 <_dtoa_r+0x65c>)
 8007f8e:	2000      	movs	r0, #0
 8007f90:	f7f8 f97a 	bl	8000288 <__aeabi_dsub>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	4630      	mov	r0, r6
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	f7f8 fd9e 	bl	8000adc <__aeabi_dcmplt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f43f af27 	beq.w	8007df4 <_dtoa_r+0x47c>
 8007fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fa8:	1e6b      	subs	r3, r5, #1
 8007faa:	930c      	str	r3, [sp, #48]	; 0x30
 8007fac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	d0f8      	beq.n	8007fa6 <_dtoa_r+0x62e>
 8007fb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007fb8:	e04a      	b.n	8008050 <_dtoa_r+0x6d8>
 8007fba:	bf00      	nop
 8007fbc:	08009b70 	.word	0x08009b70
 8007fc0:	08009b48 	.word	0x08009b48
 8007fc4:	3ff00000 	.word	0x3ff00000
 8007fc8:	40240000 	.word	0x40240000
 8007fcc:	401c0000 	.word	0x401c0000
 8007fd0:	40140000 	.word	0x40140000
 8007fd4:	3fe00000 	.word	0x3fe00000
 8007fd8:	4baf      	ldr	r3, [pc, #700]	; (8008298 <_dtoa_r+0x920>)
 8007fda:	f7f8 fb0d 	bl	80005f8 <__aeabi_dmul>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460f      	mov	r7, r1
 8007fe2:	e7ac      	b.n	8007f3e <_dtoa_r+0x5c6>
 8007fe4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fe8:	9d00      	ldr	r5, [sp, #0]
 8007fea:	4642      	mov	r2, r8
 8007fec:	464b      	mov	r3, r9
 8007fee:	4630      	mov	r0, r6
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	f7f8 fc2b 	bl	800084c <__aeabi_ddiv>
 8007ff6:	f7f8 fdaf 	bl	8000b58 <__aeabi_d2iz>
 8007ffa:	9002      	str	r0, [sp, #8]
 8007ffc:	f7f8 fa92 	bl	8000524 <__aeabi_i2d>
 8008000:	4642      	mov	r2, r8
 8008002:	464b      	mov	r3, r9
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 f93a 	bl	8000288 <__aeabi_dsub>
 8008014:	9e02      	ldr	r6, [sp, #8]
 8008016:	9f01      	ldr	r7, [sp, #4]
 8008018:	3630      	adds	r6, #48	; 0x30
 800801a:	f805 6b01 	strb.w	r6, [r5], #1
 800801e:	9e00      	ldr	r6, [sp, #0]
 8008020:	1bae      	subs	r6, r5, r6
 8008022:	42b7      	cmp	r7, r6
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	d137      	bne.n	800809a <_dtoa_r+0x722>
 800802a:	f7f8 f92f 	bl	800028c <__adddf3>
 800802e:	4642      	mov	r2, r8
 8008030:	464b      	mov	r3, r9
 8008032:	4606      	mov	r6, r0
 8008034:	460f      	mov	r7, r1
 8008036:	f7f8 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800803a:	b9c8      	cbnz	r0, 8008070 <_dtoa_r+0x6f8>
 800803c:	4642      	mov	r2, r8
 800803e:	464b      	mov	r3, r9
 8008040:	4630      	mov	r0, r6
 8008042:	4639      	mov	r1, r7
 8008044:	f7f8 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008048:	b110      	cbz	r0, 8008050 <_dtoa_r+0x6d8>
 800804a:	9b02      	ldr	r3, [sp, #8]
 800804c:	07d9      	lsls	r1, r3, #31
 800804e:	d40f      	bmi.n	8008070 <_dtoa_r+0x6f8>
 8008050:	4620      	mov	r0, r4
 8008052:	4659      	mov	r1, fp
 8008054:	f000 fbd0 	bl	80087f8 <_Bfree>
 8008058:	2300      	movs	r3, #0
 800805a:	702b      	strb	r3, [r5, #0]
 800805c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800805e:	f10a 0001 	add.w	r0, sl, #1
 8008062:	6018      	str	r0, [r3, #0]
 8008064:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008066:	2b00      	cmp	r3, #0
 8008068:	f43f acd8 	beq.w	8007a1c <_dtoa_r+0xa4>
 800806c:	601d      	str	r5, [r3, #0]
 800806e:	e4d5      	b.n	8007a1c <_dtoa_r+0xa4>
 8008070:	f8cd a01c 	str.w	sl, [sp, #28]
 8008074:	462b      	mov	r3, r5
 8008076:	461d      	mov	r5, r3
 8008078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800807c:	2a39      	cmp	r2, #57	; 0x39
 800807e:	d108      	bne.n	8008092 <_dtoa_r+0x71a>
 8008080:	9a00      	ldr	r2, [sp, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d1f7      	bne.n	8008076 <_dtoa_r+0x6fe>
 8008086:	9a07      	ldr	r2, [sp, #28]
 8008088:	9900      	ldr	r1, [sp, #0]
 800808a:	3201      	adds	r2, #1
 800808c:	9207      	str	r2, [sp, #28]
 800808e:	2230      	movs	r2, #48	; 0x30
 8008090:	700a      	strb	r2, [r1, #0]
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	3201      	adds	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e78c      	b.n	8007fb4 <_dtoa_r+0x63c>
 800809a:	4b7f      	ldr	r3, [pc, #508]	; (8008298 <_dtoa_r+0x920>)
 800809c:	2200      	movs	r2, #0
 800809e:	f7f8 faab 	bl	80005f8 <__aeabi_dmul>
 80080a2:	2200      	movs	r2, #0
 80080a4:	2300      	movs	r3, #0
 80080a6:	4606      	mov	r6, r0
 80080a8:	460f      	mov	r7, r1
 80080aa:	f7f8 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d09b      	beq.n	8007fea <_dtoa_r+0x672>
 80080b2:	e7cd      	b.n	8008050 <_dtoa_r+0x6d8>
 80080b4:	9a08      	ldr	r2, [sp, #32]
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	f000 80c4 	beq.w	8008244 <_dtoa_r+0x8cc>
 80080bc:	9a05      	ldr	r2, [sp, #20]
 80080be:	2a01      	cmp	r2, #1
 80080c0:	f300 80a8 	bgt.w	8008214 <_dtoa_r+0x89c>
 80080c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	f000 80a0 	beq.w	800820c <_dtoa_r+0x894>
 80080cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080d0:	9e06      	ldr	r6, [sp, #24]
 80080d2:	4645      	mov	r5, r8
 80080d4:	9a04      	ldr	r2, [sp, #16]
 80080d6:	2101      	movs	r1, #1
 80080d8:	441a      	add	r2, r3
 80080da:	4620      	mov	r0, r4
 80080dc:	4498      	add	r8, r3
 80080de:	9204      	str	r2, [sp, #16]
 80080e0:	f000 fc46 	bl	8008970 <__i2b>
 80080e4:	4607      	mov	r7, r0
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	dd0b      	ble.n	8008102 <_dtoa_r+0x78a>
 80080ea:	9b04      	ldr	r3, [sp, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd08      	ble.n	8008102 <_dtoa_r+0x78a>
 80080f0:	42ab      	cmp	r3, r5
 80080f2:	9a04      	ldr	r2, [sp, #16]
 80080f4:	bfa8      	it	ge
 80080f6:	462b      	movge	r3, r5
 80080f8:	eba8 0803 	sub.w	r8, r8, r3
 80080fc:	1aed      	subs	r5, r5, r3
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	b1fb      	cbz	r3, 8008146 <_dtoa_r+0x7ce>
 8008106:	9b08      	ldr	r3, [sp, #32]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 809f 	beq.w	800824c <_dtoa_r+0x8d4>
 800810e:	2e00      	cmp	r6, #0
 8008110:	dd11      	ble.n	8008136 <_dtoa_r+0x7be>
 8008112:	4639      	mov	r1, r7
 8008114:	4632      	mov	r2, r6
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fce6 	bl	8008ae8 <__pow5mult>
 800811c:	465a      	mov	r2, fp
 800811e:	4601      	mov	r1, r0
 8008120:	4607      	mov	r7, r0
 8008122:	4620      	mov	r0, r4
 8008124:	f000 fc3a 	bl	800899c <__multiply>
 8008128:	4659      	mov	r1, fp
 800812a:	9007      	str	r0, [sp, #28]
 800812c:	4620      	mov	r0, r4
 800812e:	f000 fb63 	bl	80087f8 <_Bfree>
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	469b      	mov	fp, r3
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	1b9a      	subs	r2, r3, r6
 800813a:	d004      	beq.n	8008146 <_dtoa_r+0x7ce>
 800813c:	4659      	mov	r1, fp
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fcd2 	bl	8008ae8 <__pow5mult>
 8008144:	4683      	mov	fp, r0
 8008146:	2101      	movs	r1, #1
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fc11 	bl	8008970 <__i2b>
 800814e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008150:	2b00      	cmp	r3, #0
 8008152:	4606      	mov	r6, r0
 8008154:	dd7c      	ble.n	8008250 <_dtoa_r+0x8d8>
 8008156:	461a      	mov	r2, r3
 8008158:	4601      	mov	r1, r0
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fcc4 	bl	8008ae8 <__pow5mult>
 8008160:	9b05      	ldr	r3, [sp, #20]
 8008162:	2b01      	cmp	r3, #1
 8008164:	4606      	mov	r6, r0
 8008166:	dd76      	ble.n	8008256 <_dtoa_r+0x8de>
 8008168:	2300      	movs	r3, #0
 800816a:	9306      	str	r3, [sp, #24]
 800816c:	6933      	ldr	r3, [r6, #16]
 800816e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008172:	6918      	ldr	r0, [r3, #16]
 8008174:	f000 fbac 	bl	80088d0 <__hi0bits>
 8008178:	f1c0 0020 	rsb	r0, r0, #32
 800817c:	9b04      	ldr	r3, [sp, #16]
 800817e:	4418      	add	r0, r3
 8008180:	f010 001f 	ands.w	r0, r0, #31
 8008184:	f000 8086 	beq.w	8008294 <_dtoa_r+0x91c>
 8008188:	f1c0 0320 	rsb	r3, r0, #32
 800818c:	2b04      	cmp	r3, #4
 800818e:	dd7f      	ble.n	8008290 <_dtoa_r+0x918>
 8008190:	f1c0 001c 	rsb	r0, r0, #28
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	4403      	add	r3, r0
 8008198:	4480      	add	r8, r0
 800819a:	4405      	add	r5, r0
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	f1b8 0f00 	cmp.w	r8, #0
 80081a2:	dd05      	ble.n	80081b0 <_dtoa_r+0x838>
 80081a4:	4659      	mov	r1, fp
 80081a6:	4642      	mov	r2, r8
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fcf7 	bl	8008b9c <__lshift>
 80081ae:	4683      	mov	fp, r0
 80081b0:	9b04      	ldr	r3, [sp, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dd05      	ble.n	80081c2 <_dtoa_r+0x84a>
 80081b6:	4631      	mov	r1, r6
 80081b8:	461a      	mov	r2, r3
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fcee 	bl	8008b9c <__lshift>
 80081c0:	4606      	mov	r6, r0
 80081c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d069      	beq.n	800829c <_dtoa_r+0x924>
 80081c8:	4631      	mov	r1, r6
 80081ca:	4658      	mov	r0, fp
 80081cc:	f000 fd52 	bl	8008c74 <__mcmp>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	da63      	bge.n	800829c <_dtoa_r+0x924>
 80081d4:	2300      	movs	r3, #0
 80081d6:	4659      	mov	r1, fp
 80081d8:	220a      	movs	r2, #10
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 fb2e 	bl	800883c <__multadd>
 80081e0:	9b08      	ldr	r3, [sp, #32]
 80081e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081e6:	4683      	mov	fp, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 818f 	beq.w	800850c <_dtoa_r+0xb94>
 80081ee:	4639      	mov	r1, r7
 80081f0:	2300      	movs	r3, #0
 80081f2:	220a      	movs	r2, #10
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 fb21 	bl	800883c <__multadd>
 80081fa:	f1b9 0f00 	cmp.w	r9, #0
 80081fe:	4607      	mov	r7, r0
 8008200:	f300 808e 	bgt.w	8008320 <_dtoa_r+0x9a8>
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	2b02      	cmp	r3, #2
 8008208:	dc50      	bgt.n	80082ac <_dtoa_r+0x934>
 800820a:	e089      	b.n	8008320 <_dtoa_r+0x9a8>
 800820c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800820e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008212:	e75d      	b.n	80080d0 <_dtoa_r+0x758>
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	1e5e      	subs	r6, r3, #1
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	42b3      	cmp	r3, r6
 800821c:	bfbf      	itttt	lt
 800821e:	9b06      	ldrlt	r3, [sp, #24]
 8008220:	9606      	strlt	r6, [sp, #24]
 8008222:	1af2      	sublt	r2, r6, r3
 8008224:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008226:	bfb6      	itet	lt
 8008228:	189b      	addlt	r3, r3, r2
 800822a:	1b9e      	subge	r6, r3, r6
 800822c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	bfb8      	it	lt
 8008232:	2600      	movlt	r6, #0
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfb5      	itete	lt
 8008238:	eba8 0503 	sublt.w	r5, r8, r3
 800823c:	9b01      	ldrge	r3, [sp, #4]
 800823e:	2300      	movlt	r3, #0
 8008240:	4645      	movge	r5, r8
 8008242:	e747      	b.n	80080d4 <_dtoa_r+0x75c>
 8008244:	9e06      	ldr	r6, [sp, #24]
 8008246:	9f08      	ldr	r7, [sp, #32]
 8008248:	4645      	mov	r5, r8
 800824a:	e74c      	b.n	80080e6 <_dtoa_r+0x76e>
 800824c:	9a06      	ldr	r2, [sp, #24]
 800824e:	e775      	b.n	800813c <_dtoa_r+0x7c4>
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	2b01      	cmp	r3, #1
 8008254:	dc18      	bgt.n	8008288 <_dtoa_r+0x910>
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	b9b3      	cbnz	r3, 8008288 <_dtoa_r+0x910>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008260:	b9a3      	cbnz	r3, 800828c <_dtoa_r+0x914>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008268:	0d1b      	lsrs	r3, r3, #20
 800826a:	051b      	lsls	r3, r3, #20
 800826c:	b12b      	cbz	r3, 800827a <_dtoa_r+0x902>
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	3301      	adds	r3, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	f108 0801 	add.w	r8, r8, #1
 8008278:	2301      	movs	r3, #1
 800827a:	9306      	str	r3, [sp, #24]
 800827c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800827e:	2b00      	cmp	r3, #0
 8008280:	f47f af74 	bne.w	800816c <_dtoa_r+0x7f4>
 8008284:	2001      	movs	r0, #1
 8008286:	e779      	b.n	800817c <_dtoa_r+0x804>
 8008288:	2300      	movs	r3, #0
 800828a:	e7f6      	b.n	800827a <_dtoa_r+0x902>
 800828c:	9b02      	ldr	r3, [sp, #8]
 800828e:	e7f4      	b.n	800827a <_dtoa_r+0x902>
 8008290:	d085      	beq.n	800819e <_dtoa_r+0x826>
 8008292:	4618      	mov	r0, r3
 8008294:	301c      	adds	r0, #28
 8008296:	e77d      	b.n	8008194 <_dtoa_r+0x81c>
 8008298:	40240000 	.word	0x40240000
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dc38      	bgt.n	8008314 <_dtoa_r+0x99c>
 80082a2:	9b05      	ldr	r3, [sp, #20]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	dd35      	ble.n	8008314 <_dtoa_r+0x99c>
 80082a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80082ac:	f1b9 0f00 	cmp.w	r9, #0
 80082b0:	d10d      	bne.n	80082ce <_dtoa_r+0x956>
 80082b2:	4631      	mov	r1, r6
 80082b4:	464b      	mov	r3, r9
 80082b6:	2205      	movs	r2, #5
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 fabf 	bl	800883c <__multadd>
 80082be:	4601      	mov	r1, r0
 80082c0:	4606      	mov	r6, r0
 80082c2:	4658      	mov	r0, fp
 80082c4:	f000 fcd6 	bl	8008c74 <__mcmp>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	f73f adbd 	bgt.w	8007e48 <_dtoa_r+0x4d0>
 80082ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d0:	9d00      	ldr	r5, [sp, #0]
 80082d2:	ea6f 0a03 	mvn.w	sl, r3
 80082d6:	f04f 0800 	mov.w	r8, #0
 80082da:	4631      	mov	r1, r6
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 fa8b 	bl	80087f8 <_Bfree>
 80082e2:	2f00      	cmp	r7, #0
 80082e4:	f43f aeb4 	beq.w	8008050 <_dtoa_r+0x6d8>
 80082e8:	f1b8 0f00 	cmp.w	r8, #0
 80082ec:	d005      	beq.n	80082fa <_dtoa_r+0x982>
 80082ee:	45b8      	cmp	r8, r7
 80082f0:	d003      	beq.n	80082fa <_dtoa_r+0x982>
 80082f2:	4641      	mov	r1, r8
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 fa7f 	bl	80087f8 <_Bfree>
 80082fa:	4639      	mov	r1, r7
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fa7b 	bl	80087f8 <_Bfree>
 8008302:	e6a5      	b.n	8008050 <_dtoa_r+0x6d8>
 8008304:	2600      	movs	r6, #0
 8008306:	4637      	mov	r7, r6
 8008308:	e7e1      	b.n	80082ce <_dtoa_r+0x956>
 800830a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800830c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008310:	4637      	mov	r7, r6
 8008312:	e599      	b.n	8007e48 <_dtoa_r+0x4d0>
 8008314:	9b08      	ldr	r3, [sp, #32]
 8008316:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80fd 	beq.w	800851a <_dtoa_r+0xba2>
 8008320:	2d00      	cmp	r5, #0
 8008322:	dd05      	ble.n	8008330 <_dtoa_r+0x9b8>
 8008324:	4639      	mov	r1, r7
 8008326:	462a      	mov	r2, r5
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fc37 	bl	8008b9c <__lshift>
 800832e:	4607      	mov	r7, r0
 8008330:	9b06      	ldr	r3, [sp, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d05c      	beq.n	80083f0 <_dtoa_r+0xa78>
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fa1d 	bl	8008778 <_Balloc>
 800833e:	4605      	mov	r5, r0
 8008340:	b928      	cbnz	r0, 800834e <_dtoa_r+0x9d6>
 8008342:	4b80      	ldr	r3, [pc, #512]	; (8008544 <_dtoa_r+0xbcc>)
 8008344:	4602      	mov	r2, r0
 8008346:	f240 21ea 	movw	r1, #746	; 0x2ea
 800834a:	f7ff bb2e 	b.w	80079aa <_dtoa_r+0x32>
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	3202      	adds	r2, #2
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	f107 010c 	add.w	r1, r7, #12
 8008358:	300c      	adds	r0, #12
 800835a:	f000 f9ff 	bl	800875c <memcpy>
 800835e:	2201      	movs	r2, #1
 8008360:	4629      	mov	r1, r5
 8008362:	4620      	mov	r0, r4
 8008364:	f000 fc1a 	bl	8008b9c <__lshift>
 8008368:	9b00      	ldr	r3, [sp, #0]
 800836a:	3301      	adds	r3, #1
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	9b00      	ldr	r3, [sp, #0]
 8008370:	444b      	add	r3, r9
 8008372:	9307      	str	r3, [sp, #28]
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	46b8      	mov	r8, r7
 800837c:	9306      	str	r3, [sp, #24]
 800837e:	4607      	mov	r7, r0
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	4631      	mov	r1, r6
 8008384:	3b01      	subs	r3, #1
 8008386:	4658      	mov	r0, fp
 8008388:	9302      	str	r3, [sp, #8]
 800838a:	f7ff fa69 	bl	8007860 <quorem>
 800838e:	4603      	mov	r3, r0
 8008390:	3330      	adds	r3, #48	; 0x30
 8008392:	9004      	str	r0, [sp, #16]
 8008394:	4641      	mov	r1, r8
 8008396:	4658      	mov	r0, fp
 8008398:	9308      	str	r3, [sp, #32]
 800839a:	f000 fc6b 	bl	8008c74 <__mcmp>
 800839e:	463a      	mov	r2, r7
 80083a0:	4681      	mov	r9, r0
 80083a2:	4631      	mov	r1, r6
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fc81 	bl	8008cac <__mdiff>
 80083aa:	68c2      	ldr	r2, [r0, #12]
 80083ac:	9b08      	ldr	r3, [sp, #32]
 80083ae:	4605      	mov	r5, r0
 80083b0:	bb02      	cbnz	r2, 80083f4 <_dtoa_r+0xa7c>
 80083b2:	4601      	mov	r1, r0
 80083b4:	4658      	mov	r0, fp
 80083b6:	f000 fc5d 	bl	8008c74 <__mcmp>
 80083ba:	9b08      	ldr	r3, [sp, #32]
 80083bc:	4602      	mov	r2, r0
 80083be:	4629      	mov	r1, r5
 80083c0:	4620      	mov	r0, r4
 80083c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80083c6:	f000 fa17 	bl	80087f8 <_Bfree>
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ce:	9d01      	ldr	r5, [sp, #4]
 80083d0:	ea43 0102 	orr.w	r1, r3, r2
 80083d4:	9b06      	ldr	r3, [sp, #24]
 80083d6:	430b      	orrs	r3, r1
 80083d8:	9b08      	ldr	r3, [sp, #32]
 80083da:	d10d      	bne.n	80083f8 <_dtoa_r+0xa80>
 80083dc:	2b39      	cmp	r3, #57	; 0x39
 80083de:	d029      	beq.n	8008434 <_dtoa_r+0xabc>
 80083e0:	f1b9 0f00 	cmp.w	r9, #0
 80083e4:	dd01      	ble.n	80083ea <_dtoa_r+0xa72>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	3331      	adds	r3, #49	; 0x31
 80083ea:	9a02      	ldr	r2, [sp, #8]
 80083ec:	7013      	strb	r3, [r2, #0]
 80083ee:	e774      	b.n	80082da <_dtoa_r+0x962>
 80083f0:	4638      	mov	r0, r7
 80083f2:	e7b9      	b.n	8008368 <_dtoa_r+0x9f0>
 80083f4:	2201      	movs	r2, #1
 80083f6:	e7e2      	b.n	80083be <_dtoa_r+0xa46>
 80083f8:	f1b9 0f00 	cmp.w	r9, #0
 80083fc:	db06      	blt.n	800840c <_dtoa_r+0xa94>
 80083fe:	9905      	ldr	r1, [sp, #20]
 8008400:	ea41 0909 	orr.w	r9, r1, r9
 8008404:	9906      	ldr	r1, [sp, #24]
 8008406:	ea59 0101 	orrs.w	r1, r9, r1
 800840a:	d120      	bne.n	800844e <_dtoa_r+0xad6>
 800840c:	2a00      	cmp	r2, #0
 800840e:	ddec      	ble.n	80083ea <_dtoa_r+0xa72>
 8008410:	4659      	mov	r1, fp
 8008412:	2201      	movs	r2, #1
 8008414:	4620      	mov	r0, r4
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	f000 fbc0 	bl	8008b9c <__lshift>
 800841c:	4631      	mov	r1, r6
 800841e:	4683      	mov	fp, r0
 8008420:	f000 fc28 	bl	8008c74 <__mcmp>
 8008424:	2800      	cmp	r0, #0
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	dc02      	bgt.n	8008430 <_dtoa_r+0xab8>
 800842a:	d1de      	bne.n	80083ea <_dtoa_r+0xa72>
 800842c:	07da      	lsls	r2, r3, #31
 800842e:	d5dc      	bpl.n	80083ea <_dtoa_r+0xa72>
 8008430:	2b39      	cmp	r3, #57	; 0x39
 8008432:	d1d8      	bne.n	80083e6 <_dtoa_r+0xa6e>
 8008434:	9a02      	ldr	r2, [sp, #8]
 8008436:	2339      	movs	r3, #57	; 0x39
 8008438:	7013      	strb	r3, [r2, #0]
 800843a:	462b      	mov	r3, r5
 800843c:	461d      	mov	r5, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008444:	2a39      	cmp	r2, #57	; 0x39
 8008446:	d050      	beq.n	80084ea <_dtoa_r+0xb72>
 8008448:	3201      	adds	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	e745      	b.n	80082da <_dtoa_r+0x962>
 800844e:	2a00      	cmp	r2, #0
 8008450:	dd03      	ble.n	800845a <_dtoa_r+0xae2>
 8008452:	2b39      	cmp	r3, #57	; 0x39
 8008454:	d0ee      	beq.n	8008434 <_dtoa_r+0xabc>
 8008456:	3301      	adds	r3, #1
 8008458:	e7c7      	b.n	80083ea <_dtoa_r+0xa72>
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	9907      	ldr	r1, [sp, #28]
 800845e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008462:	428a      	cmp	r2, r1
 8008464:	d02a      	beq.n	80084bc <_dtoa_r+0xb44>
 8008466:	4659      	mov	r1, fp
 8008468:	2300      	movs	r3, #0
 800846a:	220a      	movs	r2, #10
 800846c:	4620      	mov	r0, r4
 800846e:	f000 f9e5 	bl	800883c <__multadd>
 8008472:	45b8      	cmp	r8, r7
 8008474:	4683      	mov	fp, r0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	f04f 020a 	mov.w	r2, #10
 800847e:	4641      	mov	r1, r8
 8008480:	4620      	mov	r0, r4
 8008482:	d107      	bne.n	8008494 <_dtoa_r+0xb1c>
 8008484:	f000 f9da 	bl	800883c <__multadd>
 8008488:	4680      	mov	r8, r0
 800848a:	4607      	mov	r7, r0
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	e775      	b.n	8008380 <_dtoa_r+0xa08>
 8008494:	f000 f9d2 	bl	800883c <__multadd>
 8008498:	4639      	mov	r1, r7
 800849a:	4680      	mov	r8, r0
 800849c:	2300      	movs	r3, #0
 800849e:	220a      	movs	r2, #10
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 f9cb 	bl	800883c <__multadd>
 80084a6:	4607      	mov	r7, r0
 80084a8:	e7f0      	b.n	800848c <_dtoa_r+0xb14>
 80084aa:	f1b9 0f00 	cmp.w	r9, #0
 80084ae:	9a00      	ldr	r2, [sp, #0]
 80084b0:	bfcc      	ite	gt
 80084b2:	464d      	movgt	r5, r9
 80084b4:	2501      	movle	r5, #1
 80084b6:	4415      	add	r5, r2
 80084b8:	f04f 0800 	mov.w	r8, #0
 80084bc:	4659      	mov	r1, fp
 80084be:	2201      	movs	r2, #1
 80084c0:	4620      	mov	r0, r4
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	f000 fb6a 	bl	8008b9c <__lshift>
 80084c8:	4631      	mov	r1, r6
 80084ca:	4683      	mov	fp, r0
 80084cc:	f000 fbd2 	bl	8008c74 <__mcmp>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	dcb2      	bgt.n	800843a <_dtoa_r+0xac2>
 80084d4:	d102      	bne.n	80084dc <_dtoa_r+0xb64>
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	07db      	lsls	r3, r3, #31
 80084da:	d4ae      	bmi.n	800843a <_dtoa_r+0xac2>
 80084dc:	462b      	mov	r3, r5
 80084de:	461d      	mov	r5, r3
 80084e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084e4:	2a30      	cmp	r2, #48	; 0x30
 80084e6:	d0fa      	beq.n	80084de <_dtoa_r+0xb66>
 80084e8:	e6f7      	b.n	80082da <_dtoa_r+0x962>
 80084ea:	9a00      	ldr	r2, [sp, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d1a5      	bne.n	800843c <_dtoa_r+0xac4>
 80084f0:	f10a 0a01 	add.w	sl, sl, #1
 80084f4:	2331      	movs	r3, #49	; 0x31
 80084f6:	e779      	b.n	80083ec <_dtoa_r+0xa74>
 80084f8:	4b13      	ldr	r3, [pc, #76]	; (8008548 <_dtoa_r+0xbd0>)
 80084fa:	f7ff baaf 	b.w	8007a5c <_dtoa_r+0xe4>
 80084fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008500:	2b00      	cmp	r3, #0
 8008502:	f47f aa86 	bne.w	8007a12 <_dtoa_r+0x9a>
 8008506:	4b11      	ldr	r3, [pc, #68]	; (800854c <_dtoa_r+0xbd4>)
 8008508:	f7ff baa8 	b.w	8007a5c <_dtoa_r+0xe4>
 800850c:	f1b9 0f00 	cmp.w	r9, #0
 8008510:	dc03      	bgt.n	800851a <_dtoa_r+0xba2>
 8008512:	9b05      	ldr	r3, [sp, #20]
 8008514:	2b02      	cmp	r3, #2
 8008516:	f73f aec9 	bgt.w	80082ac <_dtoa_r+0x934>
 800851a:	9d00      	ldr	r5, [sp, #0]
 800851c:	4631      	mov	r1, r6
 800851e:	4658      	mov	r0, fp
 8008520:	f7ff f99e 	bl	8007860 <quorem>
 8008524:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008528:	f805 3b01 	strb.w	r3, [r5], #1
 800852c:	9a00      	ldr	r2, [sp, #0]
 800852e:	1aaa      	subs	r2, r5, r2
 8008530:	4591      	cmp	r9, r2
 8008532:	ddba      	ble.n	80084aa <_dtoa_r+0xb32>
 8008534:	4659      	mov	r1, fp
 8008536:	2300      	movs	r3, #0
 8008538:	220a      	movs	r2, #10
 800853a:	4620      	mov	r0, r4
 800853c:	f000 f97e 	bl	800883c <__multadd>
 8008540:	4683      	mov	fp, r0
 8008542:	e7eb      	b.n	800851c <_dtoa_r+0xba4>
 8008544:	08009a73 	.word	0x08009a73
 8008548:	080099cc 	.word	0x080099cc
 800854c:	080099f0 	.word	0x080099f0

08008550 <std>:
 8008550:	2300      	movs	r3, #0
 8008552:	b510      	push	{r4, lr}
 8008554:	4604      	mov	r4, r0
 8008556:	e9c0 3300 	strd	r3, r3, [r0]
 800855a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800855e:	6083      	str	r3, [r0, #8]
 8008560:	8181      	strh	r1, [r0, #12]
 8008562:	6643      	str	r3, [r0, #100]	; 0x64
 8008564:	81c2      	strh	r2, [r0, #14]
 8008566:	6183      	str	r3, [r0, #24]
 8008568:	4619      	mov	r1, r3
 800856a:	2208      	movs	r2, #8
 800856c:	305c      	adds	r0, #92	; 0x5c
 800856e:	f7fe fced 	bl	8006f4c <memset>
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <std+0x38>)
 8008574:	6263      	str	r3, [r4, #36]	; 0x24
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <std+0x3c>)
 8008578:	62a3      	str	r3, [r4, #40]	; 0x28
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <std+0x40>)
 800857c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <std+0x44>)
 8008580:	6224      	str	r4, [r4, #32]
 8008582:	6323      	str	r3, [r4, #48]	; 0x30
 8008584:	bd10      	pop	{r4, pc}
 8008586:	bf00      	nop
 8008588:	080092bd 	.word	0x080092bd
 800858c:	080092df 	.word	0x080092df
 8008590:	08009317 	.word	0x08009317
 8008594:	0800933b 	.word	0x0800933b

08008598 <_cleanup_r>:
 8008598:	4901      	ldr	r1, [pc, #4]	; (80085a0 <_cleanup_r+0x8>)
 800859a:	f000 b8af 	b.w	80086fc <_fwalk_reent>
 800859e:	bf00      	nop
 80085a0:	08009651 	.word	0x08009651

080085a4 <__sfmoreglue>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	1e4a      	subs	r2, r1, #1
 80085a8:	2568      	movs	r5, #104	; 0x68
 80085aa:	4355      	muls	r5, r2
 80085ac:	460e      	mov	r6, r1
 80085ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085b2:	f000 fcbf 	bl	8008f34 <_malloc_r>
 80085b6:	4604      	mov	r4, r0
 80085b8:	b140      	cbz	r0, 80085cc <__sfmoreglue+0x28>
 80085ba:	2100      	movs	r1, #0
 80085bc:	e9c0 1600 	strd	r1, r6, [r0]
 80085c0:	300c      	adds	r0, #12
 80085c2:	60a0      	str	r0, [r4, #8]
 80085c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085c8:	f7fe fcc0 	bl	8006f4c <memset>
 80085cc:	4620      	mov	r0, r4
 80085ce:	bd70      	pop	{r4, r5, r6, pc}

080085d0 <__sfp_lock_acquire>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__sfp_lock_acquire+0x8>)
 80085d2:	f000 b8b8 	b.w	8008746 <__retarget_lock_acquire_recursive>
 80085d6:	bf00      	nop
 80085d8:	20000578 	.word	0x20000578

080085dc <__sfp_lock_release>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__sfp_lock_release+0x8>)
 80085de:	f000 b8b3 	b.w	8008748 <__retarget_lock_release_recursive>
 80085e2:	bf00      	nop
 80085e4:	20000578 	.word	0x20000578

080085e8 <__sinit_lock_acquire>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__sinit_lock_acquire+0x8>)
 80085ea:	f000 b8ac 	b.w	8008746 <__retarget_lock_acquire_recursive>
 80085ee:	bf00      	nop
 80085f0:	20000573 	.word	0x20000573

080085f4 <__sinit_lock_release>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__sinit_lock_release+0x8>)
 80085f6:	f000 b8a7 	b.w	8008748 <__retarget_lock_release_recursive>
 80085fa:	bf00      	nop
 80085fc:	20000573 	.word	0x20000573

08008600 <__sinit>:
 8008600:	b510      	push	{r4, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	f7ff fff0 	bl	80085e8 <__sinit_lock_acquire>
 8008608:	69a3      	ldr	r3, [r4, #24]
 800860a:	b11b      	cbz	r3, 8008614 <__sinit+0x14>
 800860c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008610:	f7ff bff0 	b.w	80085f4 <__sinit_lock_release>
 8008614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008618:	6523      	str	r3, [r4, #80]	; 0x50
 800861a:	4b13      	ldr	r3, [pc, #76]	; (8008668 <__sinit+0x68>)
 800861c:	4a13      	ldr	r2, [pc, #76]	; (800866c <__sinit+0x6c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	62a2      	str	r2, [r4, #40]	; 0x28
 8008622:	42a3      	cmp	r3, r4
 8008624:	bf04      	itt	eq
 8008626:	2301      	moveq	r3, #1
 8008628:	61a3      	streq	r3, [r4, #24]
 800862a:	4620      	mov	r0, r4
 800862c:	f000 f820 	bl	8008670 <__sfp>
 8008630:	6060      	str	r0, [r4, #4]
 8008632:	4620      	mov	r0, r4
 8008634:	f000 f81c 	bl	8008670 <__sfp>
 8008638:	60a0      	str	r0, [r4, #8]
 800863a:	4620      	mov	r0, r4
 800863c:	f000 f818 	bl	8008670 <__sfp>
 8008640:	2200      	movs	r2, #0
 8008642:	60e0      	str	r0, [r4, #12]
 8008644:	2104      	movs	r1, #4
 8008646:	6860      	ldr	r0, [r4, #4]
 8008648:	f7ff ff82 	bl	8008550 <std>
 800864c:	68a0      	ldr	r0, [r4, #8]
 800864e:	2201      	movs	r2, #1
 8008650:	2109      	movs	r1, #9
 8008652:	f7ff ff7d 	bl	8008550 <std>
 8008656:	68e0      	ldr	r0, [r4, #12]
 8008658:	2202      	movs	r2, #2
 800865a:	2112      	movs	r1, #18
 800865c:	f7ff ff78 	bl	8008550 <std>
 8008660:	2301      	movs	r3, #1
 8008662:	61a3      	str	r3, [r4, #24]
 8008664:	e7d2      	b.n	800860c <__sinit+0xc>
 8008666:	bf00      	nop
 8008668:	080099b8 	.word	0x080099b8
 800866c:	08008599 	.word	0x08008599

08008670 <__sfp>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	4607      	mov	r7, r0
 8008674:	f7ff ffac 	bl	80085d0 <__sfp_lock_acquire>
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <__sfp+0x84>)
 800867a:	681e      	ldr	r6, [r3, #0]
 800867c:	69b3      	ldr	r3, [r6, #24]
 800867e:	b913      	cbnz	r3, 8008686 <__sfp+0x16>
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff ffbd 	bl	8008600 <__sinit>
 8008686:	3648      	adds	r6, #72	; 0x48
 8008688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800868c:	3b01      	subs	r3, #1
 800868e:	d503      	bpl.n	8008698 <__sfp+0x28>
 8008690:	6833      	ldr	r3, [r6, #0]
 8008692:	b30b      	cbz	r3, 80086d8 <__sfp+0x68>
 8008694:	6836      	ldr	r6, [r6, #0]
 8008696:	e7f7      	b.n	8008688 <__sfp+0x18>
 8008698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800869c:	b9d5      	cbnz	r5, 80086d4 <__sfp+0x64>
 800869e:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <__sfp+0x88>)
 80086a0:	60e3      	str	r3, [r4, #12]
 80086a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086a6:	6665      	str	r5, [r4, #100]	; 0x64
 80086a8:	f000 f84c 	bl	8008744 <__retarget_lock_init_recursive>
 80086ac:	f7ff ff96 	bl	80085dc <__sfp_lock_release>
 80086b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086b8:	6025      	str	r5, [r4, #0]
 80086ba:	61a5      	str	r5, [r4, #24]
 80086bc:	2208      	movs	r2, #8
 80086be:	4629      	mov	r1, r5
 80086c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086c4:	f7fe fc42 	bl	8006f4c <memset>
 80086c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086d0:	4620      	mov	r0, r4
 80086d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d4:	3468      	adds	r4, #104	; 0x68
 80086d6:	e7d9      	b.n	800868c <__sfp+0x1c>
 80086d8:	2104      	movs	r1, #4
 80086da:	4638      	mov	r0, r7
 80086dc:	f7ff ff62 	bl	80085a4 <__sfmoreglue>
 80086e0:	4604      	mov	r4, r0
 80086e2:	6030      	str	r0, [r6, #0]
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d1d5      	bne.n	8008694 <__sfp+0x24>
 80086e8:	f7ff ff78 	bl	80085dc <__sfp_lock_release>
 80086ec:	230c      	movs	r3, #12
 80086ee:	603b      	str	r3, [r7, #0]
 80086f0:	e7ee      	b.n	80086d0 <__sfp+0x60>
 80086f2:	bf00      	nop
 80086f4:	080099b8 	.word	0x080099b8
 80086f8:	ffff0001 	.word	0xffff0001

080086fc <_fwalk_reent>:
 80086fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008700:	4606      	mov	r6, r0
 8008702:	4688      	mov	r8, r1
 8008704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008708:	2700      	movs	r7, #0
 800870a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800870e:	f1b9 0901 	subs.w	r9, r9, #1
 8008712:	d505      	bpl.n	8008720 <_fwalk_reent+0x24>
 8008714:	6824      	ldr	r4, [r4, #0]
 8008716:	2c00      	cmp	r4, #0
 8008718:	d1f7      	bne.n	800870a <_fwalk_reent+0xe>
 800871a:	4638      	mov	r0, r7
 800871c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008720:	89ab      	ldrh	r3, [r5, #12]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d907      	bls.n	8008736 <_fwalk_reent+0x3a>
 8008726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800872a:	3301      	adds	r3, #1
 800872c:	d003      	beq.n	8008736 <_fwalk_reent+0x3a>
 800872e:	4629      	mov	r1, r5
 8008730:	4630      	mov	r0, r6
 8008732:	47c0      	blx	r8
 8008734:	4307      	orrs	r7, r0
 8008736:	3568      	adds	r5, #104	; 0x68
 8008738:	e7e9      	b.n	800870e <_fwalk_reent+0x12>
	...

0800873c <_localeconv_r>:
 800873c:	4800      	ldr	r0, [pc, #0]	; (8008740 <_localeconv_r+0x4>)
 800873e:	4770      	bx	lr
 8008740:	200002d8 	.word	0x200002d8

08008744 <__retarget_lock_init_recursive>:
 8008744:	4770      	bx	lr

08008746 <__retarget_lock_acquire_recursive>:
 8008746:	4770      	bx	lr

08008748 <__retarget_lock_release_recursive>:
 8008748:	4770      	bx	lr
	...

0800874c <malloc>:
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <malloc+0xc>)
 800874e:	4601      	mov	r1, r0
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	f000 bbef 	b.w	8008f34 <_malloc_r>
 8008756:	bf00      	nop
 8008758:	20000184 	.word	0x20000184

0800875c <memcpy>:
 800875c:	440a      	add	r2, r1
 800875e:	4291      	cmp	r1, r2
 8008760:	f100 33ff 	add.w	r3, r0, #4294967295
 8008764:	d100      	bne.n	8008768 <memcpy+0xc>
 8008766:	4770      	bx	lr
 8008768:	b510      	push	{r4, lr}
 800876a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800876e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008772:	4291      	cmp	r1, r2
 8008774:	d1f9      	bne.n	800876a <memcpy+0xe>
 8008776:	bd10      	pop	{r4, pc}

08008778 <_Balloc>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800877c:	4604      	mov	r4, r0
 800877e:	460d      	mov	r5, r1
 8008780:	b976      	cbnz	r6, 80087a0 <_Balloc+0x28>
 8008782:	2010      	movs	r0, #16
 8008784:	f7ff ffe2 	bl	800874c <malloc>
 8008788:	4602      	mov	r2, r0
 800878a:	6260      	str	r0, [r4, #36]	; 0x24
 800878c:	b920      	cbnz	r0, 8008798 <_Balloc+0x20>
 800878e:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <_Balloc+0x78>)
 8008790:	4818      	ldr	r0, [pc, #96]	; (80087f4 <_Balloc+0x7c>)
 8008792:	2166      	movs	r1, #102	; 0x66
 8008794:	f000 fea8 	bl	80094e8 <__assert_func>
 8008798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800879c:	6006      	str	r6, [r0, #0]
 800879e:	60c6      	str	r6, [r0, #12]
 80087a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087a2:	68f3      	ldr	r3, [r6, #12]
 80087a4:	b183      	cbz	r3, 80087c8 <_Balloc+0x50>
 80087a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ae:	b9b8      	cbnz	r0, 80087e0 <_Balloc+0x68>
 80087b0:	2101      	movs	r1, #1
 80087b2:	fa01 f605 	lsl.w	r6, r1, r5
 80087b6:	1d72      	adds	r2, r6, #5
 80087b8:	0092      	lsls	r2, r2, #2
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fb5a 	bl	8008e74 <_calloc_r>
 80087c0:	b160      	cbz	r0, 80087dc <_Balloc+0x64>
 80087c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087c6:	e00e      	b.n	80087e6 <_Balloc+0x6e>
 80087c8:	2221      	movs	r2, #33	; 0x21
 80087ca:	2104      	movs	r1, #4
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 fb51 	bl	8008e74 <_calloc_r>
 80087d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d4:	60f0      	str	r0, [r6, #12]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e4      	bne.n	80087a6 <_Balloc+0x2e>
 80087dc:	2000      	movs	r0, #0
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	6802      	ldr	r2, [r0, #0]
 80087e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087e6:	2300      	movs	r3, #0
 80087e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087ec:	e7f7      	b.n	80087de <_Balloc+0x66>
 80087ee:	bf00      	nop
 80087f0:	080099fd 	.word	0x080099fd
 80087f4:	08009ae4 	.word	0x08009ae4

080087f8 <_Bfree>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087fc:	4605      	mov	r5, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	b976      	cbnz	r6, 8008820 <_Bfree+0x28>
 8008802:	2010      	movs	r0, #16
 8008804:	f7ff ffa2 	bl	800874c <malloc>
 8008808:	4602      	mov	r2, r0
 800880a:	6268      	str	r0, [r5, #36]	; 0x24
 800880c:	b920      	cbnz	r0, 8008818 <_Bfree+0x20>
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <_Bfree+0x3c>)
 8008810:	4809      	ldr	r0, [pc, #36]	; (8008838 <_Bfree+0x40>)
 8008812:	218a      	movs	r1, #138	; 0x8a
 8008814:	f000 fe68 	bl	80094e8 <__assert_func>
 8008818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800881c:	6006      	str	r6, [r0, #0]
 800881e:	60c6      	str	r6, [r0, #12]
 8008820:	b13c      	cbz	r4, 8008832 <_Bfree+0x3a>
 8008822:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008824:	6862      	ldr	r2, [r4, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800882c:	6021      	str	r1, [r4, #0]
 800882e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	080099fd 	.word	0x080099fd
 8008838:	08009ae4 	.word	0x08009ae4

0800883c <__multadd>:
 800883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008840:	690e      	ldr	r6, [r1, #16]
 8008842:	4607      	mov	r7, r0
 8008844:	4698      	mov	r8, r3
 8008846:	460c      	mov	r4, r1
 8008848:	f101 0014 	add.w	r0, r1, #20
 800884c:	2300      	movs	r3, #0
 800884e:	6805      	ldr	r5, [r0, #0]
 8008850:	b2a9      	uxth	r1, r5
 8008852:	fb02 8101 	mla	r1, r2, r1, r8
 8008856:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800885a:	0c2d      	lsrs	r5, r5, #16
 800885c:	fb02 c505 	mla	r5, r2, r5, ip
 8008860:	b289      	uxth	r1, r1
 8008862:	3301      	adds	r3, #1
 8008864:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008868:	429e      	cmp	r6, r3
 800886a:	f840 1b04 	str.w	r1, [r0], #4
 800886e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008872:	dcec      	bgt.n	800884e <__multadd+0x12>
 8008874:	f1b8 0f00 	cmp.w	r8, #0
 8008878:	d022      	beq.n	80088c0 <__multadd+0x84>
 800887a:	68a3      	ldr	r3, [r4, #8]
 800887c:	42b3      	cmp	r3, r6
 800887e:	dc19      	bgt.n	80088b4 <__multadd+0x78>
 8008880:	6861      	ldr	r1, [r4, #4]
 8008882:	4638      	mov	r0, r7
 8008884:	3101      	adds	r1, #1
 8008886:	f7ff ff77 	bl	8008778 <_Balloc>
 800888a:	4605      	mov	r5, r0
 800888c:	b928      	cbnz	r0, 800889a <__multadd+0x5e>
 800888e:	4602      	mov	r2, r0
 8008890:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <__multadd+0x8c>)
 8008892:	480e      	ldr	r0, [pc, #56]	; (80088cc <__multadd+0x90>)
 8008894:	21b5      	movs	r1, #181	; 0xb5
 8008896:	f000 fe27 	bl	80094e8 <__assert_func>
 800889a:	6922      	ldr	r2, [r4, #16]
 800889c:	3202      	adds	r2, #2
 800889e:	f104 010c 	add.w	r1, r4, #12
 80088a2:	0092      	lsls	r2, r2, #2
 80088a4:	300c      	adds	r0, #12
 80088a6:	f7ff ff59 	bl	800875c <memcpy>
 80088aa:	4621      	mov	r1, r4
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff ffa3 	bl	80087f8 <_Bfree>
 80088b2:	462c      	mov	r4, r5
 80088b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80088b8:	3601      	adds	r6, #1
 80088ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80088be:	6126      	str	r6, [r4, #16]
 80088c0:	4620      	mov	r0, r4
 80088c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c6:	bf00      	nop
 80088c8:	08009a73 	.word	0x08009a73
 80088cc:	08009ae4 	.word	0x08009ae4

080088d0 <__hi0bits>:
 80088d0:	0c03      	lsrs	r3, r0, #16
 80088d2:	041b      	lsls	r3, r3, #16
 80088d4:	b9d3      	cbnz	r3, 800890c <__hi0bits+0x3c>
 80088d6:	0400      	lsls	r0, r0, #16
 80088d8:	2310      	movs	r3, #16
 80088da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088de:	bf04      	itt	eq
 80088e0:	0200      	lsleq	r0, r0, #8
 80088e2:	3308      	addeq	r3, #8
 80088e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088e8:	bf04      	itt	eq
 80088ea:	0100      	lsleq	r0, r0, #4
 80088ec:	3304      	addeq	r3, #4
 80088ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088f2:	bf04      	itt	eq
 80088f4:	0080      	lsleq	r0, r0, #2
 80088f6:	3302      	addeq	r3, #2
 80088f8:	2800      	cmp	r0, #0
 80088fa:	db05      	blt.n	8008908 <__hi0bits+0x38>
 80088fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008900:	f103 0301 	add.w	r3, r3, #1
 8008904:	bf08      	it	eq
 8008906:	2320      	moveq	r3, #32
 8008908:	4618      	mov	r0, r3
 800890a:	4770      	bx	lr
 800890c:	2300      	movs	r3, #0
 800890e:	e7e4      	b.n	80088da <__hi0bits+0xa>

08008910 <__lo0bits>:
 8008910:	6803      	ldr	r3, [r0, #0]
 8008912:	f013 0207 	ands.w	r2, r3, #7
 8008916:	4601      	mov	r1, r0
 8008918:	d00b      	beq.n	8008932 <__lo0bits+0x22>
 800891a:	07da      	lsls	r2, r3, #31
 800891c:	d424      	bmi.n	8008968 <__lo0bits+0x58>
 800891e:	0798      	lsls	r0, r3, #30
 8008920:	bf49      	itett	mi
 8008922:	085b      	lsrmi	r3, r3, #1
 8008924:	089b      	lsrpl	r3, r3, #2
 8008926:	2001      	movmi	r0, #1
 8008928:	600b      	strmi	r3, [r1, #0]
 800892a:	bf5c      	itt	pl
 800892c:	600b      	strpl	r3, [r1, #0]
 800892e:	2002      	movpl	r0, #2
 8008930:	4770      	bx	lr
 8008932:	b298      	uxth	r0, r3
 8008934:	b9b0      	cbnz	r0, 8008964 <__lo0bits+0x54>
 8008936:	0c1b      	lsrs	r3, r3, #16
 8008938:	2010      	movs	r0, #16
 800893a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800893e:	bf04      	itt	eq
 8008940:	0a1b      	lsreq	r3, r3, #8
 8008942:	3008      	addeq	r0, #8
 8008944:	071a      	lsls	r2, r3, #28
 8008946:	bf04      	itt	eq
 8008948:	091b      	lsreq	r3, r3, #4
 800894a:	3004      	addeq	r0, #4
 800894c:	079a      	lsls	r2, r3, #30
 800894e:	bf04      	itt	eq
 8008950:	089b      	lsreq	r3, r3, #2
 8008952:	3002      	addeq	r0, #2
 8008954:	07da      	lsls	r2, r3, #31
 8008956:	d403      	bmi.n	8008960 <__lo0bits+0x50>
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	f100 0001 	add.w	r0, r0, #1
 800895e:	d005      	beq.n	800896c <__lo0bits+0x5c>
 8008960:	600b      	str	r3, [r1, #0]
 8008962:	4770      	bx	lr
 8008964:	4610      	mov	r0, r2
 8008966:	e7e8      	b.n	800893a <__lo0bits+0x2a>
 8008968:	2000      	movs	r0, #0
 800896a:	4770      	bx	lr
 800896c:	2020      	movs	r0, #32
 800896e:	4770      	bx	lr

08008970 <__i2b>:
 8008970:	b510      	push	{r4, lr}
 8008972:	460c      	mov	r4, r1
 8008974:	2101      	movs	r1, #1
 8008976:	f7ff feff 	bl	8008778 <_Balloc>
 800897a:	4602      	mov	r2, r0
 800897c:	b928      	cbnz	r0, 800898a <__i2b+0x1a>
 800897e:	4b05      	ldr	r3, [pc, #20]	; (8008994 <__i2b+0x24>)
 8008980:	4805      	ldr	r0, [pc, #20]	; (8008998 <__i2b+0x28>)
 8008982:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008986:	f000 fdaf 	bl	80094e8 <__assert_func>
 800898a:	2301      	movs	r3, #1
 800898c:	6144      	str	r4, [r0, #20]
 800898e:	6103      	str	r3, [r0, #16]
 8008990:	bd10      	pop	{r4, pc}
 8008992:	bf00      	nop
 8008994:	08009a73 	.word	0x08009a73
 8008998:	08009ae4 	.word	0x08009ae4

0800899c <__multiply>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4614      	mov	r4, r2
 80089a2:	690a      	ldr	r2, [r1, #16]
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	bfb8      	it	lt
 80089aa:	460b      	movlt	r3, r1
 80089ac:	460d      	mov	r5, r1
 80089ae:	bfbc      	itt	lt
 80089b0:	4625      	movlt	r5, r4
 80089b2:	461c      	movlt	r4, r3
 80089b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80089b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089bc:	68ab      	ldr	r3, [r5, #8]
 80089be:	6869      	ldr	r1, [r5, #4]
 80089c0:	eb0a 0709 	add.w	r7, sl, r9
 80089c4:	42bb      	cmp	r3, r7
 80089c6:	b085      	sub	sp, #20
 80089c8:	bfb8      	it	lt
 80089ca:	3101      	addlt	r1, #1
 80089cc:	f7ff fed4 	bl	8008778 <_Balloc>
 80089d0:	b930      	cbnz	r0, 80089e0 <__multiply+0x44>
 80089d2:	4602      	mov	r2, r0
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <__multiply+0x144>)
 80089d6:	4843      	ldr	r0, [pc, #268]	; (8008ae4 <__multiply+0x148>)
 80089d8:	f240 115d 	movw	r1, #349	; 0x15d
 80089dc:	f000 fd84 	bl	80094e8 <__assert_func>
 80089e0:	f100 0614 	add.w	r6, r0, #20
 80089e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80089e8:	4633      	mov	r3, r6
 80089ea:	2200      	movs	r2, #0
 80089ec:	4543      	cmp	r3, r8
 80089ee:	d31e      	bcc.n	8008a2e <__multiply+0x92>
 80089f0:	f105 0c14 	add.w	ip, r5, #20
 80089f4:	f104 0314 	add.w	r3, r4, #20
 80089f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80089fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008a00:	9202      	str	r2, [sp, #8]
 8008a02:	ebac 0205 	sub.w	r2, ip, r5
 8008a06:	3a15      	subs	r2, #21
 8008a08:	f022 0203 	bic.w	r2, r2, #3
 8008a0c:	3204      	adds	r2, #4
 8008a0e:	f105 0115 	add.w	r1, r5, #21
 8008a12:	458c      	cmp	ip, r1
 8008a14:	bf38      	it	cc
 8008a16:	2204      	movcc	r2, #4
 8008a18:	9201      	str	r2, [sp, #4]
 8008a1a:	9a02      	ldr	r2, [sp, #8]
 8008a1c:	9303      	str	r3, [sp, #12]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d808      	bhi.n	8008a34 <__multiply+0x98>
 8008a22:	2f00      	cmp	r7, #0
 8008a24:	dc55      	bgt.n	8008ad2 <__multiply+0x136>
 8008a26:	6107      	str	r7, [r0, #16]
 8008a28:	b005      	add	sp, #20
 8008a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2e:	f843 2b04 	str.w	r2, [r3], #4
 8008a32:	e7db      	b.n	80089ec <__multiply+0x50>
 8008a34:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a38:	f1ba 0f00 	cmp.w	sl, #0
 8008a3c:	d020      	beq.n	8008a80 <__multiply+0xe4>
 8008a3e:	f105 0e14 	add.w	lr, r5, #20
 8008a42:	46b1      	mov	r9, r6
 8008a44:	2200      	movs	r2, #0
 8008a46:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a4a:	f8d9 b000 	ldr.w	fp, [r9]
 8008a4e:	b2a1      	uxth	r1, r4
 8008a50:	fa1f fb8b 	uxth.w	fp, fp
 8008a54:	fb0a b101 	mla	r1, sl, r1, fp
 8008a58:	4411      	add	r1, r2
 8008a5a:	f8d9 2000 	ldr.w	r2, [r9]
 8008a5e:	0c24      	lsrs	r4, r4, #16
 8008a60:	0c12      	lsrs	r2, r2, #16
 8008a62:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a6a:	b289      	uxth	r1, r1
 8008a6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a70:	45f4      	cmp	ip, lr
 8008a72:	f849 1b04 	str.w	r1, [r9], #4
 8008a76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008a7a:	d8e4      	bhi.n	8008a46 <__multiply+0xaa>
 8008a7c:	9901      	ldr	r1, [sp, #4]
 8008a7e:	5072      	str	r2, [r6, r1]
 8008a80:	9a03      	ldr	r2, [sp, #12]
 8008a82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a86:	3304      	adds	r3, #4
 8008a88:	f1b9 0f00 	cmp.w	r9, #0
 8008a8c:	d01f      	beq.n	8008ace <__multiply+0x132>
 8008a8e:	6834      	ldr	r4, [r6, #0]
 8008a90:	f105 0114 	add.w	r1, r5, #20
 8008a94:	46b6      	mov	lr, r6
 8008a96:	f04f 0a00 	mov.w	sl, #0
 8008a9a:	880a      	ldrh	r2, [r1, #0]
 8008a9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008aa0:	fb09 b202 	mla	r2, r9, r2, fp
 8008aa4:	4492      	add	sl, r2
 8008aa6:	b2a4      	uxth	r4, r4
 8008aa8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008aac:	f84e 4b04 	str.w	r4, [lr], #4
 8008ab0:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ab4:	f8be 2000 	ldrh.w	r2, [lr]
 8008ab8:	0c24      	lsrs	r4, r4, #16
 8008aba:	fb09 2404 	mla	r4, r9, r4, r2
 8008abe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ac2:	458c      	cmp	ip, r1
 8008ac4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ac8:	d8e7      	bhi.n	8008a9a <__multiply+0xfe>
 8008aca:	9a01      	ldr	r2, [sp, #4]
 8008acc:	50b4      	str	r4, [r6, r2]
 8008ace:	3604      	adds	r6, #4
 8008ad0:	e7a3      	b.n	8008a1a <__multiply+0x7e>
 8008ad2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1a5      	bne.n	8008a26 <__multiply+0x8a>
 8008ada:	3f01      	subs	r7, #1
 8008adc:	e7a1      	b.n	8008a22 <__multiply+0x86>
 8008ade:	bf00      	nop
 8008ae0:	08009a73 	.word	0x08009a73
 8008ae4:	08009ae4 	.word	0x08009ae4

08008ae8 <__pow5mult>:
 8008ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aec:	4615      	mov	r5, r2
 8008aee:	f012 0203 	ands.w	r2, r2, #3
 8008af2:	4606      	mov	r6, r0
 8008af4:	460f      	mov	r7, r1
 8008af6:	d007      	beq.n	8008b08 <__pow5mult+0x20>
 8008af8:	4c25      	ldr	r4, [pc, #148]	; (8008b90 <__pow5mult+0xa8>)
 8008afa:	3a01      	subs	r2, #1
 8008afc:	2300      	movs	r3, #0
 8008afe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b02:	f7ff fe9b 	bl	800883c <__multadd>
 8008b06:	4607      	mov	r7, r0
 8008b08:	10ad      	asrs	r5, r5, #2
 8008b0a:	d03d      	beq.n	8008b88 <__pow5mult+0xa0>
 8008b0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b0e:	b97c      	cbnz	r4, 8008b30 <__pow5mult+0x48>
 8008b10:	2010      	movs	r0, #16
 8008b12:	f7ff fe1b 	bl	800874c <malloc>
 8008b16:	4602      	mov	r2, r0
 8008b18:	6270      	str	r0, [r6, #36]	; 0x24
 8008b1a:	b928      	cbnz	r0, 8008b28 <__pow5mult+0x40>
 8008b1c:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <__pow5mult+0xac>)
 8008b1e:	481e      	ldr	r0, [pc, #120]	; (8008b98 <__pow5mult+0xb0>)
 8008b20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b24:	f000 fce0 	bl	80094e8 <__assert_func>
 8008b28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b2c:	6004      	str	r4, [r0, #0]
 8008b2e:	60c4      	str	r4, [r0, #12]
 8008b30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b38:	b94c      	cbnz	r4, 8008b4e <__pow5mult+0x66>
 8008b3a:	f240 2171 	movw	r1, #625	; 0x271
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff ff16 	bl	8008970 <__i2b>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	6003      	str	r3, [r0, #0]
 8008b4e:	f04f 0900 	mov.w	r9, #0
 8008b52:	07eb      	lsls	r3, r5, #31
 8008b54:	d50a      	bpl.n	8008b6c <__pow5mult+0x84>
 8008b56:	4639      	mov	r1, r7
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7ff ff1e 	bl	800899c <__multiply>
 8008b60:	4639      	mov	r1, r7
 8008b62:	4680      	mov	r8, r0
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7ff fe47 	bl	80087f8 <_Bfree>
 8008b6a:	4647      	mov	r7, r8
 8008b6c:	106d      	asrs	r5, r5, #1
 8008b6e:	d00b      	beq.n	8008b88 <__pow5mult+0xa0>
 8008b70:	6820      	ldr	r0, [r4, #0]
 8008b72:	b938      	cbnz	r0, 8008b84 <__pow5mult+0x9c>
 8008b74:	4622      	mov	r2, r4
 8008b76:	4621      	mov	r1, r4
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7ff ff0f 	bl	800899c <__multiply>
 8008b7e:	6020      	str	r0, [r4, #0]
 8008b80:	f8c0 9000 	str.w	r9, [r0]
 8008b84:	4604      	mov	r4, r0
 8008b86:	e7e4      	b.n	8008b52 <__pow5mult+0x6a>
 8008b88:	4638      	mov	r0, r7
 8008b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8e:	bf00      	nop
 8008b90:	08009c38 	.word	0x08009c38
 8008b94:	080099fd 	.word	0x080099fd
 8008b98:	08009ae4 	.word	0x08009ae4

08008b9c <__lshift>:
 8008b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	6849      	ldr	r1, [r1, #4]
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008baa:	68a3      	ldr	r3, [r4, #8]
 8008bac:	4607      	mov	r7, r0
 8008bae:	4691      	mov	r9, r2
 8008bb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bb4:	f108 0601 	add.w	r6, r8, #1
 8008bb8:	42b3      	cmp	r3, r6
 8008bba:	db0b      	blt.n	8008bd4 <__lshift+0x38>
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f7ff fddb 	bl	8008778 <_Balloc>
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	b948      	cbnz	r0, 8008bda <__lshift+0x3e>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4b28      	ldr	r3, [pc, #160]	; (8008c6c <__lshift+0xd0>)
 8008bca:	4829      	ldr	r0, [pc, #164]	; (8008c70 <__lshift+0xd4>)
 8008bcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008bd0:	f000 fc8a 	bl	80094e8 <__assert_func>
 8008bd4:	3101      	adds	r1, #1
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__lshift+0x1c>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f100 0114 	add.w	r1, r0, #20
 8008be0:	f100 0210 	add.w	r2, r0, #16
 8008be4:	4618      	mov	r0, r3
 8008be6:	4553      	cmp	r3, sl
 8008be8:	db33      	blt.n	8008c52 <__lshift+0xb6>
 8008bea:	6920      	ldr	r0, [r4, #16]
 8008bec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bf0:	f104 0314 	add.w	r3, r4, #20
 8008bf4:	f019 091f 	ands.w	r9, r9, #31
 8008bf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c00:	d02b      	beq.n	8008c5a <__lshift+0xbe>
 8008c02:	f1c9 0e20 	rsb	lr, r9, #32
 8008c06:	468a      	mov	sl, r1
 8008c08:	2200      	movs	r2, #0
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	fa00 f009 	lsl.w	r0, r0, r9
 8008c10:	4302      	orrs	r2, r0
 8008c12:	f84a 2b04 	str.w	r2, [sl], #4
 8008c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c1a:	459c      	cmp	ip, r3
 8008c1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c20:	d8f3      	bhi.n	8008c0a <__lshift+0x6e>
 8008c22:	ebac 0304 	sub.w	r3, ip, r4
 8008c26:	3b15      	subs	r3, #21
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	f104 0015 	add.w	r0, r4, #21
 8008c32:	4584      	cmp	ip, r0
 8008c34:	bf38      	it	cc
 8008c36:	2304      	movcc	r3, #4
 8008c38:	50ca      	str	r2, [r1, r3]
 8008c3a:	b10a      	cbz	r2, 8008c40 <__lshift+0xa4>
 8008c3c:	f108 0602 	add.w	r6, r8, #2
 8008c40:	3e01      	subs	r6, #1
 8008c42:	4638      	mov	r0, r7
 8008c44:	612e      	str	r6, [r5, #16]
 8008c46:	4621      	mov	r1, r4
 8008c48:	f7ff fdd6 	bl	80087f8 <_Bfree>
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c52:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c56:	3301      	adds	r3, #1
 8008c58:	e7c5      	b.n	8008be6 <__lshift+0x4a>
 8008c5a:	3904      	subs	r1, #4
 8008c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c64:	459c      	cmp	ip, r3
 8008c66:	d8f9      	bhi.n	8008c5c <__lshift+0xc0>
 8008c68:	e7ea      	b.n	8008c40 <__lshift+0xa4>
 8008c6a:	bf00      	nop
 8008c6c:	08009a73 	.word	0x08009a73
 8008c70:	08009ae4 	.word	0x08009ae4

08008c74 <__mcmp>:
 8008c74:	b530      	push	{r4, r5, lr}
 8008c76:	6902      	ldr	r2, [r0, #16]
 8008c78:	690c      	ldr	r4, [r1, #16]
 8008c7a:	1b12      	subs	r2, r2, r4
 8008c7c:	d10e      	bne.n	8008c9c <__mcmp+0x28>
 8008c7e:	f100 0314 	add.w	r3, r0, #20
 8008c82:	3114      	adds	r1, #20
 8008c84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c94:	42a5      	cmp	r5, r4
 8008c96:	d003      	beq.n	8008ca0 <__mcmp+0x2c>
 8008c98:	d305      	bcc.n	8008ca6 <__mcmp+0x32>
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	bd30      	pop	{r4, r5, pc}
 8008ca0:	4283      	cmp	r3, r0
 8008ca2:	d3f3      	bcc.n	8008c8c <__mcmp+0x18>
 8008ca4:	e7fa      	b.n	8008c9c <__mcmp+0x28>
 8008ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8008caa:	e7f7      	b.n	8008c9c <__mcmp+0x28>

08008cac <__mdiff>:
 8008cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4617      	mov	r7, r2
 8008cba:	f7ff ffdb 	bl	8008c74 <__mcmp>
 8008cbe:	1e05      	subs	r5, r0, #0
 8008cc0:	d110      	bne.n	8008ce4 <__mdiff+0x38>
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff fd57 	bl	8008778 <_Balloc>
 8008cca:	b930      	cbnz	r0, 8008cda <__mdiff+0x2e>
 8008ccc:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <__mdiff+0x108>)
 8008cce:	4602      	mov	r2, r0
 8008cd0:	f240 2132 	movw	r1, #562	; 0x232
 8008cd4:	4838      	ldr	r0, [pc, #224]	; (8008db8 <__mdiff+0x10c>)
 8008cd6:	f000 fc07 	bl	80094e8 <__assert_func>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce4:	bfa4      	itt	ge
 8008ce6:	463b      	movge	r3, r7
 8008ce8:	4627      	movge	r7, r4
 8008cea:	4630      	mov	r0, r6
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	bfa6      	itte	ge
 8008cf0:	461c      	movge	r4, r3
 8008cf2:	2500      	movge	r5, #0
 8008cf4:	2501      	movlt	r5, #1
 8008cf6:	f7ff fd3f 	bl	8008778 <_Balloc>
 8008cfa:	b920      	cbnz	r0, 8008d06 <__mdiff+0x5a>
 8008cfc:	4b2d      	ldr	r3, [pc, #180]	; (8008db4 <__mdiff+0x108>)
 8008cfe:	4602      	mov	r2, r0
 8008d00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d04:	e7e6      	b.n	8008cd4 <__mdiff+0x28>
 8008d06:	693e      	ldr	r6, [r7, #16]
 8008d08:	60c5      	str	r5, [r0, #12]
 8008d0a:	6925      	ldr	r5, [r4, #16]
 8008d0c:	f107 0114 	add.w	r1, r7, #20
 8008d10:	f104 0914 	add.w	r9, r4, #20
 8008d14:	f100 0e14 	add.w	lr, r0, #20
 8008d18:	f107 0210 	add.w	r2, r7, #16
 8008d1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008d20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008d24:	46f2      	mov	sl, lr
 8008d26:	2700      	movs	r7, #0
 8008d28:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d30:	fa1f f883 	uxth.w	r8, r3
 8008d34:	fa17 f78b 	uxtah	r7, r7, fp
 8008d38:	0c1b      	lsrs	r3, r3, #16
 8008d3a:	eba7 0808 	sub.w	r8, r7, r8
 8008d3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d46:	fa1f f888 	uxth.w	r8, r8
 8008d4a:	141f      	asrs	r7, r3, #16
 8008d4c:	454d      	cmp	r5, r9
 8008d4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d52:	f84a 3b04 	str.w	r3, [sl], #4
 8008d56:	d8e7      	bhi.n	8008d28 <__mdiff+0x7c>
 8008d58:	1b2b      	subs	r3, r5, r4
 8008d5a:	3b15      	subs	r3, #21
 8008d5c:	f023 0303 	bic.w	r3, r3, #3
 8008d60:	3304      	adds	r3, #4
 8008d62:	3415      	adds	r4, #21
 8008d64:	42a5      	cmp	r5, r4
 8008d66:	bf38      	it	cc
 8008d68:	2304      	movcc	r3, #4
 8008d6a:	4419      	add	r1, r3
 8008d6c:	4473      	add	r3, lr
 8008d6e:	469e      	mov	lr, r3
 8008d70:	460d      	mov	r5, r1
 8008d72:	4565      	cmp	r5, ip
 8008d74:	d30e      	bcc.n	8008d94 <__mdiff+0xe8>
 8008d76:	f10c 0203 	add.w	r2, ip, #3
 8008d7a:	1a52      	subs	r2, r2, r1
 8008d7c:	f022 0203 	bic.w	r2, r2, #3
 8008d80:	3903      	subs	r1, #3
 8008d82:	458c      	cmp	ip, r1
 8008d84:	bf38      	it	cc
 8008d86:	2200      	movcc	r2, #0
 8008d88:	441a      	add	r2, r3
 8008d8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d8e:	b17b      	cbz	r3, 8008db0 <__mdiff+0x104>
 8008d90:	6106      	str	r6, [r0, #16]
 8008d92:	e7a5      	b.n	8008ce0 <__mdiff+0x34>
 8008d94:	f855 8b04 	ldr.w	r8, [r5], #4
 8008d98:	fa17 f488 	uxtah	r4, r7, r8
 8008d9c:	1422      	asrs	r2, r4, #16
 8008d9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008da2:	b2a4      	uxth	r4, r4
 8008da4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008da8:	f84e 4b04 	str.w	r4, [lr], #4
 8008dac:	1417      	asrs	r7, r2, #16
 8008dae:	e7e0      	b.n	8008d72 <__mdiff+0xc6>
 8008db0:	3e01      	subs	r6, #1
 8008db2:	e7ea      	b.n	8008d8a <__mdiff+0xde>
 8008db4:	08009a73 	.word	0x08009a73
 8008db8:	08009ae4 	.word	0x08009ae4

08008dbc <__d2b>:
 8008dbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	ec57 6b10 	vmov	r6, r7, d0
 8008dc8:	4690      	mov	r8, r2
 8008dca:	f7ff fcd5 	bl	8008778 <_Balloc>
 8008dce:	4604      	mov	r4, r0
 8008dd0:	b930      	cbnz	r0, 8008de0 <__d2b+0x24>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <__d2b+0xb0>)
 8008dd6:	4826      	ldr	r0, [pc, #152]	; (8008e70 <__d2b+0xb4>)
 8008dd8:	f240 310a 	movw	r1, #778	; 0x30a
 8008ddc:	f000 fb84 	bl	80094e8 <__assert_func>
 8008de0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008de4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008de8:	bb35      	cbnz	r5, 8008e38 <__d2b+0x7c>
 8008dea:	2e00      	cmp	r6, #0
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	d028      	beq.n	8008e42 <__d2b+0x86>
 8008df0:	4668      	mov	r0, sp
 8008df2:	9600      	str	r6, [sp, #0]
 8008df4:	f7ff fd8c 	bl	8008910 <__lo0bits>
 8008df8:	9900      	ldr	r1, [sp, #0]
 8008dfa:	b300      	cbz	r0, 8008e3e <__d2b+0x82>
 8008dfc:	9a01      	ldr	r2, [sp, #4]
 8008dfe:	f1c0 0320 	rsb	r3, r0, #32
 8008e02:	fa02 f303 	lsl.w	r3, r2, r3
 8008e06:	430b      	orrs	r3, r1
 8008e08:	40c2      	lsrs	r2, r0
 8008e0a:	6163      	str	r3, [r4, #20]
 8008e0c:	9201      	str	r2, [sp, #4]
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	61a3      	str	r3, [r4, #24]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	bf14      	ite	ne
 8008e16:	2202      	movne	r2, #2
 8008e18:	2201      	moveq	r2, #1
 8008e1a:	6122      	str	r2, [r4, #16]
 8008e1c:	b1d5      	cbz	r5, 8008e54 <__d2b+0x98>
 8008e1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e22:	4405      	add	r5, r0
 8008e24:	f8c9 5000 	str.w	r5, [r9]
 8008e28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e2c:	f8c8 0000 	str.w	r0, [r8]
 8008e30:	4620      	mov	r0, r4
 8008e32:	b003      	add	sp, #12
 8008e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e3c:	e7d5      	b.n	8008dea <__d2b+0x2e>
 8008e3e:	6161      	str	r1, [r4, #20]
 8008e40:	e7e5      	b.n	8008e0e <__d2b+0x52>
 8008e42:	a801      	add	r0, sp, #4
 8008e44:	f7ff fd64 	bl	8008910 <__lo0bits>
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	6163      	str	r3, [r4, #20]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	6122      	str	r2, [r4, #16]
 8008e50:	3020      	adds	r0, #32
 8008e52:	e7e3      	b.n	8008e1c <__d2b+0x60>
 8008e54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e5c:	f8c9 0000 	str.w	r0, [r9]
 8008e60:	6918      	ldr	r0, [r3, #16]
 8008e62:	f7ff fd35 	bl	80088d0 <__hi0bits>
 8008e66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e6a:	e7df      	b.n	8008e2c <__d2b+0x70>
 8008e6c:	08009a73 	.word	0x08009a73
 8008e70:	08009ae4 	.word	0x08009ae4

08008e74 <_calloc_r>:
 8008e74:	b513      	push	{r0, r1, r4, lr}
 8008e76:	434a      	muls	r2, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	9201      	str	r2, [sp, #4]
 8008e7c:	f000 f85a 	bl	8008f34 <_malloc_r>
 8008e80:	4604      	mov	r4, r0
 8008e82:	b118      	cbz	r0, 8008e8c <_calloc_r+0x18>
 8008e84:	9a01      	ldr	r2, [sp, #4]
 8008e86:	2100      	movs	r1, #0
 8008e88:	f7fe f860 	bl	8006f4c <memset>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	b002      	add	sp, #8
 8008e90:	bd10      	pop	{r4, pc}
	...

08008e94 <_free_r>:
 8008e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e96:	2900      	cmp	r1, #0
 8008e98:	d048      	beq.n	8008f2c <_free_r+0x98>
 8008e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e9e:	9001      	str	r0, [sp, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ea6:	bfb8      	it	lt
 8008ea8:	18e4      	addlt	r4, r4, r3
 8008eaa:	f000 fca7 	bl	80097fc <__malloc_lock>
 8008eae:	4a20      	ldr	r2, [pc, #128]	; (8008f30 <_free_r+0x9c>)
 8008eb0:	9801      	ldr	r0, [sp, #4]
 8008eb2:	6813      	ldr	r3, [r2, #0]
 8008eb4:	4615      	mov	r5, r2
 8008eb6:	b933      	cbnz	r3, 8008ec6 <_free_r+0x32>
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	6014      	str	r4, [r2, #0]
 8008ebc:	b003      	add	sp, #12
 8008ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ec2:	f000 bca1 	b.w	8009808 <__malloc_unlock>
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	d90b      	bls.n	8008ee2 <_free_r+0x4e>
 8008eca:	6821      	ldr	r1, [r4, #0]
 8008ecc:	1862      	adds	r2, r4, r1
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	bf04      	itt	eq
 8008ed2:	681a      	ldreq	r2, [r3, #0]
 8008ed4:	685b      	ldreq	r3, [r3, #4]
 8008ed6:	6063      	str	r3, [r4, #4]
 8008ed8:	bf04      	itt	eq
 8008eda:	1852      	addeq	r2, r2, r1
 8008edc:	6022      	streq	r2, [r4, #0]
 8008ede:	602c      	str	r4, [r5, #0]
 8008ee0:	e7ec      	b.n	8008ebc <_free_r+0x28>
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	b10b      	cbz	r3, 8008eec <_free_r+0x58>
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d9fa      	bls.n	8008ee2 <_free_r+0x4e>
 8008eec:	6811      	ldr	r1, [r2, #0]
 8008eee:	1855      	adds	r5, r2, r1
 8008ef0:	42a5      	cmp	r5, r4
 8008ef2:	d10b      	bne.n	8008f0c <_free_r+0x78>
 8008ef4:	6824      	ldr	r4, [r4, #0]
 8008ef6:	4421      	add	r1, r4
 8008ef8:	1854      	adds	r4, r2, r1
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	d1dd      	bne.n	8008ebc <_free_r+0x28>
 8008f00:	681c      	ldr	r4, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	6053      	str	r3, [r2, #4]
 8008f06:	4421      	add	r1, r4
 8008f08:	6011      	str	r1, [r2, #0]
 8008f0a:	e7d7      	b.n	8008ebc <_free_r+0x28>
 8008f0c:	d902      	bls.n	8008f14 <_free_r+0x80>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	e7d3      	b.n	8008ebc <_free_r+0x28>
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	1961      	adds	r1, r4, r5
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf04      	itt	eq
 8008f1c:	6819      	ldreq	r1, [r3, #0]
 8008f1e:	685b      	ldreq	r3, [r3, #4]
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	bf04      	itt	eq
 8008f24:	1949      	addeq	r1, r1, r5
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	6054      	str	r4, [r2, #4]
 8008f2a:	e7c7      	b.n	8008ebc <_free_r+0x28>
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bd30      	pop	{r4, r5, pc}
 8008f30:	20000430 	.word	0x20000430

08008f34 <_malloc_r>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	1ccd      	adds	r5, r1, #3
 8008f38:	f025 0503 	bic.w	r5, r5, #3
 8008f3c:	3508      	adds	r5, #8
 8008f3e:	2d0c      	cmp	r5, #12
 8008f40:	bf38      	it	cc
 8008f42:	250c      	movcc	r5, #12
 8008f44:	2d00      	cmp	r5, #0
 8008f46:	4606      	mov	r6, r0
 8008f48:	db01      	blt.n	8008f4e <_malloc_r+0x1a>
 8008f4a:	42a9      	cmp	r1, r5
 8008f4c:	d903      	bls.n	8008f56 <_malloc_r+0x22>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	6033      	str	r3, [r6, #0]
 8008f52:	2000      	movs	r0, #0
 8008f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f56:	f000 fc51 	bl	80097fc <__malloc_lock>
 8008f5a:	4921      	ldr	r1, [pc, #132]	; (8008fe0 <_malloc_r+0xac>)
 8008f5c:	680a      	ldr	r2, [r1, #0]
 8008f5e:	4614      	mov	r4, r2
 8008f60:	b99c      	cbnz	r4, 8008f8a <_malloc_r+0x56>
 8008f62:	4f20      	ldr	r7, [pc, #128]	; (8008fe4 <_malloc_r+0xb0>)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	b923      	cbnz	r3, 8008f72 <_malloc_r+0x3e>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f000 f996 	bl	800929c <_sbrk_r>
 8008f70:	6038      	str	r0, [r7, #0]
 8008f72:	4629      	mov	r1, r5
 8008f74:	4630      	mov	r0, r6
 8008f76:	f000 f991 	bl	800929c <_sbrk_r>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	d123      	bne.n	8008fc6 <_malloc_r+0x92>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	4630      	mov	r0, r6
 8008f84:	f000 fc40 	bl	8009808 <__malloc_unlock>
 8008f88:	e7e3      	b.n	8008f52 <_malloc_r+0x1e>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	1b5b      	subs	r3, r3, r5
 8008f8e:	d417      	bmi.n	8008fc0 <_malloc_r+0x8c>
 8008f90:	2b0b      	cmp	r3, #11
 8008f92:	d903      	bls.n	8008f9c <_malloc_r+0x68>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	441c      	add	r4, r3
 8008f98:	6025      	str	r5, [r4, #0]
 8008f9a:	e004      	b.n	8008fa6 <_malloc_r+0x72>
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	42a2      	cmp	r2, r4
 8008fa0:	bf0c      	ite	eq
 8008fa2:	600b      	streq	r3, [r1, #0]
 8008fa4:	6053      	strne	r3, [r2, #4]
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f000 fc2e 	bl	8009808 <__malloc_unlock>
 8008fac:	f104 000b 	add.w	r0, r4, #11
 8008fb0:	1d23      	adds	r3, r4, #4
 8008fb2:	f020 0007 	bic.w	r0, r0, #7
 8008fb6:	1ac2      	subs	r2, r0, r3
 8008fb8:	d0cc      	beq.n	8008f54 <_malloc_r+0x20>
 8008fba:	1a1b      	subs	r3, r3, r0
 8008fbc:	50a3      	str	r3, [r4, r2]
 8008fbe:	e7c9      	b.n	8008f54 <_malloc_r+0x20>
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	6864      	ldr	r4, [r4, #4]
 8008fc4:	e7cc      	b.n	8008f60 <_malloc_r+0x2c>
 8008fc6:	1cc4      	adds	r4, r0, #3
 8008fc8:	f024 0403 	bic.w	r4, r4, #3
 8008fcc:	42a0      	cmp	r0, r4
 8008fce:	d0e3      	beq.n	8008f98 <_malloc_r+0x64>
 8008fd0:	1a21      	subs	r1, r4, r0
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f000 f962 	bl	800929c <_sbrk_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d1dd      	bne.n	8008f98 <_malloc_r+0x64>
 8008fdc:	e7cf      	b.n	8008f7e <_malloc_r+0x4a>
 8008fde:	bf00      	nop
 8008fe0:	20000430 	.word	0x20000430
 8008fe4:	20000434 	.word	0x20000434

08008fe8 <__sfputc_r>:
 8008fe8:	6893      	ldr	r3, [r2, #8]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	b410      	push	{r4}
 8008ff0:	6093      	str	r3, [r2, #8]
 8008ff2:	da08      	bge.n	8009006 <__sfputc_r+0x1e>
 8008ff4:	6994      	ldr	r4, [r2, #24]
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	db01      	blt.n	8008ffe <__sfputc_r+0x16>
 8008ffa:	290a      	cmp	r1, #10
 8008ffc:	d103      	bne.n	8009006 <__sfputc_r+0x1e>
 8008ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009002:	f000 b99f 	b.w	8009344 <__swbuf_r>
 8009006:	6813      	ldr	r3, [r2, #0]
 8009008:	1c58      	adds	r0, r3, #1
 800900a:	6010      	str	r0, [r2, #0]
 800900c:	7019      	strb	r1, [r3, #0]
 800900e:	4608      	mov	r0, r1
 8009010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009014:	4770      	bx	lr

08009016 <__sfputs_r>:
 8009016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009018:	4606      	mov	r6, r0
 800901a:	460f      	mov	r7, r1
 800901c:	4614      	mov	r4, r2
 800901e:	18d5      	adds	r5, r2, r3
 8009020:	42ac      	cmp	r4, r5
 8009022:	d101      	bne.n	8009028 <__sfputs_r+0x12>
 8009024:	2000      	movs	r0, #0
 8009026:	e007      	b.n	8009038 <__sfputs_r+0x22>
 8009028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902c:	463a      	mov	r2, r7
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ffda 	bl	8008fe8 <__sfputc_r>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d1f3      	bne.n	8009020 <__sfputs_r+0xa>
 8009038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800903c <_vfiprintf_r>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	460d      	mov	r5, r1
 8009042:	b09d      	sub	sp, #116	; 0x74
 8009044:	4614      	mov	r4, r2
 8009046:	4698      	mov	r8, r3
 8009048:	4606      	mov	r6, r0
 800904a:	b118      	cbz	r0, 8009054 <_vfiprintf_r+0x18>
 800904c:	6983      	ldr	r3, [r0, #24]
 800904e:	b90b      	cbnz	r3, 8009054 <_vfiprintf_r+0x18>
 8009050:	f7ff fad6 	bl	8008600 <__sinit>
 8009054:	4b89      	ldr	r3, [pc, #548]	; (800927c <_vfiprintf_r+0x240>)
 8009056:	429d      	cmp	r5, r3
 8009058:	d11b      	bne.n	8009092 <_vfiprintf_r+0x56>
 800905a:	6875      	ldr	r5, [r6, #4]
 800905c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905e:	07d9      	lsls	r1, r3, #31
 8009060:	d405      	bmi.n	800906e <_vfiprintf_r+0x32>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	059a      	lsls	r2, r3, #22
 8009066:	d402      	bmi.n	800906e <_vfiprintf_r+0x32>
 8009068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800906a:	f7ff fb6c 	bl	8008746 <__retarget_lock_acquire_recursive>
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	071b      	lsls	r3, r3, #28
 8009072:	d501      	bpl.n	8009078 <_vfiprintf_r+0x3c>
 8009074:	692b      	ldr	r3, [r5, #16]
 8009076:	b9eb      	cbnz	r3, 80090b4 <_vfiprintf_r+0x78>
 8009078:	4629      	mov	r1, r5
 800907a:	4630      	mov	r0, r6
 800907c:	f000 f9c6 	bl	800940c <__swsetup_r>
 8009080:	b1c0      	cbz	r0, 80090b4 <_vfiprintf_r+0x78>
 8009082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009084:	07dc      	lsls	r4, r3, #31
 8009086:	d50e      	bpl.n	80090a6 <_vfiprintf_r+0x6a>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	b01d      	add	sp, #116	; 0x74
 800908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009092:	4b7b      	ldr	r3, [pc, #492]	; (8009280 <_vfiprintf_r+0x244>)
 8009094:	429d      	cmp	r5, r3
 8009096:	d101      	bne.n	800909c <_vfiprintf_r+0x60>
 8009098:	68b5      	ldr	r5, [r6, #8]
 800909a:	e7df      	b.n	800905c <_vfiprintf_r+0x20>
 800909c:	4b79      	ldr	r3, [pc, #484]	; (8009284 <_vfiprintf_r+0x248>)
 800909e:	429d      	cmp	r5, r3
 80090a0:	bf08      	it	eq
 80090a2:	68f5      	ldreq	r5, [r6, #12]
 80090a4:	e7da      	b.n	800905c <_vfiprintf_r+0x20>
 80090a6:	89ab      	ldrh	r3, [r5, #12]
 80090a8:	0598      	lsls	r0, r3, #22
 80090aa:	d4ed      	bmi.n	8009088 <_vfiprintf_r+0x4c>
 80090ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ae:	f7ff fb4b 	bl	8008748 <__retarget_lock_release_recursive>
 80090b2:	e7e9      	b.n	8009088 <_vfiprintf_r+0x4c>
 80090b4:	2300      	movs	r3, #0
 80090b6:	9309      	str	r3, [sp, #36]	; 0x24
 80090b8:	2320      	movs	r3, #32
 80090ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090be:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c2:	2330      	movs	r3, #48	; 0x30
 80090c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009288 <_vfiprintf_r+0x24c>
 80090c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090cc:	f04f 0901 	mov.w	r9, #1
 80090d0:	4623      	mov	r3, r4
 80090d2:	469a      	mov	sl, r3
 80090d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d8:	b10a      	cbz	r2, 80090de <_vfiprintf_r+0xa2>
 80090da:	2a25      	cmp	r2, #37	; 0x25
 80090dc:	d1f9      	bne.n	80090d2 <_vfiprintf_r+0x96>
 80090de:	ebba 0b04 	subs.w	fp, sl, r4
 80090e2:	d00b      	beq.n	80090fc <_vfiprintf_r+0xc0>
 80090e4:	465b      	mov	r3, fp
 80090e6:	4622      	mov	r2, r4
 80090e8:	4629      	mov	r1, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7ff ff93 	bl	8009016 <__sfputs_r>
 80090f0:	3001      	adds	r0, #1
 80090f2:	f000 80aa 	beq.w	800924a <_vfiprintf_r+0x20e>
 80090f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f8:	445a      	add	r2, fp
 80090fa:	9209      	str	r2, [sp, #36]	; 0x24
 80090fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 80a2 	beq.w	800924a <_vfiprintf_r+0x20e>
 8009106:	2300      	movs	r3, #0
 8009108:	f04f 32ff 	mov.w	r2, #4294967295
 800910c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009110:	f10a 0a01 	add.w	sl, sl, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800911c:	931a      	str	r3, [sp, #104]	; 0x68
 800911e:	4654      	mov	r4, sl
 8009120:	2205      	movs	r2, #5
 8009122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009126:	4858      	ldr	r0, [pc, #352]	; (8009288 <_vfiprintf_r+0x24c>)
 8009128:	f7f7 f85a 	bl	80001e0 <memchr>
 800912c:	9a04      	ldr	r2, [sp, #16]
 800912e:	b9d8      	cbnz	r0, 8009168 <_vfiprintf_r+0x12c>
 8009130:	06d1      	lsls	r1, r2, #27
 8009132:	bf44      	itt	mi
 8009134:	2320      	movmi	r3, #32
 8009136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913a:	0713      	lsls	r3, r2, #28
 800913c:	bf44      	itt	mi
 800913e:	232b      	movmi	r3, #43	; 0x2b
 8009140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009144:	f89a 3000 	ldrb.w	r3, [sl]
 8009148:	2b2a      	cmp	r3, #42	; 0x2a
 800914a:	d015      	beq.n	8009178 <_vfiprintf_r+0x13c>
 800914c:	9a07      	ldr	r2, [sp, #28]
 800914e:	4654      	mov	r4, sl
 8009150:	2000      	movs	r0, #0
 8009152:	f04f 0c0a 	mov.w	ip, #10
 8009156:	4621      	mov	r1, r4
 8009158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800915c:	3b30      	subs	r3, #48	; 0x30
 800915e:	2b09      	cmp	r3, #9
 8009160:	d94e      	bls.n	8009200 <_vfiprintf_r+0x1c4>
 8009162:	b1b0      	cbz	r0, 8009192 <_vfiprintf_r+0x156>
 8009164:	9207      	str	r2, [sp, #28]
 8009166:	e014      	b.n	8009192 <_vfiprintf_r+0x156>
 8009168:	eba0 0308 	sub.w	r3, r0, r8
 800916c:	fa09 f303 	lsl.w	r3, r9, r3
 8009170:	4313      	orrs	r3, r2
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	46a2      	mov	sl, r4
 8009176:	e7d2      	b.n	800911e <_vfiprintf_r+0xe2>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	1d19      	adds	r1, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	9103      	str	r1, [sp, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	bfbb      	ittet	lt
 8009184:	425b      	neglt	r3, r3
 8009186:	f042 0202 	orrlt.w	r2, r2, #2
 800918a:	9307      	strge	r3, [sp, #28]
 800918c:	9307      	strlt	r3, [sp, #28]
 800918e:	bfb8      	it	lt
 8009190:	9204      	strlt	r2, [sp, #16]
 8009192:	7823      	ldrb	r3, [r4, #0]
 8009194:	2b2e      	cmp	r3, #46	; 0x2e
 8009196:	d10c      	bne.n	80091b2 <_vfiprintf_r+0x176>
 8009198:	7863      	ldrb	r3, [r4, #1]
 800919a:	2b2a      	cmp	r3, #42	; 0x2a
 800919c:	d135      	bne.n	800920a <_vfiprintf_r+0x1ce>
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	1d1a      	adds	r2, r3, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	9203      	str	r2, [sp, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfb8      	it	lt
 80091aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80091ae:	3402      	adds	r4, #2
 80091b0:	9305      	str	r3, [sp, #20]
 80091b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009298 <_vfiprintf_r+0x25c>
 80091b6:	7821      	ldrb	r1, [r4, #0]
 80091b8:	2203      	movs	r2, #3
 80091ba:	4650      	mov	r0, sl
 80091bc:	f7f7 f810 	bl	80001e0 <memchr>
 80091c0:	b140      	cbz	r0, 80091d4 <_vfiprintf_r+0x198>
 80091c2:	2340      	movs	r3, #64	; 0x40
 80091c4:	eba0 000a 	sub.w	r0, r0, sl
 80091c8:	fa03 f000 	lsl.w	r0, r3, r0
 80091cc:	9b04      	ldr	r3, [sp, #16]
 80091ce:	4303      	orrs	r3, r0
 80091d0:	3401      	adds	r4, #1
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d8:	482c      	ldr	r0, [pc, #176]	; (800928c <_vfiprintf_r+0x250>)
 80091da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091de:	2206      	movs	r2, #6
 80091e0:	f7f6 fffe 	bl	80001e0 <memchr>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d03f      	beq.n	8009268 <_vfiprintf_r+0x22c>
 80091e8:	4b29      	ldr	r3, [pc, #164]	; (8009290 <_vfiprintf_r+0x254>)
 80091ea:	bb1b      	cbnz	r3, 8009234 <_vfiprintf_r+0x1f8>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	3307      	adds	r3, #7
 80091f0:	f023 0307 	bic.w	r3, r3, #7
 80091f4:	3308      	adds	r3, #8
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fa:	443b      	add	r3, r7
 80091fc:	9309      	str	r3, [sp, #36]	; 0x24
 80091fe:	e767      	b.n	80090d0 <_vfiprintf_r+0x94>
 8009200:	fb0c 3202 	mla	r2, ip, r2, r3
 8009204:	460c      	mov	r4, r1
 8009206:	2001      	movs	r0, #1
 8009208:	e7a5      	b.n	8009156 <_vfiprintf_r+0x11a>
 800920a:	2300      	movs	r3, #0
 800920c:	3401      	adds	r4, #1
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	4619      	mov	r1, r3
 8009212:	f04f 0c0a 	mov.w	ip, #10
 8009216:	4620      	mov	r0, r4
 8009218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800921c:	3a30      	subs	r2, #48	; 0x30
 800921e:	2a09      	cmp	r2, #9
 8009220:	d903      	bls.n	800922a <_vfiprintf_r+0x1ee>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0c5      	beq.n	80091b2 <_vfiprintf_r+0x176>
 8009226:	9105      	str	r1, [sp, #20]
 8009228:	e7c3      	b.n	80091b2 <_vfiprintf_r+0x176>
 800922a:	fb0c 2101 	mla	r1, ip, r1, r2
 800922e:	4604      	mov	r4, r0
 8009230:	2301      	movs	r3, #1
 8009232:	e7f0      	b.n	8009216 <_vfiprintf_r+0x1da>
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	462a      	mov	r2, r5
 800923a:	4b16      	ldr	r3, [pc, #88]	; (8009294 <_vfiprintf_r+0x258>)
 800923c:	a904      	add	r1, sp, #16
 800923e:	4630      	mov	r0, r6
 8009240:	f7fd ff2c 	bl	800709c <_printf_float>
 8009244:	4607      	mov	r7, r0
 8009246:	1c78      	adds	r0, r7, #1
 8009248:	d1d6      	bne.n	80091f8 <_vfiprintf_r+0x1bc>
 800924a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800924c:	07d9      	lsls	r1, r3, #31
 800924e:	d405      	bmi.n	800925c <_vfiprintf_r+0x220>
 8009250:	89ab      	ldrh	r3, [r5, #12]
 8009252:	059a      	lsls	r2, r3, #22
 8009254:	d402      	bmi.n	800925c <_vfiprintf_r+0x220>
 8009256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009258:	f7ff fa76 	bl	8008748 <__retarget_lock_release_recursive>
 800925c:	89ab      	ldrh	r3, [r5, #12]
 800925e:	065b      	lsls	r3, r3, #25
 8009260:	f53f af12 	bmi.w	8009088 <_vfiprintf_r+0x4c>
 8009264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009266:	e711      	b.n	800908c <_vfiprintf_r+0x50>
 8009268:	ab03      	add	r3, sp, #12
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	462a      	mov	r2, r5
 800926e:	4b09      	ldr	r3, [pc, #36]	; (8009294 <_vfiprintf_r+0x258>)
 8009270:	a904      	add	r1, sp, #16
 8009272:	4630      	mov	r0, r6
 8009274:	f7fe f9b6 	bl	80075e4 <_printf_i>
 8009278:	e7e4      	b.n	8009244 <_vfiprintf_r+0x208>
 800927a:	bf00      	nop
 800927c:	08009aa4 	.word	0x08009aa4
 8009280:	08009ac4 	.word	0x08009ac4
 8009284:	08009a84 	.word	0x08009a84
 8009288:	08009c44 	.word	0x08009c44
 800928c:	08009c4e 	.word	0x08009c4e
 8009290:	0800709d 	.word	0x0800709d
 8009294:	08009017 	.word	0x08009017
 8009298:	08009c4a 	.word	0x08009c4a

0800929c <_sbrk_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d06      	ldr	r5, [pc, #24]	; (80092b8 <_sbrk_r+0x1c>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	602b      	str	r3, [r5, #0]
 80092a8:	f7f9 ff82 	bl	80031b0 <_sbrk>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_sbrk_r+0x1a>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_sbrk_r+0x1a>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	2000057c 	.word	0x2000057c

080092bc <__sread>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	460c      	mov	r4, r1
 80092c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c4:	f000 faa6 	bl	8009814 <_read_r>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	bfab      	itete	ge
 80092cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092ce:	89a3      	ldrhlt	r3, [r4, #12]
 80092d0:	181b      	addge	r3, r3, r0
 80092d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092d6:	bfac      	ite	ge
 80092d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80092da:	81a3      	strhlt	r3, [r4, #12]
 80092dc:	bd10      	pop	{r4, pc}

080092de <__swrite>:
 80092de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e2:	461f      	mov	r7, r3
 80092e4:	898b      	ldrh	r3, [r1, #12]
 80092e6:	05db      	lsls	r3, r3, #23
 80092e8:	4605      	mov	r5, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	4616      	mov	r6, r2
 80092ee:	d505      	bpl.n	80092fc <__swrite+0x1e>
 80092f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f4:	2302      	movs	r3, #2
 80092f6:	2200      	movs	r2, #0
 80092f8:	f000 f9f8 	bl	80096ec <_lseek_r>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	4632      	mov	r2, r6
 800930a:	463b      	mov	r3, r7
 800930c:	4628      	mov	r0, r5
 800930e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009312:	f000 b869 	b.w	80093e8 <_write_r>

08009316 <__sseek>:
 8009316:	b510      	push	{r4, lr}
 8009318:	460c      	mov	r4, r1
 800931a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931e:	f000 f9e5 	bl	80096ec <_lseek_r>
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	bf15      	itete	ne
 8009328:	6560      	strne	r0, [r4, #84]	; 0x54
 800932a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800932e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009332:	81a3      	strheq	r3, [r4, #12]
 8009334:	bf18      	it	ne
 8009336:	81a3      	strhne	r3, [r4, #12]
 8009338:	bd10      	pop	{r4, pc}

0800933a <__sclose>:
 800933a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933e:	f000 b8f1 	b.w	8009524 <_close_r>
	...

08009344 <__swbuf_r>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	460e      	mov	r6, r1
 8009348:	4614      	mov	r4, r2
 800934a:	4605      	mov	r5, r0
 800934c:	b118      	cbz	r0, 8009356 <__swbuf_r+0x12>
 800934e:	6983      	ldr	r3, [r0, #24]
 8009350:	b90b      	cbnz	r3, 8009356 <__swbuf_r+0x12>
 8009352:	f7ff f955 	bl	8008600 <__sinit>
 8009356:	4b21      	ldr	r3, [pc, #132]	; (80093dc <__swbuf_r+0x98>)
 8009358:	429c      	cmp	r4, r3
 800935a:	d12b      	bne.n	80093b4 <__swbuf_r+0x70>
 800935c:	686c      	ldr	r4, [r5, #4]
 800935e:	69a3      	ldr	r3, [r4, #24]
 8009360:	60a3      	str	r3, [r4, #8]
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	071a      	lsls	r2, r3, #28
 8009366:	d52f      	bpl.n	80093c8 <__swbuf_r+0x84>
 8009368:	6923      	ldr	r3, [r4, #16]
 800936a:	b36b      	cbz	r3, 80093c8 <__swbuf_r+0x84>
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	6820      	ldr	r0, [r4, #0]
 8009370:	1ac0      	subs	r0, r0, r3
 8009372:	6963      	ldr	r3, [r4, #20]
 8009374:	b2f6      	uxtb	r6, r6
 8009376:	4283      	cmp	r3, r0
 8009378:	4637      	mov	r7, r6
 800937a:	dc04      	bgt.n	8009386 <__swbuf_r+0x42>
 800937c:	4621      	mov	r1, r4
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f966 	bl	8009650 <_fflush_r>
 8009384:	bb30      	cbnz	r0, 80093d4 <__swbuf_r+0x90>
 8009386:	68a3      	ldr	r3, [r4, #8]
 8009388:	3b01      	subs	r3, #1
 800938a:	60a3      	str	r3, [r4, #8]
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	6022      	str	r2, [r4, #0]
 8009392:	701e      	strb	r6, [r3, #0]
 8009394:	6963      	ldr	r3, [r4, #20]
 8009396:	3001      	adds	r0, #1
 8009398:	4283      	cmp	r3, r0
 800939a:	d004      	beq.n	80093a6 <__swbuf_r+0x62>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	07db      	lsls	r3, r3, #31
 80093a0:	d506      	bpl.n	80093b0 <__swbuf_r+0x6c>
 80093a2:	2e0a      	cmp	r6, #10
 80093a4:	d104      	bne.n	80093b0 <__swbuf_r+0x6c>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 f951 	bl	8009650 <_fflush_r>
 80093ae:	b988      	cbnz	r0, 80093d4 <__swbuf_r+0x90>
 80093b0:	4638      	mov	r0, r7
 80093b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b4:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <__swbuf_r+0x9c>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d101      	bne.n	80093be <__swbuf_r+0x7a>
 80093ba:	68ac      	ldr	r4, [r5, #8]
 80093bc:	e7cf      	b.n	800935e <__swbuf_r+0x1a>
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <__swbuf_r+0xa0>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	bf08      	it	eq
 80093c4:	68ec      	ldreq	r4, [r5, #12]
 80093c6:	e7ca      	b.n	800935e <__swbuf_r+0x1a>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f81e 	bl	800940c <__swsetup_r>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d0cb      	beq.n	800936c <__swbuf_r+0x28>
 80093d4:	f04f 37ff 	mov.w	r7, #4294967295
 80093d8:	e7ea      	b.n	80093b0 <__swbuf_r+0x6c>
 80093da:	bf00      	nop
 80093dc:	08009aa4 	.word	0x08009aa4
 80093e0:	08009ac4 	.word	0x08009ac4
 80093e4:	08009a84 	.word	0x08009a84

080093e8 <_write_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d07      	ldr	r5, [pc, #28]	; (8009408 <_write_r+0x20>)
 80093ec:	4604      	mov	r4, r0
 80093ee:	4608      	mov	r0, r1
 80093f0:	4611      	mov	r1, r2
 80093f2:	2200      	movs	r2, #0
 80093f4:	602a      	str	r2, [r5, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	f7f9 fe8a 	bl	8003110 <_write>
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	d102      	bne.n	8009406 <_write_r+0x1e>
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	b103      	cbz	r3, 8009406 <_write_r+0x1e>
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	2000057c 	.word	0x2000057c

0800940c <__swsetup_r>:
 800940c:	4b32      	ldr	r3, [pc, #200]	; (80094d8 <__swsetup_r+0xcc>)
 800940e:	b570      	push	{r4, r5, r6, lr}
 8009410:	681d      	ldr	r5, [r3, #0]
 8009412:	4606      	mov	r6, r0
 8009414:	460c      	mov	r4, r1
 8009416:	b125      	cbz	r5, 8009422 <__swsetup_r+0x16>
 8009418:	69ab      	ldr	r3, [r5, #24]
 800941a:	b913      	cbnz	r3, 8009422 <__swsetup_r+0x16>
 800941c:	4628      	mov	r0, r5
 800941e:	f7ff f8ef 	bl	8008600 <__sinit>
 8009422:	4b2e      	ldr	r3, [pc, #184]	; (80094dc <__swsetup_r+0xd0>)
 8009424:	429c      	cmp	r4, r3
 8009426:	d10f      	bne.n	8009448 <__swsetup_r+0x3c>
 8009428:	686c      	ldr	r4, [r5, #4]
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009430:	0719      	lsls	r1, r3, #28
 8009432:	d42c      	bmi.n	800948e <__swsetup_r+0x82>
 8009434:	06dd      	lsls	r5, r3, #27
 8009436:	d411      	bmi.n	800945c <__swsetup_r+0x50>
 8009438:	2309      	movs	r3, #9
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	f04f 30ff 	mov.w	r0, #4294967295
 8009446:	e03e      	b.n	80094c6 <__swsetup_r+0xba>
 8009448:	4b25      	ldr	r3, [pc, #148]	; (80094e0 <__swsetup_r+0xd4>)
 800944a:	429c      	cmp	r4, r3
 800944c:	d101      	bne.n	8009452 <__swsetup_r+0x46>
 800944e:	68ac      	ldr	r4, [r5, #8]
 8009450:	e7eb      	b.n	800942a <__swsetup_r+0x1e>
 8009452:	4b24      	ldr	r3, [pc, #144]	; (80094e4 <__swsetup_r+0xd8>)
 8009454:	429c      	cmp	r4, r3
 8009456:	bf08      	it	eq
 8009458:	68ec      	ldreq	r4, [r5, #12]
 800945a:	e7e6      	b.n	800942a <__swsetup_r+0x1e>
 800945c:	0758      	lsls	r0, r3, #29
 800945e:	d512      	bpl.n	8009486 <__swsetup_r+0x7a>
 8009460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009462:	b141      	cbz	r1, 8009476 <__swsetup_r+0x6a>
 8009464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009468:	4299      	cmp	r1, r3
 800946a:	d002      	beq.n	8009472 <__swsetup_r+0x66>
 800946c:	4630      	mov	r0, r6
 800946e:	f7ff fd11 	bl	8008e94 <_free_r>
 8009472:	2300      	movs	r3, #0
 8009474:	6363      	str	r3, [r4, #52]	; 0x34
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	2300      	movs	r3, #0
 8009480:	6063      	str	r3, [r4, #4]
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f043 0308 	orr.w	r3, r3, #8
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	b94b      	cbnz	r3, 80094a6 <__swsetup_r+0x9a>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800949c:	d003      	beq.n	80094a6 <__swsetup_r+0x9a>
 800949e:	4621      	mov	r1, r4
 80094a0:	4630      	mov	r0, r6
 80094a2:	f000 f959 	bl	8009758 <__smakebuf_r>
 80094a6:	89a0      	ldrh	r0, [r4, #12]
 80094a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ac:	f010 0301 	ands.w	r3, r0, #1
 80094b0:	d00a      	beq.n	80094c8 <__swsetup_r+0xbc>
 80094b2:	2300      	movs	r3, #0
 80094b4:	60a3      	str	r3, [r4, #8]
 80094b6:	6963      	ldr	r3, [r4, #20]
 80094b8:	425b      	negs	r3, r3
 80094ba:	61a3      	str	r3, [r4, #24]
 80094bc:	6923      	ldr	r3, [r4, #16]
 80094be:	b943      	cbnz	r3, 80094d2 <__swsetup_r+0xc6>
 80094c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094c4:	d1ba      	bne.n	800943c <__swsetup_r+0x30>
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	0781      	lsls	r1, r0, #30
 80094ca:	bf58      	it	pl
 80094cc:	6963      	ldrpl	r3, [r4, #20]
 80094ce:	60a3      	str	r3, [r4, #8]
 80094d0:	e7f4      	b.n	80094bc <__swsetup_r+0xb0>
 80094d2:	2000      	movs	r0, #0
 80094d4:	e7f7      	b.n	80094c6 <__swsetup_r+0xba>
 80094d6:	bf00      	nop
 80094d8:	20000184 	.word	0x20000184
 80094dc:	08009aa4 	.word	0x08009aa4
 80094e0:	08009ac4 	.word	0x08009ac4
 80094e4:	08009a84 	.word	0x08009a84

080094e8 <__assert_func>:
 80094e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094ea:	4614      	mov	r4, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <__assert_func+0x2c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4605      	mov	r5, r0
 80094f4:	68d8      	ldr	r0, [r3, #12]
 80094f6:	b14c      	cbz	r4, 800950c <__assert_func+0x24>
 80094f8:	4b07      	ldr	r3, [pc, #28]	; (8009518 <__assert_func+0x30>)
 80094fa:	9100      	str	r1, [sp, #0]
 80094fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009500:	4906      	ldr	r1, [pc, #24]	; (800951c <__assert_func+0x34>)
 8009502:	462b      	mov	r3, r5
 8009504:	f000 f8e0 	bl	80096c8 <fiprintf>
 8009508:	f000 f9a3 	bl	8009852 <abort>
 800950c:	4b04      	ldr	r3, [pc, #16]	; (8009520 <__assert_func+0x38>)
 800950e:	461c      	mov	r4, r3
 8009510:	e7f3      	b.n	80094fa <__assert_func+0x12>
 8009512:	bf00      	nop
 8009514:	20000184 	.word	0x20000184
 8009518:	08009c55 	.word	0x08009c55
 800951c:	08009c62 	.word	0x08009c62
 8009520:	08009c90 	.word	0x08009c90

08009524 <_close_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d06      	ldr	r5, [pc, #24]	; (8009540 <_close_r+0x1c>)
 8009528:	2300      	movs	r3, #0
 800952a:	4604      	mov	r4, r0
 800952c:	4608      	mov	r0, r1
 800952e:	602b      	str	r3, [r5, #0]
 8009530:	f7f9 fe0a 	bl	8003148 <_close>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_close_r+0x1a>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_close_r+0x1a>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	2000057c 	.word	0x2000057c

08009544 <__sflush_r>:
 8009544:	898a      	ldrh	r2, [r1, #12]
 8009546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	4605      	mov	r5, r0
 800954c:	0710      	lsls	r0, r2, #28
 800954e:	460c      	mov	r4, r1
 8009550:	d458      	bmi.n	8009604 <__sflush_r+0xc0>
 8009552:	684b      	ldr	r3, [r1, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	dc05      	bgt.n	8009564 <__sflush_r+0x20>
 8009558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800955a:	2b00      	cmp	r3, #0
 800955c:	dc02      	bgt.n	8009564 <__sflush_r+0x20>
 800955e:	2000      	movs	r0, #0
 8009560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009566:	2e00      	cmp	r6, #0
 8009568:	d0f9      	beq.n	800955e <__sflush_r+0x1a>
 800956a:	2300      	movs	r3, #0
 800956c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009570:	682f      	ldr	r7, [r5, #0]
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	d032      	beq.n	80095dc <__sflush_r+0x98>
 8009576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	075a      	lsls	r2, r3, #29
 800957c:	d505      	bpl.n	800958a <__sflush_r+0x46>
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	1ac0      	subs	r0, r0, r3
 8009582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009584:	b10b      	cbz	r3, 800958a <__sflush_r+0x46>
 8009586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009588:	1ac0      	subs	r0, r0, r3
 800958a:	2300      	movs	r3, #0
 800958c:	4602      	mov	r2, r0
 800958e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009590:	6a21      	ldr	r1, [r4, #32]
 8009592:	4628      	mov	r0, r5
 8009594:	47b0      	blx	r6
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	d106      	bne.n	80095aa <__sflush_r+0x66>
 800959c:	6829      	ldr	r1, [r5, #0]
 800959e:	291d      	cmp	r1, #29
 80095a0:	d82c      	bhi.n	80095fc <__sflush_r+0xb8>
 80095a2:	4a2a      	ldr	r2, [pc, #168]	; (800964c <__sflush_r+0x108>)
 80095a4:	40ca      	lsrs	r2, r1
 80095a6:	07d6      	lsls	r6, r2, #31
 80095a8:	d528      	bpl.n	80095fc <__sflush_r+0xb8>
 80095aa:	2200      	movs	r2, #0
 80095ac:	6062      	str	r2, [r4, #4]
 80095ae:	04d9      	lsls	r1, r3, #19
 80095b0:	6922      	ldr	r2, [r4, #16]
 80095b2:	6022      	str	r2, [r4, #0]
 80095b4:	d504      	bpl.n	80095c0 <__sflush_r+0x7c>
 80095b6:	1c42      	adds	r2, r0, #1
 80095b8:	d101      	bne.n	80095be <__sflush_r+0x7a>
 80095ba:	682b      	ldr	r3, [r5, #0]
 80095bc:	b903      	cbnz	r3, 80095c0 <__sflush_r+0x7c>
 80095be:	6560      	str	r0, [r4, #84]	; 0x54
 80095c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c2:	602f      	str	r7, [r5, #0]
 80095c4:	2900      	cmp	r1, #0
 80095c6:	d0ca      	beq.n	800955e <__sflush_r+0x1a>
 80095c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095cc:	4299      	cmp	r1, r3
 80095ce:	d002      	beq.n	80095d6 <__sflush_r+0x92>
 80095d0:	4628      	mov	r0, r5
 80095d2:	f7ff fc5f 	bl	8008e94 <_free_r>
 80095d6:	2000      	movs	r0, #0
 80095d8:	6360      	str	r0, [r4, #52]	; 0x34
 80095da:	e7c1      	b.n	8009560 <__sflush_r+0x1c>
 80095dc:	6a21      	ldr	r1, [r4, #32]
 80095de:	2301      	movs	r3, #1
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b0      	blx	r6
 80095e4:	1c41      	adds	r1, r0, #1
 80095e6:	d1c7      	bne.n	8009578 <__sflush_r+0x34>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0c4      	beq.n	8009578 <__sflush_r+0x34>
 80095ee:	2b1d      	cmp	r3, #29
 80095f0:	d001      	beq.n	80095f6 <__sflush_r+0xb2>
 80095f2:	2b16      	cmp	r3, #22
 80095f4:	d101      	bne.n	80095fa <__sflush_r+0xb6>
 80095f6:	602f      	str	r7, [r5, #0]
 80095f8:	e7b1      	b.n	800955e <__sflush_r+0x1a>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009600:	81a3      	strh	r3, [r4, #12]
 8009602:	e7ad      	b.n	8009560 <__sflush_r+0x1c>
 8009604:	690f      	ldr	r7, [r1, #16]
 8009606:	2f00      	cmp	r7, #0
 8009608:	d0a9      	beq.n	800955e <__sflush_r+0x1a>
 800960a:	0793      	lsls	r3, r2, #30
 800960c:	680e      	ldr	r6, [r1, #0]
 800960e:	bf08      	it	eq
 8009610:	694b      	ldreq	r3, [r1, #20]
 8009612:	600f      	str	r7, [r1, #0]
 8009614:	bf18      	it	ne
 8009616:	2300      	movne	r3, #0
 8009618:	eba6 0807 	sub.w	r8, r6, r7
 800961c:	608b      	str	r3, [r1, #8]
 800961e:	f1b8 0f00 	cmp.w	r8, #0
 8009622:	dd9c      	ble.n	800955e <__sflush_r+0x1a>
 8009624:	6a21      	ldr	r1, [r4, #32]
 8009626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009628:	4643      	mov	r3, r8
 800962a:	463a      	mov	r2, r7
 800962c:	4628      	mov	r0, r5
 800962e:	47b0      	blx	r6
 8009630:	2800      	cmp	r0, #0
 8009632:	dc06      	bgt.n	8009642 <__sflush_r+0xfe>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e78e      	b.n	8009560 <__sflush_r+0x1c>
 8009642:	4407      	add	r7, r0
 8009644:	eba8 0800 	sub.w	r8, r8, r0
 8009648:	e7e9      	b.n	800961e <__sflush_r+0xda>
 800964a:	bf00      	nop
 800964c:	20400001 	.word	0x20400001

08009650 <_fflush_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	690b      	ldr	r3, [r1, #16]
 8009654:	4605      	mov	r5, r0
 8009656:	460c      	mov	r4, r1
 8009658:	b913      	cbnz	r3, 8009660 <_fflush_r+0x10>
 800965a:	2500      	movs	r5, #0
 800965c:	4628      	mov	r0, r5
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	b118      	cbz	r0, 800966a <_fflush_r+0x1a>
 8009662:	6983      	ldr	r3, [r0, #24]
 8009664:	b90b      	cbnz	r3, 800966a <_fflush_r+0x1a>
 8009666:	f7fe ffcb 	bl	8008600 <__sinit>
 800966a:	4b14      	ldr	r3, [pc, #80]	; (80096bc <_fflush_r+0x6c>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d11b      	bne.n	80096a8 <_fflush_r+0x58>
 8009670:	686c      	ldr	r4, [r5, #4]
 8009672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0ef      	beq.n	800965a <_fflush_r+0xa>
 800967a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800967c:	07d0      	lsls	r0, r2, #31
 800967e:	d404      	bmi.n	800968a <_fflush_r+0x3a>
 8009680:	0599      	lsls	r1, r3, #22
 8009682:	d402      	bmi.n	800968a <_fflush_r+0x3a>
 8009684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009686:	f7ff f85e 	bl	8008746 <__retarget_lock_acquire_recursive>
 800968a:	4628      	mov	r0, r5
 800968c:	4621      	mov	r1, r4
 800968e:	f7ff ff59 	bl	8009544 <__sflush_r>
 8009692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009694:	07da      	lsls	r2, r3, #31
 8009696:	4605      	mov	r5, r0
 8009698:	d4e0      	bmi.n	800965c <_fflush_r+0xc>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	059b      	lsls	r3, r3, #22
 800969e:	d4dd      	bmi.n	800965c <_fflush_r+0xc>
 80096a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a2:	f7ff f851 	bl	8008748 <__retarget_lock_release_recursive>
 80096a6:	e7d9      	b.n	800965c <_fflush_r+0xc>
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <_fflush_r+0x70>)
 80096aa:	429c      	cmp	r4, r3
 80096ac:	d101      	bne.n	80096b2 <_fflush_r+0x62>
 80096ae:	68ac      	ldr	r4, [r5, #8]
 80096b0:	e7df      	b.n	8009672 <_fflush_r+0x22>
 80096b2:	4b04      	ldr	r3, [pc, #16]	; (80096c4 <_fflush_r+0x74>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	bf08      	it	eq
 80096b8:	68ec      	ldreq	r4, [r5, #12]
 80096ba:	e7da      	b.n	8009672 <_fflush_r+0x22>
 80096bc:	08009aa4 	.word	0x08009aa4
 80096c0:	08009ac4 	.word	0x08009ac4
 80096c4:	08009a84 	.word	0x08009a84

080096c8 <fiprintf>:
 80096c8:	b40e      	push	{r1, r2, r3}
 80096ca:	b503      	push	{r0, r1, lr}
 80096cc:	4601      	mov	r1, r0
 80096ce:	ab03      	add	r3, sp, #12
 80096d0:	4805      	ldr	r0, [pc, #20]	; (80096e8 <fiprintf+0x20>)
 80096d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d6:	6800      	ldr	r0, [r0, #0]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	f7ff fcaf 	bl	800903c <_vfiprintf_r>
 80096de:	b002      	add	sp, #8
 80096e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e4:	b003      	add	sp, #12
 80096e6:	4770      	bx	lr
 80096e8:	20000184 	.word	0x20000184

080096ec <_lseek_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d07      	ldr	r5, [pc, #28]	; (800970c <_lseek_r+0x20>)
 80096f0:	4604      	mov	r4, r0
 80096f2:	4608      	mov	r0, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	2200      	movs	r2, #0
 80096f8:	602a      	str	r2, [r5, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	f7f9 fd4b 	bl	8003196 <_lseek>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_lseek_r+0x1e>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_lseek_r+0x1e>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	2000057c 	.word	0x2000057c

08009710 <__swhatbuf_r>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	460e      	mov	r6, r1
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	2900      	cmp	r1, #0
 800971a:	b096      	sub	sp, #88	; 0x58
 800971c:	4614      	mov	r4, r2
 800971e:	461d      	mov	r5, r3
 8009720:	da07      	bge.n	8009732 <__swhatbuf_r+0x22>
 8009722:	2300      	movs	r3, #0
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	89b3      	ldrh	r3, [r6, #12]
 8009728:	061a      	lsls	r2, r3, #24
 800972a:	d410      	bmi.n	800974e <__swhatbuf_r+0x3e>
 800972c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009730:	e00e      	b.n	8009750 <__swhatbuf_r+0x40>
 8009732:	466a      	mov	r2, sp
 8009734:	f000 f894 	bl	8009860 <_fstat_r>
 8009738:	2800      	cmp	r0, #0
 800973a:	dbf2      	blt.n	8009722 <__swhatbuf_r+0x12>
 800973c:	9a01      	ldr	r2, [sp, #4]
 800973e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009746:	425a      	negs	r2, r3
 8009748:	415a      	adcs	r2, r3
 800974a:	602a      	str	r2, [r5, #0]
 800974c:	e7ee      	b.n	800972c <__swhatbuf_r+0x1c>
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	2000      	movs	r0, #0
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	b016      	add	sp, #88	; 0x58
 8009756:	bd70      	pop	{r4, r5, r6, pc}

08009758 <__smakebuf_r>:
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800975c:	079d      	lsls	r5, r3, #30
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	d507      	bpl.n	8009774 <__smakebuf_r+0x1c>
 8009764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	2301      	movs	r3, #1
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	b002      	add	sp, #8
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	ab01      	add	r3, sp, #4
 8009776:	466a      	mov	r2, sp
 8009778:	f7ff ffca 	bl	8009710 <__swhatbuf_r>
 800977c:	9900      	ldr	r1, [sp, #0]
 800977e:	4605      	mov	r5, r0
 8009780:	4630      	mov	r0, r6
 8009782:	f7ff fbd7 	bl	8008f34 <_malloc_r>
 8009786:	b948      	cbnz	r0, 800979c <__smakebuf_r+0x44>
 8009788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d4ef      	bmi.n	8009770 <__smakebuf_r+0x18>
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7e3      	b.n	8009764 <__smakebuf_r+0xc>
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <__smakebuf_r+0x7c>)
 800979e:	62b3      	str	r3, [r6, #40]	; 0x28
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	6020      	str	r0, [r4, #0]
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	9b00      	ldr	r3, [sp, #0]
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	6120      	str	r0, [r4, #16]
 80097b2:	b15b      	cbz	r3, 80097cc <__smakebuf_r+0x74>
 80097b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f863 	bl	8009884 <_isatty_r>
 80097be:	b128      	cbz	r0, 80097cc <__smakebuf_r+0x74>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	89a0      	ldrh	r0, [r4, #12]
 80097ce:	4305      	orrs	r5, r0
 80097d0:	81a5      	strh	r5, [r4, #12]
 80097d2:	e7cd      	b.n	8009770 <__smakebuf_r+0x18>
 80097d4:	08008599 	.word	0x08008599

080097d8 <__ascii_mbtowc>:
 80097d8:	b082      	sub	sp, #8
 80097da:	b901      	cbnz	r1, 80097de <__ascii_mbtowc+0x6>
 80097dc:	a901      	add	r1, sp, #4
 80097de:	b142      	cbz	r2, 80097f2 <__ascii_mbtowc+0x1a>
 80097e0:	b14b      	cbz	r3, 80097f6 <__ascii_mbtowc+0x1e>
 80097e2:	7813      	ldrb	r3, [r2, #0]
 80097e4:	600b      	str	r3, [r1, #0]
 80097e6:	7812      	ldrb	r2, [r2, #0]
 80097e8:	1e10      	subs	r0, r2, #0
 80097ea:	bf18      	it	ne
 80097ec:	2001      	movne	r0, #1
 80097ee:	b002      	add	sp, #8
 80097f0:	4770      	bx	lr
 80097f2:	4610      	mov	r0, r2
 80097f4:	e7fb      	b.n	80097ee <__ascii_mbtowc+0x16>
 80097f6:	f06f 0001 	mvn.w	r0, #1
 80097fa:	e7f8      	b.n	80097ee <__ascii_mbtowc+0x16>

080097fc <__malloc_lock>:
 80097fc:	4801      	ldr	r0, [pc, #4]	; (8009804 <__malloc_lock+0x8>)
 80097fe:	f7fe bfa2 	b.w	8008746 <__retarget_lock_acquire_recursive>
 8009802:	bf00      	nop
 8009804:	20000574 	.word	0x20000574

08009808 <__malloc_unlock>:
 8009808:	4801      	ldr	r0, [pc, #4]	; (8009810 <__malloc_unlock+0x8>)
 800980a:	f7fe bf9d 	b.w	8008748 <__retarget_lock_release_recursive>
 800980e:	bf00      	nop
 8009810:	20000574 	.word	0x20000574

08009814 <_read_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d07      	ldr	r5, [pc, #28]	; (8009834 <_read_r+0x20>)
 8009818:	4604      	mov	r4, r0
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	2200      	movs	r2, #0
 8009820:	602a      	str	r2, [r5, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	f7f9 fc57 	bl	80030d6 <_read>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_read_r+0x1e>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_read_r+0x1e>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	2000057c 	.word	0x2000057c

08009838 <__ascii_wctomb>:
 8009838:	b149      	cbz	r1, 800984e <__ascii_wctomb+0x16>
 800983a:	2aff      	cmp	r2, #255	; 0xff
 800983c:	bf85      	ittet	hi
 800983e:	238a      	movhi	r3, #138	; 0x8a
 8009840:	6003      	strhi	r3, [r0, #0]
 8009842:	700a      	strbls	r2, [r1, #0]
 8009844:	f04f 30ff 	movhi.w	r0, #4294967295
 8009848:	bf98      	it	ls
 800984a:	2001      	movls	r0, #1
 800984c:	4770      	bx	lr
 800984e:	4608      	mov	r0, r1
 8009850:	4770      	bx	lr

08009852 <abort>:
 8009852:	b508      	push	{r3, lr}
 8009854:	2006      	movs	r0, #6
 8009856:	f000 f84d 	bl	80098f4 <raise>
 800985a:	2001      	movs	r0, #1
 800985c:	f7f9 fc31 	bl	80030c2 <_exit>

08009860 <_fstat_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d07      	ldr	r5, [pc, #28]	; (8009880 <_fstat_r+0x20>)
 8009864:	2300      	movs	r3, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	4611      	mov	r1, r2
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	f7f9 fc77 	bl	8003160 <_fstat>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d102      	bne.n	800987c <_fstat_r+0x1c>
 8009876:	682b      	ldr	r3, [r5, #0]
 8009878:	b103      	cbz	r3, 800987c <_fstat_r+0x1c>
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	bd38      	pop	{r3, r4, r5, pc}
 800987e:	bf00      	nop
 8009880:	2000057c 	.word	0x2000057c

08009884 <_isatty_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d06      	ldr	r5, [pc, #24]	; (80098a0 <_isatty_r+0x1c>)
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	f7f9 fc76 	bl	8003180 <_isatty>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_isatty_r+0x1a>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_isatty_r+0x1a>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	2000057c 	.word	0x2000057c

080098a4 <_raise_r>:
 80098a4:	291f      	cmp	r1, #31
 80098a6:	b538      	push	{r3, r4, r5, lr}
 80098a8:	4604      	mov	r4, r0
 80098aa:	460d      	mov	r5, r1
 80098ac:	d904      	bls.n	80098b8 <_raise_r+0x14>
 80098ae:	2316      	movs	r3, #22
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	f04f 30ff 	mov.w	r0, #4294967295
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098ba:	b112      	cbz	r2, 80098c2 <_raise_r+0x1e>
 80098bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098c0:	b94b      	cbnz	r3, 80098d6 <_raise_r+0x32>
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 f830 	bl	8009928 <_getpid_r>
 80098c8:	462a      	mov	r2, r5
 80098ca:	4601      	mov	r1, r0
 80098cc:	4620      	mov	r0, r4
 80098ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098d2:	f000 b817 	b.w	8009904 <_kill_r>
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d00a      	beq.n	80098f0 <_raise_r+0x4c>
 80098da:	1c59      	adds	r1, r3, #1
 80098dc:	d103      	bne.n	80098e6 <_raise_r+0x42>
 80098de:	2316      	movs	r3, #22
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	2001      	movs	r0, #1
 80098e4:	e7e7      	b.n	80098b6 <_raise_r+0x12>
 80098e6:	2400      	movs	r4, #0
 80098e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098ec:	4628      	mov	r0, r5
 80098ee:	4798      	blx	r3
 80098f0:	2000      	movs	r0, #0
 80098f2:	e7e0      	b.n	80098b6 <_raise_r+0x12>

080098f4 <raise>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <raise+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f7ff bfd3 	b.w	80098a4 <_raise_r>
 80098fe:	bf00      	nop
 8009900:	20000184 	.word	0x20000184

08009904 <_kill_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4d07      	ldr	r5, [pc, #28]	; (8009924 <_kill_r+0x20>)
 8009908:	2300      	movs	r3, #0
 800990a:	4604      	mov	r4, r0
 800990c:	4608      	mov	r0, r1
 800990e:	4611      	mov	r1, r2
 8009910:	602b      	str	r3, [r5, #0]
 8009912:	f7f9 fbc6 	bl	80030a2 <_kill>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d102      	bne.n	8009920 <_kill_r+0x1c>
 800991a:	682b      	ldr	r3, [r5, #0]
 800991c:	b103      	cbz	r3, 8009920 <_kill_r+0x1c>
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	bd38      	pop	{r3, r4, r5, pc}
 8009922:	bf00      	nop
 8009924:	2000057c 	.word	0x2000057c

08009928 <_getpid_r>:
 8009928:	f7f9 bbb3 	b.w	8003092 <_getpid>

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
