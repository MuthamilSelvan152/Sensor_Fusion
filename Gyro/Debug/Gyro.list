
Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009bb0  08009bb0  00019bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ffc  08009ffc  00020394  2**0
                  CONTENTS
  4 .ARM          00000000  08009ffc  08009ffc  00020394  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ffc  08009ffc  00020394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a000  0800a000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  0800a004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020394  2**0
                  CONTENTS
 10 .bss          00000294  20000394  20000394  00020394  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000628  20000628  00020394  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3fe  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ac9  00000000  00000000  0003a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  0003e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f00  00000000  00000000  0003f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c7e  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018018  00000000  00000000  00060eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8bc6  00000000  00000000  00078ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131a94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051c8  00000000  00000000  00131ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000394 	.word	0x20000394
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b94 	.word	0x08009b94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000398 	.word	0x20000398
 80001cc:	08009b94 	.word	0x08009b94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000bb6:	f001 fa6f 	bl	8002098 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 faab 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000bd8:	f107 030f 	add.w	r3, r7, #15
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2123      	movs	r1, #35	; 0x23
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fa9f 	bl	8002124 <GYRO_IO_Write>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000c02:	f001 fa49 	bl	8002098 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2201      	movs	r2, #1
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fabb 	bl	8002188 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	2124      	movs	r1, #36	; 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 faad 	bl	8002188 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2124      	movs	r1, #36	; 0x24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fa70 	bl	8002124 <GYRO_IO_Write>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fa5b 	bl	8002124 <GYRO_IO_Write>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000c88:	f107 030f 	add.w	r3, r7, #15
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2130      	movs	r1, #48	; 0x30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fa79 	bl	8002188 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000c96:	f107 030e 	add.w	r3, r7, #14
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2122      	movs	r1, #34	; 0x22
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fa72 	bl	8002188 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	121b      	asrs	r3, r3, #8
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	f023 0320 	bic.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000cd8:	f107 030f 	add.w	r3, r7, #15
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2130      	movs	r1, #48	; 0x30
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fa1f 	bl	8002124 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000ce6:	f107 030e 	add.w	r3, r7, #14
 8000cea:	2201      	movs	r2, #1
 8000cec:	2122      	movs	r1, #34	; 0x22
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fa18 	bl	8002124 <GYRO_IO_Write>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2122      	movs	r1, #34	; 0x22
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fa3a 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e00c      	b.n	8000d4a <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d109      	bne.n	8000d4a <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f023 0308 	bic.w	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d4a:	f107 030f 	add.w	r3, r7, #15
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2122      	movs	r1, #34	; 0x22
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f9e6 	bl	8002124 <GYRO_IO_Write>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d6a:	f107 030f 	add.w	r3, r7, #15
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2122      	movs	r1, #34	; 0x22
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fa08 	bl	8002188 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e009      	b.n	8000da2 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0308 	bic.w	r3, r3, #8
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000da2:	f107 030f 	add.w	r3, r7, #15
 8000da6:	2201      	movs	r2, #1
 8000da8:	2122      	movs	r1, #34	; 0x22
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f9ba 	bl	8002124 <GYRO_IO_Write>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2121      	movs	r1, #33	; 0x21
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 f9dc 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	2201      	movs	r2, #1
 8000dea:	2121      	movs	r1, #33	; 0x21
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f999 	bl	8002124 <GYRO_IO_Write>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e04:	f107 030f 	add.w	r3, r7, #15
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2124      	movs	r1, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f9bb 	bl	8002188 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f023 0310 	bic.w	r3, r3, #16
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e26:	f107 030f 	add.w	r3, r7, #15
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2124      	movs	r1, #36	; 0x24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f978 	bl	8002124 <GYRO_IO_Write>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000e64:	f107 030f 	add.w	r3, r7, #15
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2123      	movs	r1, #35	; 0x23
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f98b 	bl	8002188 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2206      	movs	r2, #6
 8000e78:	2128      	movs	r1, #40	; 0x28
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f984 	bl	8002188 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d126      	bne.n	8000ed8 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
 8000e8e:	e01f      	b.n	8000ed0 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	3301      	adds	r3, #1
 8000e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eae:	440b      	add	r3, r1
 8000eb0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	dddc      	ble.n	8000e90 <I3G4250D_ReadXYZAngRate+0x54>
 8000ed6:	e025      	b.n	8000f24 <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	e01f      	b.n	8000f1e <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000efc:	440b      	add	r3, r1
 8000efe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f12:	440b      	add	r3, r1
 8000f14:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	dddc      	ble.n	8000ede <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f2a:	2b20      	cmp	r3, #32
 8000f2c:	d00c      	beq.n	8000f48 <I3G4250D_ReadXYZAngRate+0x10c>
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	dc0d      	bgt.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d003      	beq.n	8000f42 <I3G4250D_ReadXYZAngRate+0x106>
 8000f3a:	e008      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <I3G4250D_ReadXYZAngRate+0x158>)
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f40:	e005      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <I3G4250D_ReadXYZAngRate+0x15c>)
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f46:	e002      	b.n	8000f4e <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <I3G4250D_ReadXYZAngRate+0x160>)
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f4c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	e017      	b.n	8000f84 <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	3301      	adds	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	dde4      	ble.n	8000f54 <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	410c0000 	.word	0x410c0000
 8000f98:	418c0000 	.word	0x418c0000
 8000f9c:	428c0000 	.word	0x428c0000

08000fa0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000fae:	f001 f873 	bl	8002098 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000fb8:	f107 030f 	add.w	r3, r7, #15
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 f8af 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000fd0:	f107 030f 	add.w	r3, r7, #15
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2123      	movs	r1, #35	; 0x23
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f8a3 	bl	8002124 <GYRO_IO_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ffa:	f001 f84d 	bl	8002098 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	2201      	movs	r2, #1
 8001002:	210f      	movs	r1, #15
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f8bf 	bl	8002188 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	2201      	movs	r2, #1
 800101e:	2124      	movs	r1, #36	; 0x24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f8b1 	bl	8002188 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102c:	b2db      	uxtb	r3, r3
 800102e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	2124      	movs	r1, #36	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f874 	bl	8002124 <GYRO_IO_Write>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001058:	f107 030f 	add.w	r3, r7, #15
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f85f 	bl	8002124 <GYRO_IO_Write>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	2300      	movs	r3, #0
 800107e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f87d 	bl	8002188 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	2201      	movs	r2, #1
 8001094:	2122      	movs	r1, #34	; 0x22
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f876 	bl	8002188 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	121b      	asrs	r3, r3, #8
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	f023 0320 	bic.w	r3, r3, #32
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	2130      	movs	r1, #48	; 0x30
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f823 	bl	8002124 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80010de:	f107 030e 	add.w	r3, r7, #14
 80010e2:	2201      	movs	r2, #1
 80010e4:	2122      	movs	r1, #34	; 0x22
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 f81c 	bl	8002124 <GYRO_IO_Write>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	2201      	movs	r2, #1
 8001104:	2122      	movs	r1, #34	; 0x22
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f83e 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10a      	bne.n	8001128 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e00c      	b.n	8001142 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d109      	bne.n	8001142 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f023 0308 	bic.w	r3, r3, #8
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001142:	f107 030f 	add.w	r3, r7, #15
 8001146:	2201      	movs	r2, #1
 8001148:	2122      	movs	r1, #34	; 0x22
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ffea 	bl	8002124 <GYRO_IO_Write>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001162:	f107 030f 	add.w	r3, r7, #15
 8001166:	2201      	movs	r2, #1
 8001168:	2122      	movs	r1, #34	; 0x22
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f80c 	bl	8002188 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e009      	b.n	800119a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f023 0308 	bic.w	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	2201      	movs	r2, #1
 80011a0:	2122      	movs	r1, #34	; 0x22
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ffbe 	bl	8002124 <GYRO_IO_Write>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011ba:	f107 030f 	add.w	r3, r7, #15
 80011be:	2201      	movs	r2, #1
 80011c0:	2121      	movs	r1, #33	; 0x21
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffe0 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011dc:	f107 030f 	add.w	r3, r7, #15
 80011e0:	2201      	movs	r2, #1
 80011e2:	2121      	movs	r1, #33	; 0x21
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ff9d 	bl	8002124 <GYRO_IO_Write>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	2201      	movs	r2, #1
 8001202:	2124      	movs	r1, #36	; 0x24
 8001204:	4618      	mov	r0, r3
 8001206:	f000 ffbf 	bl	8002188 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0310 	bic.w	r3, r3, #16
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4313      	orrs	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	2201      	movs	r2, #1
 8001224:	2124      	movs	r1, #36	; 0x24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ff7c 	bl	8002124 <GYRO_IO_Write>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	2300      	movs	r3, #0
 8001242:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800125c:	f107 030f 	add.w	r3, r7, #15
 8001260:	2201      	movs	r2, #1
 8001262:	2123      	movs	r1, #35	; 0x23
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ff8f 	bl	8002188 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	2206      	movs	r2, #6
 8001270:	2128      	movs	r1, #40	; 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f000 ff88 	bl	8002188 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d126      	bne.n	80012d0 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	e01f      	b.n	80012c8 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	3301      	adds	r3, #1
 800128e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001292:	4413      	add	r3, r2
 8001294:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001298:	b29b      	uxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a6:	440b      	add	r3, r1
 80012a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012bc:	440b      	add	r3, r1
 80012be:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	dddc      	ble.n	8001288 <L3GD20_ReadXYZAngRate+0x54>
 80012ce:	e025      	b.n	800131c <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	e01f      	b.n	8001316 <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012de:	4413      	add	r3, r2
 80012e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	3301      	adds	r3, #1
 80012f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012f4:	440b      	add	r3, r1
 80012f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21a      	sxth	r2, r3
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800130a:	440b      	add	r3, r1
 800130c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	3301      	adds	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	2b02      	cmp	r3, #2
 800131a:	dddc      	ble.n	80012d6 <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001322:	2b20      	cmp	r3, #32
 8001324:	d00c      	beq.n	8001340 <L3GD20_ReadXYZAngRate+0x10c>
 8001326:	2b20      	cmp	r3, #32
 8001328:	dc0d      	bgt.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <L3GD20_ReadXYZAngRate+0x100>
 800132e:	2b10      	cmp	r3, #16
 8001330:	d003      	beq.n	800133a <L3GD20_ReadXYZAngRate+0x106>
 8001332:	e008      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <L3GD20_ReadXYZAngRate+0x158>)
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001338:	e005      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <L3GD20_ReadXYZAngRate+0x15c>)
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800133e:	e002      	b.n	8001346 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <L3GD20_ReadXYZAngRate+0x160>)
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001344:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	e017      	b.n	800137c <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001354:	4413      	add	r3, r2
 8001356:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	3301      	adds	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b02      	cmp	r3, #2
 8001380:	dde4      	ble.n	800134c <L3GD20_ReadXYZAngRate+0x118>
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	410c0000 	.word	0x410c0000
 8001390:	418c0000 	.word	0x418c0000
 8001394:	428c0000 	.word	0x428c0000

08001398 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80013a6:	f000 ff29 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2120      	movs	r1, #32
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f000 ff99 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	461a      	mov	r2, r3
 80013c2:	2123      	movs	r1, #35	; 0x23
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f000 ff91 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80013ea:	f000 ff07 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80013ee:	210f      	movs	r1, #15
 80013f0:	2032      	movs	r0, #50	; 0x32
 80013f2:	f000 ff8e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800140a:	2124      	movs	r1, #36	; 0x24
 800140c:	2032      	movs	r0, #50	; 0x32
 800140e:	f000 ff80 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	461a      	mov	r2, r3
 8001422:	2124      	movs	r1, #36	; 0x24
 8001424:	2032      	movs	r0, #50	; 0x32
 8001426:	f000 ff61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800143c:	2121      	movs	r1, #33	; 0x21
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f000 ff67 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4313      	orrs	r3, r2
 8001456:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	461a      	mov	r2, r3
 800145c:	2121      	movs	r1, #33	; 0x21
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f000 ff44 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001476:	2121      	movs	r1, #33	; 0x21
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f000 ff4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f023 0308 	bic.w	r3, r3, #8
 8001488:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4313      	orrs	r3, r2
 8001490:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	461a      	mov	r2, r3
 8001496:	2121      	movs	r1, #33	; 0x21
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 ff27 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b088      	sub	sp, #32
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80014ae:	2300      	movs	r3, #0
 80014b0:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80014ba:	2123      	movs	r1, #35	; 0x23
 80014bc:	2032      	movs	r0, #50	; 0x32
 80014be:	f000 ff28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80014c6:	2124      	movs	r1, #36	; 0x24
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f000 ff22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80014d2:	2128      	movs	r1, #40	; 0x28
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f000 ff1c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014da:	4603      	mov	r3, r0
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80014e0:	2129      	movs	r1, #41	; 0x29
 80014e2:	2032      	movs	r0, #50	; 0x32
 80014e4:	f000 ff15 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80014ee:	212a      	movs	r1, #42	; 0x2a
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f000 ff0e 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80014fc:	212b      	movs	r1, #43	; 0x2b
 80014fe:	2032      	movs	r0, #50	; 0x32
 8001500:	f000 ff07 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	b25b      	sxtb	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f000 ff00 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001512:	4603      	mov	r3, r0
 8001514:	b25b      	sxtb	r3, r3
 8001516:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001518:	212d      	movs	r1, #45	; 0x2d
 800151a:	2032      	movs	r0, #50	; 0x32
 800151c:	f000 fef9 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	b25b      	sxtb	r3, r3
 8001524:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001526:	7d3b      	ldrb	r3, [r7, #20]
 8001528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d126      	bne.n	800157e <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
 8001534:	e01f      	b.n	8001576 <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3301      	adds	r3, #1
 800153c:	f107 0220 	add.w	r2, r7, #32
 8001540:	4413      	add	r3, r2
 8001542:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b29a      	uxth	r2, r3
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	f107 0120 	add.w	r1, r7, #32
 8001554:	440b      	add	r3, r1
 8001556:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	b212      	sxth	r2, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	f107 0120 	add.w	r1, r7, #32
 800156a:	440b      	add	r3, r1
 800156c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3301      	adds	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d9dc      	bls.n	8001536 <LSM303AGR_AccReadXYZ+0x90>
 800157c:	e025      	b.n	80015ca <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	77fb      	strb	r3, [r7, #31]
 8001582:	e01f      	b.n	80015c4 <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	f107 0220 	add.w	r2, r7, #32
 800158c:	4413      	add	r3, r2
 800158e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	3301      	adds	r3, #1
 800159e:	f107 0120 	add.w	r1, r7, #32
 80015a2:	440b      	add	r3, r1
 80015a4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	b212      	sxth	r2, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	f107 0120 	add.w	r1, r7, #32
 80015b8:	440b      	add	r3, r1
 80015ba:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80015be:	7ffb      	ldrb	r3, [r7, #31]
 80015c0:	3301      	adds	r3, #1
 80015c2:	77fb      	strb	r3, [r7, #31]
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d9dc      	bls.n	8001584 <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80015ca:	7d3b      	ldrb	r3, [r7, #20]
 80015cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015d0:	2b30      	cmp	r3, #48	; 0x30
 80015d2:	d013      	beq.n	80015fc <LSM303AGR_AccReadXYZ+0x156>
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	dc14      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d00c      	beq.n	80015f6 <LSM303AGR_AccReadXYZ+0x150>
 80015dc:	2b20      	cmp	r3, #32
 80015de:	dc10      	bgt.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <LSM303AGR_AccReadXYZ+0x144>
 80015e4:	2b10      	cmp	r3, #16
 80015e6:	d003      	beq.n	80015f0 <LSM303AGR_AccReadXYZ+0x14a>
 80015e8:	e00b      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77bb      	strb	r3, [r7, #30]
    break;
 80015ee:	e008      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80015f0:	2302      	movs	r3, #2
 80015f2:	77bb      	strb	r3, [r7, #30]
    break;
 80015f4:	e005      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80015f6:	2304      	movs	r3, #4
 80015f8:	77bb      	strb	r3, [r7, #30]
    break;
 80015fa:	e002      	b.n	8001602 <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80015fc:	230c      	movs	r3, #12
 80015fe:	77bb      	strb	r3, [r7, #30]
    break;
 8001600:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	e015      	b.n	8001634 <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	f107 0220 	add.w	r2, r7, #32
 8001610:	4413      	add	r3, r2
 8001612:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001616:	b29a      	uxth	r2, r3
 8001618:	7fbb      	ldrb	r3, [r7, #30]
 800161a:	b29b      	uxth	r3, r3
 800161c:	fb12 f303 	smulbb	r3, r2, r3
 8001620:	b299      	uxth	r1, r3
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b20a      	sxth	r2, r1
 800162c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	3301      	adds	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d9e6      	bls.n	8001608 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001652:	2121      	movs	r1, #33	; 0x21
 8001654:	2032      	movs	r0, #50	; 0x32
 8001656:	f000 fe5c 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4313      	orrs	r3, r2
 800166c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	461a      	mov	r2, r3
 8001672:	2121      	movs	r1, #33	; 0x21
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 fe39 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001690:	2122      	movs	r1, #34	; 0x22
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f000 fe3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2122      	movs	r1, #34	; 0x22
 80016aa:	2032      	movs	r0, #50	; 0x32
 80016ac:	f000 fe1e 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80016c6:	2138      	movs	r1, #56	; 0x38
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 fe22 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	461a      	mov	r2, r3
 80016de:	2138      	movs	r1, #56	; 0x38
 80016e0:	2032      	movs	r0, #50	; 0x32
 80016e2:	f000 fe03 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80016e6:	230a      	movs	r3, #10
 80016e8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	461a      	mov	r2, r3
 80016ee:	213a      	movs	r1, #58	; 0x3a
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f000 fdfb 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80016f6:	2305      	movs	r3, #5
 80016f8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	461a      	mov	r2, r3
 80016fe:	213b      	movs	r1, #59	; 0x3b
 8001700:	2032      	movs	r0, #50	; 0x32
 8001702:	f000 fdf3 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	461a      	mov	r2, r3
 800170a:	213c      	movs	r1, #60	; 0x3c
 800170c:	2032      	movs	r0, #50	; 0x32
 800170e:	f000 fded 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	461a      	mov	r2, r3
 800171a:	213d      	movs	r1, #61	; 0x3d
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f000 fde5 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800172e:	f000 fdaf 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001732:	2080      	movs	r0, #128	; 0x80
 8001734:	f7ff ffa5 	bl	8001682 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001738:	2004      	movs	r0, #4
 800173a:	f7ff ff83 	bl	8001644 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff ffba 	bl	80016b8 <LSM303AGR_AccClickITEnable>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001756:	f000 fd51 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	461a      	mov	r2, r3
 8001762:	2120      	movs	r1, #32
 8001764:	2032      	movs	r0, #50	; 0x32
 8001766:	f000 fdc1 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	461a      	mov	r2, r3
 8001772:	2123      	movs	r1, #35	; 0x23
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f000 fdb9 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800179a:	f000 fd2f 	bl	80021fc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800179e:	210f      	movs	r1, #15
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f000 fdb6 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80017ba:	2124      	movs	r1, #36	; 0x24
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f000 fda8 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017cc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2124      	movs	r1, #36	; 0x24
 80017d4:	2032      	movs	r0, #50	; 0x32
 80017d6:	f000 fd89 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80017ec:	2121      	movs	r1, #33	; 0x21
 80017ee:	2032      	movs	r0, #50	; 0x32
 80017f0:	f000 fd8f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4313      	orrs	r3, r2
 8001806:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	461a      	mov	r2, r3
 800180c:	2121      	movs	r1, #33	; 0x21
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f000 fd6c 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001826:	2121      	movs	r1, #33	; 0x21
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f000 fd72 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f023 0308 	bic.w	r3, r3, #8
 8001838:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4313      	orrs	r3, r2
 8001840:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	461a      	mov	r2, r3
 8001846:	2121      	movs	r1, #33	; 0x21
 8001848:	2032      	movs	r0, #50	; 0x32
 800184a:	f000 fd4f 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800185e:	2300      	movs	r3, #0
 8001860:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001866:	2301      	movs	r3, #1
 8001868:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800186a:	2123      	movs	r1, #35	; 0x23
 800186c:	2032      	movs	r0, #50	; 0x32
 800186e:	f000 fd50 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001872:	4603      	mov	r3, r0
 8001874:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001876:	2124      	movs	r1, #36	; 0x24
 8001878:	2032      	movs	r0, #50	; 0x32
 800187a:	f000 fd4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800187e:	4603      	mov	r3, r0
 8001880:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001882:	2128      	movs	r1, #40	; 0x28
 8001884:	2032      	movs	r0, #50	; 0x32
 8001886:	f000 fd44 	bl	8002312 <COMPASSACCELERO_IO_Read>
 800188a:	4603      	mov	r3, r0
 800188c:	b25b      	sxtb	r3, r3
 800188e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001890:	2129      	movs	r1, #41	; 0x29
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f000 fd3d 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001898:	4603      	mov	r3, r0
 800189a:	b25b      	sxtb	r3, r3
 800189c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800189e:	212a      	movs	r1, #42	; 0x2a
 80018a0:	2032      	movs	r0, #50	; 0x32
 80018a2:	f000 fd36 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80018ac:	212b      	movs	r1, #43	; 0x2b
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f000 fd2f 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	2032      	movs	r0, #50	; 0x32
 80018be:	f000 fd28 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80018c8:	212d      	movs	r1, #45	; 0x2d
 80018ca:	2032      	movs	r0, #50	; 0x32
 80018cc:	f000 fd21 	bl	8002312 <COMPASSACCELERO_IO_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80018d6:	7d3b      	ldrb	r3, [r7, #20]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d126      	bne.n	800192e <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
 80018e4:	e01f      	b.n	8001926 <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	3301      	adds	r3, #1
 80018ec:	f107 0220 	add.w	r2, r7, #32
 80018f0:	4413      	add	r3, r2
 80018f2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	f107 0120 	add.w	r1, r7, #32
 8001904:	440b      	add	r3, r1
 8001906:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4413      	add	r3, r2
 800190e:	b29a      	uxth	r2, r3
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	b212      	sxth	r2, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f107 0120 	add.w	r1, r7, #32
 800191a:	440b      	add	r3, r1
 800191c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	3301      	adds	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d9dc      	bls.n	80018e6 <LSM303DLHC_AccReadXYZ+0x90>
 800192c:	e025      	b.n	800197a <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	77fb      	strb	r3, [r7, #31]
 8001932:	e01f      	b.n	8001974 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	f107 0220 	add.w	r2, r7, #32
 800193c:	4413      	add	r3, r2
 800193e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	3301      	adds	r3, #1
 800194e:	f107 0120 	add.w	r1, r7, #32
 8001952:	440b      	add	r3, r1
 8001954:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4413      	add	r3, r2
 800195c:	b29a      	uxth	r2, r3
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	b212      	sxth	r2, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	f107 0120 	add.w	r1, r7, #32
 8001968:	440b      	add	r3, r1
 800196a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	3301      	adds	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d9dc      	bls.n	8001934 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800197a:	7d3b      	ldrb	r3, [r7, #20]
 800197c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001980:	2b30      	cmp	r3, #48	; 0x30
 8001982:	d013      	beq.n	80019ac <LSM303DLHC_AccReadXYZ+0x156>
 8001984:	2b30      	cmp	r3, #48	; 0x30
 8001986:	dc14      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001988:	2b20      	cmp	r3, #32
 800198a:	d00c      	beq.n	80019a6 <LSM303DLHC_AccReadXYZ+0x150>
 800198c:	2b20      	cmp	r3, #32
 800198e:	dc10      	bgt.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <LSM303DLHC_AccReadXYZ+0x144>
 8001994:	2b10      	cmp	r3, #16
 8001996:	d003      	beq.n	80019a0 <LSM303DLHC_AccReadXYZ+0x14a>
 8001998:	e00b      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800199a:	2301      	movs	r3, #1
 800199c:	77bb      	strb	r3, [r7, #30]
    break;
 800199e:	e008      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80019a0:	2302      	movs	r3, #2
 80019a2:	77bb      	strb	r3, [r7, #30]
    break;
 80019a4:	e005      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80019a6:	2304      	movs	r3, #4
 80019a8:	77bb      	strb	r3, [r7, #30]
    break;
 80019aa:	e002      	b.n	80019b2 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80019ac:	230c      	movs	r3, #12
 80019ae:	77bb      	strb	r3, [r7, #30]
    break;
 80019b0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	e015      	b.n	80019e4 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	f107 0220 	add.w	r2, r7, #32
 80019c0:	4413      	add	r3, r2
 80019c2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	7fbb      	ldrb	r3, [r7, #30]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	fb12 f303 	smulbb	r3, r2, r3
 80019d0:	b299      	uxth	r1, r3
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	b20a      	sxth	r2, r1
 80019dc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	3301      	adds	r3, #1
 80019e2:	77fb      	strb	r3, [r7, #31]
 80019e4:	7ffb      	ldrb	r3, [r7, #31]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d9e6      	bls.n	80019b8 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001a02:	2121      	movs	r1, #33	; 0x21
 8001a04:	2032      	movs	r0, #50	; 0x32
 8001a06:	f000 fc84 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2121      	movs	r1, #33	; 0x21
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f000 fc61 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001a40:	2122      	movs	r1, #34	; 0x22
 8001a42:	2032      	movs	r0, #50	; 0x32
 8001a44:	f000 fc65 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	461a      	mov	r2, r3
 8001a58:	2122      	movs	r1, #34	; 0x22
 8001a5a:	2032      	movs	r0, #50	; 0x32
 8001a5c:	f000 fc46 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001a76:	2138      	movs	r1, #56	; 0x38
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f000 fc4a 	bl	8002312 <COMPASSACCELERO_IO_Read>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2138      	movs	r1, #56	; 0x38
 8001a90:	2032      	movs	r0, #50	; 0x32
 8001a92:	f000 fc2b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a96:	230a      	movs	r3, #10
 8001a98:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	213a      	movs	r1, #58	; 0x3a
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f000 fc23 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	461a      	mov	r2, r3
 8001aae:	213b      	movs	r1, #59	; 0x3b
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f000 fc1b 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	213c      	movs	r1, #60	; 0x3c
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f000 fc15 	bl	80022ec <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001ac2:	2332      	movs	r3, #50	; 0x32
 8001ac4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	213d      	movs	r1, #61	; 0x3d
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f000 fc0d 	bl	80022ec <COMPASSACCELERO_IO_Write>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001ade:	f000 fbd7 	bl	8002290 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001ae2:	2080      	movs	r0, #128	; 0x80
 8001ae4:	f7ff ffa5 	bl	8001a32 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7ff ff83 	bl	80019f4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001aee:	2010      	movs	r0, #16
 8001af0:	f7ff ffba 	bl	8001a68 <LSM303DLHC_AccClickITEnable>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10c      	bne.n	8001b22 <BSP_LED_Init+0x2a>
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6153      	str	r3, [r2, #20]
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	e06e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10c      	bne.n	8001b42 <BSP_LED_Init+0x4a>
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6153      	str	r3, [r2, #20]
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	e05e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d10c      	bne.n	8001b62 <BSP_LED_Init+0x6a>
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b52:	6153      	str	r3, [r2, #20]
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	e04e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d10c      	bne.n	8001b82 <BSP_LED_Init+0x8a>
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b72:	6153      	str	r3, [r2, #20]
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e03e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d10c      	bne.n	8001ba2 <BSP_LED_Init+0xaa>
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	6153      	str	r3, [r2, #20]
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <BSP_LED_Init+0x154>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	e02e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d10c      	bne.n	8001bc2 <BSP_LED_Init+0xca>
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <BSP_LED_Init+0x154>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb2:	6153      	str	r3, [r2, #20]
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	e01e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b06      	cmp	r3, #6
 8001bc6:	d10c      	bne.n	8001be2 <BSP_LED_Init+0xea>
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6153      	str	r3, [r2, #20]
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	e00e      	b.n	8001c00 <BSP_LED_Init+0x108>
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d10b      	bne.n	8001c00 <BSP_LED_Init+0x108>
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6153      	str	r3, [r2, #20]
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <BSP_LED_Init+0x154>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fe77 	bl	8003918 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <BSP_LED_Init+0x15c>)
 8001c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <BSP_LED_Init+0x158>)
 8001c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f002 f8d9 	bl	8003df4 <HAL_GPIO_WritePin>
}
 8001c42:	bf00      	nop
 8001c44:	3740      	adds	r7, #64	; 0x40
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08009bd4 	.word	0x08009bd4
 8001c54:	200000d0 	.word	0x200000d0

08001c58 <BSP_LED_On>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <BSP_LED_On+0x2c>)
 8001c66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <BSP_LED_On+0x30>)
 8001c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	f002 f8bd 	bl	8003df4 <HAL_GPIO_WritePin>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000d0 	.word	0x200000d0
 8001c88:	08009bd4 	.word	0x08009bd4

08001c8c <BSP_LED_Off>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <BSP_LED_Off+0x2c>)
 8001c9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <BSP_LED_Off+0x30>)
 8001ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f002 f8a3 	bl	8003df4 <HAL_GPIO_WritePin>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200000d0 	.word	0x200000d0
 8001cbc:	08009bd4 	.word	0x08009bd4

08001cc0 <BSP_LED_Toggle>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <BSP_LED_Toggle+0x2c>)
 8001cce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <BSP_LED_Toggle+0x30>)
 8001cd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f002 f8a1 	bl	8003e24 <HAL_GPIO_TogglePin>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000d0 	.word	0x200000d0
 8001cf0:	08009bd4 	.word	0x08009bd4

08001cf4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <BSP_PB_Init+0x2e>
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <BSP_PB_Init+0xbc>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <BSP_PB_Init+0x70>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	f107 0214 	add.w	r2, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fdda 	bl	8003918 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d11e      	bne.n	8001da8 <BSP_PB_Init+0xb4>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <BSP_PB_Init+0xc0>)
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	f107 0214 	add.w	r2, r7, #20
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 fdc4 	bl	8003918 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001d90:	2306      	movs	r3, #6
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	210f      	movs	r1, #15
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fd86 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001d9e:	2306      	movs	r3, #6
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fd9d 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	200000f0 	.word	0x200000f0

08001db8 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <BSP_PB_GetState+0x28>)
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fff8 	bl	8003dc4 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000f0 	.word	0x200000f0

08001de4 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df6:	6153      	str	r3, [r2, #20]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001e14:	2304      	movs	r3, #4
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <I2Cx_MspInit+0x64>)
 8001e20:	f001 fd7a 	bl	8003918 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	61d3      	str	r3, [r2, #28]
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <I2Cx_MspInit+0x60>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e52:	f002 fb05 	bl	8004460 <HAL_I2C_GetState>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11a      	bne.n	8001e92 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <I2Cx_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e64:	2232      	movs	r2, #50	; 0x32
 8001e66:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e86:	4804      	ldr	r0, [pc, #16]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e88:	f7ff ffac 	bl	8001de4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <I2Cx_Init+0x4c>)
 8001e8e:	f001 fffb 	bl	8003e88 <HAL_I2C_Init>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000414 	.word	0x20000414
 8001e9c:	40005400 	.word	0x40005400

08001ea0 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	717b      	strb	r3, [r7, #5]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <I2Cx_WriteData+0x48>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	88f9      	ldrh	r1, [r7, #6]
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <I2Cx_WriteData+0x4c>)
 8001ece:	f002 f899 	bl	8004004 <HAL_I2C_Mem_Write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001edc:	f000 f834 	bl	8001f48 <I2Cx_Error>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200000f8 	.word	0x200000f8
 8001eec:	20000414 	.word	0x20000414

08001ef0 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460a      	mov	r2, r1
 8001efa:	80fb      	strh	r3, [r7, #6]
 8001efc:	4613      	mov	r3, r2
 8001efe:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001f08:	797b      	ldrb	r3, [r7, #5]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <I2Cx_ReadData+0x50>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	88f9      	ldrh	r1, [r7, #6]
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	f107 030e 	add.w	r3, r7, #14
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4808      	ldr	r0, [pc, #32]	; (8001f44 <I2Cx_ReadData+0x54>)
 8001f22:	f002 f983 	bl	800422c <HAL_I2C_Mem_Read>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001f30:	f000 f80a 	bl	8001f48 <I2Cx_Error>
  
  }
  return value;
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000f8 	.word	0x200000f8
 8001f44:	20000414 	.word	0x20000414

08001f48 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <I2Cx_Error+0x14>)
 8001f4e:	f002 f82a 	bl	8003fa6 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001f52:	f7ff ff7b 	bl	8001e4c <I2Cx_Init>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000414 	.word	0x20000414

08001f60 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f64:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <SPIx_Init+0x70>)
 8001f66:	f004 fb21 	bl	80065ac <HAL_SPI_GetState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d12c      	bne.n	8001fca <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <SPIx_Init+0x70>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <SPIx_Init+0x74>)
 8001f74:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <SPIx_Init+0x70>)
 8001f78:	2218      	movs	r2, #24
 8001f7a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <SPIx_Init+0x70>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <SPIx_Init+0x70>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <SPIx_Init+0x70>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <SPIx_Init+0x70>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <SPIx_Init+0x70>)
 8001f96:	2207      	movs	r2, #7
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <SPIx_Init+0x70>)
 8001f9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa0:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <SPIx_Init+0x70>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <SPIx_Init+0x70>)
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SPIx_Init+0x70>)
 8001fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fbc:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc0:	f000 f836 	bl	8002030 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <SPIx_Init+0x70>)
 8001fc6:	f004 f80b 	bl	8005fe0 <HAL_SPI_Init>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200003b0 	.word	0x200003b0
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SPIx_WriteRead+0x38>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f107 020f 	add.w	r2, r7, #15
 8001fee:	1df9      	adds	r1, r7, #7
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <SPIx_WriteRead+0x3c>)
 8001ff6:	f004 f8c6 	bl	8006186 <HAL_SPI_TransmitReceive>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002000:	f000 f80a 	bl	8002018 <SPIx_Error>
  }
  
  return receivedbyte;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200000f4 	.word	0x200000f4
 8002014:	200003b0 	.word	0x200003b0

08002018 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <SPIx_Error+0x14>)
 800201e:	f004 f88a 	bl	8006136 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8002022:	f7ff ff9d 	bl	8001f60 <SPIx_Init>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200003b0 	.word	0x200003b0

08002030 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <SPIx_MspInit+0x64>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <SPIx_MspInit+0x64>)
 800203e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <SPIx_MspInit+0x64>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <SPIx_MspInit+0x64>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <SPIx_MspInit+0x64>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	6153      	str	r3, [r2, #20]
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <SPIx_MspInit+0x64>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002068:	23e0      	movs	r3, #224	; 0xe0
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002078:	2305      	movs	r3, #5
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f001 fc47 	bl	8003918 <HAL_GPIO_Init>
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <GYRO_IO_Init+0x84>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <GYRO_IO_Init+0x84>)
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	6153      	str	r3, [r2, #20]
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <GYRO_IO_Init+0x84>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80020b6:	2308      	movs	r3, #8
 80020b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4619      	mov	r1, r3
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <GYRO_IO_Init+0x88>)
 80020ce:	f001 fc23 	bl	8003918 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80020d2:	2201      	movs	r2, #1
 80020d4:	2108      	movs	r1, #8
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <GYRO_IO_Init+0x88>)
 80020d8:	f001 fe8c 	bl	8003df4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <GYRO_IO_Init+0x84>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <GYRO_IO_Init+0x84>)
 80020e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e6:	6153      	str	r3, [r2, #20]
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <GYRO_IO_Init+0x84>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80020f4:	2303      	movs	r3, #3
 80020f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <GYRO_IO_Init+0x88>)
 800210c:	f001 fc04 	bl	8003918 <HAL_GPIO_Init>
  
  SPIx_Init();
 8002110:	f7ff ff26 	bl	8001f60 <SPIx_Init>
}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	48001000 	.word	0x48001000

08002124 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
 8002130:	4613      	mov	r3, r2
 8002132:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002134:	883b      	ldrh	r3, [r7, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d903      	bls.n	8002142 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002140:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002142:	2200      	movs	r2, #0
 8002144:	2108      	movs	r1, #8
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <GYRO_IO_Write+0x60>)
 8002148:	f001 fe54 	bl	8003df4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff42 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002154:	e00a      	b.n	800216c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff3c 	bl	8001fd8 <SPIx_WriteRead>
    NumByteToWrite--;
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800216c:	883b      	ldrh	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f1      	bne.n	8002156 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002172:	2201      	movs	r2, #1
 8002174:	2108      	movs	r1, #8
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <GYRO_IO_Write+0x60>)
 8002178:	f001 fe3c 	bl	8003df4 <HAL_GPIO_WritePin>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	48001000 	.word	0x48001000

08002188 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	4613      	mov	r3, r2
 8002196:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002198:	883b      	ldrh	r3, [r7, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d904      	bls.n	80021a8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80021a4:	70fb      	strb	r3, [r7, #3]
 80021a6:	e003      	b.n	80021b0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ae:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80021b0:	2200      	movs	r2, #0
 80021b2:	2108      	movs	r1, #8
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021b6:	f001 fe1d 	bl	8003df4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff0b 	bl	8001fd8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80021c2:	e00c      	b.n	80021de <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff ff07 	bl	8001fd8 <SPIx_WriteRead>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80021d2:	883b      	ldrh	r3, [r7, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ef      	bne.n	80021c4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80021e4:	2201      	movs	r2, #1
 80021e6:	2108      	movs	r1, #8
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <GYRO_IO_Read+0x70>)
 80021ea:	f001 fe03 	bl	8003df4 <HAL_GPIO_WritePin>
}  
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	48001000 	.word	0x48001000

080021fc <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220c:	6153      	str	r3, [r2, #20]
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002224:	6153      	str	r3, [r2, #20]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <COMPASSACCELERO_IO_Init+0x8c>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002232:	2304      	movs	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	4619      	mov	r1, r3
 8002248:	4810      	ldr	r0, [pc, #64]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 800224a:	f001 fb65 	bl	8003918 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 800224e:	2200      	movs	r2, #0
 8002250:	210f      	movs	r1, #15
 8002252:	2008      	movs	r0, #8
 8002254:	f001 fb29 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8002258:	2008      	movs	r0, #8
 800225a:	f001 fb42 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800225e:	2330      	movs	r3, #48	; 0x30
 8002260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <COMPASSACCELERO_IO_Init+0x90>)
 8002276:	f001 fb4f 	bl	8003918 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800227a:	f7ff fde7 	bl	8001e4c <I2Cx_Init>
}
 800227e:	bf00      	nop
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	48001000 	.word	0x48001000

08002290 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800229c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a0:	6153      	str	r3, [r2, #20]
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80022ae:	2330      	movs	r3, #48	; 0x30
 80022b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80022b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80022c6:	f001 fb27 	bl	8003918 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80022ca:	2200      	movs	r2, #0
 80022cc:	210f      	movs	r1, #15
 80022ce:	200a      	movs	r0, #10
 80022d0:	f001 faeb 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80022d4:	200a      	movs	r0, #10
 80022d6:	f001 fb04 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48001000 	.word	0x48001000

080022ec <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
 80022f6:	460b      	mov	r3, r1
 80022f8:	717b      	strb	r3, [r7, #5]
 80022fa:	4613      	mov	r3, r2
 80022fc:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80022fe:	793a      	ldrb	r2, [r7, #4]
 8002300:	7979      	ldrb	r1, [r7, #5]
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdcb 	bl	8001ea0 <I2Cx_WriteData>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	460a      	mov	r2, r1
 800231c:	80fb      	strh	r3, [r7, #6]
 800231e:	4613      	mov	r3, r2
 8002320:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002322:	797a      	ldrb	r2, [r7, #5]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fde1 	bl	8001ef0 <I2Cx_ReadData>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002342:	2300      	movs	r3, #0
 8002344:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800234e:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4798      	blx	r3
 8002354:	4603      	mov	r3, r0
 8002356:	2b33      	cmp	r3, #51	; 0x33
 8002358:	d14f      	bne.n	80023fa <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <BSP_ACCELERO_Init+0x178>)
 800235e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8002360:	2300      	movs	r3, #0
 8002362:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8002368:	2307      	movs	r3, #7
 800236a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 800236c:	2300      	movs	r3, #0
 800236e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8002370:	2300      	movs	r3, #0
 8002372:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8002374:	2300      	movs	r3, #0
 8002376:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8002378:	2308      	movs	r3, #8
 800237a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800237c:	7b3a      	ldrb	r2, [r7, #12]
 800237e:	7b7b      	ldrb	r3, [r7, #13]
 8002380:	4313      	orrs	r3, r2
 8002382:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002384:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002386:	4313      	orrs	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	8abb      	ldrh	r3, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002392:	7c3a      	ldrb	r2, [r7, #16]
 8002394:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002396:	4313      	orrs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	7cbb      	ldrb	r3, [r7, #18]
 800239c:	4313      	orrs	r3, r2
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80023a8:	b21a      	sxth	r2, r3
 80023aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	8aba      	ldrh	r2, [r7, #20]
 80023bc:	4610      	mov	r0, r2
 80023be:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80023c4:	2310      	movs	r3, #16
 80023c6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80023d2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80023d8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023da:	4313      	orrs	r3, r2
 80023dc:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80023de:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	8aba      	ldrh	r2, [r7, #20]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	4610      	mov	r0, r2
 80023f2:	4798      	blx	r3

    ret = ACCELERO_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	e054      	b.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4798      	blx	r3
 8002400:	4603      	mov	r3, r0
 8002402:	2b33      	cmp	r3, #51	; 0x33
 8002404:	d14e      	bne.n	80024a4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <BSP_ACCELERO_Init+0x180>)
 800240a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800240c:	2300      	movs	r3, #0
 800240e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002414:	2307      	movs	r3, #7
 8002416:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002418:	2300      	movs	r3, #0
 800241a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800241c:	2300      	movs	r3, #0
 800241e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002420:	2300      	movs	r3, #0
 8002422:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002424:	2308      	movs	r3, #8
 8002426:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002428:	7b3a      	ldrb	r2, [r7, #12]
 800242a:	7b7b      	ldrb	r3, [r7, #13]
 800242c:	4313      	orrs	r3, r2
 800242e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002430:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002432:	4313      	orrs	r3, r2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	b29a      	uxth	r2, r3
 8002438:	8abb      	ldrh	r3, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800243e:	7c3a      	ldrb	r2, [r7, #16]
 8002440:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002442:	4313      	orrs	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	7cbb      	ldrb	r3, [r7, #18]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	4313      	orrs	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8002454:	b21a      	sxth	r2, r3
 8002456:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	b21b      	sxth	r3, r3
 800245e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	8aba      	ldrh	r2, [r7, #20]
 8002468:	4610      	mov	r0, r2
 800246a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8002470:	2310      	movs	r3, #16
 8002472:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800247c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800247e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002480:	4313      	orrs	r3, r2
 8002482:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002484:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800248a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800248c:	4313      	orrs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <BSP_ACCELERO_Init+0x17c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	8aba      	ldrh	r2, [r7, #20]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3

    ret = ACCELERO_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000009c 	.word	0x2000009c
 80024b4:	20000460 	.word	0x20000460
 80024b8:	20000068 	.word	0x20000068

080024bc <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <BSP_ACCELERO_GetXYZ+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000460 	.word	0x20000460

080024e4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80024ee:	2300      	movs	r3, #0
 80024f0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80024f2:	2300      	movs	r3, #0
 80024f4:	703b      	strb	r3, [r7, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80024fa:	4b52      	ldr	r3, [pc, #328]	; (8002644 <BSP_GYRO_Init+0x160>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4798      	blx	r3
 8002500:	4603      	mov	r3, r0
 8002502:	2bd4      	cmp	r3, #212	; 0xd4
 8002504:	d005      	beq.n	8002512 <BSP_GYRO_Init+0x2e>
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4798      	blx	r3
 800250c:	4603      	mov	r3, r0
 800250e:	2bd5      	cmp	r3, #213	; 0xd5
 8002510:	d146      	bne.n	80025a0 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <BSP_GYRO_Init+0x160>)
 8002516:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002518:	2308      	movs	r3, #8
 800251a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800251c:	2300      	movs	r3, #0
 800251e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002520:	2307      	movs	r3, #7
 8002522:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002524:	2330      	movs	r3, #48	; 0x30
 8002526:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002528:	2300      	movs	r3, #0
 800252a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800252c:	2300      	movs	r3, #0
 800252e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_250;
 8002530:	2300      	movs	r3, #0
 8002532:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002534:	793a      	ldrb	r2, [r7, #4]
 8002536:	797b      	ldrb	r3, [r7, #5]
 8002538:	4313      	orrs	r3, r2
 800253a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800253c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800253e:	4313      	orrs	r3, r2
 8002540:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002542:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002544:	4313      	orrs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800254a:	7a3a      	ldrb	r2, [r7, #8]
 800254c:	7a7b      	ldrb	r3, [r7, #9]
 800254e:	4313      	orrs	r3, r2
 8002550:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002552:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002554:	4313      	orrs	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b29a      	uxth	r2, r3
 800255e:	89bb      	ldrh	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002564:	4b38      	ldr	r3, [pc, #224]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	89ba      	ldrh	r2, [r7, #12]
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE;
 8002570:	2320      	movs	r3, #32
 8002572:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_9;
 8002574:	2309      	movs	r3, #9
 8002576:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002578:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800257a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800257c:	4313      	orrs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	89ba      	ldrh	r2, [r7, #12]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2010      	movs	r0, #16
 8002598:	4798      	blx	r3

    ret = GYRO_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e04b      	b.n	8002638 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <BSP_GYRO_Init+0x168>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4798      	blx	r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	2bd3      	cmp	r3, #211	; 0xd3
 80025aa:	d145      	bne.n	8002638 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <BSP_GYRO_Init+0x164>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <BSP_GYRO_Init+0x168>)
 80025b0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80025b2:	2308      	movs	r3, #8
 80025b4:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80025ba:	2307      	movs	r3, #7
 80025bc:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80025be:	2330      	movs	r3, #48	; 0x30
 80025c0:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80025c2:	2300      	movs	r3, #0
 80025c4:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80025c6:	2300      	movs	r3, #0
 80025c8:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80025ca:	2310      	movs	r3, #16
 80025cc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025ce:	793a      	ldrb	r2, [r7, #4]
 80025d0:	797b      	ldrb	r3, [r7, #5]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025d6:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025de:	4313      	orrs	r3, r2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025e4:	7a3a      	ldrb	r2, [r7, #8]
 80025e6:	7a7b      	ldrb	r3, [r7, #9]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80025ec:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	89bb      	ldrh	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <BSP_GYRO_Init+0x164>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	89ba      	ldrh	r2, [r7, #12]
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800260a:	2300      	movs	r3, #0
 800260c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800260e:	2300      	movs	r3, #0
 8002610:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002612:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002614:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002616:	4313      	orrs	r3, r2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <BSP_GYRO_Init+0x164>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	89ba      	ldrh	r2, [r7, #12]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4610      	mov	r0, r2
 8002628:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <BSP_GYRO_Init+0x164>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	2010      	movs	r0, #16
 8002632:	4798      	blx	r3

    ret = GYRO_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000034 	.word	0x20000034
 8002648:	20000464 	.word	0x20000464
 800264c:	20000000 	.word	0x20000000

08002650 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <BSP_GYRO_GetXYZ+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000464 	.word	0x20000464

08002678 <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f, -0.0052635f, -0.0068811f, 0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.00688114, -0.0052635f};

void FIRFilter_Init(FIRFilter * fir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	/* Clear the buffer */
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e009      	b.n	800269a <FIRFilter_Init+0x22>
	{
		fir->buf[n] = 0.0f;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++ )
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3301      	adds	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d9f2      	bls.n	8002686 <FIRFilter_Init+0xe>
	}

	/* Reset Buffer index */
	fir->bufIndex = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	/* Clear the output */
	fir->out = 0.0f;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter * fir, float input)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	ed87 0a00 	vstr	s0, [r7]

	/* store the latest input in the buffer */
	fir->buf[fir->bufIndex] = input;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	601a      	str	r2, [r3, #0]

	/* Increment the index and wrap around if necessary */
	fir->bufIndex++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if(fir->bufIndex == FIR_FILTER_LENGTH)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d103      	bne.n	80026fa <FIRFilter_Update+0x3e>
	{
		fir->bufIndex = 0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}

	/* Compute the new output sample (via convolution) */
	fir->out = 0.0f;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	; 0x44

	uint8_t sumIndex = fir->bufIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002708:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 800270a:	2300      	movs	r3, #0
 800270c:	73bb      	strb	r3, [r7, #14]
 800270e:	e021      	b.n	8002754 <FIRFilter_Update+0x98>
	{
		/* Decrement the index and wrap if necessary */
		if(sumIndex > 0)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <FIRFilter_Update+0x62>
		{
			sumIndex--;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3b01      	subs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e001      	b.n	8002722 <FIRFilter_Update+0x66>
		}
		else
		{
			sumIndex = FIR_FILTER_LENGTH - 1;
 800271e:	230f      	movs	r3, #15
 8002720:	73fb      	strb	r3, [r7, #15]
		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <FIRFilter_Update+0xb4>)
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	edd3 6a00 	vldr	s13, [r3]
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 800274e:	7bbb      	ldrb	r3, [r7, #14]
 8002750:	3301      	adds	r3, #1
 8002752:	73bb      	strb	r3, [r7, #14]
 8002754:	7bbb      	ldrb	r3, [r7, #14]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	d9da      	bls.n	8002710 <FIRFilter_Update+0x54>
	}

	/* Return filtered output */
	return fir->out;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	ee07 3a90 	vmov	s15, r3
}
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	200000fc 	.word	0x200000fc

08002774 <RCFilter_Init>:
 *      Author: 123
 */
#include "RCFilter.h"

void RCFilter_Init(RCFilter * Filt,float cutoff_Freq, float sampleTime)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002780:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute RC for cutOff_Freq */
	float RC = 1.0f / (2*PI*cutoff_Freq);
 8002784:	edd7 7a02 	vldr	s15, [r7, #8]
 8002788:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800278c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002798:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Compute first order LPF coefficients */
	Filt->coeff[0] = sampleTime / (sampleTime + RC);
 800279c:	ed97 7a01 	vldr	s14, [r7, #4]
 80027a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80027ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	edc3 7a00 	vstr	s15, [r3]
	Filt->coeff[1] = RC / (sampleTime + RC);
 80027b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80027ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80027be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80027c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	Filt->out[0] = 0.0f;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
	Filt->out[1] = 0.0f;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	60da      	str	r2, [r3, #12]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <RCFilter_Update>:

float RCFilter_Update(RCFilter * Filt, float input)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output sample */
	Filt->out[1] = Filt->out[0];
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	return Filt->out[0] = Filt->coeff[0] * input + Filt->coeff[1] * Filt->out[1];
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	edd7 7a00 	vldr	s15, [r7]
 800280a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	edd3 6a01 	vldr	s13, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edd3 7a03 	vldr	s15, [r3, #12]
 800281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	edc3 7a02 	vstr	s15, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	ee07 3a90 	vmov	s15, r3

}
 8002830:	eeb0 0a67 	vmov.f32	s0, s15
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002856:	4b40      	ldr	r3, [pc, #256]	; (8002958 <MX_GPIO_Init+0x118>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4a3f      	ldr	r2, [pc, #252]	; (8002958 <MX_GPIO_Init+0x118>)
 800285c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002860:	6153      	str	r3, [r2, #20]
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <MX_GPIO_Init+0x118>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <MX_GPIO_Init+0x118>)
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a39      	ldr	r2, [pc, #228]	; (8002958 <MX_GPIO_Init+0x118>)
 8002874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002878:	6153      	str	r3, [r2, #20]
 800287a:	4b37      	ldr	r3, [pc, #220]	; (8002958 <MX_GPIO_Init+0x118>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002886:	4b34      	ldr	r3, [pc, #208]	; (8002958 <MX_GPIO_Init+0x118>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <MX_GPIO_Init+0x118>)
 800288c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002890:	6153      	str	r3, [r2, #20]
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <MX_GPIO_Init+0x118>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <MX_GPIO_Init+0x118>)
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <MX_GPIO_Init+0x118>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	6153      	str	r3, [r2, #20]
 80028aa:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <MX_GPIO_Init+0x118>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <MX_GPIO_Init+0x118>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4a27      	ldr	r2, [pc, #156]	; (8002958 <MX_GPIO_Init+0x118>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6153      	str	r3, [r2, #20]
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <MX_GPIO_Init+0x118>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80028ce:	2200      	movs	r2, #0
 80028d0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80028d4:	4821      	ldr	r0, [pc, #132]	; (800295c <MX_GPIO_Init+0x11c>)
 80028d6:	f001 fa8d 	bl	8003df4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80028da:	2337      	movs	r3, #55	; 0x37
 80028dc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80028e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	481b      	ldr	r0, [pc, #108]	; (800295c <MX_GPIO_Init+0x11c>)
 80028f0:	f001 f812 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80028f4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80028f8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	4813      	ldr	r0, [pc, #76]	; (800295c <MX_GPIO_Init+0x11c>)
 800290e:	f001 f803 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002928:	f000 fff6 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800292c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800293e:	230e      	movs	r3, #14
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294c:	f000 ffe4 	bl	8003918 <HAL_GPIO_Init>

}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	48001000 	.word	0x48001000

08002960 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <MX_I2C1_Init+0x74>)
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <MX_I2C1_Init+0x78>)
 8002968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_I2C1_Init+0x74>)
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <MX_I2C1_Init+0x7c>)
 800296e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <MX_I2C1_Init+0x74>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <MX_I2C1_Init+0x74>)
 8002978:	2201      	movs	r2, #1
 800297a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <MX_I2C1_Init+0x74>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_I2C1_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <MX_I2C1_Init+0x74>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_I2C1_Init+0x74>)
 8002990:	2200      	movs	r2, #0
 8002992:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_I2C1_Init+0x74>)
 8002996:	2200      	movs	r2, #0
 8002998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800299a:	480e      	ldr	r0, [pc, #56]	; (80029d4 <MX_I2C1_Init+0x74>)
 800299c:	f001 fa74 	bl	8003e88 <HAL_I2C_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029a6:	f000 f9bd 	bl	8002d24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029aa:	2100      	movs	r1, #0
 80029ac:	4809      	ldr	r0, [pc, #36]	; (80029d4 <MX_I2C1_Init+0x74>)
 80029ae:	f001 ff91 	bl	80048d4 <HAL_I2CEx_ConfigAnalogFilter>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029b8:	f000 f9b4 	bl	8002d24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029bc:	2100      	movs	r1, #0
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_I2C1_Init+0x74>)
 80029c0:	f001 ffd3 	bl	800496a <HAL_I2CEx_ConfigDigitalFilter>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029ca:	f000 f9ab 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000478 	.word	0x20000478
 80029d8:	40005400 	.word	0x40005400
 80029dc:	2000090e 	.word	0x2000090e

080029e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_I2C_MspInit+0x7c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d127      	bne.n	8002a52 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6153      	str	r3, [r2, #20]
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002a1a:	23c0      	movs	r3, #192	; 0xc0
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1e:	2312      	movs	r3, #18
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	480b      	ldr	r0, [pc, #44]	; (8002a64 <HAL_I2C_MspInit+0x84>)
 8002a36:	f000 ff6f 	bl	8003918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_I2C_MspInit+0x80>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40005400 	.word	0x40005400
 8002a60:	40021000 	.word	0x40021000
 8002a64:	48000400 	.word	0x48000400

08002a68 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_I2C_MspDeInit+0x38>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10d      	bne.n	8002a96 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_I2C_MspDeInit+0x3c>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <HAL_I2C_MspDeInit+0x3c>)
 8002a80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a84:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8002a86:	2140      	movs	r1, #64	; 0x40
 8002a88:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <HAL_I2C_MspDeInit+0x40>)
 8002a8a:	f001 f8bf 	bl	8003c0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <HAL_I2C_MspDeInit+0x40>)
 8002a92:	f001 f8bb 	bl	8003c0c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40005400 	.word	0x40005400
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	48000400 	.word	0x48000400

08002aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ab0:	f000 fd96 	bl	80035e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ab4:	f000 f880 	bl	8002bb8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab8:	f7ff fec2 	bl	8002840 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002abc:	f7ff ff50 	bl	8002960 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002ac0:	f000 fb28 	bl	8003114 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002ac4:	f000 fcee 	bl	80034a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED4);
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f7ff f815 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7ff f812 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f7ff f80f 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 8002ada:	2004      	movs	r0, #4
 8002adc:	f7ff f80c 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED9);
 8002ae0:	2006      	movs	r0, #6
 8002ae2:	f7ff f809 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED10);
 8002ae6:	2007      	movs	r0, #7
 8002ae8:	f7ff f806 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED8);
 8002aec:	2005      	movs	r0, #5
 8002aee:	f7ff f803 	bl	8001af8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8002af2:	2003      	movs	r0, #3
 8002af4:	f7ff f800 	bl	8001af8 <BSP_LED_Init>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002af8:	2101      	movs	r1, #1
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7ff f8fa 	bl	8001cf4 <BSP_PB_Init>

  while (!UserPressButton) Toggle_Leds();
 8002b00:	e001      	b.n	8002b06 <main+0x5a>
 8002b02:	f000 f8c9 	bl	8002c98 <Toggle_Leds>
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <main+0xf4>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f8      	beq.n	8002b02 <main+0x56>
  BSP_LED_Off(LED3);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff f8bb 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7ff f8b8 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f7ff f8b5 	bl	8001c8c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8002b22:	2003      	movs	r0, #3
 8002b24:	f7ff f8b2 	bl	8001c8c <BSP_LED_Off>

  /* Initialize RC Filters */
  RCFilter_Init(&Acc_RC_LPF, 5.0f, 0.01f);
 8002b28:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002ba4 <main+0xf8>
 8002b2c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002b30:	481d      	ldr	r0, [pc, #116]	; (8002ba8 <main+0xfc>)
 8002b32:	f7ff fe1f 	bl	8002774 <RCFilter_Init>

  FIRFilter_Init(&Acc_FIR_LPF);
 8002b36:	481d      	ldr	r0, [pc, #116]	; (8002bac <main+0x100>)
 8002b38:	f7ff fd9e 	bl	8002678 <FIRFilter_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1,data,7,HAL_MAX_DELAY);

	  UserPressButton = 0;
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <main+0xf4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
	  BSP_examples[DemoIndex++].DemoFunc();
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <main+0x104>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	b2d1      	uxtb	r1, r2
 8002b4a:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <main+0x104>)
 8002b4c:	7011      	strb	r1, [r2, #0]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <main+0x108>)
 8002b52:	460b      	mov	r3, r1
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a5b      	subs	r3, r3, r1
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4798      	blx	r3

	  /* If all Demo has been already executed, Reset DemoIndex to restart BSP example*/
	  if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <main+0x104>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d902      	bls.n	8002b6e <main+0xc2>
	  {
		DemoIndex = 0;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <main+0x104>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
	  }
	  /* Toggle LEDs between each Test */
	  UserPressButton = 0;
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <main+0xf4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
	  while (!UserPressButton) Toggle_Leds();
 8002b74:	e001      	b.n	8002b7a <main+0xce>
 8002b76:	f000 f88f 	bl	8002c98 <Toggle_Leds>
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <main+0xf4>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f8      	beq.n	8002b76 <main+0xca>
	  BSP_LED_Off(LED3);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff f881 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED4);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7ff f87e 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED5);
 8002b90:	2002      	movs	r0, #2
 8002b92:	f7ff f87b 	bl	8001c8c <BSP_LED_Off>
	  BSP_LED_Off(LED6);
 8002b96:	2003      	movs	r0, #3
 8002b98:	f7ff f878 	bl	8001c8c <BSP_LED_Off>
	  UserPressButton = 0;
 8002b9c:	e7ce      	b.n	8002b3c <main+0x90>
 8002b9e:	bf00      	nop
 8002ba0:	20000469 	.word	0x20000469
 8002ba4:	3c23d70a 	.word	0x3c23d70a
 8002ba8:	200004d4 	.word	0x200004d4
 8002bac:	200004e4 	.word	0x200004e4
 8002bb0:	20000468 	.word	0x20000468
 8002bb4:	2000013c 	.word	0x2000013c

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b09e      	sub	sp, #120	; 0x78
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bc2:	2228      	movs	r2, #40	; 0x28
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 faf2 	bl	80071b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bdc:	463b      	mov	r3, r7
 8002bde:	223c      	movs	r2, #60	; 0x3c
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fae4 	bl	80071b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be8:	2302      	movs	r3, #2
 8002bea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	2301      	movs	r3, #1
 8002bee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002bfc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002c00:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fefc 	bl	8004a04 <HAL_RCC_OscConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002c12:	f000 f887 	bl	8002d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c16:	230f      	movs	r3, #15
 8002c18:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 fdee 	bl	8005814 <HAL_RCC_ClockConfig>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002c3e:	f000 f871 	bl	8002d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002c42:	2321      	movs	r3, #33	; 0x21
 8002c44:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 f815 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002c5c:	f000 f862 	bl	8002d24 <Error_Handler>
  }
}
 8002c60:	bf00      	nop
 8002c62:	3778      	adds	r7, #120	; 0x78
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
  if (USER_BUTTON_PIN == GPIO_Pin)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d109      	bne.n	8002c8c <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_USER) != RESET);
 8002c78:	bf00      	nop
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7ff f89c 	bl	8001db8 <BSP_PB_GetState>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8002c86:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000469 	.word	0x20000469

08002c98 <Toggle_Leds>:
  * @brief Toggle Leds
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED3);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7ff f80f 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002ca2:	2064      	movs	r0, #100	; 0x64
 8002ca4:	f000 fd02 	bl	80036ac <HAL_Delay>
    BSP_LED_Toggle(LED4);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7ff f809 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cae:	2064      	movs	r0, #100	; 0x64
 8002cb0:	f000 fcfc 	bl	80036ac <HAL_Delay>
    BSP_LED_Toggle(LED6);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f7ff f803 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cba:	2064      	movs	r0, #100	; 0x64
 8002cbc:	f000 fcf6 	bl	80036ac <HAL_Delay>
    BSP_LED_Toggle(LED8);
 8002cc0:	2005      	movs	r0, #5
 8002cc2:	f7fe fffd 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cc6:	2064      	movs	r0, #100	; 0x64
 8002cc8:	f000 fcf0 	bl	80036ac <HAL_Delay>
    BSP_LED_Toggle(LED10);
 8002ccc:	2007      	movs	r0, #7
 8002cce:	f7fe fff7 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cd2:	2064      	movs	r0, #100	; 0x64
 8002cd4:	f000 fcea 	bl	80036ac <HAL_Delay>
    BSP_LED_Toggle(LED9);
 8002cd8:	2006      	movs	r0, #6
 8002cda:	f7fe fff1 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cde:	2064      	movs	r0, #100	; 0x64
 8002ce0:	f000 fce4 	bl	80036ac <HAL_Delay>
    BSP_LED_Toggle(LED7);
 8002ce4:	2004      	movs	r0, #4
 8002ce6:	f7fe ffeb 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cea:	2064      	movs	r0, #100	; 0x64
 8002cec:	f000 fcde 	bl	80036ac <HAL_Delay>
    BSP_LED_Toggle(LED5);
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	f7fe ffe5 	bl	8001cc0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8002cf6:	2064      	movs	r0, #100	; 0x64
 8002cf8:	f000 fcd8 	bl	80036ac <HAL_Delay>
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <__io_putchar>:


int __io_putchar(int ch)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t *)&ch , 1 , 0xFFFF);
 8002d08:	1d39      	adds	r1, r7, #4
 8002d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4803      	ldr	r0, [pc, #12]	; (8002d20 <__io_putchar+0x20>)
 8002d12:	f003 fe0b 	bl	800692c <HAL_UART_Transmit>
	return ch;
 8002d16:	687b      	ldr	r3, [r7, #4]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000590 	.word	0x20000590

08002d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    /* Turn LED10/3 (RED) on */
    BSP_LED_On(LED10);
 8002d28:	2007      	movs	r0, #7
 8002d2a:	f7fe ff95 	bl	8001c58 <BSP_LED_On>
    BSP_LED_On(LED3);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fe ff92 	bl	8001c58 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
  __disable_irq();
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <Error_Handler+0x14>
	...

08002d3c <ACCELERO_MEMS_Test>:
  *   The main objective of this test is to check acceleration on 2 axis X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
  {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002d40:	f7ff fafa 	bl	8002338 <BSP_ACCELERO_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002d4a:	f7ff ffeb 	bl	8002d24 <Error_Handler>
  }
  
  UserPressButton = 0;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <ACCELERO_MEMS_Test+0x30>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002d54:	e001      	b.n	8002d5a <ACCELERO_MEMS_Test+0x1e>
  {
    ACCELERO_ReadAcc();
 8002d56:	f000 f80b 	bl	8002d70 <ACCELERO_ReadAcc>
  while(!UserPressButton)
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <ACCELERO_MEMS_Test+0x30>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f8      	beq.n	8002d56 <ACCELERO_MEMS_Test+0x1a>
  }
}  
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000469 	.word	0x20000469

08002d70 <ACCELERO_ReadAcc>:

static void ACCELERO_ReadAcc(void)
{
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af02      	add	r7, sp, #8
  int16_t buffer[3] = {0};
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	81fb      	strh	r3, [r7, #14]
  
  /* Read Acceleration*/
  BSP_ACCELERO_GetXYZ(buffer);
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fb99 	bl	80024bc <BSP_ACCELERO_GetXYZ>
 
  /* Update autoreload and capture compare registers value*/
  xval = buffer[0];
 8002d8a:	88bb      	ldrh	r3, [r7, #4]
 8002d8c:	81bb      	strh	r3, [r7, #12]
  yval = buffer[1];
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	81fb      	strh	r3, [r7, #14]

  //printf("x: %6d \t y: %6d \t z: %6d \r\n",buffer[0],buffer[1],buffer[2]);
  //printf("x: %.3f m/s^2 \t y: %.3f m/s^2 \t z: %.3f m/s^2 \r\n",
		  //0.061035*buffer[0]*9.81/1000, 0.061035*buffer[1]*9.81/1000, 0.061035*buffer[2]*9.81/1000);

  RCFilter_Update(&Acc_RC_LPF,xval);
 8002d92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002da2:	4863      	ldr	r0, [pc, #396]	; (8002f30 <ACCELERO_ReadAcc+0x1c0>)
 8002da4:	f7ff fd22 	bl	80027ec <RCFilter_Update>
  FIRFilter_Update(&Acc_FIR_LPF, xval);
 8002da8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db4:	eeb0 0a67 	vmov.f32	s0, s15
 8002db8:	485e      	ldr	r0, [pc, #376]	; (8002f34 <ACCELERO_ReadAcc+0x1c4>)
 8002dba:	f7ff fc7f 	bl	80026bc <FIRFilter_Update>

  //printf(" %.3f, %.3f , %.3f \r\n",
  		 // 0.061035*buffer[0]*9.81/1000, 0.061035*buffer[1]*9.81/1000, 0.061035*buffer[2]*9.81/1000);

  printf(" %.3f, %.3f\r\n",
    		  0.061035*buffer[0]*9.81/1000, 0.061035*Acc_RC_LPF.out[0]*9.81/1000);
 8002dbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fbae 	bl	8000524 <__aeabi_i2d>
 8002dc8:	a355      	add	r3, pc, #340	; (adr r3, 8002f20 <ACCELERO_ReadAcc+0x1b0>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fc13 	bl	80005f8 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	a353      	add	r3, pc, #332	; (adr r3, 8002f28 <ACCELERO_ReadAcc+0x1b8>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd fc0a 	bl	80005f8 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
  printf(" %.3f, %.3f\r\n",
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <ACCELERO_ReadAcc+0x1c8>)
 8002df2:	f7fd fd2b 	bl	800084c <__aeabi_ddiv>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	461d      	mov	r5, r3
    		  0.061035*buffer[0]*9.81/1000, 0.061035*Acc_RC_LPF.out[0]*9.81/1000);
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <ACCELERO_ReadAcc+0x1c0>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fba0 	bl	8000548 <__aeabi_f2d>
 8002e08:	a345      	add	r3, pc, #276	; (adr r3, 8002f20 <ACCELERO_ReadAcc+0x1b0>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f7fd fbf3 	bl	80005f8 <__aeabi_dmul>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	a343      	add	r3, pc, #268	; (adr r3, 8002f28 <ACCELERO_ReadAcc+0x1b8>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd fbea 	bl	80005f8 <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
  printf(" %.3f, %.3f\r\n",
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <ACCELERO_ReadAcc+0x1c8>)
 8002e32:	f7fd fd0b 	bl	800084c <__aeabi_ddiv>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	483e      	ldr	r0, [pc, #248]	; (8002f3c <ACCELERO_ReadAcc+0x1cc>)
 8002e44:	f004 fe26 	bl	8007a94 <iprintf>


  //HAL_Delay(500);

  if((ABS(xval))>(ABS(yval)))
 8002e48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bfb8      	it	lt
 8002e50:	425b      	neglt	r3, r3
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bfb8      	it	lt
 8002e5c:	425b      	neglt	r3, r3
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d91f      	bls.n	8002ea4 <ACCELERO_ReadAcc+0x134>
  {
    if(xval > ThresholdHigh)
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <ACCELERO_ReadAcc+0x1d0>)
 8002e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	dd06      	ble.n	8002e80 <ACCELERO_ReadAcc+0x110>
    { 
      /* LED10 On */
      BSP_LED_On(LED10);
 8002e72:	2007      	movs	r0, #7
 8002e74:	f7fe fef0 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002e78:	200a      	movs	r0, #10
 8002e7a:	f000 fc17 	bl	80036ac <HAL_Delay>
 8002e7e:	e030      	b.n	8002ee2 <ACCELERO_ReadAcc+0x172>
    }
    else if(xval < ThresholdLow)
 8002e80:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <ACCELERO_ReadAcc+0x1d4>)
 8002e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	da06      	bge.n	8002e9c <ACCELERO_ReadAcc+0x12c>
    { 
      /* LED3 On */
      BSP_LED_On(LED3);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fe fee2 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002e94:	200a      	movs	r0, #10
 8002e96:	f000 fc09 	bl	80036ac <HAL_Delay>
 8002e9a:	e022      	b.n	8002ee2 <ACCELERO_ReadAcc+0x172>
    }
    else
    { 
      HAL_Delay(10);
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	f000 fc05 	bl	80036ac <HAL_Delay>
 8002ea2:	e01e      	b.n	8002ee2 <ACCELERO_ReadAcc+0x172>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 8002ea4:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <ACCELERO_ReadAcc+0x1d4>)
 8002ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eaa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	da06      	bge.n	8002ec0 <ACCELERO_ReadAcc+0x150>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	f7fe fed0 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002eb8:	200a      	movs	r0, #10
 8002eba:	f000 fbf7 	bl	80036ac <HAL_Delay>
 8002ebe:	e010      	b.n	8002ee2 <ACCELERO_ReadAcc+0x172>
    }
    else if(yval > ThresholdHigh)
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <ACCELERO_ReadAcc+0x1d0>)
 8002ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dd06      	ble.n	8002edc <ACCELERO_ReadAcc+0x16c>
    {
      /* LED7 On */
      BSP_LED_On(LED7);
 8002ece:	2004      	movs	r0, #4
 8002ed0:	f7fe fec2 	bl	8001c58 <BSP_LED_On>
      HAL_Delay(10);
 8002ed4:	200a      	movs	r0, #10
 8002ed6:	f000 fbe9 	bl	80036ac <HAL_Delay>
 8002eda:	e002      	b.n	8002ee2 <ACCELERO_ReadAcc+0x172>
    } 
    else
  {	    
      HAL_Delay(10);
 8002edc:	200a      	movs	r0, #10
 8002ede:	f000 fbe5 	bl	80036ac <HAL_Delay>
    }
  } 
  
     BSP_LED_Off(LED3);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fe fed2 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED6);
 8002ee8:	2003      	movs	r0, #3
 8002eea:	f7fe fecf 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED7);
 8002eee:	2004      	movs	r0, #4
 8002ef0:	f7fe fecc 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED4);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f7fe fec9 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED10);
 8002efa:	2007      	movs	r0, #7
 8002efc:	f7fe fec6 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED8);
 8002f00:	2005      	movs	r0, #5
 8002f02:	f7fe fec3 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED9);
 8002f06:	2006      	movs	r0, #6
 8002f08:	f7fe fec0 	bl	8001c8c <BSP_LED_Off>
     BSP_LED_Off(LED5);
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f7fe febd 	bl	8001c8c <BSP_LED_Off>
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	f3af 8000 	nop.w
 8002f20:	c1d29dc7 	.word	0xc1d29dc7
 8002f24:	3faf3ffa 	.word	0x3faf3ffa
 8002f28:	51eb851f 	.word	0x51eb851f
 8002f2c:	40239eb8 	.word	0x40239eb8
 8002f30:	200004d4 	.word	0x200004d4
 8002f34:	200004e4 	.word	0x200004e4
 8002f38:	408f4000 	.word	0x408f4000
 8002f3c:	08009bb0 	.word	0x08009bb0
 8002f40:	200001b4 	.word	0x200001b4
 8002f44:	200001b6 	.word	0x200001b6

08002f48 <GYRO_MEMS_Test>:
  *   MEMS peripheral.
  * @param None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Init Accelerometer Mems */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8002f4c:	f7ff f9f4 	bl	8002338 <BSP_ACCELERO_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <GYRO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002f56:	f7ff fee5 	bl	8002d24 <Error_Handler>
  }
  
  UserPressButton = 0;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <GYRO_MEMS_Test+0x30>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
  while(!UserPressButton)
 8002f60:	e001      	b.n	8002f66 <GYRO_MEMS_Test+0x1e>
  {
    GYRO_ReadAng();
 8002f62:	f000 f80b 	bl	8002f7c <GYRO_ReadAng>
  while(!UserPressButton)
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <GYRO_MEMS_Test+0x30>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f8      	beq.n	8002f62 <GYRO_MEMS_Test+0x1a>
  }
}  
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000469 	.word	0x20000469

08002f7c <GYRO_ReadAng>:

static void GYRO_ReadAng(void)
{
 8002f7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f80:	b08a      	sub	sp, #40	; 0x28
 8002f82:	af04      	add	r7, sp, #16
  /* Gyroscope variable */
  float Buffer[3];
  float Xval,Yval,Zval = 0x00;
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

  /* Init Gyroscope Mems */
  if(BSP_GYRO_Init() != HAL_OK)
 8002f8a:	f7ff faab 	bl	80024e4 <BSP_GYRO_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <GYRO_ReadAng+0x1c>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002f94:	f7ff fec6 	bl	8002d24 <Error_Handler>
  }

  /* Read Gyro Angular data */
  BSP_GYRO_GetXYZ(Buffer);
 8002f98:	463b      	mov	r3, r7
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fb58 	bl	8002650 <BSP_GYRO_GetXYZ>
     
  /* Update autoreload and capture compare registers value*/
  Xval = Buffer[0];
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
  Yval = Buffer[1];
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]
  Zval = Buffer[2];
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	617b      	str	r3, [r7, #20]
  /* dps */
  printf("%.3f, %.3f, %.3f \r\n",
		  L3GD20_SENSITIVITY_250DPS*Xval/1000, L3GD20_SENSITIVITY_250DPS*Yval/1000,
 8002fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fb0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003100 <GYRO_ReadAng+0x184>
 8002fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fb8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003104 <GYRO_ReadAng+0x188>
 8002fbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 8002fc0:	ee16 0a90 	vmov	r0, s13
 8002fc4:	f7fd fac0 	bl	8000548 <__aeabi_f2d>
 8002fc8:	4680      	mov	r8, r0
 8002fca:	4689      	mov	r9, r1
		  L3GD20_SENSITIVITY_250DPS*Xval/1000, L3GD20_SENSITIVITY_250DPS*Yval/1000,
 8002fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003100 <GYRO_ReadAng+0x184>
 8002fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003104 <GYRO_ReadAng+0x188>
 8002fdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 8002fe0:	ee16 0a90 	vmov	r0, s13
 8002fe4:	f7fd fab0 	bl	8000548 <__aeabi_f2d>
 8002fe8:	4604      	mov	r4, r0
 8002fea:	460d      	mov	r5, r1
		  L3GD20_SENSITIVITY_250DPS*Zval/1000);
 8002fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003100 <GYRO_ReadAng+0x184>
 8002ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003104 <GYRO_ReadAng+0x188>
 8002ffc:	eec7 6a87 	vdiv.f32	s13, s15, s14
  printf("%.3f, %.3f, %.3f \r\n",
 8003000:	ee16 0a90 	vmov	r0, s13
 8003004:	f7fd faa0 	bl	8000548 <__aeabi_f2d>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003010:	e9cd 4500 	strd	r4, r5, [sp]
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	483b      	ldr	r0, [pc, #236]	; (8003108 <GYRO_ReadAng+0x18c>)
 800301a:	f004 fd3b 	bl	8007a94 <iprintf>
  HAL_Delay(20);
 800301e:	2014      	movs	r0, #20
 8003020:	f000 fb44 	bl	80036ac <HAL_Delay>
      
  if(Xval>Yval)
 8003024:	ed97 7a04 	vldr	s14, [r7, #16]
 8003028:	edd7 7a03 	vldr	s15, [r7, #12]
 800302c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003034:	dd23      	ble.n	800307e <GYRO_ReadAng+0x102>
   {
    if(Buffer[0] > 5000.0f)
 8003036:	edd7 7a00 	vldr	s15, [r7]
 800303a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800310c <GYRO_ReadAng+0x190>
 800303e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003046:	dd06      	ble.n	8003056 <GYRO_ReadAng+0xda>
     { 
        /* LD10 On */
        BSP_LED_On(LED10);
 8003048:	2007      	movs	r0, #7
 800304a:	f7fe fe05 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 800304e:	200a      	movs	r0, #10
 8003050:	f000 fb2c 	bl	80036ac <HAL_Delay>
 8003054:	e036      	b.n	80030c4 <GYRO_ReadAng+0x148>
     }
     else if(Buffer[0] < -5000.0f)
 8003056:	edd7 7a00 	vldr	s15, [r7]
 800305a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003110 <GYRO_ReadAng+0x194>
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d506      	bpl.n	8003076 <GYRO_ReadAng+0xfa>
     { 
        /* LED3 On */
        BSP_LED_On(LED3);
 8003068:	2000      	movs	r0, #0
 800306a:	f7fe fdf5 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 800306e:	200a      	movs	r0, #10
 8003070:	f000 fb1c 	bl	80036ac <HAL_Delay>
 8003074:	e026      	b.n	80030c4 <GYRO_ReadAng+0x148>
     }      
    else
    { 
      HAL_Delay(10);
 8003076:	200a      	movs	r0, #10
 8003078:	f000 fb18 	bl	80036ac <HAL_Delay>
 800307c:	e022      	b.n	80030c4 <GYRO_ReadAng+0x148>
    }
   }
  else
   {
    if(Buffer[1] < -5000.0f)
 800307e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003082:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003110 <GYRO_ReadAng+0x194>
 8003086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	d506      	bpl.n	800309e <GYRO_ReadAng+0x122>
     {
        /* LD6 on */
        BSP_LED_On(LED6);           
 8003090:	2003      	movs	r0, #3
 8003092:	f7fe fde1 	bl	8001c58 <BSP_LED_On>
        HAL_Delay(10);
 8003096:	200a      	movs	r0, #10
 8003098:	f000 fb08 	bl	80036ac <HAL_Delay>
 800309c:	e012      	b.n	80030c4 <GYRO_ReadAng+0x148>
     }
    else if(Buffer[1] > 5000.0f)
 800309e:	edd7 7a01 	vldr	s15, [r7, #4]
 80030a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800310c <GYRO_ReadAng+0x190>
 80030a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ae:	dd06      	ble.n	80030be <GYRO_ReadAng+0x142>
     {
        /* LD7 On */
        BSP_LED_On(LED7);        
 80030b0:	2004      	movs	r0, #4
 80030b2:	f7fe fdd1 	bl	8001c58 <BSP_LED_On>
	HAL_Delay(10);
 80030b6:	200a      	movs	r0, #10
 80030b8:	f000 faf8 	bl	80036ac <HAL_Delay>
 80030bc:	e002      	b.n	80030c4 <GYRO_ReadAng+0x148>
     }     
        else
        { 
            HAL_Delay(10);
 80030be:	200a      	movs	r0, #10
 80030c0:	f000 faf4 	bl	80036ac <HAL_Delay>
        }  	
      } 
    BSP_LED_Off(LED3);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fe fde1 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED6);
 80030ca:	2003      	movs	r0, #3
 80030cc:	f7fe fdde 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED7);
 80030d0:	2004      	movs	r0, #4
 80030d2:	f7fe fddb 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7fe fdd8 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED10);
 80030dc:	2007      	movs	r0, #7
 80030de:	f7fe fdd5 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED8);
 80030e2:	2005      	movs	r0, #5
 80030e4:	f7fe fdd2 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED9);
 80030e8:	2006      	movs	r0, #6
 80030ea:	f7fe fdcf 	bl	8001c8c <BSP_LED_Off>
    BSP_LED_Off(LED5);
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7fe fdcc 	bl	8001c8c <BSP_LED_Off>
}
 80030f4:	bf00      	nop
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030fe:	bf00      	nop
 8003100:	410c0000 	.word	0x410c0000
 8003104:	447a0000 	.word	0x447a0000
 8003108:	08009bc0 	.word	0x08009bc0
 800310c:	459c4000 	.word	0x459c4000
 8003110:	c59c4000 	.word	0xc59c4000

08003114 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <MX_SPI1_Init+0x74>)
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <MX_SPI1_Init+0x78>)
 800311c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <MX_SPI1_Init+0x74>)
 8003120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <MX_SPI1_Init+0x74>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <MX_SPI1_Init+0x74>)
 800312e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003132:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <MX_SPI1_Init+0x74>)
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_SPI1_Init+0x74>)
 800313c:	2200      	movs	r2, #0
 800313e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_SPI1_Init+0x74>)
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <MX_SPI1_Init+0x74>)
 800314a:	2210      	movs	r2, #16
 800314c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <MX_SPI1_Init+0x74>)
 8003150:	2200      	movs	r2, #0
 8003152:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <MX_SPI1_Init+0x74>)
 8003156:	2200      	movs	r2, #0
 8003158:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <MX_SPI1_Init+0x74>)
 800315c:	2200      	movs	r2, #0
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <MX_SPI1_Init+0x74>)
 8003162:	2207      	movs	r2, #7
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <MX_SPI1_Init+0x74>)
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <MX_SPI1_Init+0x74>)
 800316e:	2208      	movs	r2, #8
 8003170:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_SPI1_Init+0x74>)
 8003174:	f002 ff34 	bl	8005fe0 <HAL_SPI_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800317e:	f7ff fdd1 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2000052c 	.word	0x2000052c
 800318c:	40013000 	.word	0x40013000

08003190 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_SPI_MspInit+0x7c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d128      	bne.n	8003204 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_SPI_MspInit+0x80>)
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	4a16      	ldr	r2, [pc, #88]	; (8003210 <HAL_SPI_MspInit+0x80>)
 80031b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031bc:	6193      	str	r3, [r2, #24]
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_SPI_MspInit+0x80>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_SPI_MspInit+0x80>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_SPI_MspInit+0x80>)
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	6153      	str	r3, [r2, #20]
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <HAL_SPI_MspInit+0x80>)
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80031e2:	23e0      	movs	r3, #224	; 0xe0
 80031e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031f2:	2305      	movs	r3, #5
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	4619      	mov	r1, r3
 80031fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003200:	f000 fb8a 	bl	8003918 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003204:	bf00      	nop
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40013000 	.word	0x40013000
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_SPI_MspDeInit+0x30>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10a      	bne.n	800323c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_SPI_MspDeInit+0x34>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_SPI_MspDeInit+0x34>)
 800322c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003230:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8003232:	21e0      	movs	r1, #224	; 0xe0
 8003234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003238:	f000 fce8 	bl	8003c0c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40013000 	.word	0x40013000
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_MspInit+0x44>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_MspInit+0x44>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6193      	str	r3, [r2, #24]
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_MspInit+0x44>)
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_MspInit+0x44>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <HAL_MspInit+0x44>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003274:	61d3      	str	r3, [r2, #28]
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_MspInit+0x44>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003282:	2007      	movs	r0, #7
 8003284:	f000 fb06 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000

08003294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <NMI_Handler+0x4>

0800329a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329e:	e7fe      	b.n	800329e <HardFault_Handler+0x4>

080032a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a4:	e7fe      	b.n	80032a4 <MemManage_Handler+0x4>

080032a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <BusFault_Handler+0x4>

080032ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <UsageFault_Handler+0x4>

080032b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032e0:	f000 f9c4 	bl	800366c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f000 fdb3 	bl	8003e58 <HAL_GPIO_EXTI_IRQHandler>
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0
	return 1;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <_kill>:

int _kill(int pid, int sig)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003310:	f003 ff24 	bl	800715c <__errno>
 8003314:	4603      	mov	r3, r0
 8003316:	2216      	movs	r2, #22
 8003318:	601a      	str	r2, [r3, #0]
	return -1;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <_exit>:

void _exit (int status)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800332e:	f04f 31ff 	mov.w	r1, #4294967295
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffe7 	bl	8003306 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003338:	e7fe      	b.n	8003338 <_exit+0x12>

0800333a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e00a      	b.n	8003362 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800334c:	f3af 8000 	nop.w
 8003350:	4601      	mov	r1, r0
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	60ba      	str	r2, [r7, #8]
 8003358:	b2ca      	uxtb	r2, r1
 800335a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3301      	adds	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	dbf0      	blt.n	800334c <_read+0x12>
	}

return len;
 800336a:	687b      	ldr	r3, [r7, #4]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e009      	b.n	800339a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	60ba      	str	r2, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fcb6 	bl	8002d00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	429a      	cmp	r2, r3
 80033a0:	dbf1      	blt.n	8003386 <_write+0x12>
	}
	return len;
 80033a2:	687b      	ldr	r3, [r7, #4]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_close>:

int _close(int file)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	return -1;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033d4:	605a      	str	r2, [r3, #4]
	return 0;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_isatty>:

int _isatty(int file)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	return 1;
 80033ec:	2301      	movs	r3, #1
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
	return 0;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <_sbrk+0x5c>)
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <_sbrk+0x60>)
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <_sbrk+0x64>)
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <_sbrk+0x68>)
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <_sbrk+0x64>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003444:	f003 fe8a 	bl	800715c <__errno>
 8003448:	4603      	mov	r3, r0
 800344a:	220c      	movs	r2, #12
 800344c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	e009      	b.n	8003468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_sbrk+0x64>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <_sbrk+0x64>)
 8003464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	2000a000 	.word	0x2000a000
 8003474:	00000400 	.word	0x00000400
 8003478:	2000046c 	.word	0x2000046c
 800347c:	20000628 	.word	0x20000628

08003480 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <SystemInit+0x20>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <SystemInit+0x20>)
 800348c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <MX_USART1_UART_Init+0x5c>)
 80034ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034ca:	220c      	movs	r2, #12
 80034cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034da:	4b08      	ldr	r3, [pc, #32]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034e6:	4805      	ldr	r0, [pc, #20]	; (80034fc <MX_USART1_UART_Init+0x58>)
 80034e8:	f003 f9d2 	bl	8006890 <HAL_UART_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80034f2:	f7ff fc17 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000590 	.word	0x20000590
 8003500:	40013800 	.word	0x40013800

08003504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_UART_MspInit+0x7c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d127      	bne.n	8003576 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <HAL_UART_MspInit+0x80>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_UART_MspInit+0x80>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003530:	6193      	str	r3, [r2, #24]
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_UART_MspInit+0x80>)
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_UART_MspInit+0x80>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_UART_MspInit+0x80>)
 8003544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003548:	6153      	str	r3, [r2, #20]
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_UART_MspInit+0x80>)
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003556:	2330      	movs	r3, #48	; 0x30
 8003558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003566:	2307      	movs	r3, #7
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356a:	f107 0314 	add.w	r3, r7, #20
 800356e:	4619      	mov	r1, r3
 8003570:	4805      	ldr	r0, [pc, #20]	; (8003588 <HAL_UART_MspInit+0x84>)
 8003572:	f000 f9d1 	bl	8003918 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003576:	bf00      	nop
 8003578:	3728      	adds	r7, #40	; 0x28
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40013800 	.word	0x40013800
 8003584:	40021000 	.word	0x40021000
 8003588:	48000800 	.word	0x48000800

0800358c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800358c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003590:	480d      	ldr	r0, [pc, #52]	; (80035c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003592:	490e      	ldr	r1, [pc, #56]	; (80035cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003594:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <LoopForever+0xe>)
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003598:	e002      	b.n	80035a0 <LoopCopyDataInit>

0800359a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800359a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800359c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800359e:	3304      	adds	r3, #4

080035a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035a4:	d3f9      	bcc.n	800359a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035a6:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035a8:	4c0b      	ldr	r4, [pc, #44]	; (80035d8 <LoopForever+0x16>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035ac:	e001      	b.n	80035b2 <LoopFillZerobss>

080035ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b0:	3204      	adds	r2, #4

080035b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035b4:	d3fb      	bcc.n	80035ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035b6:	f7ff ff63 	bl	8003480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ba:	f003 fdd5 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035be:	f7ff fa75 	bl	8002aac <main>

080035c2 <LoopForever>:

LoopForever:
    b LoopForever
 80035c2:	e7fe      	b.n	80035c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80035c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035cc:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 80035d0:	0800a004 	.word	0x0800a004
  ldr r2, =_sbss
 80035d4:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 80035d8:	20000628 	.word	0x20000628

080035dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035dc:	e7fe      	b.n	80035dc <ADC1_2_IRQHandler>
	...

080035e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_Init+0x28>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_Init+0x28>)
 80035ea:	f043 0310 	orr.w	r3, r3, #16
 80035ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f0:	2003      	movs	r0, #3
 80035f2:	f000 f94f 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035f6:	2000      	movs	r0, #0
 80035f8:	f000 f808 	bl	800360c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035fc:	f7ff fe26 	bl	800324c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40022000 	.word	0x40022000

0800360c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_InitTick+0x54>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_InitTick+0x58>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003622:	fbb3 f3f1 	udiv	r3, r3, r1
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f967 	bl	80038fe <HAL_SYSTICK_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e00e      	b.n	8003658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b0f      	cmp	r3, #15
 800363e:	d80a      	bhi.n	8003656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003640:	2200      	movs	r2, #0
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	f000 f92f 	bl	80038aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800364c:	4a06      	ldr	r2, [pc, #24]	; (8003668 <HAL_InitTick+0x5c>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200001b8 	.word	0x200001b8
 8003664:	200001c0 	.word	0x200001c0
 8003668:	200001bc 	.word	0x200001bc

0800366c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_IncTick+0x20>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_IncTick+0x24>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4413      	add	r3, r2
 800367c:	4a04      	ldr	r2, [pc, #16]	; (8003690 <HAL_IncTick+0x24>)
 800367e:	6013      	str	r3, [r2, #0]
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	200001c0 	.word	0x200001c0
 8003690:	20000614 	.word	0x20000614

08003694 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return uwTick;  
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_GetTick+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000614 	.word	0x20000614

080036ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff ffee 	bl	8003694 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d005      	beq.n	80036d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_Delay+0x44>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80036d2:	bf00      	nop
 80036d4:	f7ff ffde 	bl	8003694 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d8f7      	bhi.n	80036d4 <HAL_Delay+0x28>
  {
  }
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200001c0 	.word	0x200001c0

080036f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003710:	4013      	ands	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800371c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <__NVIC_GetPriorityGrouping+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0307 	and.w	r3, r3, #7
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db0b      	blt.n	8003782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <__NVIC_EnableIRQ+0x38>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
         );
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003860:	d301      	bcc.n	8003866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <SysTick_Config+0x40>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386e:	210f      	movs	r1, #15
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	f7ff ff8e 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SysTick_Config+0x40>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <SysTick_Config+0x40>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff29 	bl	80036f4 <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038bc:	f7ff ff3e 	bl	800373c <__NVIC_GetPriorityGrouping>
 80038c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f7ff ff8e 	bl	80037e8 <NVIC_EncodePriority>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff5d 	bl	8003794 <__NVIC_SetPriority>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff31 	bl	8003758 <__NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffa2 	bl	8003850 <SysTick_Config>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003926:	e154      	b.n	8003bd2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8146 	beq.w	8003bcc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d005      	beq.n	8003958 <HAL_GPIO_Init+0x40>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d130      	bne.n	80039ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800398e:	2201      	movs	r2, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f003 0201 	and.w	r2, r3, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d017      	beq.n	80039f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d123      	bne.n	8003a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	08da      	lsrs	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	220f      	movs	r2, #15
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	2203      	movs	r2, #3
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0203 	and.w	r2, r3, #3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a0 	beq.w	8003bcc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <HAL_GPIO_Init+0x2d8>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <HAL_GPIO_Init+0x2d8>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6193      	str	r3, [r2, #24]
 8003a98:	4b55      	ldr	r3, [pc, #340]	; (8003bf0 <HAL_GPIO_Init+0x2d8>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003aa4:	4a53      	ldr	r2, [pc, #332]	; (8003bf4 <HAL_GPIO_Init+0x2dc>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3302      	adds	r3, #2
 8003aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220f      	movs	r2, #15
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ace:	d019      	beq.n	8003b04 <HAL_GPIO_Init+0x1ec>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a49      	ldr	r2, [pc, #292]	; (8003bf8 <HAL_GPIO_Init+0x2e0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_GPIO_Init+0x1e8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a48      	ldr	r2, [pc, #288]	; (8003bfc <HAL_GPIO_Init+0x2e4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00d      	beq.n	8003afc <HAL_GPIO_Init+0x1e4>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a47      	ldr	r2, [pc, #284]	; (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d007      	beq.n	8003af8 <HAL_GPIO_Init+0x1e0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a46      	ldr	r2, [pc, #280]	; (8003c04 <HAL_GPIO_Init+0x2ec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_GPIO_Init+0x1dc>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e008      	b.n	8003b06 <HAL_GPIO_Init+0x1ee>
 8003af4:	2305      	movs	r3, #5
 8003af6:	e006      	b.n	8003b06 <HAL_GPIO_Init+0x1ee>
 8003af8:	2303      	movs	r3, #3
 8003afa:	e004      	b.n	8003b06 <HAL_GPIO_Init+0x1ee>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e002      	b.n	8003b06 <HAL_GPIO_Init+0x1ee>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_GPIO_Init+0x1ee>
 8003b04:	2300      	movs	r3, #0
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	f002 0203 	and.w	r2, r2, #3
 8003b0c:	0092      	lsls	r2, r2, #2
 8003b0e:	4093      	lsls	r3, r2
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b16:	4937      	ldr	r1, [pc, #220]	; (8003bf4 <HAL_GPIO_Init+0x2dc>)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b24:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b48:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b72:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b78:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b9c:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba2:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bc6:	4a10      	ldr	r2, [pc, #64]	; (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f aea3 	bne.w	8003928 <HAL_GPIO_Init+0x10>
  }
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	48000400 	.word	0x48000400
 8003bfc:	48000800 	.word	0x48000800
 8003c00:	48000c00 	.word	0x48000c00
 8003c04:	48001000 	.word	0x48001000
 8003c08:	40010400 	.word	0x40010400

08003c0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c1a:	e0b8      	b.n	8003d8e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80ab 	beq.w	8003d88 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003c32:	4a5e      	ldr	r2, [pc, #376]	; (8003dac <HAL_GPIO_DeInit+0x1a0>)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	220f      	movs	r2, #15
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4013      	ands	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c5a:	d019      	beq.n	8003c90 <HAL_GPIO_DeInit+0x84>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a54      	ldr	r2, [pc, #336]	; (8003db0 <HAL_GPIO_DeInit+0x1a4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_GPIO_DeInit+0x80>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a53      	ldr	r2, [pc, #332]	; (8003db4 <HAL_GPIO_DeInit+0x1a8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00d      	beq.n	8003c88 <HAL_GPIO_DeInit+0x7c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <HAL_GPIO_DeInit+0x1ac>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <HAL_GPIO_DeInit+0x78>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a51      	ldr	r2, [pc, #324]	; (8003dbc <HAL_GPIO_DeInit+0x1b0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <HAL_GPIO_DeInit+0x74>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	e008      	b.n	8003c92 <HAL_GPIO_DeInit+0x86>
 8003c80:	2305      	movs	r3, #5
 8003c82:	e006      	b.n	8003c92 <HAL_GPIO_DeInit+0x86>
 8003c84:	2303      	movs	r3, #3
 8003c86:	e004      	b.n	8003c92 <HAL_GPIO_DeInit+0x86>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e002      	b.n	8003c92 <HAL_GPIO_DeInit+0x86>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_GPIO_DeInit+0x86>
 8003c90:	2300      	movs	r3, #0
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	f002 0203 	and.w	r2, r2, #3
 8003c98:	0092      	lsls	r2, r2, #2
 8003c9a:	4093      	lsls	r3, r2
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d132      	bne.n	8003d08 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ca2:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	4945      	ldr	r1, [pc, #276]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003cb0:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	4941      	ldr	r1, [pc, #260]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	493e      	ldr	r1, [pc, #248]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ccc:	4b3c      	ldr	r3, [pc, #240]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	493a      	ldr	r1, [pc, #232]	; (8003dc0 <HAL_GPIO_DeInit+0x1b4>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	220f      	movs	r2, #15
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003cea:	4a30      	ldr	r2, [pc, #192]	; (8003dac <HAL_GPIO_DeInit+0x1a0>)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	482c      	ldr	r0, [pc, #176]	; (8003dac <HAL_GPIO_DeInit+0x1a0>)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	400a      	ands	r2, r1
 8003d02:	3302      	adds	r3, #2
 8003d04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2103      	movs	r1, #3
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	401a      	ands	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	08da      	lsrs	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3208      	adds	r2, #8
 8003d26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	220f      	movs	r2, #15
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	08d2      	lsrs	r2, r2, #3
 8003d3e:	4019      	ands	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3208      	adds	r2, #8
 8003d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2103      	movs	r1, #3
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	401a      	ands	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	2101      	movs	r1, #1
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2103      	movs	r1, #3
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f47f af40 	bne.w	8003c1c <HAL_GPIO_DeInit+0x10>
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40010000 	.word	0x40010000
 8003db0:	48000400 	.word	0x48000400
 8003db4:	48000800 	.word	0x48000800
 8003db8:	48000c00 	.word	0x48000c00
 8003dbc:	48001000 	.word	0x48001000
 8003dc0:	40010400 	.word	0x40010400

08003dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	e001      	b.n	8003de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
 8003e00:	4613      	mov	r3, r2
 8003e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e04:	787b      	ldrb	r3, [r7, #1]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e10:	e002      	b.n	8003e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43d9      	mvns	r1, r3
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	400b      	ands	r3, r1
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	619a      	str	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fef6 	bl	8002c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40010400 	.word	0x40010400

08003e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e081      	b.n	8003f9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe fd96 	bl	80029e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	e006      	b.n	8003f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d104      	bne.n	8003f22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e021      	b.n	8003ffc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	; 0x24
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fe fd49 	bl	8002a68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	f040 80f9 	bne.w	800421e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_I2C_Mem_Write+0x34>
 8004032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0ed      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_I2C_Mem_Write+0x4e>
 800404e:	2302      	movs	r3, #2
 8004050:	e0e6      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800405a:	f7ff fb1b 	bl	8003694 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	2201      	movs	r2, #1
 8004068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fad1 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0d1      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a4:	88f8      	ldrh	r0, [r7, #6]
 80040a6:	893a      	ldrh	r2, [r7, #8]
 80040a8:	8979      	ldrh	r1, [r7, #10]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4603      	mov	r3, r0
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f9e1 	bl	800447c <I2C_RequestMemoryWrite>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a9      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2bff      	cmp	r3, #255	; 0xff
 80040d4:	d90e      	bls.n	80040f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	8979      	ldrh	r1, [r7, #10]
 80040e4:	2300      	movs	r3, #0
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fbc3 	bl	8004878 <I2C_TransferConfig>
 80040f2:	e00f      	b.n	8004114 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	b2da      	uxtb	r2, r3
 8004104:	8979      	ldrh	r1, [r7, #10]
 8004106:	2300      	movs	r3, #0
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fbb2 	bl	8004878 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fabb 	bl	8004694 <I2C_WaitOnTXISFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e07b      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d034      	beq.n	80041cc <HAL_I2C_Mem_Write+0x1c8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d130      	bne.n	80041cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fa4d 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e04d      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2bff      	cmp	r3, #255	; 0xff
 800418c:	d90e      	bls.n	80041ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	b2da      	uxtb	r2, r3
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	2300      	movs	r3, #0
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fb67 	bl	8004878 <I2C_TransferConfig>
 80041aa:	e00f      	b.n	80041cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	2300      	movs	r3, #0
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fb56 	bl	8004878 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d19e      	bne.n	8004114 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fa9a 	bl	8004714 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01a      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2220      	movs	r2, #32
 80041f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_I2C_Mem_Write+0x224>)
 80041fe:	400b      	ands	r3, r1
 8004200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	fe00e800 	.word	0xfe00e800

0800422c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	817b      	strh	r3, [r7, #10]
 800423e:	460b      	mov	r3, r1
 8004240:	813b      	strh	r3, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b20      	cmp	r3, #32
 8004250:	f040 80fd 	bne.w	800444e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_I2C_Mem_Read+0x34>
 800425a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0f1      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_I2C_Mem_Read+0x4e>
 8004276:	2302      	movs	r3, #2
 8004278:	e0ea      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004282:	f7ff fa07 	bl	8003694 <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2319      	movs	r3, #25
 800428e:	2201      	movs	r2, #1
 8004290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f9bd 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d5      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2222      	movs	r2, #34	; 0x22
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2240      	movs	r2, #64	; 0x40
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042cc:	88f8      	ldrh	r0, [r7, #6]
 80042ce:	893a      	ldrh	r2, [r7, #8]
 80042d0:	8979      	ldrh	r1, [r7, #10]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4603      	mov	r3, r0
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f921 	bl	8004524 <I2C_RequestMemoryRead>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0ad      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2bff      	cmp	r3, #255	; 0xff
 80042fc:	d90e      	bls.n	800431c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	b2da      	uxtb	r2, r3
 800430a:	8979      	ldrh	r1, [r7, #10]
 800430c:	4b52      	ldr	r3, [pc, #328]	; (8004458 <HAL_I2C_Mem_Read+0x22c>)
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 faaf 	bl	8004878 <I2C_TransferConfig>
 800431a:	e00f      	b.n	800433c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	b2da      	uxtb	r2, r3
 800432c:	8979      	ldrh	r1, [r7, #10]
 800432e:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <HAL_I2C_Mem_Read+0x22c>)
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fa9e 	bl	8004878 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	2200      	movs	r2, #0
 8004344:	2104      	movs	r1, #4
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f964 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07c      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d034      	beq.n	80043fc <HAL_I2C_Mem_Read+0x1d0>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d130      	bne.n	80043fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f935 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e04d      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2bff      	cmp	r3, #255	; 0xff
 80043bc:	d90e      	bls.n	80043dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22ff      	movs	r2, #255	; 0xff
 80043c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fa4f 	bl	8004878 <I2C_TransferConfig>
 80043da:	e00f      	b.n	80043fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fa3e 	bl	8004878 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d19a      	bne.n	800433c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f982 	bl	8004714 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01a      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_I2C_Mem_Read+0x230>)
 800442e:	400b      	ands	r3, r1
 8004430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	80002400 	.word	0x80002400
 800445c:	fe00e800 	.word	0xfe00e800

08004460 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446e:	b2db      	uxtb	r3, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	8979      	ldrh	r1, [r7, #10]
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <I2C_RequestMemoryWrite+0xa4>)
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f9e7 	bl	8004878 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	69b9      	ldr	r1, [r7, #24]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8f0 	bl	8004694 <I2C_WaitOnTXISFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e02c      	b.n	8004518 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d105      	bne.n	80044d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
 80044ce:	e015      	b.n	80044fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044d0:	893b      	ldrh	r3, [r7, #8]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	69b9      	ldr	r1, [r7, #24]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f8d6 	bl	8004694 <I2C_WaitOnTXISFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e012      	b.n	8004518 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044f2:	893b      	ldrh	r3, [r7, #8]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2200      	movs	r2, #0
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f884 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	80002000 	.word	0x80002000

08004524 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	4603      	mov	r3, r0
 8004534:	817b      	strh	r3, [r7, #10]
 8004536:	460b      	mov	r3, r1
 8004538:	813b      	strh	r3, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	8979      	ldrh	r1, [r7, #10]
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <I2C_RequestMemoryRead+0xa4>)
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2300      	movs	r3, #0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f994 	bl	8004878 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	69b9      	ldr	r1, [r7, #24]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f89d 	bl	8004694 <I2C_WaitOnTXISFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e02c      	b.n	80045be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800456a:	893b      	ldrh	r3, [r7, #8]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
 8004574:	e015      	b.n	80045a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004576:	893b      	ldrh	r3, [r7, #8]
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	b29b      	uxth	r3, r3
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f883 	bl	8004694 <I2C_WaitOnTXISFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e012      	b.n	80045be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f831 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	80002000 	.word	0x80002000

080045cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d103      	bne.n	80045ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d007      	beq.n	8004608 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	619a      	str	r2, [r3, #24]
  }
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004624:	e022      	b.n	800466c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d01e      	beq.n	800466c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7ff f831 	bl	8003694 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d113      	bne.n	800466c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e00f      	b.n	800468c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	429a      	cmp	r2, r3
 8004688:	d0cd      	beq.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046a0:	e02c      	b.n	80046fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f870 	bl	800478c <I2C_IsAcknowledgeFailed>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e02a      	b.n	800470c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d01e      	beq.n	80046fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fe ffe9 	bl	8003694 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d113      	bne.n	80046fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	f043 0220 	orr.w	r2, r3, #32
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e007      	b.n	800470c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d1cb      	bne.n	80046a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004720:	e028      	b.n	8004774 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f830 	bl	800478c <I2C_IsAcknowledgeFailed>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e026      	b.n	8004784 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fe ffad 	bl	8003694 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d113      	bne.n	8004774 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e007      	b.n	8004784 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b20      	cmp	r3, #32
 8004780:	d1cf      	bne.n	8004722 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d161      	bne.n	800486a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b4:	d02b      	beq.n	800480e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c6:	e022      	b.n	800480e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d01e      	beq.n	800480e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fe ff60 	bl	8003694 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <I2C_IsAcknowledgeFailed+0x5a>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d113      	bne.n	800480e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e02e      	b.n	800486c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b20      	cmp	r3, #32
 800481a:	d1d5      	bne.n	80047c8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2210      	movs	r2, #16
 8004822:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2220      	movs	r2, #32
 800482a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fecd 	bl	80045cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <I2C_IsAcknowledgeFailed+0xe8>)
 800483e:	400b      	ands	r3, r1
 8004840:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f043 0204 	orr.w	r2, r3, #4
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	fe00e800 	.word	0xfe00e800

08004878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	4613      	mov	r3, r2
 8004888:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	0d5b      	lsrs	r3, r3, #21
 8004894:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <I2C_TransferConfig+0x58>)
 800489a:	430b      	orrs	r3, r1
 800489c:	43db      	mvns	r3, r3
 800489e:	ea02 0103 	and.w	r1, r2, r3
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048a8:	7a7b      	ldrb	r3, [r7, #9]
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	03ff63ff 	.word	0x03ff63ff

080048d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d138      	bne.n	800495c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e032      	b.n	800495e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d139      	bne.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800498a:	2302      	movs	r3, #2
 800498c:	e033      	b.n	80049f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2224      	movs	r2, #36	; 0x24
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	1d3b      	adds	r3, r7, #4
 8004a0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a10:	1d3b      	adds	r3, r7, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f000 bef4 	b.w	8005806 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1e:	1d3b      	adds	r3, r7, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 816a 	beq.w	8004d02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a2e:	4bb3      	ldr	r3, [pc, #716]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d00c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a3a:	4bb0      	ldr	r3, [pc, #704]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d159      	bne.n	8004afa <HAL_RCC_OscConfig+0xf6>
 8004a46:	4bad      	ldr	r3, [pc, #692]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d152      	bne.n	8004afa <HAL_RCC_OscConfig+0xf6>
 8004a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_OscConfig+0x82>
 8004a80:	4b9e      	ldr	r3, [pc, #632]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	e015      	b.n	8004ab2 <HAL_RCC_OscConfig+0xae>
 8004a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004aa2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004aae:	4b93      	ldr	r3, [pc, #588]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ab6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004aba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004abe:	fa92 f2a2 	rbit	r2, r2
 8004ac2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004ac6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004aca:	fab2 f282 	clz	r2, r2
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	f042 0220 	orr.w	r2, r2, #32
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	f002 021f 	and.w	r2, r2, #31
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 810c 	beq.w	8004d00 <HAL_RCC_OscConfig+0x2fc>
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8106 	bne.w	8004d00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f000 be86 	b.w	8005806 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b04:	d106      	bne.n	8004b14 <HAL_RCC_OscConfig+0x110>
 8004b06:	4b7d      	ldr	r3, [pc, #500]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7c      	ldr	r2, [pc, #496]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e030      	b.n	8004b76 <HAL_RCC_OscConfig+0x172>
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x134>
 8004b1e:	4b77      	ldr	r3, [pc, #476]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a76      	ldr	r2, [pc, #472]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b74      	ldr	r3, [pc, #464]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a73      	ldr	r2, [pc, #460]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01e      	b.n	8004b76 <HAL_RCC_OscConfig+0x172>
 8004b38:	1d3b      	adds	r3, r7, #4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCC_OscConfig+0x15a>
 8004b44:	4b6d      	ldr	r3, [pc, #436]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6c      	ldr	r2, [pc, #432]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4b6a      	ldr	r3, [pc, #424]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a69      	ldr	r2, [pc, #420]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e00b      	b.n	8004b76 <HAL_RCC_OscConfig+0x172>
 8004b5e:	4b67      	ldr	r3, [pc, #412]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a66      	ldr	r2, [pc, #408]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b64      	ldr	r3, [pc, #400]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a63      	ldr	r2, [pc, #396]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b76:	4b61      	ldr	r3, [pc, #388]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	f023 020f 	bic.w	r2, r3, #15
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	495d      	ldr	r1, [pc, #372]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b8a:	1d3b      	adds	r3, r7, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d059      	beq.n	8004c48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe fd7e 	bl	8003694 <HAL_GetTick>
 8004b98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b9e:	f7fe fd79 	bl	8003694 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d902      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	f000 be29 	b.w	8005806 <HAL_RCC_OscConfig+0xe02>
 8004bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004bc8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bcc:	fab3 f383 	clz	r3, r3
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <HAL_RCC_OscConfig+0x1e2>
 8004be0:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	e015      	b.n	8004c12 <HAL_RCC_OscConfig+0x20e>
 8004be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bfe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c0e:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c1e:	fa92 f2a2 	rbit	r2, r2
 8004c22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c2a:	fab2 f282 	clz	r2, r2
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	f042 0220 	orr.w	r2, r2, #32
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	f002 021f 	and.w	r2, r2, #31
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ab      	beq.n	8004b9e <HAL_RCC_OscConfig+0x19a>
 8004c46:	e05c      	b.n	8004d02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fe fd24 	bl	8003694 <HAL_GetTick>
 8004c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c50:	e00a      	b.n	8004c68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c52:	f7fe fd1f 	bl	8003694 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d902      	bls.n	8004c68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	f000 bdcf 	b.w	8005806 <HAL_RCC_OscConfig+0xe02>
 8004c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d102      	bne.n	8004c9a <HAL_RCC_OscConfig+0x296>
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x2c2>
 8004c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004cb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <HAL_RCC_OscConfig+0x2f8>)
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004cce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004cd2:	fa92 f2a2 	rbit	r2, r2
 8004cd6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004cda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004cde:	fab2 f282 	clz	r2, r2
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	f042 0220 	orr.w	r2, r2, #32
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	f002 021f 	and.w	r2, r2, #31
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ab      	bne.n	8004c52 <HAL_RCC_OscConfig+0x24e>
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_OscConfig+0x2fe>
 8004cfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 816f 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d12:	4bd0      	ldr	r3, [pc, #832]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d1e:	4bcd      	ldr	r3, [pc, #820]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d16c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x400>
 8004d2a:	4bca      	ldr	r3, [pc, #808]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d166      	bne.n	8004e04 <HAL_RCC_OscConfig+0x400>
 8004d36:	2302      	movs	r3, #2
 8004d38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCC_OscConfig+0x362>
 8004d60:	4bbc      	ldr	r3, [pc, #752]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	e013      	b.n	8004d8e <HAL_RCC_OscConfig+0x38a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d8a:	4bb2      	ldr	r3, [pc, #712]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d98:	fa92 f2a2 	rbit	r2, r2
 8004d9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004da0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004da4:	fab2 f282 	clz	r2, r2
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	f042 0220 	orr.w	r2, r2, #32
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	f002 021f 	and.w	r2, r2, #31
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x3cc>
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d002      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f000 bd1b 	b.w	8005806 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	4ba0      	ldr	r3, [pc, #640]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd8:	1d3b      	adds	r3, r7, #4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	21f8      	movs	r1, #248	; 0xf8
 8004de0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004de8:	fa91 f1a1 	rbit	r1, r1
 8004dec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004df0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004df4:	fab1 f181 	clz	r1, r1
 8004df8:	b2c9      	uxtb	r1, r1
 8004dfa:	408b      	lsls	r3, r1
 8004dfc:	4995      	ldr	r1, [pc, #596]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	e0f5      	b.n	8004ff0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8085 	beq.w	8004f1a <HAL_RCC_OscConfig+0x516>
 8004e10:	2301      	movs	r3, #1
 8004e12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e26:	fab3 f383 	clz	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	461a      	mov	r2, r3
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fe fc2a 	bl	8003694 <HAL_GetTick>
 8004e40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fe fc25 	bl	8003694 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d902      	bls.n	8004e5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	f000 bcd5 	b.w	8005806 <HAL_RCC_OscConfig+0xe02>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e66:	fa93 f3a3 	rbit	r3, r3
 8004e6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	fab3 f383 	clz	r3, r3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d102      	bne.n	8004e8c <HAL_RCC_OscConfig+0x488>
 8004e86:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	e013      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4b0>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e96:	fa93 f3a3 	rbit	r3, r3
 8004e9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ea4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ea8:	fa93 f3a3 	rbit	r3, r3
 8004eac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004eb0:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004eba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ebe:	fa92 f2a2 	rbit	r2, r2
 8004ec2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004ec6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004eca:	fab2 f282 	clz	r2, r2
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f042 0220 	orr.w	r2, r2, #32
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	f002 021f 	and.w	r2, r2, #31
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0af      	beq.n	8004e46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee6:	4b5b      	ldr	r3, [pc, #364]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	21f8      	movs	r1, #248	; 0xf8
 8004ef6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004efe:	fa91 f1a1 	rbit	r1, r1
 8004f02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f0a:	fab1 f181 	clz	r1, r1
 8004f0e:	b2c9      	uxtb	r1, r1
 8004f10:	408b      	lsls	r3, r1
 8004f12:	4950      	ldr	r1, [pc, #320]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
 8004f18:	e06a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x5ec>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f24:	fa93 f3a3 	rbit	r3, r3
 8004f28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f30:	fab3 f383 	clz	r3, r3
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	461a      	mov	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7fe fba5 	bl	8003694 <HAL_GetTick>
 8004f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fe fba0 	bl	8003694 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d902      	bls.n	8004f66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	f000 bc50 	b.w	8005806 <HAL_RCC_OscConfig+0xe02>
 8004f66:	2302      	movs	r3, #2
 8004f68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d102      	bne.n	8004f96 <HAL_RCC_OscConfig+0x592>
 8004f90:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	e013      	b.n	8004fbe <HAL_RCC_OscConfig+0x5ba>
 8004f96:	2302      	movs	r3, #2
 8004f98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fa0:	fa93 f3a3 	rbit	r3, r3
 8004fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fba:	4b26      	ldr	r3, [pc, #152]	; (8005054 <HAL_RCC_OscConfig+0x650>)
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004fc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004fc8:	fa92 f2a2 	rbit	r2, r2
 8004fcc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004fd0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004fd4:	fab2 f282 	clz	r2, r2
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	f042 0220 	orr.w	r2, r2, #32
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	f002 021f 	and.w	r2, r2, #31
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1af      	bne.n	8004f50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80da 	beq.w	80051b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d069      	beq.n	80050de <HAL_RCC_OscConfig+0x6da>
 800500a:	2301      	movs	r3, #1
 800500c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800501c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005020:	fab3 f383 	clz	r3, r3
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_OscConfig+0x654>)
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	461a      	mov	r2, r3
 8005030:	2301      	movs	r3, #1
 8005032:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005034:	f7fe fb2e 	bl	8003694 <HAL_GetTick>
 8005038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503c:	e00e      	b.n	800505c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503e:	f7fe fb29 	bl	8003694 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d906      	bls.n	800505c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e3d9      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000
 8005058:	10908120 	.word	0x10908120
 800505c:	2302      	movs	r3, #2
 800505e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800506e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005072:	2202      	movs	r2, #2
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	fa93 f2a3 	rbit	r2, r3
 8005080:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800508a:	2202      	movs	r2, #2
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	fa93 f2a3 	rbit	r2, r3
 8005098:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800509c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509e:	4ba5      	ldr	r3, [pc, #660]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80050a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050a6:	2102      	movs	r1, #2
 80050a8:	6019      	str	r1, [r3, #0]
 80050aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	fa93 f1a3 	rbit	r1, r3
 80050b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050b8:	6019      	str	r1, [r3, #0]
  return result;
 80050ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	fab3 f383 	clz	r3, r3
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0b0      	beq.n	800503e <HAL_RCC_OscConfig+0x63a>
 80050dc:	e06a      	b.n	80051b4 <HAL_RCC_OscConfig+0x7b0>
 80050de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	fa93 f2a3 	rbit	r2, r3
 80050f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050f4:	601a      	str	r2, [r3, #0]
  return result;
 80050f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050fc:	fab3 f383 	clz	r3, r3
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	4b8c      	ldr	r3, [pc, #560]	; (8005338 <HAL_RCC_OscConfig+0x934>)
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005110:	f7fe fac0 	bl	8003694 <HAL_GetTick>
 8005114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005118:	e009      	b.n	800512e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800511a:	f7fe fabb 	bl	8003694 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e36b      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
 800512e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005132:	2202      	movs	r2, #2
 8005134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	fa93 f2a3 	rbit	r2, r3
 8005140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800514a:	2202      	movs	r2, #2
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fa93 f2a3 	rbit	r2, r3
 8005158:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005162:	2202      	movs	r2, #2
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	fa93 f2a3 	rbit	r2, r3
 8005170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005174:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005176:	4b6f      	ldr	r3, [pc, #444]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 8005178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800517e:	2102      	movs	r1, #2
 8005180:	6019      	str	r1, [r3, #0]
 8005182:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	fa93 f1a3 	rbit	r1, r3
 800518c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005190:	6019      	str	r1, [r3, #0]
  return result;
 8005192:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f303 	lsl.w	r3, r1, r3
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1b2      	bne.n	800511a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8158 	beq.w	8005474 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ca:	4b5a      	ldr	r3, [pc, #360]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d112      	bne.n	80051fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	4b57      	ldr	r3, [pc, #348]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4a56      	ldr	r2, [pc, #344]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	61d3      	str	r3, [r2, #28]
 80051e2:	4b54      	ldr	r3, [pc, #336]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fc:	4b4f      	ldr	r3, [pc, #316]	; (800533c <HAL_RCC_OscConfig+0x938>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11a      	bne.n	800523e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005208:	4b4c      	ldr	r3, [pc, #304]	; (800533c <HAL_RCC_OscConfig+0x938>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a4b      	ldr	r2, [pc, #300]	; (800533c <HAL_RCC_OscConfig+0x938>)
 800520e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005212:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005214:	f7fe fa3e 	bl	8003694 <HAL_GetTick>
 8005218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	e009      	b.n	8005232 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521e:	f7fe fa39 	bl	8003694 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e2e9      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005232:	4b42      	ldr	r3, [pc, #264]	; (800533c <HAL_RCC_OscConfig+0x938>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0ef      	beq.n	800521e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x852>
 8005248:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4a39      	ldr	r2, [pc, #228]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6213      	str	r3, [r2, #32]
 8005254:	e02f      	b.n	80052b6 <HAL_RCC_OscConfig+0x8b2>
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10c      	bne.n	800527a <HAL_RCC_OscConfig+0x876>
 8005260:	4b34      	ldr	r3, [pc, #208]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a33      	ldr	r2, [pc, #204]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	4b31      	ldr	r3, [pc, #196]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	4a30      	ldr	r2, [pc, #192]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6213      	str	r3, [r2, #32]
 8005278:	e01d      	b.n	80052b6 <HAL_RCC_OscConfig+0x8b2>
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d10c      	bne.n	800529e <HAL_RCC_OscConfig+0x89a>
 8005284:	4b2b      	ldr	r3, [pc, #172]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6213      	str	r3, [r2, #32]
 8005290:	4b28      	ldr	r3, [pc, #160]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4a27      	ldr	r2, [pc, #156]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6213      	str	r3, [r2, #32]
 800529c:	e00b      	b.n	80052b6 <HAL_RCC_OscConfig+0x8b2>
 800529e:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4a24      	ldr	r2, [pc, #144]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6213      	str	r3, [r2, #32]
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4a21      	ldr	r2, [pc, #132]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d06b      	beq.n	8005398 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c0:	f7fe f9e8 	bl	8003694 <HAL_GetTick>
 80052c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c8:	e00b      	b.n	80052e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fe f9e3 	bl	8003694 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e291      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
 80052e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052e6:	2202      	movs	r2, #2
 80052e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	fa93 f2a3 	rbit	r2, r3
 80052f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052fe:	2202      	movs	r2, #2
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	fa93 f2a3 	rbit	r2, r3
 800530c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005310:	601a      	str	r2, [r3, #0]
  return result;
 8005312:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005316:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005318:	fab3 f383 	clz	r3, r3
 800531c:	b2db      	uxtb	r3, r3
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f043 0302 	orr.w	r3, r3, #2
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d109      	bne.n	8005340 <HAL_RCC_OscConfig+0x93c>
 800532c:	4b01      	ldr	r3, [pc, #4]	; (8005334 <HAL_RCC_OscConfig+0x930>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	e014      	b.n	800535c <HAL_RCC_OscConfig+0x958>
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
 8005338:	10908120 	.word	0x10908120
 800533c:	40007000 	.word	0x40007000
 8005340:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005344:	2202      	movs	r2, #2
 8005346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	fa93 f2a3 	rbit	r2, r3
 8005352:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	4bbb      	ldr	r3, [pc, #748]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005360:	2102      	movs	r1, #2
 8005362:	6011      	str	r1, [r2, #0]
 8005364:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	fa92 f1a2 	rbit	r1, r2
 800536e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005372:	6011      	str	r1, [r2, #0]
  return result;
 8005374:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	fab2 f282 	clz	r2, r2
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	f002 021f 	and.w	r2, r2, #31
 800538a:	2101      	movs	r1, #1
 800538c:	fa01 f202 	lsl.w	r2, r1, r2
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d099      	beq.n	80052ca <HAL_RCC_OscConfig+0x8c6>
 8005396:	e063      	b.n	8005460 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005398:	f7fe f97c 	bl	8003694 <HAL_GetTick>
 800539c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a0:	e00b      	b.n	80053ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fe f977 	bl	8003694 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e225      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
 80053ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053be:	2202      	movs	r2, #2
 80053c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	fa93 f2a3 	rbit	r2, r3
 80053cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053d6:	2202      	movs	r2, #2
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	fa93 f2a3 	rbit	r2, r3
 80053e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053e8:	601a      	str	r2, [r3, #0]
  return result;
 80053ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f0:	fab3 f383 	clz	r3, r3
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f043 0302 	orr.w	r3, r3, #2
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d102      	bne.n	800540a <HAL_RCC_OscConfig+0xa06>
 8005404:	4b90      	ldr	r3, [pc, #576]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	e00d      	b.n	8005426 <HAL_RCC_OscConfig+0xa22>
 800540a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800540e:	2202      	movs	r2, #2
 8005410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	fa93 f2a3 	rbit	r2, r3
 800541c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	4b89      	ldr	r3, [pc, #548]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800542a:	2102      	movs	r1, #2
 800542c:	6011      	str	r1, [r2, #0]
 800542e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	fa92 f1a2 	rbit	r1, r2
 8005438:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800543c:	6011      	str	r1, [r2, #0]
  return result;
 800543e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	fab2 f282 	clz	r2, r2
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	f002 021f 	and.w	r2, r2, #31
 8005454:	2101      	movs	r1, #1
 8005456:	fa01 f202 	lsl.w	r2, r1, r2
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1a0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005460:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b77      	ldr	r3, [pc, #476]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	4a76      	ldr	r2, [pc, #472]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005472:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 81c2 	beq.w	8005804 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005480:	4b71      	ldr	r3, [pc, #452]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b08      	cmp	r3, #8
 800548a:	f000 819c 	beq.w	80057c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	2b02      	cmp	r3, #2
 8005496:	f040 8114 	bne.w	80056c2 <HAL_RCC_OscConfig+0xcbe>
 800549a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800549e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	fa93 f2a3 	rbit	r2, r3
 80054ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054b2:	601a      	str	r2, [r3, #0]
  return result;
 80054b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	461a      	mov	r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fe f8e0 	bl	8003694 <HAL_GetTick>
 80054d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d8:	e009      	b.n	80054ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054da:	f7fe f8db 	bl	8003694 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e18b      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
 80054ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	fa93 f2a3 	rbit	r2, r3
 8005502:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005506:	601a      	str	r2, [r3, #0]
  return result;
 8005508:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800550c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800550e:	fab3 f383 	clz	r3, r3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b01      	cmp	r3, #1
 8005520:	d102      	bne.n	8005528 <HAL_RCC_OscConfig+0xb24>
 8005522:	4b49      	ldr	r3, [pc, #292]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	e01b      	b.n	8005560 <HAL_RCC_OscConfig+0xb5c>
 8005528:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800552c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	fa93 f2a3 	rbit	r2, r3
 800553c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	fa93 f2a3 	rbit	r2, r3
 8005556:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005564:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005568:	6011      	str	r1, [r2, #0]
 800556a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	fa92 f1a2 	rbit	r1, r2
 8005574:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005578:	6011      	str	r1, [r2, #0]
  return result;
 800557a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	fab2 f282 	clz	r2, r2
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	f042 0220 	orr.w	r2, r2, #32
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	f002 021f 	and.w	r2, r2, #31
 8005590:	2101      	movs	r1, #1
 8005592:	fa01 f202 	lsl.w	r2, r1, r2
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d19e      	bne.n	80054da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559c:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	430b      	orrs	r3, r1
 80055b2:	4925      	ldr	r1, [pc, #148]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]
 80055b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	fa93 f2a3 	rbit	r2, r3
 80055cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055d0:	601a      	str	r2, [r3, #0]
  return result;
 80055d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d8:	fab3 f383 	clz	r3, r3
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	461a      	mov	r2, r3
 80055ea:	2301      	movs	r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ee:	f7fe f851 	bl	8003694 <HAL_GetTick>
 80055f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055f6:	e009      	b.n	800560c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fe f84c 	bl	8003694 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e0fc      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
 800560c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	fa93 f2a3 	rbit	r2, r3
 8005620:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005624:	601a      	str	r2, [r3, #0]
  return result;
 8005626:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800562a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800562c:	fab3 f383 	clz	r3, r3
 8005630:	b2db      	uxtb	r3, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <HAL_RCC_OscConfig+0xc48>
 8005640:	4b01      	ldr	r3, [pc, #4]	; (8005648 <HAL_RCC_OscConfig+0xc44>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	e01e      	b.n	8005684 <HAL_RCC_OscConfig+0xc80>
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000
 800564c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	fa93 f2a3 	rbit	r2, r3
 8005660:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800566a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	fa93 f2a3 	rbit	r2, r3
 800567a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	4b63      	ldr	r3, [pc, #396]	; (8005810 <HAL_RCC_OscConfig+0xe0c>)
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	fa92 f1a2 	rbit	r1, r2
 8005698:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800569c:	6011      	str	r1, [r2, #0]
  return result;
 800569e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	fab2 f282 	clz	r2, r2
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	f042 0220 	orr.w	r2, r2, #32
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	f002 021f 	and.w	r2, r2, #31
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d09b      	beq.n	80055f8 <HAL_RCC_OscConfig+0xbf4>
 80056c0:	e0a0      	b.n	8005804 <HAL_RCC_OscConfig+0xe00>
 80056c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	fa93 f2a3 	rbit	r2, r3
 80056d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056da:	601a      	str	r2, [r3, #0]
  return result;
 80056dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	fab3 f383 	clz	r3, r3
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fd ffcc 	bl	8003694 <HAL_GetTick>
 80056fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005700:	e009      	b.n	8005716 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005702:	f7fd ffc7 	bl	8003694 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e077      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
 8005716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800571e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	fa93 f2a3 	rbit	r2, r3
 800572a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572e:	601a      	str	r2, [r3, #0]
  return result;
 8005730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005734:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005736:	fab3 f383 	clz	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d102      	bne.n	8005750 <HAL_RCC_OscConfig+0xd4c>
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCC_OscConfig+0xe0c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	e01b      	b.n	8005788 <HAL_RCC_OscConfig+0xd84>
 8005750:	f107 0320 	add.w	r3, r7, #32
 8005754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	f107 0320 	add.w	r3, r7, #32
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	fa93 f2a3 	rbit	r2, r3
 8005764:	f107 031c 	add.w	r3, r7, #28
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	f107 0318 	add.w	r3, r7, #24
 800576e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f107 0318 	add.w	r3, r7, #24
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	fa93 f2a3 	rbit	r2, r3
 800577e:	f107 0314 	add.w	r3, r7, #20
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	4b22      	ldr	r3, [pc, #136]	; (8005810 <HAL_RCC_OscConfig+0xe0c>)
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f107 0210 	add.w	r2, r7, #16
 800578c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	f107 0210 	add.w	r2, r7, #16
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	fa92 f1a2 	rbit	r1, r2
 800579c:	f107 020c 	add.w	r2, r7, #12
 80057a0:	6011      	str	r1, [r2, #0]
  return result;
 80057a2:	f107 020c 	add.w	r2, r7, #12
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	fab2 f282 	clz	r2, r2
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	f042 0220 	orr.w	r2, r2, #32
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	f002 021f 	and.w	r2, r2, #31
 80057b8:	2101      	movs	r1, #1
 80057ba:	fa01 f202 	lsl.w	r2, r1, r2
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d19e      	bne.n	8005702 <HAL_RCC_OscConfig+0xcfe>
 80057c4:	e01e      	b.n	8005804 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e018      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <HAL_RCC_OscConfig+0xe0c>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057e4:	1d3b      	adds	r3, r7, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d108      	bne.n	8005800 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40021000 	.word	0x40021000

08005814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b09e      	sub	sp, #120	; 0x78
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e162      	b.n	8005af2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800582c:	4b90      	ldr	r3, [pc, #576]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d910      	bls.n	800585c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583a:	4b8d      	ldr	r3, [pc, #564]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f023 0207 	bic.w	r2, r3, #7
 8005842:	498b      	ldr	r1, [pc, #556]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	4313      	orrs	r3, r2
 8005848:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584a:	4b89      	ldr	r3, [pc, #548]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d001      	beq.n	800585c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e14a      	b.n	8005af2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005868:	4b82      	ldr	r3, [pc, #520]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	497f      	ldr	r1, [pc, #508]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 8005876:	4313      	orrs	r3, r2
 8005878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80dc 	beq.w	8005a40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d13c      	bne.n	800590a <HAL_RCC_ClockConfig+0xf6>
 8005890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005894:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005898:	fa93 f3a3 	rbit	r3, r3
 800589c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a0:	fab3 f383 	clz	r3, r3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_RCC_ClockConfig+0xa6>
 80058b4:	4b6f      	ldr	r3, [pc, #444]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	e00f      	b.n	80058da <HAL_RCC_ClockConfig+0xc6>
 80058ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	667b      	str	r3, [r7, #100]	; 0x64
 80058c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058cc:	663b      	str	r3, [r7, #96]	; 0x60
 80058ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d6:	4b67      	ldr	r3, [pc, #412]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058de:	65ba      	str	r2, [r7, #88]	; 0x58
 80058e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058e2:	fa92 f2a2 	rbit	r2, r2
 80058e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058ea:	fab2 f282 	clz	r2, r2
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	f042 0220 	orr.w	r2, r2, #32
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	f002 021f 	and.w	r2, r2, #31
 80058fa:	2101      	movs	r1, #1
 80058fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005900:	4013      	ands	r3, r2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d17b      	bne.n	80059fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e0f3      	b.n	8005af2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d13c      	bne.n	800598c <HAL_RCC_ClockConfig+0x178>
 8005912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005916:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591a:	fa93 f3a3 	rbit	r3, r3
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005922:	fab3 f383 	clz	r3, r3
 8005926:	b2db      	uxtb	r3, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d102      	bne.n	800593c <HAL_RCC_ClockConfig+0x128>
 8005936:	4b4f      	ldr	r3, [pc, #316]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	e00f      	b.n	800595c <HAL_RCC_ClockConfig+0x148>
 800593c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005940:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005944:	fa93 f3a3 	rbit	r3, r3
 8005948:	647b      	str	r3, [r7, #68]	; 0x44
 800594a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800594e:	643b      	str	r3, [r7, #64]	; 0x40
 8005950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005952:	fa93 f3a3 	rbit	r3, r3
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005958:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005960:	63ba      	str	r2, [r7, #56]	; 0x38
 8005962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005964:	fa92 f2a2 	rbit	r2, r2
 8005968:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800596a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800596c:	fab2 f282 	clz	r2, r2
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	f042 0220 	orr.w	r2, r2, #32
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	f002 021f 	and.w	r2, r2, #31
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f202 	lsl.w	r2, r1, r2
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d13a      	bne.n	80059fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0b2      	b.n	8005af2 <HAL_RCC_ClockConfig+0x2de>
 800598c:	2302      	movs	r3, #2
 800598e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	fa93 f3a3 	rbit	r3, r3
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599a:	fab3 f383 	clz	r3, r3
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d102      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x1a0>
 80059ae:	4b31      	ldr	r3, [pc, #196]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	e00d      	b.n	80059d0 <HAL_RCC_ClockConfig+0x1bc>
 80059b4:	2302      	movs	r3, #2
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	fa93 f3a3 	rbit	r3, r3
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
 80059c0:	2302      	movs	r3, #2
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	2202      	movs	r2, #2
 80059d2:	61ba      	str	r2, [r7, #24]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	fa92 f2a2 	rbit	r2, r2
 80059da:	617a      	str	r2, [r7, #20]
  return result;
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	fab2 f282 	clz	r2, r2
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	f042 0220 	orr.w	r2, r2, #32
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	f002 021f 	and.w	r2, r2, #31
 80059ee:	2101      	movs	r1, #1
 80059f0:	fa01 f202 	lsl.w	r2, r1, r2
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e079      	b.n	8005af2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f023 0203 	bic.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	491a      	ldr	r1, [pc, #104]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a10:	f7fd fe40 	bl	8003694 <HAL_GetTick>
 8005a14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a18:	f7fd fe3c 	bl	8003694 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e061      	b.n	8005af2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <HAL_RCC_ClockConfig+0x260>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 020c 	and.w	r2, r3, #12
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d1eb      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d214      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 0207 	bic.w	r2, r3, #7
 8005a56:	4906      	ldr	r1, [pc, #24]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <HAL_RCC_ClockConfig+0x25c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d005      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e040      	b.n	8005af2 <HAL_RCC_ClockConfig+0x2de>
 8005a70:	40022000 	.word	0x40022000
 8005a74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_RCC_ClockConfig+0x2e8>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	491a      	ldr	r1, [pc, #104]	; (8005afc <HAL_RCC_ClockConfig+0x2e8>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <HAL_RCC_ClockConfig+0x2e8>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4912      	ldr	r1, [pc, #72]	; (8005afc <HAL_RCC_ClockConfig+0x2e8>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ab6:	f000 f829 	bl	8005b0c <HAL_RCC_GetSysClockFreq>
 8005aba:	4601      	mov	r1, r0
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_RCC_ClockConfig+0x2e8>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac4:	22f0      	movs	r2, #240	; 0xf0
 8005ac6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	fa92 f2a2 	rbit	r2, r2
 8005ace:	60fa      	str	r2, [r7, #12]
  return result;
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	fab2 f282 	clz	r2, r2
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	40d3      	lsrs	r3, r2
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <HAL_RCC_ClockConfig+0x2ec>)
 8005adc:	5cd3      	ldrb	r3, [r2, r3]
 8005ade:	fa21 f303 	lsr.w	r3, r1, r3
 8005ae2:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <HAL_RCC_ClockConfig+0x2f0>)
 8005ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ae6:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <HAL_RCC_ClockConfig+0x2f4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd fd8e 	bl	800360c <HAL_InitTick>
  
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3778      	adds	r7, #120	; 0x78
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40021000 	.word	0x40021000
 8005b00:	08009be4 	.word	0x08009be4
 8005b04:	200001b8 	.word	0x200001b8
 8005b08:	200001bc 	.word	0x200001bc

08005b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b08b      	sub	sp, #44	; 0x2c
 8005b10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b26:	4b29      	ldr	r3, [pc, #164]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d002      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x30>
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d003      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x36>
 8005b3a:	e03c      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b3e:	623b      	str	r3, [r7, #32]
      break;
 8005b40:	e03c      	b.n	8005bbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	fa92 f2a2 	rbit	r2, r2
 8005b54:	607a      	str	r2, [r7, #4]
  return result;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	fab2 f282 	clz	r2, r2
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	40d3      	lsrs	r3, r2
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b66:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	220f      	movs	r2, #15
 8005b70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	fa92 f2a2 	rbit	r2, r2
 8005b78:	60fa      	str	r2, [r7, #12]
  return result;
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	fab2 f282 	clz	r2, r2
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	40d3      	lsrs	r3, r2
 8005b84:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b86:	5cd3      	ldrb	r3, [r2, r3]
 8005b88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b94:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	e004      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	623b      	str	r3, [r7, #32]
      break;
 8005bb4:	e002      	b.n	8005bbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bb8:	623b      	str	r3, [r7, #32]
      break;
 8005bba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	372c      	adds	r7, #44	; 0x2c
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	007a1200 	.word	0x007a1200
 8005bd4:	08009bfc 	.word	0x08009bfc
 8005bd8:	08009c0c 	.word	0x08009c0c
 8005bdc:	003d0900 	.word	0x003d0900

08005be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005be6:	681b      	ldr	r3, [r3, #0]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	200001b8 	.word	0x200001b8

08005bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005bfe:	f7ff ffef 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c02:	4601      	mov	r1, r0
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	fa92 f2a2 	rbit	r2, r2
 8005c18:	603a      	str	r2, [r7, #0]
  return result;
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	fab2 f282 	clz	r2, r2
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	40d3      	lsrs	r3, r2
 8005c24:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c26:	5cd3      	ldrb	r3, [r2, r3]
 8005c28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40021000 	.word	0x40021000
 8005c38:	08009bf4 	.word	0x08009bf4

08005c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c42:	f7ff ffcd 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c46:	4601      	mov	r1, r0
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	fa92 f2a2 	rbit	r2, r2
 8005c5c:	603a      	str	r2, [r7, #0]
  return result;
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	fab2 f282 	clz	r2, r2
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	40d3      	lsrs	r3, r2
 8005c68:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	08009bf4 	.word	0x08009bf4

08005c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b092      	sub	sp, #72	; 0x48
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c90:	2300      	movs	r3, #0
 8005c92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 80d4 	beq.w	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca4:	4b4e      	ldr	r3, [pc, #312]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10e      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb0:	4b4b      	ldr	r3, [pc, #300]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cba:	61d3      	str	r3, [r2, #28]
 8005cbc:	4b48      	ldr	r3, [pc, #288]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cce:	4b45      	ldr	r3, [pc, #276]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d118      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cda:	4b42      	ldr	r3, [pc, #264]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a41      	ldr	r2, [pc, #260]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ce6:	f7fd fcd5 	bl	8003694 <HAL_GetTick>
 8005cea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	e008      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cee:	f7fd fcd1 	bl	8003694 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b64      	cmp	r3, #100	; 0x64
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e169      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	4b38      	ldr	r3, [pc, #224]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d0c:	4b34      	ldr	r3, [pc, #208]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8084 	beq.w	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d07c      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d2c:	4b2c      	ldr	r3, [pc, #176]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	fa93 f3a3 	rbit	r3, r3
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d46:	fab3 f383 	clz	r3, r3
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	461a      	mov	r2, r3
 8005d56:	2301      	movs	r3, #1
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	fa93 f3a3 	rbit	r3, r3
 8005d66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d7e:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04b      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fd fc81 	bl	8003694 <HAL_GetTick>
 8005d92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d96:	f7fd fc7d 	bl	8003694 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e113      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005dac:	2302      	movs	r3, #2
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	fa93 f3a3 	rbit	r3, r3
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	2302      	movs	r3, #2
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	fa93 f3a3 	rbit	r3, r3
 8005dc2:	61fb      	str	r3, [r7, #28]
  return result;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc6:	fab3 f383 	clz	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d108      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005dda:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	e00d      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40007000 	.word	0x40007000
 8005de8:	10908100 	.word	0x10908100
 8005dec:	2302      	movs	r3, #2
 8005dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	fa93 f3a3 	rbit	r3, r3
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	4b78      	ldr	r3, [pc, #480]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	613a      	str	r2, [r7, #16]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	fa92 f2a2 	rbit	r2, r2
 8005e06:	60fa      	str	r2, [r7, #12]
  return result;
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	fab2 f282 	clz	r2, r2
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	f002 021f 	and.w	r2, r2, #31
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0b7      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e26:	4b6d      	ldr	r3, [pc, #436]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	496a      	ldr	r1, [pc, #424]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d105      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e40:	4b66      	ldr	r3, [pc, #408]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	4a65      	ldr	r2, [pc, #404]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e58:	4b60      	ldr	r3, [pc, #384]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	f023 0203 	bic.w	r2, r3, #3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	495d      	ldr	r1, [pc, #372]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e76:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	4956      	ldr	r1, [pc, #344]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e94:	4b51      	ldr	r3, [pc, #324]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	494e      	ldr	r1, [pc, #312]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb2:	4b4a      	ldr	r3, [pc, #296]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	f023 0210 	bic.w	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	4947      	ldr	r1, [pc, #284]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ed0:	4b42      	ldr	r3, [pc, #264]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	493f      	ldr	r1, [pc, #252]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eee:	4b3b      	ldr	r3, [pc, #236]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f023 0220 	bic.w	r2, r3, #32
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	4938      	ldr	r1, [pc, #224]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f0c:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	4930      	ldr	r1, [pc, #192]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f2a:	4b2c      	ldr	r3, [pc, #176]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	4929      	ldr	r1, [pc, #164]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f48:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	4921      	ldr	r1, [pc, #132]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f66:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	491a      	ldr	r1, [pc, #104]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	4912      	ldr	r1, [pc, #72]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005fa2:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	490b      	ldr	r1, [pc, #44]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	4903      	ldr	r1, [pc, #12]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3748      	adds	r7, #72	; 0x48
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40021000 	.word	0x40021000

08005fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e09d      	b.n	800612e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006002:	d009      	beq.n	8006018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	61da      	str	r2, [r3, #28]
 800600a:	e005      	b.n	8006018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fd f8ac 	bl	8003190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006058:	d902      	bls.n	8006060 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e002      	b.n	8006066 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006064:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800606e:	d007      	beq.n	8006080 <HAL_SPI_Init+0xa0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006078:	d002      	beq.n	8006080 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	ea42 0103 	orr.w	r1, r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	f003 0204 	and.w	r2, r3, #4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80060fc:	ea42 0103 	orr.w	r1, r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800611c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01a      	b.n	800617e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7fd f857 	bl	8003214 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b08a      	sub	sp, #40	; 0x28
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006194:	2301      	movs	r3, #1
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x26>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e1fb      	b.n	80065a4 <HAL_SPI_TransmitReceive+0x41e>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b4:	f7fd fa6e 	bl	8003694 <HAL_GetTick>
 80061b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061c8:	887b      	ldrh	r3, [r7, #2]
 80061ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061d0:	7efb      	ldrb	r3, [r7, #27]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d00e      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x6e>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061dc:	d106      	bne.n	80061ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_SPI_TransmitReceive+0x66>
 80061e6:	7efb      	ldrb	r3, [r7, #27]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d003      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061ec:	2302      	movs	r3, #2
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061f2:	e1cd      	b.n	8006590 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_SPI_TransmitReceive+0x80>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_SPI_TransmitReceive+0x80>
 8006200:	887b      	ldrh	r3, [r7, #2]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800620c:	e1c0      	b.n	8006590 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b04      	cmp	r3, #4
 8006218:	d003      	beq.n	8006222 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2205      	movs	r2, #5
 800621e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	887a      	ldrh	r2, [r7, #2]
 8006232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	887a      	ldrh	r2, [r7, #2]
 800623a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	887a      	ldrh	r2, [r7, #2]
 800624e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006264:	d802      	bhi.n	800626c <HAL_SPI_TransmitReceive+0xe6>
 8006266:	8a3b      	ldrh	r3, [r7, #16]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d908      	bls.n	800627e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	e007      	b.n	800628e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800628c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d007      	beq.n	80062ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062b4:	d97c      	bls.n	80063b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_SPI_TransmitReceive+0x13e>
 80062be:	8a7b      	ldrh	r3, [r7, #18]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d169      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	881a      	ldrh	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	1c9a      	adds	r2, r3, #2
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e8:	e056      	b.n	8006398 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d11b      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x1aa>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x1aa>
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	2b01      	cmp	r3, #1
 8006306:	d113      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	881a      	ldrh	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	1c9a      	adds	r2, r3, #2
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d11c      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x1f2>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	b292      	uxth	r2, r2
 8006356:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006374:	2301      	movs	r3, #1
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006378:	f7fd f98c 	bl	8003694 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006384:	429a      	cmp	r2, r3
 8006386:	d807      	bhi.n	8006398 <HAL_SPI_TransmitReceive+0x212>
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d003      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006396:	e0fb      	b.n	8006590 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1a3      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x164>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d19d      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x164>
 80063ae:	e0df      	b.n	8006570 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_SPI_TransmitReceive+0x23a>
 80063b8:	8a7b      	ldrh	r3, [r7, #18]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	f040 80cb 	bne.w	8006556 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d912      	bls.n	80063f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	1c9a      	adds	r2, r3, #2
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b02      	subs	r3, #2
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ee:	e0b2      	b.n	8006556 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	7812      	ldrb	r2, [r2, #0]
 80063fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006416:	e09e      	b.n	8006556 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d134      	bne.n	8006490 <HAL_SPI_TransmitReceive+0x30a>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02f      	beq.n	8006490 <HAL_SPI_TransmitReceive+0x30a>
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	2b01      	cmp	r3, #1
 8006434:	d12c      	bne.n	8006490 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d912      	bls.n	8006466 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b02      	subs	r3, #2
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006464:	e012      	b.n	800648c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	7812      	ldrb	r2, [r2, #0]
 8006472:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d148      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x3aa>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d042      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d923      	bls.n	80064fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	b292      	uxth	r2, r2
 80064c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	1c9a      	adds	r2, r3, #2
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b02      	subs	r3, #2
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d81f      	bhi.n	800652c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064fa:	605a      	str	r2, [r3, #4]
 80064fc:	e016      	b.n	800652c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f103 020c 	add.w	r2, r3, #12
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800652c:	2301      	movs	r3, #1
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006530:	f7fd f8b0 	bl	8003694 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653c:	429a      	cmp	r2, r3
 800653e:	d803      	bhi.n	8006548 <HAL_SPI_TransmitReceive+0x3c2>
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d102      	bne.n	800654e <HAL_SPI_TransmitReceive+0x3c8>
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006554:	e01c      	b.n	8006590 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	f47f af5b 	bne.w	8006418 <HAL_SPI_TransmitReceive+0x292>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f47f af54 	bne.w	8006418 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f945 	bl	8006804 <SPI_EndRxTxTransaction>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d006      	beq.n	800658e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	661a      	str	r2, [r3, #96]	; 0x60
 800658c:	e000      	b.n	8006590 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800658e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	; 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065ba:	b2db      	uxtb	r3, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065d8:	f7fd f85c 	bl	8003694 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065e8:	f7fd f854 	bl	8003694 <HAL_GetTick>
 80065ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ee:	4b39      	ldr	r3, [pc, #228]	; (80066d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	015b      	lsls	r3, r3, #5
 80065f4:	0d1b      	lsrs	r3, r3, #20
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	fb02 f303 	mul.w	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065fe:	e054      	b.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d050      	beq.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006608:	f7fd f844 	bl	8003694 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	429a      	cmp	r2, r3
 8006616:	d902      	bls.n	800661e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d13d      	bne.n	800669a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800662c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006636:	d111      	bne.n	800665c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006640:	d004      	beq.n	800664c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d107      	bne.n	800665c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006664:	d10f      	bne.n	8006686 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e017      	b.n	80066ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d19b      	bne.n	8006600 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	200001b8 	.word	0x200001b8

080066d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066ea:	f7fc ffd3 	bl	8003694 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	4413      	add	r3, r2
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066fa:	f7fc ffcb 	bl	8003694 <HAL_GetTick>
 80066fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006708:	4b3d      	ldr	r3, [pc, #244]	; (8006800 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	00da      	lsls	r2, r3, #3
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	0d1b      	lsrs	r3, r3, #20
 8006718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006720:	e060      	b.n	80067e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006728:	d107      	bne.n	800673a <SPI_WaitFifoStateUntilTimeout+0x62>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006738:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006740:	d050      	beq.n	80067e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006742:	f7fc ffa7 	bl	8003694 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674e:	429a      	cmp	r2, r3
 8006750:	d902      	bls.n	8006758 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	2b00      	cmp	r3, #0
 8006756:	d13d      	bne.n	80067d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006766:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006770:	d111      	bne.n	8006796 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	d004      	beq.n	8006786 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006784:	d107      	bne.n	8006796 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006794:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679e:	d10f      	bne.n	80067c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e010      	b.n	80067f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4013      	ands	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d196      	bne.n	8006722 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3728      	adds	r7, #40	; 0x28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	200001b8 	.word	0x200001b8

08006804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff ff5b 	bl	80066d8 <SPI_WaitFifoStateUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682c:	f043 0220 	orr.w	r2, r3, #32
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e027      	b.n	8006888 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	2180      	movs	r1, #128	; 0x80
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff fec0 	bl	80065c8 <SPI_WaitFlagStateUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e014      	b.n	8006888 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff ff34 	bl	80066d8 <SPI_WaitFifoStateUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687a:	f043 0220 	orr.w	r2, r3, #32
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e000      	b.n	8006888 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e040      	b.n	8006924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fc fe26 	bl	8003504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2224      	movs	r2, #36	; 0x24
 80068bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8c0 	bl	8006a54 <UART_SetConfig>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e022      	b.n	8006924 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa88 	bl	8006dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800690a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fb0f 	bl	8006f40 <UART_CheckIdleState>
 8006922:	4603      	mov	r3, r0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006940:	2b20      	cmp	r3, #32
 8006942:	f040 8082 	bne.w	8006a4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_UART_Transmit+0x26>
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e07a      	b.n	8006a4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_UART_Transmit+0x38>
 8006960:	2302      	movs	r3, #2
 8006962:	e073      	b.n	8006a4c <HAL_UART_Transmit+0x120>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2221      	movs	r2, #33	; 0x21
 8006978:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800697a:	f7fc fe8b 	bl	8003694 <HAL_GetTick>
 800697e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006998:	d108      	bne.n	80069ac <HAL_UART_Transmit+0x80>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	e003      	b.n	80069b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069bc:	e02d      	b.n	8006a1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fb02 	bl	8006fd2 <UART_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e039      	b.n	8006a4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	881a      	ldrh	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ea:	b292      	uxth	r2, r2
 80069ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	3302      	adds	r3, #2
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e008      	b.n	8006a08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	b292      	uxth	r2, r2
 8006a00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	3301      	adds	r3, #1
 8006a06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1cb      	bne.n	80069be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2140      	movs	r1, #64	; 0x40
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 face 	bl	8006fd2 <UART_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e005      	b.n	8006a4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e000      	b.n	8006a4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a4a:	2302      	movs	r3, #2
  }
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a82:	f023 030c 	bic.w	r3, r3, #12
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	6979      	ldr	r1, [r7, #20]
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4aae      	ldr	r2, [pc, #696]	; (8006d88 <UART_SetConfig+0x334>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d120      	bne.n	8006b16 <UART_SetConfig+0xc2>
 8006ad4:	4bad      	ldr	r3, [pc, #692]	; (8006d8c <UART_SetConfig+0x338>)
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d817      	bhi.n	8006b10 <UART_SetConfig+0xbc>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x94>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b05 	.word	0x08006b05
 8006af0:	08006b0b 	.word	0x08006b0b
 8006af4:	08006aff 	.word	0x08006aff
 8006af8:	2301      	movs	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e0b5      	b.n	8006c6a <UART_SetConfig+0x216>
 8006afe:	2302      	movs	r3, #2
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e0b2      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b04:	2304      	movs	r3, #4
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e0af      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e0ac      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b10:	2310      	movs	r3, #16
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e0a9      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a9d      	ldr	r2, [pc, #628]	; (8006d90 <UART_SetConfig+0x33c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d124      	bne.n	8006b6a <UART_SetConfig+0x116>
 8006b20:	4b9a      	ldr	r3, [pc, #616]	; (8006d8c <UART_SetConfig+0x338>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b2c:	d011      	beq.n	8006b52 <UART_SetConfig+0xfe>
 8006b2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b32:	d817      	bhi.n	8006b64 <UART_SetConfig+0x110>
 8006b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b38:	d011      	beq.n	8006b5e <UART_SetConfig+0x10a>
 8006b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b3e:	d811      	bhi.n	8006b64 <UART_SetConfig+0x110>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <UART_SetConfig+0xf8>
 8006b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b48:	d006      	beq.n	8006b58 <UART_SetConfig+0x104>
 8006b4a:	e00b      	b.n	8006b64 <UART_SetConfig+0x110>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e08b      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b52:	2302      	movs	r3, #2
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e088      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e085      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e082      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b64:	2310      	movs	r3, #16
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e07f      	b.n	8006c6a <UART_SetConfig+0x216>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a89      	ldr	r2, [pc, #548]	; (8006d94 <UART_SetConfig+0x340>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d124      	bne.n	8006bbe <UART_SetConfig+0x16a>
 8006b74:	4b85      	ldr	r3, [pc, #532]	; (8006d8c <UART_SetConfig+0x338>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006b7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b80:	d011      	beq.n	8006ba6 <UART_SetConfig+0x152>
 8006b82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b86:	d817      	bhi.n	8006bb8 <UART_SetConfig+0x164>
 8006b88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b8c:	d011      	beq.n	8006bb2 <UART_SetConfig+0x15e>
 8006b8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b92:	d811      	bhi.n	8006bb8 <UART_SetConfig+0x164>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <UART_SetConfig+0x14c>
 8006b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b9c:	d006      	beq.n	8006bac <UART_SetConfig+0x158>
 8006b9e:	e00b      	b.n	8006bb8 <UART_SetConfig+0x164>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e061      	b.n	8006c6a <UART_SetConfig+0x216>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e05e      	b.n	8006c6a <UART_SetConfig+0x216>
 8006bac:	2304      	movs	r3, #4
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e05b      	b.n	8006c6a <UART_SetConfig+0x216>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e058      	b.n	8006c6a <UART_SetConfig+0x216>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e055      	b.n	8006c6a <UART_SetConfig+0x216>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a75      	ldr	r2, [pc, #468]	; (8006d98 <UART_SetConfig+0x344>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d124      	bne.n	8006c12 <UART_SetConfig+0x1be>
 8006bc8:	4b70      	ldr	r3, [pc, #448]	; (8006d8c <UART_SetConfig+0x338>)
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006bd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bd4:	d011      	beq.n	8006bfa <UART_SetConfig+0x1a6>
 8006bd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bda:	d817      	bhi.n	8006c0c <UART_SetConfig+0x1b8>
 8006bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be0:	d011      	beq.n	8006c06 <UART_SetConfig+0x1b2>
 8006be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be6:	d811      	bhi.n	8006c0c <UART_SetConfig+0x1b8>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <UART_SetConfig+0x1a0>
 8006bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bf0:	d006      	beq.n	8006c00 <UART_SetConfig+0x1ac>
 8006bf2:	e00b      	b.n	8006c0c <UART_SetConfig+0x1b8>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e037      	b.n	8006c6a <UART_SetConfig+0x216>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e034      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c00:	2304      	movs	r3, #4
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e031      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c06:	2308      	movs	r3, #8
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e02e      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e02b      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a61      	ldr	r2, [pc, #388]	; (8006d9c <UART_SetConfig+0x348>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d124      	bne.n	8006c66 <UART_SetConfig+0x212>
 8006c1c:	4b5b      	ldr	r3, [pc, #364]	; (8006d8c <UART_SetConfig+0x338>)
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006c24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c28:	d011      	beq.n	8006c4e <UART_SetConfig+0x1fa>
 8006c2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c2e:	d817      	bhi.n	8006c60 <UART_SetConfig+0x20c>
 8006c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c34:	d011      	beq.n	8006c5a <UART_SetConfig+0x206>
 8006c36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c3a:	d811      	bhi.n	8006c60 <UART_SetConfig+0x20c>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <UART_SetConfig+0x1f4>
 8006c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c44:	d006      	beq.n	8006c54 <UART_SetConfig+0x200>
 8006c46:	e00b      	b.n	8006c60 <UART_SetConfig+0x20c>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e00d      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e00a      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c54:	2304      	movs	r3, #4
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e007      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e004      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c60:	2310      	movs	r3, #16
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e001      	b.n	8006c6a <UART_SetConfig+0x216>
 8006c66:	2310      	movs	r3, #16
 8006c68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c72:	d15c      	bne.n	8006d2e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006c74:	7ffb      	ldrb	r3, [r7, #31]
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d827      	bhi.n	8006cca <UART_SetConfig+0x276>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0x22c>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006cad 	.word	0x08006cad
 8006c88:	08006cb5 	.word	0x08006cb5
 8006c8c:	08006ccb 	.word	0x08006ccb
 8006c90:	08006cbb 	.word	0x08006cbb
 8006c94:	08006ccb 	.word	0x08006ccb
 8006c98:	08006ccb 	.word	0x08006ccb
 8006c9c:	08006ccb 	.word	0x08006ccb
 8006ca0:	08006cc3 	.word	0x08006cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fe ffa8 	bl	8005bf8 <HAL_RCC_GetPCLK1Freq>
 8006ca8:	61b8      	str	r0, [r7, #24]
        break;
 8006caa:	e013      	b.n	8006cd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cac:	f7fe ffc6 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 8006cb0:	61b8      	str	r0, [r7, #24]
        break;
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb4:	4b3a      	ldr	r3, [pc, #232]	; (8006da0 <UART_SetConfig+0x34c>)
 8006cb6:	61bb      	str	r3, [r7, #24]
        break;
 8006cb8:	e00c      	b.n	8006cd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cba:	f7fe ff27 	bl	8005b0c <HAL_RCC_GetSysClockFreq>
 8006cbe:	61b8      	str	r0, [r7, #24]
        break;
 8006cc0:	e008      	b.n	8006cd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc6:	61bb      	str	r3, [r7, #24]
        break;
 8006cc8:	e004      	b.n	8006cd4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8085 	beq.w	8006de6 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	005a      	lsls	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	085b      	lsrs	r3, r3, #1
 8006ce6:	441a      	add	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	d916      	bls.n	8006d28 <UART_SetConfig+0x2d4>
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d00:	d212      	bcs.n	8006d28 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f023 030f 	bic.w	r3, r3, #15
 8006d0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	085b      	lsrs	r3, r3, #1
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	89fa      	ldrh	r2, [r7, #14]
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	e05e      	b.n	8006de6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	77bb      	strb	r3, [r7, #30]
 8006d2c:	e05b      	b.n	8006de6 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d2e:	7ffb      	ldrb	r3, [r7, #31]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d837      	bhi.n	8006da4 <UART_SetConfig+0x350>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <UART_SetConfig+0x2e8>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d69 	.word	0x08006d69
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006da5 	.word	0x08006da5
 8006d4c:	08006d77 	.word	0x08006d77
 8006d50:	08006da5 	.word	0x08006da5
 8006d54:	08006da5 	.word	0x08006da5
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006d7f 	.word	0x08006d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d60:	f7fe ff4a 	bl	8005bf8 <HAL_RCC_GetPCLK1Freq>
 8006d64:	61b8      	str	r0, [r7, #24]
        break;
 8006d66:	e022      	b.n	8006dae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d68:	f7fe ff68 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 8006d6c:	61b8      	str	r0, [r7, #24]
        break;
 8006d6e:	e01e      	b.n	8006dae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <UART_SetConfig+0x34c>)
 8006d72:	61bb      	str	r3, [r7, #24]
        break;
 8006d74:	e01b      	b.n	8006dae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d76:	f7fe fec9 	bl	8005b0c <HAL_RCC_GetSysClockFreq>
 8006d7a:	61b8      	str	r0, [r7, #24]
        break;
 8006d7c:	e017      	b.n	8006dae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	61bb      	str	r3, [r7, #24]
        break;
 8006d84:	e013      	b.n	8006dae <UART_SetConfig+0x35a>
 8006d86:	bf00      	nop
 8006d88:	40013800 	.word	0x40013800
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	40004400 	.word	0x40004400
 8006d94:	40004800 	.word	0x40004800
 8006d98:	40004c00 	.word	0x40004c00
 8006d9c:	40005000 	.word	0x40005000
 8006da0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	77bb      	strb	r3, [r7, #30]
        break;
 8006dac:	bf00      	nop
    }

    if (pclk != 0U)
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d018      	beq.n	8006de6 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	085a      	lsrs	r2, r3, #1
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b0f      	cmp	r3, #15
 8006dce:	d908      	bls.n	8006de2 <UART_SetConfig+0x38e>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd6:	d204      	bcs.n	8006de2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	e001      	b.n	8006de6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006df2:	7fbb      	ldrb	r3, [r7, #30]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01a      	beq.n	8006f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efa:	d10a      	bne.n	8006f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	605a      	str	r2, [r3, #4]
  }
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f50:	f7fc fba0 	bl	8003694 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d10e      	bne.n	8006f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f82d 	bl	8006fd2 <UART_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e023      	b.n	8006fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d10e      	bne.n	8006fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f817 	bl	8006fd2 <UART_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e00d      	b.n	8006fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b09c      	sub	sp, #112	; 0x70
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe2:	e0a5      	b.n	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	f000 80a1 	beq.w	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fee:	f7fc fb51 	bl	8003694 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d302      	bcc.n	8007004 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007000:	2b00      	cmp	r3, #0
 8007002:	d13e      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007014:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007018:	667b      	str	r3, [r7, #100]	; 0x64
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007024:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007028:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e6      	bne.n	8007004 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	663b      	str	r3, [r7, #96]	; 0x60
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007056:	64ba      	str	r2, [r7, #72]	; 0x48
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800705c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e067      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d04f      	beq.n	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800709e:	d147      	bne.n	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3308      	adds	r3, #8
 80070e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070fc:	623a      	str	r2, [r7, #32]
 80070fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	69f9      	ldr	r1, [r7, #28]
 8007102:	6a3a      	ldr	r2, [r7, #32]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	61bb      	str	r3, [r7, #24]
   return(result);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e5      	bne.n	80070dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e010      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69da      	ldr	r2, [r3, #28]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	429a      	cmp	r2, r3
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	429a      	cmp	r2, r3
 800714c:	f43f af4a 	beq.w	8006fe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3770      	adds	r7, #112	; 0x70
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	200001c4 	.word	0x200001c4

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4d0d      	ldr	r5, [pc, #52]	; (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	; (80071a4 <__libc_init_array+0x3c>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2600      	movs	r6, #0
 8007174:	42a6      	cmp	r6, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4d0b      	ldr	r5, [pc, #44]	; (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	; (80071ac <__libc_init_array+0x44>)
 800717c:	f002 fd0a 	bl	8009b94 <_init>
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2600      	movs	r6, #0
 8007186:	42a6      	cmp	r6, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007190:	4798      	blx	r3
 8007192:	3601      	adds	r6, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f855 3b04 	ldr.w	r3, [r5], #4
 800719a:	4798      	blx	r3
 800719c:	3601      	adds	r6, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	08009ffc 	.word	0x08009ffc
 80071a4:	08009ffc 	.word	0x08009ffc
 80071a8:	08009ffc 	.word	0x08009ffc
 80071ac:	0800a000 	.word	0x0800a000

080071b0 <memset>:
 80071b0:	4402      	add	r2, r0
 80071b2:	4603      	mov	r3, r0
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d100      	bne.n	80071ba <memset+0xa>
 80071b8:	4770      	bx	lr
 80071ba:	f803 1b01 	strb.w	r1, [r3], #1
 80071be:	e7f9      	b.n	80071b4 <memset+0x4>

080071c0 <__cvt>:
 80071c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	ec55 4b10 	vmov	r4, r5, d0
 80071c8:	2d00      	cmp	r5, #0
 80071ca:	460e      	mov	r6, r1
 80071cc:	4619      	mov	r1, r3
 80071ce:	462b      	mov	r3, r5
 80071d0:	bfbb      	ittet	lt
 80071d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071d6:	461d      	movlt	r5, r3
 80071d8:	2300      	movge	r3, #0
 80071da:	232d      	movlt	r3, #45	; 0x2d
 80071dc:	700b      	strb	r3, [r1, #0]
 80071de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071e4:	4691      	mov	r9, r2
 80071e6:	f023 0820 	bic.w	r8, r3, #32
 80071ea:	bfbc      	itt	lt
 80071ec:	4622      	movlt	r2, r4
 80071ee:	4614      	movlt	r4, r2
 80071f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071f4:	d005      	beq.n	8007202 <__cvt+0x42>
 80071f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071fa:	d100      	bne.n	80071fe <__cvt+0x3e>
 80071fc:	3601      	adds	r6, #1
 80071fe:	2102      	movs	r1, #2
 8007200:	e000      	b.n	8007204 <__cvt+0x44>
 8007202:	2103      	movs	r1, #3
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	ab02      	add	r3, sp, #8
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	ec45 4b10 	vmov	d0, r4, r5
 8007210:	4653      	mov	r3, sl
 8007212:	4632      	mov	r2, r6
 8007214:	f000 fce4 	bl	8007be0 <_dtoa_r>
 8007218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800721c:	4607      	mov	r7, r0
 800721e:	d102      	bne.n	8007226 <__cvt+0x66>
 8007220:	f019 0f01 	tst.w	r9, #1
 8007224:	d022      	beq.n	800726c <__cvt+0xac>
 8007226:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800722a:	eb07 0906 	add.w	r9, r7, r6
 800722e:	d110      	bne.n	8007252 <__cvt+0x92>
 8007230:	783b      	ldrb	r3, [r7, #0]
 8007232:	2b30      	cmp	r3, #48	; 0x30
 8007234:	d10a      	bne.n	800724c <__cvt+0x8c>
 8007236:	2200      	movs	r2, #0
 8007238:	2300      	movs	r3, #0
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f7f9 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 8007242:	b918      	cbnz	r0, 800724c <__cvt+0x8c>
 8007244:	f1c6 0601 	rsb	r6, r6, #1
 8007248:	f8ca 6000 	str.w	r6, [sl]
 800724c:	f8da 3000 	ldr.w	r3, [sl]
 8007250:	4499      	add	r9, r3
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800725e:	b108      	cbz	r0, 8007264 <__cvt+0xa4>
 8007260:	f8cd 900c 	str.w	r9, [sp, #12]
 8007264:	2230      	movs	r2, #48	; 0x30
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	454b      	cmp	r3, r9
 800726a:	d307      	bcc.n	800727c <__cvt+0xbc>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007270:	1bdb      	subs	r3, r3, r7
 8007272:	4638      	mov	r0, r7
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	b004      	add	sp, #16
 8007278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727c:	1c59      	adds	r1, r3, #1
 800727e:	9103      	str	r1, [sp, #12]
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	e7f0      	b.n	8007266 <__cvt+0xa6>

08007284 <__exponent>:
 8007284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007286:	4603      	mov	r3, r0
 8007288:	2900      	cmp	r1, #0
 800728a:	bfb8      	it	lt
 800728c:	4249      	neglt	r1, r1
 800728e:	f803 2b02 	strb.w	r2, [r3], #2
 8007292:	bfb4      	ite	lt
 8007294:	222d      	movlt	r2, #45	; 0x2d
 8007296:	222b      	movge	r2, #43	; 0x2b
 8007298:	2909      	cmp	r1, #9
 800729a:	7042      	strb	r2, [r0, #1]
 800729c:	dd2a      	ble.n	80072f4 <__exponent+0x70>
 800729e:	f10d 0407 	add.w	r4, sp, #7
 80072a2:	46a4      	mov	ip, r4
 80072a4:	270a      	movs	r7, #10
 80072a6:	46a6      	mov	lr, r4
 80072a8:	460a      	mov	r2, r1
 80072aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80072ae:	fb07 1516 	mls	r5, r7, r6, r1
 80072b2:	3530      	adds	r5, #48	; 0x30
 80072b4:	2a63      	cmp	r2, #99	; 0x63
 80072b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80072ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072be:	4631      	mov	r1, r6
 80072c0:	dcf1      	bgt.n	80072a6 <__exponent+0x22>
 80072c2:	3130      	adds	r1, #48	; 0x30
 80072c4:	f1ae 0502 	sub.w	r5, lr, #2
 80072c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072cc:	1c44      	adds	r4, r0, #1
 80072ce:	4629      	mov	r1, r5
 80072d0:	4561      	cmp	r1, ip
 80072d2:	d30a      	bcc.n	80072ea <__exponent+0x66>
 80072d4:	f10d 0209 	add.w	r2, sp, #9
 80072d8:	eba2 020e 	sub.w	r2, r2, lr
 80072dc:	4565      	cmp	r5, ip
 80072de:	bf88      	it	hi
 80072e0:	2200      	movhi	r2, #0
 80072e2:	4413      	add	r3, r2
 80072e4:	1a18      	subs	r0, r3, r0
 80072e6:	b003      	add	sp, #12
 80072e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072f2:	e7ed      	b.n	80072d0 <__exponent+0x4c>
 80072f4:	2330      	movs	r3, #48	; 0x30
 80072f6:	3130      	adds	r1, #48	; 0x30
 80072f8:	7083      	strb	r3, [r0, #2]
 80072fa:	70c1      	strb	r1, [r0, #3]
 80072fc:	1d03      	adds	r3, r0, #4
 80072fe:	e7f1      	b.n	80072e4 <__exponent+0x60>

08007300 <_printf_float>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	ed2d 8b02 	vpush	{d8}
 8007308:	b08d      	sub	sp, #52	; 0x34
 800730a:	460c      	mov	r4, r1
 800730c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007310:	4616      	mov	r6, r2
 8007312:	461f      	mov	r7, r3
 8007314:	4605      	mov	r5, r0
 8007316:	f001 fb45 	bl	80089a4 <_localeconv_r>
 800731a:	f8d0 a000 	ldr.w	sl, [r0]
 800731e:	4650      	mov	r0, sl
 8007320:	f7f8 ff56 	bl	80001d0 <strlen>
 8007324:	2300      	movs	r3, #0
 8007326:	930a      	str	r3, [sp, #40]	; 0x28
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	f8d8 3000 	ldr.w	r3, [r8]
 8007330:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007334:	3307      	adds	r3, #7
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	f103 0208 	add.w	r2, r3, #8
 800733e:	f8c8 2000 	str.w	r2, [r8]
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800734a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800734e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007352:	9307      	str	r3, [sp, #28]
 8007354:	f8cd 8018 	str.w	r8, [sp, #24]
 8007358:	ee08 0a10 	vmov	s16, r0
 800735c:	4b9f      	ldr	r3, [pc, #636]	; (80075dc <_printf_float+0x2dc>)
 800735e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	f7f9 fbe1 	bl	8000b2c <__aeabi_dcmpun>
 800736a:	bb88      	cbnz	r0, 80073d0 <_printf_float+0xd0>
 800736c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007370:	4b9a      	ldr	r3, [pc, #616]	; (80075dc <_printf_float+0x2dc>)
 8007372:	f04f 32ff 	mov.w	r2, #4294967295
 8007376:	f7f9 fbbb 	bl	8000af0 <__aeabi_dcmple>
 800737a:	bb48      	cbnz	r0, 80073d0 <_printf_float+0xd0>
 800737c:	2200      	movs	r2, #0
 800737e:	2300      	movs	r3, #0
 8007380:	4640      	mov	r0, r8
 8007382:	4649      	mov	r1, r9
 8007384:	f7f9 fbaa 	bl	8000adc <__aeabi_dcmplt>
 8007388:	b110      	cbz	r0, 8007390 <_printf_float+0x90>
 800738a:	232d      	movs	r3, #45	; 0x2d
 800738c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007390:	4b93      	ldr	r3, [pc, #588]	; (80075e0 <_printf_float+0x2e0>)
 8007392:	4894      	ldr	r0, [pc, #592]	; (80075e4 <_printf_float+0x2e4>)
 8007394:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007398:	bf94      	ite	ls
 800739a:	4698      	movls	r8, r3
 800739c:	4680      	movhi	r8, r0
 800739e:	2303      	movs	r3, #3
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	f023 0204 	bic.w	r2, r3, #4
 80073a8:	6022      	str	r2, [r4, #0]
 80073aa:	f04f 0900 	mov.w	r9, #0
 80073ae:	9700      	str	r7, [sp, #0]
 80073b0:	4633      	mov	r3, r6
 80073b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073b4:	4621      	mov	r1, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 f9d8 	bl	800776c <_printf_common>
 80073bc:	3001      	adds	r0, #1
 80073be:	f040 8090 	bne.w	80074e2 <_printf_float+0x1e2>
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	b00d      	add	sp, #52	; 0x34
 80073c8:	ecbd 8b02 	vpop	{d8}
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f7f9 fba8 	bl	8000b2c <__aeabi_dcmpun>
 80073dc:	b140      	cbz	r0, 80073f0 <_printf_float+0xf0>
 80073de:	464b      	mov	r3, r9
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfbc      	itt	lt
 80073e4:	232d      	movlt	r3, #45	; 0x2d
 80073e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073ea:	487f      	ldr	r0, [pc, #508]	; (80075e8 <_printf_float+0x2e8>)
 80073ec:	4b7f      	ldr	r3, [pc, #508]	; (80075ec <_printf_float+0x2ec>)
 80073ee:	e7d1      	b.n	8007394 <_printf_float+0x94>
 80073f0:	6863      	ldr	r3, [r4, #4]
 80073f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073f6:	9206      	str	r2, [sp, #24]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	d13f      	bne.n	800747c <_printf_float+0x17c>
 80073fc:	2306      	movs	r3, #6
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	9b05      	ldr	r3, [sp, #20]
 8007402:	6861      	ldr	r1, [r4, #4]
 8007404:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007408:	2300      	movs	r3, #0
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	ab0a      	add	r3, sp, #40	; 0x28
 800740e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007412:	ab09      	add	r3, sp, #36	; 0x24
 8007414:	ec49 8b10 	vmov	d0, r8, r9
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	6022      	str	r2, [r4, #0]
 800741c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007420:	4628      	mov	r0, r5
 8007422:	f7ff fecd 	bl	80071c0 <__cvt>
 8007426:	9b06      	ldr	r3, [sp, #24]
 8007428:	9909      	ldr	r1, [sp, #36]	; 0x24
 800742a:	2b47      	cmp	r3, #71	; 0x47
 800742c:	4680      	mov	r8, r0
 800742e:	d108      	bne.n	8007442 <_printf_float+0x142>
 8007430:	1cc8      	adds	r0, r1, #3
 8007432:	db02      	blt.n	800743a <_printf_float+0x13a>
 8007434:	6863      	ldr	r3, [r4, #4]
 8007436:	4299      	cmp	r1, r3
 8007438:	dd41      	ble.n	80074be <_printf_float+0x1be>
 800743a:	f1ab 0b02 	sub.w	fp, fp, #2
 800743e:	fa5f fb8b 	uxtb.w	fp, fp
 8007442:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007446:	d820      	bhi.n	800748a <_printf_float+0x18a>
 8007448:	3901      	subs	r1, #1
 800744a:	465a      	mov	r2, fp
 800744c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007450:	9109      	str	r1, [sp, #36]	; 0x24
 8007452:	f7ff ff17 	bl	8007284 <__exponent>
 8007456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007458:	1813      	adds	r3, r2, r0
 800745a:	2a01      	cmp	r2, #1
 800745c:	4681      	mov	r9, r0
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	dc02      	bgt.n	8007468 <_printf_float+0x168>
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	07d2      	lsls	r2, r2, #31
 8007466:	d501      	bpl.n	800746c <_printf_float+0x16c>
 8007468:	3301      	adds	r3, #1
 800746a:	6123      	str	r3, [r4, #16]
 800746c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007470:	2b00      	cmp	r3, #0
 8007472:	d09c      	beq.n	80073ae <_printf_float+0xae>
 8007474:	232d      	movs	r3, #45	; 0x2d
 8007476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747a:	e798      	b.n	80073ae <_printf_float+0xae>
 800747c:	9a06      	ldr	r2, [sp, #24]
 800747e:	2a47      	cmp	r2, #71	; 0x47
 8007480:	d1be      	bne.n	8007400 <_printf_float+0x100>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1bc      	bne.n	8007400 <_printf_float+0x100>
 8007486:	2301      	movs	r3, #1
 8007488:	e7b9      	b.n	80073fe <_printf_float+0xfe>
 800748a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800748e:	d118      	bne.n	80074c2 <_printf_float+0x1c2>
 8007490:	2900      	cmp	r1, #0
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	dd0b      	ble.n	80074ae <_printf_float+0x1ae>
 8007496:	6121      	str	r1, [r4, #16]
 8007498:	b913      	cbnz	r3, 80074a0 <_printf_float+0x1a0>
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	07d0      	lsls	r0, r2, #31
 800749e:	d502      	bpl.n	80074a6 <_printf_float+0x1a6>
 80074a0:	3301      	adds	r3, #1
 80074a2:	440b      	add	r3, r1
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80074a8:	f04f 0900 	mov.w	r9, #0
 80074ac:	e7de      	b.n	800746c <_printf_float+0x16c>
 80074ae:	b913      	cbnz	r3, 80074b6 <_printf_float+0x1b6>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	07d2      	lsls	r2, r2, #31
 80074b4:	d501      	bpl.n	80074ba <_printf_float+0x1ba>
 80074b6:	3302      	adds	r3, #2
 80074b8:	e7f4      	b.n	80074a4 <_printf_float+0x1a4>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7f2      	b.n	80074a4 <_printf_float+0x1a4>
 80074be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c4:	4299      	cmp	r1, r3
 80074c6:	db05      	blt.n	80074d4 <_printf_float+0x1d4>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	6121      	str	r1, [r4, #16]
 80074cc:	07d8      	lsls	r0, r3, #31
 80074ce:	d5ea      	bpl.n	80074a6 <_printf_float+0x1a6>
 80074d0:	1c4b      	adds	r3, r1, #1
 80074d2:	e7e7      	b.n	80074a4 <_printf_float+0x1a4>
 80074d4:	2900      	cmp	r1, #0
 80074d6:	bfd4      	ite	le
 80074d8:	f1c1 0202 	rsble	r2, r1, #2
 80074dc:	2201      	movgt	r2, #1
 80074de:	4413      	add	r3, r2
 80074e0:	e7e0      	b.n	80074a4 <_printf_float+0x1a4>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	055a      	lsls	r2, r3, #21
 80074e6:	d407      	bmi.n	80074f8 <_printf_float+0x1f8>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	4642      	mov	r2, r8
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	d12c      	bne.n	8007550 <_printf_float+0x250>
 80074f6:	e764      	b.n	80073c2 <_printf_float+0xc2>
 80074f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074fc:	f240 80e0 	bls.w	80076c0 <_printf_float+0x3c0>
 8007500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	f7f9 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800750c:	2800      	cmp	r0, #0
 800750e:	d034      	beq.n	800757a <_printf_float+0x27a>
 8007510:	4a37      	ldr	r2, [pc, #220]	; (80075f0 <_printf_float+0x2f0>)
 8007512:	2301      	movs	r3, #1
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	f43f af51 	beq.w	80073c2 <_printf_float+0xc2>
 8007520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007524:	429a      	cmp	r2, r3
 8007526:	db02      	blt.n	800752e <_printf_float+0x22e>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	07d8      	lsls	r0, r3, #31
 800752c:	d510      	bpl.n	8007550 <_printf_float+0x250>
 800752e:	ee18 3a10 	vmov	r3, s16
 8007532:	4652      	mov	r2, sl
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f af41 	beq.w	80073c2 <_printf_float+0xc2>
 8007540:	f04f 0800 	mov.w	r8, #0
 8007544:	f104 091a 	add.w	r9, r4, #26
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	3b01      	subs	r3, #1
 800754c:	4543      	cmp	r3, r8
 800754e:	dc09      	bgt.n	8007564 <_printf_float+0x264>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	079b      	lsls	r3, r3, #30
 8007554:	f100 8105 	bmi.w	8007762 <_printf_float+0x462>
 8007558:	68e0      	ldr	r0, [r4, #12]
 800755a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755c:	4298      	cmp	r0, r3
 800755e:	bfb8      	it	lt
 8007560:	4618      	movlt	r0, r3
 8007562:	e730      	b.n	80073c6 <_printf_float+0xc6>
 8007564:	2301      	movs	r3, #1
 8007566:	464a      	mov	r2, r9
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f af27 	beq.w	80073c2 <_printf_float+0xc2>
 8007574:	f108 0801 	add.w	r8, r8, #1
 8007578:	e7e6      	b.n	8007548 <_printf_float+0x248>
 800757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	dc39      	bgt.n	80075f4 <_printf_float+0x2f4>
 8007580:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <_printf_float+0x2f0>)
 8007582:	2301      	movs	r3, #1
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	f43f af19 	beq.w	80073c2 <_printf_float+0xc2>
 8007590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007594:	4313      	orrs	r3, r2
 8007596:	d102      	bne.n	800759e <_printf_float+0x29e>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d5d8      	bpl.n	8007550 <_printf_float+0x250>
 800759e:	ee18 3a10 	vmov	r3, s16
 80075a2:	4652      	mov	r2, sl
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f af09 	beq.w	80073c2 <_printf_float+0xc2>
 80075b0:	f04f 0900 	mov.w	r9, #0
 80075b4:	f104 0a1a 	add.w	sl, r4, #26
 80075b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ba:	425b      	negs	r3, r3
 80075bc:	454b      	cmp	r3, r9
 80075be:	dc01      	bgt.n	80075c4 <_printf_float+0x2c4>
 80075c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c2:	e792      	b.n	80074ea <_printf_float+0x1ea>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4652      	mov	r2, sl
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f aef7 	beq.w	80073c2 <_printf_float+0xc2>
 80075d4:	f109 0901 	add.w	r9, r9, #1
 80075d8:	e7ee      	b.n	80075b8 <_printf_float+0x2b8>
 80075da:	bf00      	nop
 80075dc:	7fefffff 	.word	0x7fefffff
 80075e0:	08009c20 	.word	0x08009c20
 80075e4:	08009c24 	.word	0x08009c24
 80075e8:	08009c2c 	.word	0x08009c2c
 80075ec:	08009c28 	.word	0x08009c28
 80075f0:	08009c30 	.word	0x08009c30
 80075f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075f8:	429a      	cmp	r2, r3
 80075fa:	bfa8      	it	ge
 80075fc:	461a      	movge	r2, r3
 80075fe:	2a00      	cmp	r2, #0
 8007600:	4691      	mov	r9, r2
 8007602:	dc37      	bgt.n	8007674 <_printf_float+0x374>
 8007604:	f04f 0b00 	mov.w	fp, #0
 8007608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760c:	f104 021a 	add.w	r2, r4, #26
 8007610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	eba3 0309 	sub.w	r3, r3, r9
 8007618:	455b      	cmp	r3, fp
 800761a:	dc33      	bgt.n	8007684 <_printf_float+0x384>
 800761c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007620:	429a      	cmp	r2, r3
 8007622:	db3b      	blt.n	800769c <_printf_float+0x39c>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d438      	bmi.n	800769c <_printf_float+0x39c>
 800762a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800762c:	9b05      	ldr	r3, [sp, #20]
 800762e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	eba2 0901 	sub.w	r9, r2, r1
 8007636:	4599      	cmp	r9, r3
 8007638:	bfa8      	it	ge
 800763a:	4699      	movge	r9, r3
 800763c:	f1b9 0f00 	cmp.w	r9, #0
 8007640:	dc35      	bgt.n	80076ae <_printf_float+0x3ae>
 8007642:	f04f 0800 	mov.w	r8, #0
 8007646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800764a:	f104 0a1a 	add.w	sl, r4, #26
 800764e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	eba3 0309 	sub.w	r3, r3, r9
 8007658:	4543      	cmp	r3, r8
 800765a:	f77f af79 	ble.w	8007550 <_printf_float+0x250>
 800765e:	2301      	movs	r3, #1
 8007660:	4652      	mov	r2, sl
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	f43f aeaa 	beq.w	80073c2 <_printf_float+0xc2>
 800766e:	f108 0801 	add.w	r8, r8, #1
 8007672:	e7ec      	b.n	800764e <_printf_float+0x34e>
 8007674:	4613      	mov	r3, r2
 8007676:	4631      	mov	r1, r6
 8007678:	4642      	mov	r2, r8
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	d1c0      	bne.n	8007604 <_printf_float+0x304>
 8007682:	e69e      	b.n	80073c2 <_printf_float+0xc2>
 8007684:	2301      	movs	r3, #1
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	9205      	str	r2, [sp, #20]
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f ae97 	beq.w	80073c2 <_printf_float+0xc2>
 8007694:	9a05      	ldr	r2, [sp, #20]
 8007696:	f10b 0b01 	add.w	fp, fp, #1
 800769a:	e7b9      	b.n	8007610 <_printf_float+0x310>
 800769c:	ee18 3a10 	vmov	r3, s16
 80076a0:	4652      	mov	r2, sl
 80076a2:	4631      	mov	r1, r6
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b8      	blx	r7
 80076a8:	3001      	adds	r0, #1
 80076aa:	d1be      	bne.n	800762a <_printf_float+0x32a>
 80076ac:	e689      	b.n	80073c2 <_printf_float+0xc2>
 80076ae:	9a05      	ldr	r2, [sp, #20]
 80076b0:	464b      	mov	r3, r9
 80076b2:	4442      	add	r2, r8
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	d1c1      	bne.n	8007642 <_printf_float+0x342>
 80076be:	e680      	b.n	80073c2 <_printf_float+0xc2>
 80076c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c2:	2a01      	cmp	r2, #1
 80076c4:	dc01      	bgt.n	80076ca <_printf_float+0x3ca>
 80076c6:	07db      	lsls	r3, r3, #31
 80076c8:	d538      	bpl.n	800773c <_printf_float+0x43c>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f ae74 	beq.w	80073c2 <_printf_float+0xc2>
 80076da:	ee18 3a10 	vmov	r3, s16
 80076de:	4652      	mov	r2, sl
 80076e0:	4631      	mov	r1, r6
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	f43f ae6b 	beq.w	80073c2 <_printf_float+0xc2>
 80076ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076f0:	2200      	movs	r2, #0
 80076f2:	2300      	movs	r3, #0
 80076f4:	f7f9 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f8:	b9d8      	cbnz	r0, 8007732 <_printf_float+0x432>
 80076fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fc:	f108 0201 	add.w	r2, r8, #1
 8007700:	3b01      	subs	r3, #1
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	d10e      	bne.n	800772a <_printf_float+0x42a>
 800770c:	e659      	b.n	80073c2 <_printf_float+0xc2>
 800770e:	2301      	movs	r3, #1
 8007710:	4652      	mov	r2, sl
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f ae52 	beq.w	80073c2 <_printf_float+0xc2>
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007724:	3b01      	subs	r3, #1
 8007726:	4543      	cmp	r3, r8
 8007728:	dcf1      	bgt.n	800770e <_printf_float+0x40e>
 800772a:	464b      	mov	r3, r9
 800772c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007730:	e6dc      	b.n	80074ec <_printf_float+0x1ec>
 8007732:	f04f 0800 	mov.w	r8, #0
 8007736:	f104 0a1a 	add.w	sl, r4, #26
 800773a:	e7f2      	b.n	8007722 <_printf_float+0x422>
 800773c:	2301      	movs	r3, #1
 800773e:	4642      	mov	r2, r8
 8007740:	e7df      	b.n	8007702 <_printf_float+0x402>
 8007742:	2301      	movs	r3, #1
 8007744:	464a      	mov	r2, r9
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f ae38 	beq.w	80073c2 <_printf_float+0xc2>
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800775a:	1a5b      	subs	r3, r3, r1
 800775c:	4543      	cmp	r3, r8
 800775e:	dcf0      	bgt.n	8007742 <_printf_float+0x442>
 8007760:	e6fa      	b.n	8007558 <_printf_float+0x258>
 8007762:	f04f 0800 	mov.w	r8, #0
 8007766:	f104 0919 	add.w	r9, r4, #25
 800776a:	e7f4      	b.n	8007756 <_printf_float+0x456>

0800776c <_printf_common>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	4616      	mov	r6, r2
 8007772:	4699      	mov	r9, r3
 8007774:	688a      	ldr	r2, [r1, #8]
 8007776:	690b      	ldr	r3, [r1, #16]
 8007778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800777c:	4293      	cmp	r3, r2
 800777e:	bfb8      	it	lt
 8007780:	4613      	movlt	r3, r2
 8007782:	6033      	str	r3, [r6, #0]
 8007784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007788:	4607      	mov	r7, r0
 800778a:	460c      	mov	r4, r1
 800778c:	b10a      	cbz	r2, 8007792 <_printf_common+0x26>
 800778e:	3301      	adds	r3, #1
 8007790:	6033      	str	r3, [r6, #0]
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	0699      	lsls	r1, r3, #26
 8007796:	bf42      	ittt	mi
 8007798:	6833      	ldrmi	r3, [r6, #0]
 800779a:	3302      	addmi	r3, #2
 800779c:	6033      	strmi	r3, [r6, #0]
 800779e:	6825      	ldr	r5, [r4, #0]
 80077a0:	f015 0506 	ands.w	r5, r5, #6
 80077a4:	d106      	bne.n	80077b4 <_printf_common+0x48>
 80077a6:	f104 0a19 	add.w	sl, r4, #25
 80077aa:	68e3      	ldr	r3, [r4, #12]
 80077ac:	6832      	ldr	r2, [r6, #0]
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	dc26      	bgt.n	8007802 <_printf_common+0x96>
 80077b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077b8:	1e13      	subs	r3, r2, #0
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	bf18      	it	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	0692      	lsls	r2, r2, #26
 80077c2:	d42b      	bmi.n	800781c <_printf_common+0xb0>
 80077c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077c8:	4649      	mov	r1, r9
 80077ca:	4638      	mov	r0, r7
 80077cc:	47c0      	blx	r8
 80077ce:	3001      	adds	r0, #1
 80077d0:	d01e      	beq.n	8007810 <_printf_common+0xa4>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	68e5      	ldr	r5, [r4, #12]
 80077d6:	6832      	ldr	r2, [r6, #0]
 80077d8:	f003 0306 	and.w	r3, r3, #6
 80077dc:	2b04      	cmp	r3, #4
 80077de:	bf08      	it	eq
 80077e0:	1aad      	subeq	r5, r5, r2
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	6922      	ldr	r2, [r4, #16]
 80077e6:	bf0c      	ite	eq
 80077e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ec:	2500      	movne	r5, #0
 80077ee:	4293      	cmp	r3, r2
 80077f0:	bfc4      	itt	gt
 80077f2:	1a9b      	subgt	r3, r3, r2
 80077f4:	18ed      	addgt	r5, r5, r3
 80077f6:	2600      	movs	r6, #0
 80077f8:	341a      	adds	r4, #26
 80077fa:	42b5      	cmp	r5, r6
 80077fc:	d11a      	bne.n	8007834 <_printf_common+0xc8>
 80077fe:	2000      	movs	r0, #0
 8007800:	e008      	b.n	8007814 <_printf_common+0xa8>
 8007802:	2301      	movs	r3, #1
 8007804:	4652      	mov	r2, sl
 8007806:	4649      	mov	r1, r9
 8007808:	4638      	mov	r0, r7
 800780a:	47c0      	blx	r8
 800780c:	3001      	adds	r0, #1
 800780e:	d103      	bne.n	8007818 <_printf_common+0xac>
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007818:	3501      	adds	r5, #1
 800781a:	e7c6      	b.n	80077aa <_printf_common+0x3e>
 800781c:	18e1      	adds	r1, r4, r3
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	2030      	movs	r0, #48	; 0x30
 8007822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007826:	4422      	add	r2, r4
 8007828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800782c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007830:	3302      	adds	r3, #2
 8007832:	e7c7      	b.n	80077c4 <_printf_common+0x58>
 8007834:	2301      	movs	r3, #1
 8007836:	4622      	mov	r2, r4
 8007838:	4649      	mov	r1, r9
 800783a:	4638      	mov	r0, r7
 800783c:	47c0      	blx	r8
 800783e:	3001      	adds	r0, #1
 8007840:	d0e6      	beq.n	8007810 <_printf_common+0xa4>
 8007842:	3601      	adds	r6, #1
 8007844:	e7d9      	b.n	80077fa <_printf_common+0x8e>
	...

08007848 <_printf_i>:
 8007848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	4691      	mov	r9, r2
 8007850:	7e27      	ldrb	r7, [r4, #24]
 8007852:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007854:	2f78      	cmp	r7, #120	; 0x78
 8007856:	4680      	mov	r8, r0
 8007858:	469a      	mov	sl, r3
 800785a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800785e:	d807      	bhi.n	8007870 <_printf_i+0x28>
 8007860:	2f62      	cmp	r7, #98	; 0x62
 8007862:	d80a      	bhi.n	800787a <_printf_i+0x32>
 8007864:	2f00      	cmp	r7, #0
 8007866:	f000 80d8 	beq.w	8007a1a <_printf_i+0x1d2>
 800786a:	2f58      	cmp	r7, #88	; 0x58
 800786c:	f000 80a3 	beq.w	80079b6 <_printf_i+0x16e>
 8007870:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007878:	e03a      	b.n	80078f0 <_printf_i+0xa8>
 800787a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800787e:	2b15      	cmp	r3, #21
 8007880:	d8f6      	bhi.n	8007870 <_printf_i+0x28>
 8007882:	a001      	add	r0, pc, #4	; (adr r0, 8007888 <_printf_i+0x40>)
 8007884:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007888:	080078e1 	.word	0x080078e1
 800788c:	080078f5 	.word	0x080078f5
 8007890:	08007871 	.word	0x08007871
 8007894:	08007871 	.word	0x08007871
 8007898:	08007871 	.word	0x08007871
 800789c:	08007871 	.word	0x08007871
 80078a0:	080078f5 	.word	0x080078f5
 80078a4:	08007871 	.word	0x08007871
 80078a8:	08007871 	.word	0x08007871
 80078ac:	08007871 	.word	0x08007871
 80078b0:	08007871 	.word	0x08007871
 80078b4:	08007a01 	.word	0x08007a01
 80078b8:	08007925 	.word	0x08007925
 80078bc:	080079e3 	.word	0x080079e3
 80078c0:	08007871 	.word	0x08007871
 80078c4:	08007871 	.word	0x08007871
 80078c8:	08007a23 	.word	0x08007a23
 80078cc:	08007871 	.word	0x08007871
 80078d0:	08007925 	.word	0x08007925
 80078d4:	08007871 	.word	0x08007871
 80078d8:	08007871 	.word	0x08007871
 80078dc:	080079eb 	.word	0x080079eb
 80078e0:	680b      	ldr	r3, [r1, #0]
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	600a      	str	r2, [r1, #0]
 80078e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078f0:	2301      	movs	r3, #1
 80078f2:	e0a3      	b.n	8007a3c <_printf_i+0x1f4>
 80078f4:	6825      	ldr	r5, [r4, #0]
 80078f6:	6808      	ldr	r0, [r1, #0]
 80078f8:	062e      	lsls	r6, r5, #24
 80078fa:	f100 0304 	add.w	r3, r0, #4
 80078fe:	d50a      	bpl.n	8007916 <_printf_i+0xce>
 8007900:	6805      	ldr	r5, [r0, #0]
 8007902:	600b      	str	r3, [r1, #0]
 8007904:	2d00      	cmp	r5, #0
 8007906:	da03      	bge.n	8007910 <_printf_i+0xc8>
 8007908:	232d      	movs	r3, #45	; 0x2d
 800790a:	426d      	negs	r5, r5
 800790c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007910:	485e      	ldr	r0, [pc, #376]	; (8007a8c <_printf_i+0x244>)
 8007912:	230a      	movs	r3, #10
 8007914:	e019      	b.n	800794a <_printf_i+0x102>
 8007916:	f015 0f40 	tst.w	r5, #64	; 0x40
 800791a:	6805      	ldr	r5, [r0, #0]
 800791c:	600b      	str	r3, [r1, #0]
 800791e:	bf18      	it	ne
 8007920:	b22d      	sxthne	r5, r5
 8007922:	e7ef      	b.n	8007904 <_printf_i+0xbc>
 8007924:	680b      	ldr	r3, [r1, #0]
 8007926:	6825      	ldr	r5, [r4, #0]
 8007928:	1d18      	adds	r0, r3, #4
 800792a:	6008      	str	r0, [r1, #0]
 800792c:	0628      	lsls	r0, r5, #24
 800792e:	d501      	bpl.n	8007934 <_printf_i+0xec>
 8007930:	681d      	ldr	r5, [r3, #0]
 8007932:	e002      	b.n	800793a <_printf_i+0xf2>
 8007934:	0669      	lsls	r1, r5, #25
 8007936:	d5fb      	bpl.n	8007930 <_printf_i+0xe8>
 8007938:	881d      	ldrh	r5, [r3, #0]
 800793a:	4854      	ldr	r0, [pc, #336]	; (8007a8c <_printf_i+0x244>)
 800793c:	2f6f      	cmp	r7, #111	; 0x6f
 800793e:	bf0c      	ite	eq
 8007940:	2308      	moveq	r3, #8
 8007942:	230a      	movne	r3, #10
 8007944:	2100      	movs	r1, #0
 8007946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800794a:	6866      	ldr	r6, [r4, #4]
 800794c:	60a6      	str	r6, [r4, #8]
 800794e:	2e00      	cmp	r6, #0
 8007950:	bfa2      	ittt	ge
 8007952:	6821      	ldrge	r1, [r4, #0]
 8007954:	f021 0104 	bicge.w	r1, r1, #4
 8007958:	6021      	strge	r1, [r4, #0]
 800795a:	b90d      	cbnz	r5, 8007960 <_printf_i+0x118>
 800795c:	2e00      	cmp	r6, #0
 800795e:	d04d      	beq.n	80079fc <_printf_i+0x1b4>
 8007960:	4616      	mov	r6, r2
 8007962:	fbb5 f1f3 	udiv	r1, r5, r3
 8007966:	fb03 5711 	mls	r7, r3, r1, r5
 800796a:	5dc7      	ldrb	r7, [r0, r7]
 800796c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007970:	462f      	mov	r7, r5
 8007972:	42bb      	cmp	r3, r7
 8007974:	460d      	mov	r5, r1
 8007976:	d9f4      	bls.n	8007962 <_printf_i+0x11a>
 8007978:	2b08      	cmp	r3, #8
 800797a:	d10b      	bne.n	8007994 <_printf_i+0x14c>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	07df      	lsls	r7, r3, #31
 8007980:	d508      	bpl.n	8007994 <_printf_i+0x14c>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	6861      	ldr	r1, [r4, #4]
 8007986:	4299      	cmp	r1, r3
 8007988:	bfde      	ittt	le
 800798a:	2330      	movle	r3, #48	; 0x30
 800798c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007990:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007994:	1b92      	subs	r2, r2, r6
 8007996:	6122      	str	r2, [r4, #16]
 8007998:	f8cd a000 	str.w	sl, [sp]
 800799c:	464b      	mov	r3, r9
 800799e:	aa03      	add	r2, sp, #12
 80079a0:	4621      	mov	r1, r4
 80079a2:	4640      	mov	r0, r8
 80079a4:	f7ff fee2 	bl	800776c <_printf_common>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d14c      	bne.n	8007a46 <_printf_i+0x1fe>
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	b004      	add	sp, #16
 80079b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b6:	4835      	ldr	r0, [pc, #212]	; (8007a8c <_printf_i+0x244>)
 80079b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	680e      	ldr	r6, [r1, #0]
 80079c0:	061f      	lsls	r7, r3, #24
 80079c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80079c6:	600e      	str	r6, [r1, #0]
 80079c8:	d514      	bpl.n	80079f4 <_printf_i+0x1ac>
 80079ca:	07d9      	lsls	r1, r3, #31
 80079cc:	bf44      	itt	mi
 80079ce:	f043 0320 	orrmi.w	r3, r3, #32
 80079d2:	6023      	strmi	r3, [r4, #0]
 80079d4:	b91d      	cbnz	r5, 80079de <_printf_i+0x196>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	f023 0320 	bic.w	r3, r3, #32
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	2310      	movs	r3, #16
 80079e0:	e7b0      	b.n	8007944 <_printf_i+0xfc>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	f043 0320 	orr.w	r3, r3, #32
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	2378      	movs	r3, #120	; 0x78
 80079ec:	4828      	ldr	r0, [pc, #160]	; (8007a90 <_printf_i+0x248>)
 80079ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079f2:	e7e3      	b.n	80079bc <_printf_i+0x174>
 80079f4:	065e      	lsls	r6, r3, #25
 80079f6:	bf48      	it	mi
 80079f8:	b2ad      	uxthmi	r5, r5
 80079fa:	e7e6      	b.n	80079ca <_printf_i+0x182>
 80079fc:	4616      	mov	r6, r2
 80079fe:	e7bb      	b.n	8007978 <_printf_i+0x130>
 8007a00:	680b      	ldr	r3, [r1, #0]
 8007a02:	6826      	ldr	r6, [r4, #0]
 8007a04:	6960      	ldr	r0, [r4, #20]
 8007a06:	1d1d      	adds	r5, r3, #4
 8007a08:	600d      	str	r5, [r1, #0]
 8007a0a:	0635      	lsls	r5, r6, #24
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	d501      	bpl.n	8007a14 <_printf_i+0x1cc>
 8007a10:	6018      	str	r0, [r3, #0]
 8007a12:	e002      	b.n	8007a1a <_printf_i+0x1d2>
 8007a14:	0671      	lsls	r1, r6, #25
 8007a16:	d5fb      	bpl.n	8007a10 <_printf_i+0x1c8>
 8007a18:	8018      	strh	r0, [r3, #0]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	4616      	mov	r6, r2
 8007a20:	e7ba      	b.n	8007998 <_printf_i+0x150>
 8007a22:	680b      	ldr	r3, [r1, #0]
 8007a24:	1d1a      	adds	r2, r3, #4
 8007a26:	600a      	str	r2, [r1, #0]
 8007a28:	681e      	ldr	r6, [r3, #0]
 8007a2a:	6862      	ldr	r2, [r4, #4]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7f8 fbd6 	bl	80001e0 <memchr>
 8007a34:	b108      	cbz	r0, 8007a3a <_printf_i+0x1f2>
 8007a36:	1b80      	subs	r0, r0, r6
 8007a38:	6060      	str	r0, [r4, #4]
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	6123      	str	r3, [r4, #16]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a44:	e7a8      	b.n	8007998 <_printf_i+0x150>
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	4632      	mov	r2, r6
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	47d0      	blx	sl
 8007a50:	3001      	adds	r0, #1
 8007a52:	d0ab      	beq.n	80079ac <_printf_i+0x164>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	079b      	lsls	r3, r3, #30
 8007a58:	d413      	bmi.n	8007a82 <_printf_i+0x23a>
 8007a5a:	68e0      	ldr	r0, [r4, #12]
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	4298      	cmp	r0, r3
 8007a60:	bfb8      	it	lt
 8007a62:	4618      	movlt	r0, r3
 8007a64:	e7a4      	b.n	80079b0 <_printf_i+0x168>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4632      	mov	r2, r6
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	47d0      	blx	sl
 8007a70:	3001      	adds	r0, #1
 8007a72:	d09b      	beq.n	80079ac <_printf_i+0x164>
 8007a74:	3501      	adds	r5, #1
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	9903      	ldr	r1, [sp, #12]
 8007a7a:	1a5b      	subs	r3, r3, r1
 8007a7c:	42ab      	cmp	r3, r5
 8007a7e:	dcf2      	bgt.n	8007a66 <_printf_i+0x21e>
 8007a80:	e7eb      	b.n	8007a5a <_printf_i+0x212>
 8007a82:	2500      	movs	r5, #0
 8007a84:	f104 0619 	add.w	r6, r4, #25
 8007a88:	e7f5      	b.n	8007a76 <_printf_i+0x22e>
 8007a8a:	bf00      	nop
 8007a8c:	08009c32 	.word	0x08009c32
 8007a90:	08009c43 	.word	0x08009c43

08007a94 <iprintf>:
 8007a94:	b40f      	push	{r0, r1, r2, r3}
 8007a96:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <iprintf+0x2c>)
 8007a98:	b513      	push	{r0, r1, r4, lr}
 8007a9a:	681c      	ldr	r4, [r3, #0]
 8007a9c:	b124      	cbz	r4, 8007aa8 <iprintf+0x14>
 8007a9e:	69a3      	ldr	r3, [r4, #24]
 8007aa0:	b913      	cbnz	r3, 8007aa8 <iprintf+0x14>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fee0 	bl	8008868 <__sinit>
 8007aa8:	ab05      	add	r3, sp, #20
 8007aaa:	9a04      	ldr	r2, [sp, #16]
 8007aac:	68a1      	ldr	r1, [r4, #8]
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f001 fbf7 	bl	80092a4 <_vfiprintf_r>
 8007ab6:	b002      	add	sp, #8
 8007ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007abc:	b004      	add	sp, #16
 8007abe:	4770      	bx	lr
 8007ac0:	200001c4 	.word	0x200001c4

08007ac4 <quorem>:
 8007ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	6903      	ldr	r3, [r0, #16]
 8007aca:	690c      	ldr	r4, [r1, #16]
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	4607      	mov	r7, r0
 8007ad0:	f2c0 8081 	blt.w	8007bd6 <quorem+0x112>
 8007ad4:	3c01      	subs	r4, #1
 8007ad6:	f101 0814 	add.w	r8, r1, #20
 8007ada:	f100 0514 	add.w	r5, r0, #20
 8007ade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aec:	3301      	adds	r3, #1
 8007aee:	429a      	cmp	r2, r3
 8007af0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007af4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007af8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007afc:	d331      	bcc.n	8007b62 <quorem+0x9e>
 8007afe:	f04f 0e00 	mov.w	lr, #0
 8007b02:	4640      	mov	r0, r8
 8007b04:	46ac      	mov	ip, r5
 8007b06:	46f2      	mov	sl, lr
 8007b08:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b0c:	b293      	uxth	r3, r2
 8007b0e:	fb06 e303 	mla	r3, r6, r3, lr
 8007b12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	ebaa 0303 	sub.w	r3, sl, r3
 8007b1c:	0c12      	lsrs	r2, r2, #16
 8007b1e:	f8dc a000 	ldr.w	sl, [ip]
 8007b22:	fb06 e202 	mla	r2, r6, r2, lr
 8007b26:	fa13 f38a 	uxtah	r3, r3, sl
 8007b2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b2e:	fa1f fa82 	uxth.w	sl, r2
 8007b32:	f8dc 2000 	ldr.w	r2, [ip]
 8007b36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007b3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b44:	4581      	cmp	r9, r0
 8007b46:	f84c 3b04 	str.w	r3, [ip], #4
 8007b4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b4e:	d2db      	bcs.n	8007b08 <quorem+0x44>
 8007b50:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b54:	b92b      	cbnz	r3, 8007b62 <quorem+0x9e>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	429d      	cmp	r5, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	d32e      	bcc.n	8007bbe <quorem+0xfa>
 8007b60:	613c      	str	r4, [r7, #16]
 8007b62:	4638      	mov	r0, r7
 8007b64:	f001 f9ba 	bl	8008edc <__mcmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	db24      	blt.n	8007bb6 <quorem+0xf2>
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f04f 0c00 	mov.w	ip, #0
 8007b74:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b78:	f8d0 e000 	ldr.w	lr, [r0]
 8007b7c:	b293      	uxth	r3, r2
 8007b7e:	ebac 0303 	sub.w	r3, ip, r3
 8007b82:	0c12      	lsrs	r2, r2, #16
 8007b84:	fa13 f38e 	uxtah	r3, r3, lr
 8007b88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b96:	45c1      	cmp	r9, r8
 8007b98:	f840 3b04 	str.w	r3, [r0], #4
 8007b9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ba0:	d2e8      	bcs.n	8007b74 <quorem+0xb0>
 8007ba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007baa:	b922      	cbnz	r2, 8007bb6 <quorem+0xf2>
 8007bac:	3b04      	subs	r3, #4
 8007bae:	429d      	cmp	r5, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	d30a      	bcc.n	8007bca <quorem+0x106>
 8007bb4:	613c      	str	r4, [r7, #16]
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	b003      	add	sp, #12
 8007bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	3b04      	subs	r3, #4
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d1cc      	bne.n	8007b60 <quorem+0x9c>
 8007bc6:	3c01      	subs	r4, #1
 8007bc8:	e7c7      	b.n	8007b5a <quorem+0x96>
 8007bca:	6812      	ldr	r2, [r2, #0]
 8007bcc:	3b04      	subs	r3, #4
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	d1f0      	bne.n	8007bb4 <quorem+0xf0>
 8007bd2:	3c01      	subs	r4, #1
 8007bd4:	e7eb      	b.n	8007bae <quorem+0xea>
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	e7ee      	b.n	8007bb8 <quorem+0xf4>
 8007bda:	0000      	movs	r0, r0
 8007bdc:	0000      	movs	r0, r0
	...

08007be0 <_dtoa_r>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	ed2d 8b02 	vpush	{d8}
 8007be8:	ec57 6b10 	vmov	r6, r7, d0
 8007bec:	b095      	sub	sp, #84	; 0x54
 8007bee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bf4:	9105      	str	r1, [sp, #20]
 8007bf6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8007bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c00:	b975      	cbnz	r5, 8007c20 <_dtoa_r+0x40>
 8007c02:	2010      	movs	r0, #16
 8007c04:	f000 fed6 	bl	80089b4 <malloc>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6260      	str	r0, [r4, #36]	; 0x24
 8007c0c:	b920      	cbnz	r0, 8007c18 <_dtoa_r+0x38>
 8007c0e:	4bb2      	ldr	r3, [pc, #712]	; (8007ed8 <_dtoa_r+0x2f8>)
 8007c10:	21ea      	movs	r1, #234	; 0xea
 8007c12:	48b2      	ldr	r0, [pc, #712]	; (8007edc <_dtoa_r+0x2fc>)
 8007c14:	f001 fd9c 	bl	8009750 <__assert_func>
 8007c18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c1c:	6005      	str	r5, [r0, #0]
 8007c1e:	60c5      	str	r5, [r0, #12]
 8007c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	b151      	cbz	r1, 8007c3c <_dtoa_r+0x5c>
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	604a      	str	r2, [r1, #4]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4093      	lsls	r3, r2
 8007c2e:	608b      	str	r3, [r1, #8]
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 ff15 	bl	8008a60 <_Bfree>
 8007c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	1e3b      	subs	r3, r7, #0
 8007c3e:	bfb9      	ittee	lt
 8007c40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c44:	9303      	strlt	r3, [sp, #12]
 8007c46:	2300      	movge	r3, #0
 8007c48:	f8c8 3000 	strge.w	r3, [r8]
 8007c4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007c50:	4ba3      	ldr	r3, [pc, #652]	; (8007ee0 <_dtoa_r+0x300>)
 8007c52:	bfbc      	itt	lt
 8007c54:	2201      	movlt	r2, #1
 8007c56:	f8c8 2000 	strlt.w	r2, [r8]
 8007c5a:	ea33 0309 	bics.w	r3, r3, r9
 8007c5e:	d11b      	bne.n	8007c98 <_dtoa_r+0xb8>
 8007c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c62:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c6c:	4333      	orrs	r3, r6
 8007c6e:	f000 857a 	beq.w	8008766 <_dtoa_r+0xb86>
 8007c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c74:	b963      	cbnz	r3, 8007c90 <_dtoa_r+0xb0>
 8007c76:	4b9b      	ldr	r3, [pc, #620]	; (8007ee4 <_dtoa_r+0x304>)
 8007c78:	e024      	b.n	8007cc4 <_dtoa_r+0xe4>
 8007c7a:	4b9b      	ldr	r3, [pc, #620]	; (8007ee8 <_dtoa_r+0x308>)
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	9800      	ldr	r0, [sp, #0]
 8007c86:	b015      	add	sp, #84	; 0x54
 8007c88:	ecbd 8b02 	vpop	{d8}
 8007c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c90:	4b94      	ldr	r3, [pc, #592]	; (8007ee4 <_dtoa_r+0x304>)
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	3303      	adds	r3, #3
 8007c96:	e7f3      	b.n	8007c80 <_dtoa_r+0xa0>
 8007c98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	ec51 0b17 	vmov	r0, r1, d7
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ca8:	f7f8 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cac:	4680      	mov	r8, r0
 8007cae:	b158      	cbz	r0, 8007cc8 <_dtoa_r+0xe8>
 8007cb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 8551 	beq.w	8008760 <_dtoa_r+0xb80>
 8007cbe:	488b      	ldr	r0, [pc, #556]	; (8007eec <_dtoa_r+0x30c>)
 8007cc0:	6018      	str	r0, [r3, #0]
 8007cc2:	1e43      	subs	r3, r0, #1
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	e7dd      	b.n	8007c84 <_dtoa_r+0xa4>
 8007cc8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ccc:	aa12      	add	r2, sp, #72	; 0x48
 8007cce:	a913      	add	r1, sp, #76	; 0x4c
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f001 f9a7 	bl	8009024 <__d2b>
 8007cd6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cda:	4683      	mov	fp, r0
 8007cdc:	2d00      	cmp	r5, #0
 8007cde:	d07c      	beq.n	8007dda <_dtoa_r+0x1fa>
 8007ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007cee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cfa:	4b7d      	ldr	r3, [pc, #500]	; (8007ef0 <_dtoa_r+0x310>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fac1 	bl	8000288 <__aeabi_dsub>
 8007d06:	a36e      	add	r3, pc, #440	; (adr r3, 8007ec0 <_dtoa_r+0x2e0>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f7f8 fc74 	bl	80005f8 <__aeabi_dmul>
 8007d10:	a36d      	add	r3, pc, #436	; (adr r3, 8007ec8 <_dtoa_r+0x2e8>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fab9 	bl	800028c <__adddf3>
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	460f      	mov	r7, r1
 8007d20:	f7f8 fc00 	bl	8000524 <__aeabi_i2d>
 8007d24:	a36a      	add	r3, pc, #424	; (adr r3, 8007ed0 <_dtoa_r+0x2f0>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 fc65 	bl	80005f8 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 faa9 	bl	800028c <__adddf3>
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	f7f8 ff0b 	bl	8000b58 <__aeabi_d2iz>
 8007d42:	2200      	movs	r2, #0
 8007d44:	4682      	mov	sl, r0
 8007d46:	2300      	movs	r3, #0
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f7f8 fec6 	bl	8000adc <__aeabi_dcmplt>
 8007d50:	b148      	cbz	r0, 8007d66 <_dtoa_r+0x186>
 8007d52:	4650      	mov	r0, sl
 8007d54:	f7f8 fbe6 	bl	8000524 <__aeabi_i2d>
 8007d58:	4632      	mov	r2, r6
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	f7f8 feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d60:	b908      	cbnz	r0, 8007d66 <_dtoa_r+0x186>
 8007d62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d66:	f1ba 0f16 	cmp.w	sl, #22
 8007d6a:	d854      	bhi.n	8007e16 <_dtoa_r+0x236>
 8007d6c:	4b61      	ldr	r3, [pc, #388]	; (8007ef4 <_dtoa_r+0x314>)
 8007d6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d7a:	f7f8 feaf 	bl	8000adc <__aeabi_dcmplt>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d04b      	beq.n	8007e1a <_dtoa_r+0x23a>
 8007d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d86:	2300      	movs	r3, #0
 8007d88:	930e      	str	r3, [sp, #56]	; 0x38
 8007d8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d8c:	1b5d      	subs	r5, r3, r5
 8007d8e:	1e6b      	subs	r3, r5, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	bf43      	ittte	mi
 8007d94:	2300      	movmi	r3, #0
 8007d96:	f1c5 0801 	rsbmi	r8, r5, #1
 8007d9a:	9304      	strmi	r3, [sp, #16]
 8007d9c:	f04f 0800 	movpl.w	r8, #0
 8007da0:	f1ba 0f00 	cmp.w	sl, #0
 8007da4:	db3b      	blt.n	8007e1e <_dtoa_r+0x23e>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007dac:	4453      	add	r3, sl
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	2300      	movs	r3, #0
 8007db2:	9306      	str	r3, [sp, #24]
 8007db4:	9b05      	ldr	r3, [sp, #20]
 8007db6:	2b09      	cmp	r3, #9
 8007db8:	d869      	bhi.n	8007e8e <_dtoa_r+0x2ae>
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	bfc4      	itt	gt
 8007dbe:	3b04      	subgt	r3, #4
 8007dc0:	9305      	strgt	r3, [sp, #20]
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	f1a3 0302 	sub.w	r3, r3, #2
 8007dc8:	bfcc      	ite	gt
 8007dca:	2500      	movgt	r5, #0
 8007dcc:	2501      	movle	r5, #1
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d869      	bhi.n	8007ea6 <_dtoa_r+0x2c6>
 8007dd2:	e8df f003 	tbb	[pc, r3]
 8007dd6:	4e2c      	.short	0x4e2c
 8007dd8:	5a4c      	.short	0x5a4c
 8007dda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007dde:	441d      	add	r5, r3
 8007de0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	bfc1      	itttt	gt
 8007de8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007df0:	fa09 f303 	lslgt.w	r3, r9, r3
 8007df4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007df8:	bfda      	itte	le
 8007dfa:	f1c3 0320 	rsble	r3, r3, #32
 8007dfe:	fa06 f003 	lslle.w	r0, r6, r3
 8007e02:	4318      	orrgt	r0, r3
 8007e04:	f7f8 fb7e 	bl	8000504 <__aeabi_ui2d>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e10:	3d01      	subs	r5, #1
 8007e12:	9310      	str	r3, [sp, #64]	; 0x40
 8007e14:	e771      	b.n	8007cfa <_dtoa_r+0x11a>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e7b6      	b.n	8007d88 <_dtoa_r+0x1a8>
 8007e1a:	900e      	str	r0, [sp, #56]	; 0x38
 8007e1c:	e7b5      	b.n	8007d8a <_dtoa_r+0x1aa>
 8007e1e:	f1ca 0300 	rsb	r3, sl, #0
 8007e22:	9306      	str	r3, [sp, #24]
 8007e24:	2300      	movs	r3, #0
 8007e26:	eba8 080a 	sub.w	r8, r8, sl
 8007e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e2c:	e7c2      	b.n	8007db4 <_dtoa_r+0x1d4>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9308      	str	r3, [sp, #32]
 8007e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dc39      	bgt.n	8007eac <_dtoa_r+0x2cc>
 8007e38:	f04f 0901 	mov.w	r9, #1
 8007e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e40:	464b      	mov	r3, r9
 8007e42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e48:	2200      	movs	r2, #0
 8007e4a:	6042      	str	r2, [r0, #4]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	f102 0614 	add.w	r6, r2, #20
 8007e52:	429e      	cmp	r6, r3
 8007e54:	6841      	ldr	r1, [r0, #4]
 8007e56:	d92f      	bls.n	8007eb8 <_dtoa_r+0x2d8>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fdc1 	bl	80089e0 <_Balloc>
 8007e5e:	9000      	str	r0, [sp, #0]
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d14b      	bne.n	8007efc <_dtoa_r+0x31c>
 8007e64:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <_dtoa_r+0x318>)
 8007e66:	4602      	mov	r2, r0
 8007e68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e6c:	e6d1      	b.n	8007c12 <_dtoa_r+0x32>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e7de      	b.n	8007e30 <_dtoa_r+0x250>
 8007e72:	2300      	movs	r3, #0
 8007e74:	9308      	str	r3, [sp, #32]
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	eb0a 0903 	add.w	r9, sl, r3
 8007e7c:	f109 0301 	add.w	r3, r9, #1
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	bfb8      	it	lt
 8007e86:	2301      	movlt	r3, #1
 8007e88:	e7dd      	b.n	8007e46 <_dtoa_r+0x266>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e7f2      	b.n	8007e74 <_dtoa_r+0x294>
 8007e8e:	2501      	movs	r5, #1
 8007e90:	2300      	movs	r3, #0
 8007e92:	9305      	str	r3, [sp, #20]
 8007e94:	9508      	str	r5, [sp, #32]
 8007e96:	f04f 39ff 	mov.w	r9, #4294967295
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ea0:	2312      	movs	r3, #18
 8007ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea4:	e7cf      	b.n	8007e46 <_dtoa_r+0x266>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	9308      	str	r3, [sp, #32]
 8007eaa:	e7f4      	b.n	8007e96 <_dtoa_r+0x2b6>
 8007eac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007eb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	e7c6      	b.n	8007e46 <_dtoa_r+0x266>
 8007eb8:	3101      	adds	r1, #1
 8007eba:	6041      	str	r1, [r0, #4]
 8007ebc:	0052      	lsls	r2, r2, #1
 8007ebe:	e7c6      	b.n	8007e4e <_dtoa_r+0x26e>
 8007ec0:	636f4361 	.word	0x636f4361
 8007ec4:	3fd287a7 	.word	0x3fd287a7
 8007ec8:	8b60c8b3 	.word	0x8b60c8b3
 8007ecc:	3fc68a28 	.word	0x3fc68a28
 8007ed0:	509f79fb 	.word	0x509f79fb
 8007ed4:	3fd34413 	.word	0x3fd34413
 8007ed8:	08009c61 	.word	0x08009c61
 8007edc:	08009c78 	.word	0x08009c78
 8007ee0:	7ff00000 	.word	0x7ff00000
 8007ee4:	08009c5d 	.word	0x08009c5d
 8007ee8:	08009c54 	.word	0x08009c54
 8007eec:	08009c31 	.word	0x08009c31
 8007ef0:	3ff80000 	.word	0x3ff80000
 8007ef4:	08009dd0 	.word	0x08009dd0
 8007ef8:	08009cd7 	.word	0x08009cd7
 8007efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007efe:	9a00      	ldr	r2, [sp, #0]
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	2b0e      	cmp	r3, #14
 8007f06:	f200 80ad 	bhi.w	8008064 <_dtoa_r+0x484>
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	f000 80aa 	beq.w	8008064 <_dtoa_r+0x484>
 8007f10:	f1ba 0f00 	cmp.w	sl, #0
 8007f14:	dd36      	ble.n	8007f84 <_dtoa_r+0x3a4>
 8007f16:	4ac3      	ldr	r2, [pc, #780]	; (8008224 <_dtoa_r+0x644>)
 8007f18:	f00a 030f 	and.w	r3, sl, #15
 8007f1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f20:	ed93 7b00 	vldr	d7, [r3]
 8007f24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f28:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007f2c:	eeb0 8a47 	vmov.f32	s16, s14
 8007f30:	eef0 8a67 	vmov.f32	s17, s15
 8007f34:	d016      	beq.n	8007f64 <_dtoa_r+0x384>
 8007f36:	4bbc      	ldr	r3, [pc, #752]	; (8008228 <_dtoa_r+0x648>)
 8007f38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f40:	f7f8 fc84 	bl	800084c <__aeabi_ddiv>
 8007f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f48:	f007 070f 	and.w	r7, r7, #15
 8007f4c:	2503      	movs	r5, #3
 8007f4e:	4eb6      	ldr	r6, [pc, #728]	; (8008228 <_dtoa_r+0x648>)
 8007f50:	b957      	cbnz	r7, 8007f68 <_dtoa_r+0x388>
 8007f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f56:	ec53 2b18 	vmov	r2, r3, d8
 8007f5a:	f7f8 fc77 	bl	800084c <__aeabi_ddiv>
 8007f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f62:	e029      	b.n	8007fb8 <_dtoa_r+0x3d8>
 8007f64:	2502      	movs	r5, #2
 8007f66:	e7f2      	b.n	8007f4e <_dtoa_r+0x36e>
 8007f68:	07f9      	lsls	r1, r7, #31
 8007f6a:	d508      	bpl.n	8007f7e <_dtoa_r+0x39e>
 8007f6c:	ec51 0b18 	vmov	r0, r1, d8
 8007f70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f74:	f7f8 fb40 	bl	80005f8 <__aeabi_dmul>
 8007f78:	ec41 0b18 	vmov	d8, r0, r1
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	107f      	asrs	r7, r7, #1
 8007f80:	3608      	adds	r6, #8
 8007f82:	e7e5      	b.n	8007f50 <_dtoa_r+0x370>
 8007f84:	f000 80a6 	beq.w	80080d4 <_dtoa_r+0x4f4>
 8007f88:	f1ca 0600 	rsb	r6, sl, #0
 8007f8c:	4ba5      	ldr	r3, [pc, #660]	; (8008224 <_dtoa_r+0x644>)
 8007f8e:	4fa6      	ldr	r7, [pc, #664]	; (8008228 <_dtoa_r+0x648>)
 8007f90:	f006 020f 	and.w	r2, r6, #15
 8007f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa8:	1136      	asrs	r6, r6, #4
 8007faa:	2300      	movs	r3, #0
 8007fac:	2502      	movs	r5, #2
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	f040 8085 	bne.w	80080be <_dtoa_r+0x4de>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1d2      	bne.n	8007f5e <_dtoa_r+0x37e>
 8007fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 808c 	beq.w	80080d8 <_dtoa_r+0x4f8>
 8007fc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fc4:	4b99      	ldr	r3, [pc, #612]	; (800822c <_dtoa_r+0x64c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 fd86 	bl	8000adc <__aeabi_dcmplt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f000 8081 	beq.w	80080d8 <_dtoa_r+0x4f8>
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d07d      	beq.n	80080d8 <_dtoa_r+0x4f8>
 8007fdc:	f1b9 0f00 	cmp.w	r9, #0
 8007fe0:	dd3c      	ble.n	800805c <_dtoa_r+0x47c>
 8007fe2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007fe6:	9307      	str	r3, [sp, #28]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4b91      	ldr	r3, [pc, #580]	; (8008230 <_dtoa_r+0x650>)
 8007fec:	4630      	mov	r0, r6
 8007fee:	4639      	mov	r1, r7
 8007ff0:	f7f8 fb02 	bl	80005f8 <__aeabi_dmul>
 8007ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007ffe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008002:	4628      	mov	r0, r5
 8008004:	f7f8 fa8e 	bl	8000524 <__aeabi_i2d>
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	f7f8 faf4 	bl	80005f8 <__aeabi_dmul>
 8008010:	4b88      	ldr	r3, [pc, #544]	; (8008234 <_dtoa_r+0x654>)
 8008012:	2200      	movs	r2, #0
 8008014:	f7f8 f93a 	bl	800028c <__adddf3>
 8008018:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800801c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d15c      	bne.n	80080e2 <_dtoa_r+0x502>
 8008028:	4b83      	ldr	r3, [pc, #524]	; (8008238 <_dtoa_r+0x658>)
 800802a:	2200      	movs	r2, #0
 800802c:	4630      	mov	r0, r6
 800802e:	4639      	mov	r1, r7
 8008030:	f7f8 f92a 	bl	8000288 <__aeabi_dsub>
 8008034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008038:	4606      	mov	r6, r0
 800803a:	460f      	mov	r7, r1
 800803c:	f7f8 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 8008040:	2800      	cmp	r0, #0
 8008042:	f040 8296 	bne.w	8008572 <_dtoa_r+0x992>
 8008046:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800804a:	4630      	mov	r0, r6
 800804c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 fd43 	bl	8000adc <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	f040 8288 	bne.w	800856c <_dtoa_r+0x98c>
 800805c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008060:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008066:	2b00      	cmp	r3, #0
 8008068:	f2c0 8158 	blt.w	800831c <_dtoa_r+0x73c>
 800806c:	f1ba 0f0e 	cmp.w	sl, #14
 8008070:	f300 8154 	bgt.w	800831c <_dtoa_r+0x73c>
 8008074:	4b6b      	ldr	r3, [pc, #428]	; (8008224 <_dtoa_r+0x644>)
 8008076:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800807a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800807e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	f280 80e3 	bge.w	800824c <_dtoa_r+0x66c>
 8008086:	9b01      	ldr	r3, [sp, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f300 80df 	bgt.w	800824c <_dtoa_r+0x66c>
 800808e:	f040 826d 	bne.w	800856c <_dtoa_r+0x98c>
 8008092:	4b69      	ldr	r3, [pc, #420]	; (8008238 <_dtoa_r+0x658>)
 8008094:	2200      	movs	r2, #0
 8008096:	4640      	mov	r0, r8
 8008098:	4649      	mov	r1, r9
 800809a:	f7f8 faad 	bl	80005f8 <__aeabi_dmul>
 800809e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080a2:	f7f8 fd2f 	bl	8000b04 <__aeabi_dcmpge>
 80080a6:	9e01      	ldr	r6, [sp, #4]
 80080a8:	4637      	mov	r7, r6
 80080aa:	2800      	cmp	r0, #0
 80080ac:	f040 8243 	bne.w	8008536 <_dtoa_r+0x956>
 80080b0:	9d00      	ldr	r5, [sp, #0]
 80080b2:	2331      	movs	r3, #49	; 0x31
 80080b4:	f805 3b01 	strb.w	r3, [r5], #1
 80080b8:	f10a 0a01 	add.w	sl, sl, #1
 80080bc:	e23f      	b.n	800853e <_dtoa_r+0x95e>
 80080be:	07f2      	lsls	r2, r6, #31
 80080c0:	d505      	bpl.n	80080ce <_dtoa_r+0x4ee>
 80080c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c6:	f7f8 fa97 	bl	80005f8 <__aeabi_dmul>
 80080ca:	3501      	adds	r5, #1
 80080cc:	2301      	movs	r3, #1
 80080ce:	1076      	asrs	r6, r6, #1
 80080d0:	3708      	adds	r7, #8
 80080d2:	e76c      	b.n	8007fae <_dtoa_r+0x3ce>
 80080d4:	2502      	movs	r5, #2
 80080d6:	e76f      	b.n	8007fb8 <_dtoa_r+0x3d8>
 80080d8:	9b01      	ldr	r3, [sp, #4]
 80080da:	f8cd a01c 	str.w	sl, [sp, #28]
 80080de:	930c      	str	r3, [sp, #48]	; 0x30
 80080e0:	e78d      	b.n	8007ffe <_dtoa_r+0x41e>
 80080e2:	9900      	ldr	r1, [sp, #0]
 80080e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080e8:	4b4e      	ldr	r3, [pc, #312]	; (8008224 <_dtoa_r+0x644>)
 80080ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080ee:	4401      	add	r1, r0
 80080f0:	9102      	str	r1, [sp, #8]
 80080f2:	9908      	ldr	r1, [sp, #32]
 80080f4:	eeb0 8a47 	vmov.f32	s16, s14
 80080f8:	eef0 8a67 	vmov.f32	s17, s15
 80080fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008100:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008104:	2900      	cmp	r1, #0
 8008106:	d045      	beq.n	8008194 <_dtoa_r+0x5b4>
 8008108:	494c      	ldr	r1, [pc, #304]	; (800823c <_dtoa_r+0x65c>)
 800810a:	2000      	movs	r0, #0
 800810c:	f7f8 fb9e 	bl	800084c <__aeabi_ddiv>
 8008110:	ec53 2b18 	vmov	r2, r3, d8
 8008114:	f7f8 f8b8 	bl	8000288 <__aeabi_dsub>
 8008118:	9d00      	ldr	r5, [sp, #0]
 800811a:	ec41 0b18 	vmov	d8, r0, r1
 800811e:	4639      	mov	r1, r7
 8008120:	4630      	mov	r0, r6
 8008122:	f7f8 fd19 	bl	8000b58 <__aeabi_d2iz>
 8008126:	900c      	str	r0, [sp, #48]	; 0x30
 8008128:	f7f8 f9fc 	bl	8000524 <__aeabi_i2d>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 f8a8 	bl	8000288 <__aeabi_dsub>
 8008138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800813a:	3330      	adds	r3, #48	; 0x30
 800813c:	f805 3b01 	strb.w	r3, [r5], #1
 8008140:	ec53 2b18 	vmov	r2, r3, d8
 8008144:	4606      	mov	r6, r0
 8008146:	460f      	mov	r7, r1
 8008148:	f7f8 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800814c:	2800      	cmp	r0, #0
 800814e:	d165      	bne.n	800821c <_dtoa_r+0x63c>
 8008150:	4632      	mov	r2, r6
 8008152:	463b      	mov	r3, r7
 8008154:	4935      	ldr	r1, [pc, #212]	; (800822c <_dtoa_r+0x64c>)
 8008156:	2000      	movs	r0, #0
 8008158:	f7f8 f896 	bl	8000288 <__aeabi_dsub>
 800815c:	ec53 2b18 	vmov	r2, r3, d8
 8008160:	f7f8 fcbc 	bl	8000adc <__aeabi_dcmplt>
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 80b9 	bne.w	80082dc <_dtoa_r+0x6fc>
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	429d      	cmp	r5, r3
 800816e:	f43f af75 	beq.w	800805c <_dtoa_r+0x47c>
 8008172:	4b2f      	ldr	r3, [pc, #188]	; (8008230 <_dtoa_r+0x650>)
 8008174:	ec51 0b18 	vmov	r0, r1, d8
 8008178:	2200      	movs	r2, #0
 800817a:	f7f8 fa3d 	bl	80005f8 <__aeabi_dmul>
 800817e:	4b2c      	ldr	r3, [pc, #176]	; (8008230 <_dtoa_r+0x650>)
 8008180:	ec41 0b18 	vmov	d8, r0, r1
 8008184:	2200      	movs	r2, #0
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 fa35 	bl	80005f8 <__aeabi_dmul>
 800818e:	4606      	mov	r6, r0
 8008190:	460f      	mov	r7, r1
 8008192:	e7c4      	b.n	800811e <_dtoa_r+0x53e>
 8008194:	ec51 0b17 	vmov	r0, r1, d7
 8008198:	f7f8 fa2e 	bl	80005f8 <__aeabi_dmul>
 800819c:	9b02      	ldr	r3, [sp, #8]
 800819e:	9d00      	ldr	r5, [sp, #0]
 80081a0:	930c      	str	r3, [sp, #48]	; 0x30
 80081a2:	ec41 0b18 	vmov	d8, r0, r1
 80081a6:	4639      	mov	r1, r7
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7f8 fcd5 	bl	8000b58 <__aeabi_d2iz>
 80081ae:	9011      	str	r0, [sp, #68]	; 0x44
 80081b0:	f7f8 f9b8 	bl	8000524 <__aeabi_i2d>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 f864 	bl	8000288 <__aeabi_dsub>
 80081c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081c2:	3330      	adds	r3, #48	; 0x30
 80081c4:	f805 3b01 	strb.w	r3, [r5], #1
 80081c8:	9b02      	ldr	r3, [sp, #8]
 80081ca:	429d      	cmp	r5, r3
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	d134      	bne.n	8008240 <_dtoa_r+0x660>
 80081d6:	4b19      	ldr	r3, [pc, #100]	; (800823c <_dtoa_r+0x65c>)
 80081d8:	ec51 0b18 	vmov	r0, r1, d8
 80081dc:	f7f8 f856 	bl	800028c <__adddf3>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4630      	mov	r0, r6
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7f8 fc96 	bl	8000b18 <__aeabi_dcmpgt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d175      	bne.n	80082dc <_dtoa_r+0x6fc>
 80081f0:	ec53 2b18 	vmov	r2, r3, d8
 80081f4:	4911      	ldr	r1, [pc, #68]	; (800823c <_dtoa_r+0x65c>)
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7f8 f846 	bl	8000288 <__aeabi_dsub>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fc6a 	bl	8000adc <__aeabi_dcmplt>
 8008208:	2800      	cmp	r0, #0
 800820a:	f43f af27 	beq.w	800805c <_dtoa_r+0x47c>
 800820e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008210:	1e6b      	subs	r3, r5, #1
 8008212:	930c      	str	r3, [sp, #48]	; 0x30
 8008214:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008218:	2b30      	cmp	r3, #48	; 0x30
 800821a:	d0f8      	beq.n	800820e <_dtoa_r+0x62e>
 800821c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008220:	e04a      	b.n	80082b8 <_dtoa_r+0x6d8>
 8008222:	bf00      	nop
 8008224:	08009dd0 	.word	0x08009dd0
 8008228:	08009da8 	.word	0x08009da8
 800822c:	3ff00000 	.word	0x3ff00000
 8008230:	40240000 	.word	0x40240000
 8008234:	401c0000 	.word	0x401c0000
 8008238:	40140000 	.word	0x40140000
 800823c:	3fe00000 	.word	0x3fe00000
 8008240:	4baf      	ldr	r3, [pc, #700]	; (8008500 <_dtoa_r+0x920>)
 8008242:	f7f8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8008246:	4606      	mov	r6, r0
 8008248:	460f      	mov	r7, r1
 800824a:	e7ac      	b.n	80081a6 <_dtoa_r+0x5c6>
 800824c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008250:	9d00      	ldr	r5, [sp, #0]
 8008252:	4642      	mov	r2, r8
 8008254:	464b      	mov	r3, r9
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 faf7 	bl	800084c <__aeabi_ddiv>
 800825e:	f7f8 fc7b 	bl	8000b58 <__aeabi_d2iz>
 8008262:	9002      	str	r0, [sp, #8]
 8008264:	f7f8 f95e 	bl	8000524 <__aeabi_i2d>
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	f7f8 f9c4 	bl	80005f8 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f7f8 f806 	bl	8000288 <__aeabi_dsub>
 800827c:	9e02      	ldr	r6, [sp, #8]
 800827e:	9f01      	ldr	r7, [sp, #4]
 8008280:	3630      	adds	r6, #48	; 0x30
 8008282:	f805 6b01 	strb.w	r6, [r5], #1
 8008286:	9e00      	ldr	r6, [sp, #0]
 8008288:	1bae      	subs	r6, r5, r6
 800828a:	42b7      	cmp	r7, r6
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	d137      	bne.n	8008302 <_dtoa_r+0x722>
 8008292:	f7f7 fffb 	bl	800028c <__adddf3>
 8008296:	4642      	mov	r2, r8
 8008298:	464b      	mov	r3, r9
 800829a:	4606      	mov	r6, r0
 800829c:	460f      	mov	r7, r1
 800829e:	f7f8 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80082a2:	b9c8      	cbnz	r0, 80082d8 <_dtoa_r+0x6f8>
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f8 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80082b0:	b110      	cbz	r0, 80082b8 <_dtoa_r+0x6d8>
 80082b2:	9b02      	ldr	r3, [sp, #8]
 80082b4:	07d9      	lsls	r1, r3, #31
 80082b6:	d40f      	bmi.n	80082d8 <_dtoa_r+0x6f8>
 80082b8:	4620      	mov	r0, r4
 80082ba:	4659      	mov	r1, fp
 80082bc:	f000 fbd0 	bl	8008a60 <_Bfree>
 80082c0:	2300      	movs	r3, #0
 80082c2:	702b      	strb	r3, [r5, #0]
 80082c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082c6:	f10a 0001 	add.w	r0, sl, #1
 80082ca:	6018      	str	r0, [r3, #0]
 80082cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f43f acd8 	beq.w	8007c84 <_dtoa_r+0xa4>
 80082d4:	601d      	str	r5, [r3, #0]
 80082d6:	e4d5      	b.n	8007c84 <_dtoa_r+0xa4>
 80082d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80082dc:	462b      	mov	r3, r5
 80082de:	461d      	mov	r5, r3
 80082e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e4:	2a39      	cmp	r2, #57	; 0x39
 80082e6:	d108      	bne.n	80082fa <_dtoa_r+0x71a>
 80082e8:	9a00      	ldr	r2, [sp, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d1f7      	bne.n	80082de <_dtoa_r+0x6fe>
 80082ee:	9a07      	ldr	r2, [sp, #28]
 80082f0:	9900      	ldr	r1, [sp, #0]
 80082f2:	3201      	adds	r2, #1
 80082f4:	9207      	str	r2, [sp, #28]
 80082f6:	2230      	movs	r2, #48	; 0x30
 80082f8:	700a      	strb	r2, [r1, #0]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	3201      	adds	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e78c      	b.n	800821c <_dtoa_r+0x63c>
 8008302:	4b7f      	ldr	r3, [pc, #508]	; (8008500 <_dtoa_r+0x920>)
 8008304:	2200      	movs	r2, #0
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	2200      	movs	r2, #0
 800830c:	2300      	movs	r3, #0
 800830e:	4606      	mov	r6, r0
 8008310:	460f      	mov	r7, r1
 8008312:	f7f8 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008316:	2800      	cmp	r0, #0
 8008318:	d09b      	beq.n	8008252 <_dtoa_r+0x672>
 800831a:	e7cd      	b.n	80082b8 <_dtoa_r+0x6d8>
 800831c:	9a08      	ldr	r2, [sp, #32]
 800831e:	2a00      	cmp	r2, #0
 8008320:	f000 80c4 	beq.w	80084ac <_dtoa_r+0x8cc>
 8008324:	9a05      	ldr	r2, [sp, #20]
 8008326:	2a01      	cmp	r2, #1
 8008328:	f300 80a8 	bgt.w	800847c <_dtoa_r+0x89c>
 800832c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800832e:	2a00      	cmp	r2, #0
 8008330:	f000 80a0 	beq.w	8008474 <_dtoa_r+0x894>
 8008334:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008338:	9e06      	ldr	r6, [sp, #24]
 800833a:	4645      	mov	r5, r8
 800833c:	9a04      	ldr	r2, [sp, #16]
 800833e:	2101      	movs	r1, #1
 8008340:	441a      	add	r2, r3
 8008342:	4620      	mov	r0, r4
 8008344:	4498      	add	r8, r3
 8008346:	9204      	str	r2, [sp, #16]
 8008348:	f000 fc46 	bl	8008bd8 <__i2b>
 800834c:	4607      	mov	r7, r0
 800834e:	2d00      	cmp	r5, #0
 8008350:	dd0b      	ble.n	800836a <_dtoa_r+0x78a>
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd08      	ble.n	800836a <_dtoa_r+0x78a>
 8008358:	42ab      	cmp	r3, r5
 800835a:	9a04      	ldr	r2, [sp, #16]
 800835c:	bfa8      	it	ge
 800835e:	462b      	movge	r3, r5
 8008360:	eba8 0803 	sub.w	r8, r8, r3
 8008364:	1aed      	subs	r5, r5, r3
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	b1fb      	cbz	r3, 80083ae <_dtoa_r+0x7ce>
 800836e:	9b08      	ldr	r3, [sp, #32]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 809f 	beq.w	80084b4 <_dtoa_r+0x8d4>
 8008376:	2e00      	cmp	r6, #0
 8008378:	dd11      	ble.n	800839e <_dtoa_r+0x7be>
 800837a:	4639      	mov	r1, r7
 800837c:	4632      	mov	r2, r6
 800837e:	4620      	mov	r0, r4
 8008380:	f000 fce6 	bl	8008d50 <__pow5mult>
 8008384:	465a      	mov	r2, fp
 8008386:	4601      	mov	r1, r0
 8008388:	4607      	mov	r7, r0
 800838a:	4620      	mov	r0, r4
 800838c:	f000 fc3a 	bl	8008c04 <__multiply>
 8008390:	4659      	mov	r1, fp
 8008392:	9007      	str	r0, [sp, #28]
 8008394:	4620      	mov	r0, r4
 8008396:	f000 fb63 	bl	8008a60 <_Bfree>
 800839a:	9b07      	ldr	r3, [sp, #28]
 800839c:	469b      	mov	fp, r3
 800839e:	9b06      	ldr	r3, [sp, #24]
 80083a0:	1b9a      	subs	r2, r3, r6
 80083a2:	d004      	beq.n	80083ae <_dtoa_r+0x7ce>
 80083a4:	4659      	mov	r1, fp
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 fcd2 	bl	8008d50 <__pow5mult>
 80083ac:	4683      	mov	fp, r0
 80083ae:	2101      	movs	r1, #1
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fc11 	bl	8008bd8 <__i2b>
 80083b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	4606      	mov	r6, r0
 80083bc:	dd7c      	ble.n	80084b8 <_dtoa_r+0x8d8>
 80083be:	461a      	mov	r2, r3
 80083c0:	4601      	mov	r1, r0
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 fcc4 	bl	8008d50 <__pow5mult>
 80083c8:	9b05      	ldr	r3, [sp, #20]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	4606      	mov	r6, r0
 80083ce:	dd76      	ble.n	80084be <_dtoa_r+0x8de>
 80083d0:	2300      	movs	r3, #0
 80083d2:	9306      	str	r3, [sp, #24]
 80083d4:	6933      	ldr	r3, [r6, #16]
 80083d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083da:	6918      	ldr	r0, [r3, #16]
 80083dc:	f000 fbac 	bl	8008b38 <__hi0bits>
 80083e0:	f1c0 0020 	rsb	r0, r0, #32
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	4418      	add	r0, r3
 80083e8:	f010 001f 	ands.w	r0, r0, #31
 80083ec:	f000 8086 	beq.w	80084fc <_dtoa_r+0x91c>
 80083f0:	f1c0 0320 	rsb	r3, r0, #32
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	dd7f      	ble.n	80084f8 <_dtoa_r+0x918>
 80083f8:	f1c0 001c 	rsb	r0, r0, #28
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	4403      	add	r3, r0
 8008400:	4480      	add	r8, r0
 8008402:	4405      	add	r5, r0
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	f1b8 0f00 	cmp.w	r8, #0
 800840a:	dd05      	ble.n	8008418 <_dtoa_r+0x838>
 800840c:	4659      	mov	r1, fp
 800840e:	4642      	mov	r2, r8
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fcf7 	bl	8008e04 <__lshift>
 8008416:	4683      	mov	fp, r0
 8008418:	9b04      	ldr	r3, [sp, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	dd05      	ble.n	800842a <_dtoa_r+0x84a>
 800841e:	4631      	mov	r1, r6
 8008420:	461a      	mov	r2, r3
 8008422:	4620      	mov	r0, r4
 8008424:	f000 fcee 	bl	8008e04 <__lshift>
 8008428:	4606      	mov	r6, r0
 800842a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	d069      	beq.n	8008504 <_dtoa_r+0x924>
 8008430:	4631      	mov	r1, r6
 8008432:	4658      	mov	r0, fp
 8008434:	f000 fd52 	bl	8008edc <__mcmp>
 8008438:	2800      	cmp	r0, #0
 800843a:	da63      	bge.n	8008504 <_dtoa_r+0x924>
 800843c:	2300      	movs	r3, #0
 800843e:	4659      	mov	r1, fp
 8008440:	220a      	movs	r2, #10
 8008442:	4620      	mov	r0, r4
 8008444:	f000 fb2e 	bl	8008aa4 <__multadd>
 8008448:	9b08      	ldr	r3, [sp, #32]
 800844a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800844e:	4683      	mov	fp, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 818f 	beq.w	8008774 <_dtoa_r+0xb94>
 8008456:	4639      	mov	r1, r7
 8008458:	2300      	movs	r3, #0
 800845a:	220a      	movs	r2, #10
 800845c:	4620      	mov	r0, r4
 800845e:	f000 fb21 	bl	8008aa4 <__multadd>
 8008462:	f1b9 0f00 	cmp.w	r9, #0
 8008466:	4607      	mov	r7, r0
 8008468:	f300 808e 	bgt.w	8008588 <_dtoa_r+0x9a8>
 800846c:	9b05      	ldr	r3, [sp, #20]
 800846e:	2b02      	cmp	r3, #2
 8008470:	dc50      	bgt.n	8008514 <_dtoa_r+0x934>
 8008472:	e089      	b.n	8008588 <_dtoa_r+0x9a8>
 8008474:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800847a:	e75d      	b.n	8008338 <_dtoa_r+0x758>
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	1e5e      	subs	r6, r3, #1
 8008480:	9b06      	ldr	r3, [sp, #24]
 8008482:	42b3      	cmp	r3, r6
 8008484:	bfbf      	itttt	lt
 8008486:	9b06      	ldrlt	r3, [sp, #24]
 8008488:	9606      	strlt	r6, [sp, #24]
 800848a:	1af2      	sublt	r2, r6, r3
 800848c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800848e:	bfb6      	itet	lt
 8008490:	189b      	addlt	r3, r3, r2
 8008492:	1b9e      	subge	r6, r3, r6
 8008494:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	bfb8      	it	lt
 800849a:	2600      	movlt	r6, #0
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfb5      	itete	lt
 80084a0:	eba8 0503 	sublt.w	r5, r8, r3
 80084a4:	9b01      	ldrge	r3, [sp, #4]
 80084a6:	2300      	movlt	r3, #0
 80084a8:	4645      	movge	r5, r8
 80084aa:	e747      	b.n	800833c <_dtoa_r+0x75c>
 80084ac:	9e06      	ldr	r6, [sp, #24]
 80084ae:	9f08      	ldr	r7, [sp, #32]
 80084b0:	4645      	mov	r5, r8
 80084b2:	e74c      	b.n	800834e <_dtoa_r+0x76e>
 80084b4:	9a06      	ldr	r2, [sp, #24]
 80084b6:	e775      	b.n	80083a4 <_dtoa_r+0x7c4>
 80084b8:	9b05      	ldr	r3, [sp, #20]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	dc18      	bgt.n	80084f0 <_dtoa_r+0x910>
 80084be:	9b02      	ldr	r3, [sp, #8]
 80084c0:	b9b3      	cbnz	r3, 80084f0 <_dtoa_r+0x910>
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084c8:	b9a3      	cbnz	r3, 80084f4 <_dtoa_r+0x914>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d0:	0d1b      	lsrs	r3, r3, #20
 80084d2:	051b      	lsls	r3, r3, #20
 80084d4:	b12b      	cbz	r3, 80084e2 <_dtoa_r+0x902>
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	3301      	adds	r3, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	f108 0801 	add.w	r8, r8, #1
 80084e0:	2301      	movs	r3, #1
 80084e2:	9306      	str	r3, [sp, #24]
 80084e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f47f af74 	bne.w	80083d4 <_dtoa_r+0x7f4>
 80084ec:	2001      	movs	r0, #1
 80084ee:	e779      	b.n	80083e4 <_dtoa_r+0x804>
 80084f0:	2300      	movs	r3, #0
 80084f2:	e7f6      	b.n	80084e2 <_dtoa_r+0x902>
 80084f4:	9b02      	ldr	r3, [sp, #8]
 80084f6:	e7f4      	b.n	80084e2 <_dtoa_r+0x902>
 80084f8:	d085      	beq.n	8008406 <_dtoa_r+0x826>
 80084fa:	4618      	mov	r0, r3
 80084fc:	301c      	adds	r0, #28
 80084fe:	e77d      	b.n	80083fc <_dtoa_r+0x81c>
 8008500:	40240000 	.word	0x40240000
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	dc38      	bgt.n	800857c <_dtoa_r+0x99c>
 800850a:	9b05      	ldr	r3, [sp, #20]
 800850c:	2b02      	cmp	r3, #2
 800850e:	dd35      	ble.n	800857c <_dtoa_r+0x99c>
 8008510:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008514:	f1b9 0f00 	cmp.w	r9, #0
 8008518:	d10d      	bne.n	8008536 <_dtoa_r+0x956>
 800851a:	4631      	mov	r1, r6
 800851c:	464b      	mov	r3, r9
 800851e:	2205      	movs	r2, #5
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fabf 	bl	8008aa4 <__multadd>
 8008526:	4601      	mov	r1, r0
 8008528:	4606      	mov	r6, r0
 800852a:	4658      	mov	r0, fp
 800852c:	f000 fcd6 	bl	8008edc <__mcmp>
 8008530:	2800      	cmp	r0, #0
 8008532:	f73f adbd 	bgt.w	80080b0 <_dtoa_r+0x4d0>
 8008536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008538:	9d00      	ldr	r5, [sp, #0]
 800853a:	ea6f 0a03 	mvn.w	sl, r3
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	4631      	mov	r1, r6
 8008544:	4620      	mov	r0, r4
 8008546:	f000 fa8b 	bl	8008a60 <_Bfree>
 800854a:	2f00      	cmp	r7, #0
 800854c:	f43f aeb4 	beq.w	80082b8 <_dtoa_r+0x6d8>
 8008550:	f1b8 0f00 	cmp.w	r8, #0
 8008554:	d005      	beq.n	8008562 <_dtoa_r+0x982>
 8008556:	45b8      	cmp	r8, r7
 8008558:	d003      	beq.n	8008562 <_dtoa_r+0x982>
 800855a:	4641      	mov	r1, r8
 800855c:	4620      	mov	r0, r4
 800855e:	f000 fa7f 	bl	8008a60 <_Bfree>
 8008562:	4639      	mov	r1, r7
 8008564:	4620      	mov	r0, r4
 8008566:	f000 fa7b 	bl	8008a60 <_Bfree>
 800856a:	e6a5      	b.n	80082b8 <_dtoa_r+0x6d8>
 800856c:	2600      	movs	r6, #0
 800856e:	4637      	mov	r7, r6
 8008570:	e7e1      	b.n	8008536 <_dtoa_r+0x956>
 8008572:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008574:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008578:	4637      	mov	r7, r6
 800857a:	e599      	b.n	80080b0 <_dtoa_r+0x4d0>
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 80fd 	beq.w	8008782 <_dtoa_r+0xba2>
 8008588:	2d00      	cmp	r5, #0
 800858a:	dd05      	ble.n	8008598 <_dtoa_r+0x9b8>
 800858c:	4639      	mov	r1, r7
 800858e:	462a      	mov	r2, r5
 8008590:	4620      	mov	r0, r4
 8008592:	f000 fc37 	bl	8008e04 <__lshift>
 8008596:	4607      	mov	r7, r0
 8008598:	9b06      	ldr	r3, [sp, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d05c      	beq.n	8008658 <_dtoa_r+0xa78>
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fa1d 	bl	80089e0 <_Balloc>
 80085a6:	4605      	mov	r5, r0
 80085a8:	b928      	cbnz	r0, 80085b6 <_dtoa_r+0x9d6>
 80085aa:	4b80      	ldr	r3, [pc, #512]	; (80087ac <_dtoa_r+0xbcc>)
 80085ac:	4602      	mov	r2, r0
 80085ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085b2:	f7ff bb2e 	b.w	8007c12 <_dtoa_r+0x32>
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	3202      	adds	r2, #2
 80085ba:	0092      	lsls	r2, r2, #2
 80085bc:	f107 010c 	add.w	r1, r7, #12
 80085c0:	300c      	adds	r0, #12
 80085c2:	f000 f9ff 	bl	80089c4 <memcpy>
 80085c6:	2201      	movs	r2, #1
 80085c8:	4629      	mov	r1, r5
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 fc1a 	bl	8008e04 <__lshift>
 80085d0:	9b00      	ldr	r3, [sp, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	9b00      	ldr	r3, [sp, #0]
 80085d8:	444b      	add	r3, r9
 80085da:	9307      	str	r3, [sp, #28]
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	46b8      	mov	r8, r7
 80085e4:	9306      	str	r3, [sp, #24]
 80085e6:	4607      	mov	r7, r0
 80085e8:	9b01      	ldr	r3, [sp, #4]
 80085ea:	4631      	mov	r1, r6
 80085ec:	3b01      	subs	r3, #1
 80085ee:	4658      	mov	r0, fp
 80085f0:	9302      	str	r3, [sp, #8]
 80085f2:	f7ff fa67 	bl	8007ac4 <quorem>
 80085f6:	4603      	mov	r3, r0
 80085f8:	3330      	adds	r3, #48	; 0x30
 80085fa:	9004      	str	r0, [sp, #16]
 80085fc:	4641      	mov	r1, r8
 80085fe:	4658      	mov	r0, fp
 8008600:	9308      	str	r3, [sp, #32]
 8008602:	f000 fc6b 	bl	8008edc <__mcmp>
 8008606:	463a      	mov	r2, r7
 8008608:	4681      	mov	r9, r0
 800860a:	4631      	mov	r1, r6
 800860c:	4620      	mov	r0, r4
 800860e:	f000 fc81 	bl	8008f14 <__mdiff>
 8008612:	68c2      	ldr	r2, [r0, #12]
 8008614:	9b08      	ldr	r3, [sp, #32]
 8008616:	4605      	mov	r5, r0
 8008618:	bb02      	cbnz	r2, 800865c <_dtoa_r+0xa7c>
 800861a:	4601      	mov	r1, r0
 800861c:	4658      	mov	r0, fp
 800861e:	f000 fc5d 	bl	8008edc <__mcmp>
 8008622:	9b08      	ldr	r3, [sp, #32]
 8008624:	4602      	mov	r2, r0
 8008626:	4629      	mov	r1, r5
 8008628:	4620      	mov	r0, r4
 800862a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800862e:	f000 fa17 	bl	8008a60 <_Bfree>
 8008632:	9b05      	ldr	r3, [sp, #20]
 8008634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008636:	9d01      	ldr	r5, [sp, #4]
 8008638:	ea43 0102 	orr.w	r1, r3, r2
 800863c:	9b06      	ldr	r3, [sp, #24]
 800863e:	430b      	orrs	r3, r1
 8008640:	9b08      	ldr	r3, [sp, #32]
 8008642:	d10d      	bne.n	8008660 <_dtoa_r+0xa80>
 8008644:	2b39      	cmp	r3, #57	; 0x39
 8008646:	d029      	beq.n	800869c <_dtoa_r+0xabc>
 8008648:	f1b9 0f00 	cmp.w	r9, #0
 800864c:	dd01      	ble.n	8008652 <_dtoa_r+0xa72>
 800864e:	9b04      	ldr	r3, [sp, #16]
 8008650:	3331      	adds	r3, #49	; 0x31
 8008652:	9a02      	ldr	r2, [sp, #8]
 8008654:	7013      	strb	r3, [r2, #0]
 8008656:	e774      	b.n	8008542 <_dtoa_r+0x962>
 8008658:	4638      	mov	r0, r7
 800865a:	e7b9      	b.n	80085d0 <_dtoa_r+0x9f0>
 800865c:	2201      	movs	r2, #1
 800865e:	e7e2      	b.n	8008626 <_dtoa_r+0xa46>
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	db06      	blt.n	8008674 <_dtoa_r+0xa94>
 8008666:	9905      	ldr	r1, [sp, #20]
 8008668:	ea41 0909 	orr.w	r9, r1, r9
 800866c:	9906      	ldr	r1, [sp, #24]
 800866e:	ea59 0101 	orrs.w	r1, r9, r1
 8008672:	d120      	bne.n	80086b6 <_dtoa_r+0xad6>
 8008674:	2a00      	cmp	r2, #0
 8008676:	ddec      	ble.n	8008652 <_dtoa_r+0xa72>
 8008678:	4659      	mov	r1, fp
 800867a:	2201      	movs	r2, #1
 800867c:	4620      	mov	r0, r4
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	f000 fbc0 	bl	8008e04 <__lshift>
 8008684:	4631      	mov	r1, r6
 8008686:	4683      	mov	fp, r0
 8008688:	f000 fc28 	bl	8008edc <__mcmp>
 800868c:	2800      	cmp	r0, #0
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	dc02      	bgt.n	8008698 <_dtoa_r+0xab8>
 8008692:	d1de      	bne.n	8008652 <_dtoa_r+0xa72>
 8008694:	07da      	lsls	r2, r3, #31
 8008696:	d5dc      	bpl.n	8008652 <_dtoa_r+0xa72>
 8008698:	2b39      	cmp	r3, #57	; 0x39
 800869a:	d1d8      	bne.n	800864e <_dtoa_r+0xa6e>
 800869c:	9a02      	ldr	r2, [sp, #8]
 800869e:	2339      	movs	r3, #57	; 0x39
 80086a0:	7013      	strb	r3, [r2, #0]
 80086a2:	462b      	mov	r3, r5
 80086a4:	461d      	mov	r5, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086ac:	2a39      	cmp	r2, #57	; 0x39
 80086ae:	d050      	beq.n	8008752 <_dtoa_r+0xb72>
 80086b0:	3201      	adds	r2, #1
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	e745      	b.n	8008542 <_dtoa_r+0x962>
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	dd03      	ble.n	80086c2 <_dtoa_r+0xae2>
 80086ba:	2b39      	cmp	r3, #57	; 0x39
 80086bc:	d0ee      	beq.n	800869c <_dtoa_r+0xabc>
 80086be:	3301      	adds	r3, #1
 80086c0:	e7c7      	b.n	8008652 <_dtoa_r+0xa72>
 80086c2:	9a01      	ldr	r2, [sp, #4]
 80086c4:	9907      	ldr	r1, [sp, #28]
 80086c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086ca:	428a      	cmp	r2, r1
 80086cc:	d02a      	beq.n	8008724 <_dtoa_r+0xb44>
 80086ce:	4659      	mov	r1, fp
 80086d0:	2300      	movs	r3, #0
 80086d2:	220a      	movs	r2, #10
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 f9e5 	bl	8008aa4 <__multadd>
 80086da:	45b8      	cmp	r8, r7
 80086dc:	4683      	mov	fp, r0
 80086de:	f04f 0300 	mov.w	r3, #0
 80086e2:	f04f 020a 	mov.w	r2, #10
 80086e6:	4641      	mov	r1, r8
 80086e8:	4620      	mov	r0, r4
 80086ea:	d107      	bne.n	80086fc <_dtoa_r+0xb1c>
 80086ec:	f000 f9da 	bl	8008aa4 <__multadd>
 80086f0:	4680      	mov	r8, r0
 80086f2:	4607      	mov	r7, r0
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	3301      	adds	r3, #1
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	e775      	b.n	80085e8 <_dtoa_r+0xa08>
 80086fc:	f000 f9d2 	bl	8008aa4 <__multadd>
 8008700:	4639      	mov	r1, r7
 8008702:	4680      	mov	r8, r0
 8008704:	2300      	movs	r3, #0
 8008706:	220a      	movs	r2, #10
 8008708:	4620      	mov	r0, r4
 800870a:	f000 f9cb 	bl	8008aa4 <__multadd>
 800870e:	4607      	mov	r7, r0
 8008710:	e7f0      	b.n	80086f4 <_dtoa_r+0xb14>
 8008712:	f1b9 0f00 	cmp.w	r9, #0
 8008716:	9a00      	ldr	r2, [sp, #0]
 8008718:	bfcc      	ite	gt
 800871a:	464d      	movgt	r5, r9
 800871c:	2501      	movle	r5, #1
 800871e:	4415      	add	r5, r2
 8008720:	f04f 0800 	mov.w	r8, #0
 8008724:	4659      	mov	r1, fp
 8008726:	2201      	movs	r2, #1
 8008728:	4620      	mov	r0, r4
 800872a:	9301      	str	r3, [sp, #4]
 800872c:	f000 fb6a 	bl	8008e04 <__lshift>
 8008730:	4631      	mov	r1, r6
 8008732:	4683      	mov	fp, r0
 8008734:	f000 fbd2 	bl	8008edc <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	dcb2      	bgt.n	80086a2 <_dtoa_r+0xac2>
 800873c:	d102      	bne.n	8008744 <_dtoa_r+0xb64>
 800873e:	9b01      	ldr	r3, [sp, #4]
 8008740:	07db      	lsls	r3, r3, #31
 8008742:	d4ae      	bmi.n	80086a2 <_dtoa_r+0xac2>
 8008744:	462b      	mov	r3, r5
 8008746:	461d      	mov	r5, r3
 8008748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800874c:	2a30      	cmp	r2, #48	; 0x30
 800874e:	d0fa      	beq.n	8008746 <_dtoa_r+0xb66>
 8008750:	e6f7      	b.n	8008542 <_dtoa_r+0x962>
 8008752:	9a00      	ldr	r2, [sp, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d1a5      	bne.n	80086a4 <_dtoa_r+0xac4>
 8008758:	f10a 0a01 	add.w	sl, sl, #1
 800875c:	2331      	movs	r3, #49	; 0x31
 800875e:	e779      	b.n	8008654 <_dtoa_r+0xa74>
 8008760:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <_dtoa_r+0xbd0>)
 8008762:	f7ff baaf 	b.w	8007cc4 <_dtoa_r+0xe4>
 8008766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008768:	2b00      	cmp	r3, #0
 800876a:	f47f aa86 	bne.w	8007c7a <_dtoa_r+0x9a>
 800876e:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <_dtoa_r+0xbd4>)
 8008770:	f7ff baa8 	b.w	8007cc4 <_dtoa_r+0xe4>
 8008774:	f1b9 0f00 	cmp.w	r9, #0
 8008778:	dc03      	bgt.n	8008782 <_dtoa_r+0xba2>
 800877a:	9b05      	ldr	r3, [sp, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	f73f aec9 	bgt.w	8008514 <_dtoa_r+0x934>
 8008782:	9d00      	ldr	r5, [sp, #0]
 8008784:	4631      	mov	r1, r6
 8008786:	4658      	mov	r0, fp
 8008788:	f7ff f99c 	bl	8007ac4 <quorem>
 800878c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008790:	f805 3b01 	strb.w	r3, [r5], #1
 8008794:	9a00      	ldr	r2, [sp, #0]
 8008796:	1aaa      	subs	r2, r5, r2
 8008798:	4591      	cmp	r9, r2
 800879a:	ddba      	ble.n	8008712 <_dtoa_r+0xb32>
 800879c:	4659      	mov	r1, fp
 800879e:	2300      	movs	r3, #0
 80087a0:	220a      	movs	r2, #10
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 f97e 	bl	8008aa4 <__multadd>
 80087a8:	4683      	mov	fp, r0
 80087aa:	e7eb      	b.n	8008784 <_dtoa_r+0xba4>
 80087ac:	08009cd7 	.word	0x08009cd7
 80087b0:	08009c30 	.word	0x08009c30
 80087b4:	08009c54 	.word	0x08009c54

080087b8 <std>:
 80087b8:	2300      	movs	r3, #0
 80087ba:	b510      	push	{r4, lr}
 80087bc:	4604      	mov	r4, r0
 80087be:	e9c0 3300 	strd	r3, r3, [r0]
 80087c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087c6:	6083      	str	r3, [r0, #8]
 80087c8:	8181      	strh	r1, [r0, #12]
 80087ca:	6643      	str	r3, [r0, #100]	; 0x64
 80087cc:	81c2      	strh	r2, [r0, #14]
 80087ce:	6183      	str	r3, [r0, #24]
 80087d0:	4619      	mov	r1, r3
 80087d2:	2208      	movs	r2, #8
 80087d4:	305c      	adds	r0, #92	; 0x5c
 80087d6:	f7fe fceb 	bl	80071b0 <memset>
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <std+0x38>)
 80087dc:	6263      	str	r3, [r4, #36]	; 0x24
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <std+0x3c>)
 80087e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <std+0x40>)
 80087e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <std+0x44>)
 80087e8:	6224      	str	r4, [r4, #32]
 80087ea:	6323      	str	r3, [r4, #48]	; 0x30
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	bf00      	nop
 80087f0:	08009525 	.word	0x08009525
 80087f4:	08009547 	.word	0x08009547
 80087f8:	0800957f 	.word	0x0800957f
 80087fc:	080095a3 	.word	0x080095a3

08008800 <_cleanup_r>:
 8008800:	4901      	ldr	r1, [pc, #4]	; (8008808 <_cleanup_r+0x8>)
 8008802:	f000 b8af 	b.w	8008964 <_fwalk_reent>
 8008806:	bf00      	nop
 8008808:	080098b9 	.word	0x080098b9

0800880c <__sfmoreglue>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	1e4a      	subs	r2, r1, #1
 8008810:	2568      	movs	r5, #104	; 0x68
 8008812:	4355      	muls	r5, r2
 8008814:	460e      	mov	r6, r1
 8008816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800881a:	f000 fcbf 	bl	800919c <_malloc_r>
 800881e:	4604      	mov	r4, r0
 8008820:	b140      	cbz	r0, 8008834 <__sfmoreglue+0x28>
 8008822:	2100      	movs	r1, #0
 8008824:	e9c0 1600 	strd	r1, r6, [r0]
 8008828:	300c      	adds	r0, #12
 800882a:	60a0      	str	r0, [r4, #8]
 800882c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008830:	f7fe fcbe 	bl	80071b0 <memset>
 8008834:	4620      	mov	r0, r4
 8008836:	bd70      	pop	{r4, r5, r6, pc}

08008838 <__sfp_lock_acquire>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__sfp_lock_acquire+0x8>)
 800883a:	f000 b8b8 	b.w	80089ae <__retarget_lock_acquire_recursive>
 800883e:	bf00      	nop
 8008840:	20000620 	.word	0x20000620

08008844 <__sfp_lock_release>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sfp_lock_release+0x8>)
 8008846:	f000 b8b3 	b.w	80089b0 <__retarget_lock_release_recursive>
 800884a:	bf00      	nop
 800884c:	20000620 	.word	0x20000620

08008850 <__sinit_lock_acquire>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sinit_lock_acquire+0x8>)
 8008852:	f000 b8ac 	b.w	80089ae <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	2000061b 	.word	0x2000061b

0800885c <__sinit_lock_release>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sinit_lock_release+0x8>)
 800885e:	f000 b8a7 	b.w	80089b0 <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	2000061b 	.word	0x2000061b

08008868 <__sinit>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4604      	mov	r4, r0
 800886c:	f7ff fff0 	bl	8008850 <__sinit_lock_acquire>
 8008870:	69a3      	ldr	r3, [r4, #24]
 8008872:	b11b      	cbz	r3, 800887c <__sinit+0x14>
 8008874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008878:	f7ff bff0 	b.w	800885c <__sinit_lock_release>
 800887c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008880:	6523      	str	r3, [r4, #80]	; 0x50
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <__sinit+0x68>)
 8008884:	4a13      	ldr	r2, [pc, #76]	; (80088d4 <__sinit+0x6c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	62a2      	str	r2, [r4, #40]	; 0x28
 800888a:	42a3      	cmp	r3, r4
 800888c:	bf04      	itt	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	61a3      	streq	r3, [r4, #24]
 8008892:	4620      	mov	r0, r4
 8008894:	f000 f820 	bl	80088d8 <__sfp>
 8008898:	6060      	str	r0, [r4, #4]
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f81c 	bl	80088d8 <__sfp>
 80088a0:	60a0      	str	r0, [r4, #8]
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 f818 	bl	80088d8 <__sfp>
 80088a8:	2200      	movs	r2, #0
 80088aa:	60e0      	str	r0, [r4, #12]
 80088ac:	2104      	movs	r1, #4
 80088ae:	6860      	ldr	r0, [r4, #4]
 80088b0:	f7ff ff82 	bl	80087b8 <std>
 80088b4:	68a0      	ldr	r0, [r4, #8]
 80088b6:	2201      	movs	r2, #1
 80088b8:	2109      	movs	r1, #9
 80088ba:	f7ff ff7d 	bl	80087b8 <std>
 80088be:	68e0      	ldr	r0, [r4, #12]
 80088c0:	2202      	movs	r2, #2
 80088c2:	2112      	movs	r1, #18
 80088c4:	f7ff ff78 	bl	80087b8 <std>
 80088c8:	2301      	movs	r3, #1
 80088ca:	61a3      	str	r3, [r4, #24]
 80088cc:	e7d2      	b.n	8008874 <__sinit+0xc>
 80088ce:	bf00      	nop
 80088d0:	08009c1c 	.word	0x08009c1c
 80088d4:	08008801 	.word	0x08008801

080088d8 <__sfp>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	4607      	mov	r7, r0
 80088dc:	f7ff ffac 	bl	8008838 <__sfp_lock_acquire>
 80088e0:	4b1e      	ldr	r3, [pc, #120]	; (800895c <__sfp+0x84>)
 80088e2:	681e      	ldr	r6, [r3, #0]
 80088e4:	69b3      	ldr	r3, [r6, #24]
 80088e6:	b913      	cbnz	r3, 80088ee <__sfp+0x16>
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7ff ffbd 	bl	8008868 <__sinit>
 80088ee:	3648      	adds	r6, #72	; 0x48
 80088f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	d503      	bpl.n	8008900 <__sfp+0x28>
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	b30b      	cbz	r3, 8008940 <__sfp+0x68>
 80088fc:	6836      	ldr	r6, [r6, #0]
 80088fe:	e7f7      	b.n	80088f0 <__sfp+0x18>
 8008900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008904:	b9d5      	cbnz	r5, 800893c <__sfp+0x64>
 8008906:	4b16      	ldr	r3, [pc, #88]	; (8008960 <__sfp+0x88>)
 8008908:	60e3      	str	r3, [r4, #12]
 800890a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800890e:	6665      	str	r5, [r4, #100]	; 0x64
 8008910:	f000 f84c 	bl	80089ac <__retarget_lock_init_recursive>
 8008914:	f7ff ff96 	bl	8008844 <__sfp_lock_release>
 8008918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800891c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008920:	6025      	str	r5, [r4, #0]
 8008922:	61a5      	str	r5, [r4, #24]
 8008924:	2208      	movs	r2, #8
 8008926:	4629      	mov	r1, r5
 8008928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800892c:	f7fe fc40 	bl	80071b0 <memset>
 8008930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008938:	4620      	mov	r0, r4
 800893a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893c:	3468      	adds	r4, #104	; 0x68
 800893e:	e7d9      	b.n	80088f4 <__sfp+0x1c>
 8008940:	2104      	movs	r1, #4
 8008942:	4638      	mov	r0, r7
 8008944:	f7ff ff62 	bl	800880c <__sfmoreglue>
 8008948:	4604      	mov	r4, r0
 800894a:	6030      	str	r0, [r6, #0]
 800894c:	2800      	cmp	r0, #0
 800894e:	d1d5      	bne.n	80088fc <__sfp+0x24>
 8008950:	f7ff ff78 	bl	8008844 <__sfp_lock_release>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	e7ee      	b.n	8008938 <__sfp+0x60>
 800895a:	bf00      	nop
 800895c:	08009c1c 	.word	0x08009c1c
 8008960:	ffff0001 	.word	0xffff0001

08008964 <_fwalk_reent>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	4606      	mov	r6, r0
 800896a:	4688      	mov	r8, r1
 800896c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008970:	2700      	movs	r7, #0
 8008972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008976:	f1b9 0901 	subs.w	r9, r9, #1
 800897a:	d505      	bpl.n	8008988 <_fwalk_reent+0x24>
 800897c:	6824      	ldr	r4, [r4, #0]
 800897e:	2c00      	cmp	r4, #0
 8008980:	d1f7      	bne.n	8008972 <_fwalk_reent+0xe>
 8008982:	4638      	mov	r0, r7
 8008984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008988:	89ab      	ldrh	r3, [r5, #12]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d907      	bls.n	800899e <_fwalk_reent+0x3a>
 800898e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008992:	3301      	adds	r3, #1
 8008994:	d003      	beq.n	800899e <_fwalk_reent+0x3a>
 8008996:	4629      	mov	r1, r5
 8008998:	4630      	mov	r0, r6
 800899a:	47c0      	blx	r8
 800899c:	4307      	orrs	r7, r0
 800899e:	3568      	adds	r5, #104	; 0x68
 80089a0:	e7e9      	b.n	8008976 <_fwalk_reent+0x12>
	...

080089a4 <_localeconv_r>:
 80089a4:	4800      	ldr	r0, [pc, #0]	; (80089a8 <_localeconv_r+0x4>)
 80089a6:	4770      	bx	lr
 80089a8:	20000318 	.word	0x20000318

080089ac <__retarget_lock_init_recursive>:
 80089ac:	4770      	bx	lr

080089ae <__retarget_lock_acquire_recursive>:
 80089ae:	4770      	bx	lr

080089b0 <__retarget_lock_release_recursive>:
 80089b0:	4770      	bx	lr
	...

080089b4 <malloc>:
 80089b4:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <malloc+0xc>)
 80089b6:	4601      	mov	r1, r0
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	f000 bbef 	b.w	800919c <_malloc_r>
 80089be:	bf00      	nop
 80089c0:	200001c4 	.word	0x200001c4

080089c4 <memcpy>:
 80089c4:	440a      	add	r2, r1
 80089c6:	4291      	cmp	r1, r2
 80089c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089cc:	d100      	bne.n	80089d0 <memcpy+0xc>
 80089ce:	4770      	bx	lr
 80089d0:	b510      	push	{r4, lr}
 80089d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089da:	4291      	cmp	r1, r2
 80089dc:	d1f9      	bne.n	80089d2 <memcpy+0xe>
 80089de:	bd10      	pop	{r4, pc}

080089e0 <_Balloc>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	b976      	cbnz	r6, 8008a08 <_Balloc+0x28>
 80089ea:	2010      	movs	r0, #16
 80089ec:	f7ff ffe2 	bl	80089b4 <malloc>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6260      	str	r0, [r4, #36]	; 0x24
 80089f4:	b920      	cbnz	r0, 8008a00 <_Balloc+0x20>
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <_Balloc+0x78>)
 80089f8:	4818      	ldr	r0, [pc, #96]	; (8008a5c <_Balloc+0x7c>)
 80089fa:	2166      	movs	r1, #102	; 0x66
 80089fc:	f000 fea8 	bl	8009750 <__assert_func>
 8008a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a04:	6006      	str	r6, [r0, #0]
 8008a06:	60c6      	str	r6, [r0, #12]
 8008a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a0a:	68f3      	ldr	r3, [r6, #12]
 8008a0c:	b183      	cbz	r3, 8008a30 <_Balloc+0x50>
 8008a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a16:	b9b8      	cbnz	r0, 8008a48 <_Balloc+0x68>
 8008a18:	2101      	movs	r1, #1
 8008a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a1e:	1d72      	adds	r2, r6, #5
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fb5a 	bl	80090dc <_calloc_r>
 8008a28:	b160      	cbz	r0, 8008a44 <_Balloc+0x64>
 8008a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a2e:	e00e      	b.n	8008a4e <_Balloc+0x6e>
 8008a30:	2221      	movs	r2, #33	; 0x21
 8008a32:	2104      	movs	r1, #4
 8008a34:	4620      	mov	r0, r4
 8008a36:	f000 fb51 	bl	80090dc <_calloc_r>
 8008a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a3c:	60f0      	str	r0, [r6, #12]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e4      	bne.n	8008a0e <_Balloc+0x2e>
 8008a44:	2000      	movs	r0, #0
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	6802      	ldr	r2, [r0, #0]
 8008a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a54:	e7f7      	b.n	8008a46 <_Balloc+0x66>
 8008a56:	bf00      	nop
 8008a58:	08009c61 	.word	0x08009c61
 8008a5c:	08009d48 	.word	0x08009d48

08008a60 <_Bfree>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a64:	4605      	mov	r5, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	b976      	cbnz	r6, 8008a88 <_Bfree+0x28>
 8008a6a:	2010      	movs	r0, #16
 8008a6c:	f7ff ffa2 	bl	80089b4 <malloc>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6268      	str	r0, [r5, #36]	; 0x24
 8008a74:	b920      	cbnz	r0, 8008a80 <_Bfree+0x20>
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <_Bfree+0x3c>)
 8008a78:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <_Bfree+0x40>)
 8008a7a:	218a      	movs	r1, #138	; 0x8a
 8008a7c:	f000 fe68 	bl	8009750 <__assert_func>
 8008a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a84:	6006      	str	r6, [r0, #0]
 8008a86:	60c6      	str	r6, [r0, #12]
 8008a88:	b13c      	cbz	r4, 8008a9a <_Bfree+0x3a>
 8008a8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a8c:	6862      	ldr	r2, [r4, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a94:	6021      	str	r1, [r4, #0]
 8008a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	08009c61 	.word	0x08009c61
 8008aa0:	08009d48 	.word	0x08009d48

08008aa4 <__multadd>:
 8008aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa8:	690e      	ldr	r6, [r1, #16]
 8008aaa:	4607      	mov	r7, r0
 8008aac:	4698      	mov	r8, r3
 8008aae:	460c      	mov	r4, r1
 8008ab0:	f101 0014 	add.w	r0, r1, #20
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6805      	ldr	r5, [r0, #0]
 8008ab8:	b2a9      	uxth	r1, r5
 8008aba:	fb02 8101 	mla	r1, r2, r1, r8
 8008abe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008ac2:	0c2d      	lsrs	r5, r5, #16
 8008ac4:	fb02 c505 	mla	r5, r2, r5, ip
 8008ac8:	b289      	uxth	r1, r1
 8008aca:	3301      	adds	r3, #1
 8008acc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ad0:	429e      	cmp	r6, r3
 8008ad2:	f840 1b04 	str.w	r1, [r0], #4
 8008ad6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008ada:	dcec      	bgt.n	8008ab6 <__multadd+0x12>
 8008adc:	f1b8 0f00 	cmp.w	r8, #0
 8008ae0:	d022      	beq.n	8008b28 <__multadd+0x84>
 8008ae2:	68a3      	ldr	r3, [r4, #8]
 8008ae4:	42b3      	cmp	r3, r6
 8008ae6:	dc19      	bgt.n	8008b1c <__multadd+0x78>
 8008ae8:	6861      	ldr	r1, [r4, #4]
 8008aea:	4638      	mov	r0, r7
 8008aec:	3101      	adds	r1, #1
 8008aee:	f7ff ff77 	bl	80089e0 <_Balloc>
 8008af2:	4605      	mov	r5, r0
 8008af4:	b928      	cbnz	r0, 8008b02 <__multadd+0x5e>
 8008af6:	4602      	mov	r2, r0
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <__multadd+0x8c>)
 8008afa:	480e      	ldr	r0, [pc, #56]	; (8008b34 <__multadd+0x90>)
 8008afc:	21b5      	movs	r1, #181	; 0xb5
 8008afe:	f000 fe27 	bl	8009750 <__assert_func>
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	3202      	adds	r2, #2
 8008b06:	f104 010c 	add.w	r1, r4, #12
 8008b0a:	0092      	lsls	r2, r2, #2
 8008b0c:	300c      	adds	r0, #12
 8008b0e:	f7ff ff59 	bl	80089c4 <memcpy>
 8008b12:	4621      	mov	r1, r4
 8008b14:	4638      	mov	r0, r7
 8008b16:	f7ff ffa3 	bl	8008a60 <_Bfree>
 8008b1a:	462c      	mov	r4, r5
 8008b1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008b20:	3601      	adds	r6, #1
 8008b22:	f8c3 8014 	str.w	r8, [r3, #20]
 8008b26:	6126      	str	r6, [r4, #16]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2e:	bf00      	nop
 8008b30:	08009cd7 	.word	0x08009cd7
 8008b34:	08009d48 	.word	0x08009d48

08008b38 <__hi0bits>:
 8008b38:	0c03      	lsrs	r3, r0, #16
 8008b3a:	041b      	lsls	r3, r3, #16
 8008b3c:	b9d3      	cbnz	r3, 8008b74 <__hi0bits+0x3c>
 8008b3e:	0400      	lsls	r0, r0, #16
 8008b40:	2310      	movs	r3, #16
 8008b42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b46:	bf04      	itt	eq
 8008b48:	0200      	lsleq	r0, r0, #8
 8008b4a:	3308      	addeq	r3, #8
 8008b4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b50:	bf04      	itt	eq
 8008b52:	0100      	lsleq	r0, r0, #4
 8008b54:	3304      	addeq	r3, #4
 8008b56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b5a:	bf04      	itt	eq
 8008b5c:	0080      	lsleq	r0, r0, #2
 8008b5e:	3302      	addeq	r3, #2
 8008b60:	2800      	cmp	r0, #0
 8008b62:	db05      	blt.n	8008b70 <__hi0bits+0x38>
 8008b64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b68:	f103 0301 	add.w	r3, r3, #1
 8008b6c:	bf08      	it	eq
 8008b6e:	2320      	moveq	r3, #32
 8008b70:	4618      	mov	r0, r3
 8008b72:	4770      	bx	lr
 8008b74:	2300      	movs	r3, #0
 8008b76:	e7e4      	b.n	8008b42 <__hi0bits+0xa>

08008b78 <__lo0bits>:
 8008b78:	6803      	ldr	r3, [r0, #0]
 8008b7a:	f013 0207 	ands.w	r2, r3, #7
 8008b7e:	4601      	mov	r1, r0
 8008b80:	d00b      	beq.n	8008b9a <__lo0bits+0x22>
 8008b82:	07da      	lsls	r2, r3, #31
 8008b84:	d424      	bmi.n	8008bd0 <__lo0bits+0x58>
 8008b86:	0798      	lsls	r0, r3, #30
 8008b88:	bf49      	itett	mi
 8008b8a:	085b      	lsrmi	r3, r3, #1
 8008b8c:	089b      	lsrpl	r3, r3, #2
 8008b8e:	2001      	movmi	r0, #1
 8008b90:	600b      	strmi	r3, [r1, #0]
 8008b92:	bf5c      	itt	pl
 8008b94:	600b      	strpl	r3, [r1, #0]
 8008b96:	2002      	movpl	r0, #2
 8008b98:	4770      	bx	lr
 8008b9a:	b298      	uxth	r0, r3
 8008b9c:	b9b0      	cbnz	r0, 8008bcc <__lo0bits+0x54>
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	2010      	movs	r0, #16
 8008ba2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ba6:	bf04      	itt	eq
 8008ba8:	0a1b      	lsreq	r3, r3, #8
 8008baa:	3008      	addeq	r0, #8
 8008bac:	071a      	lsls	r2, r3, #28
 8008bae:	bf04      	itt	eq
 8008bb0:	091b      	lsreq	r3, r3, #4
 8008bb2:	3004      	addeq	r0, #4
 8008bb4:	079a      	lsls	r2, r3, #30
 8008bb6:	bf04      	itt	eq
 8008bb8:	089b      	lsreq	r3, r3, #2
 8008bba:	3002      	addeq	r0, #2
 8008bbc:	07da      	lsls	r2, r3, #31
 8008bbe:	d403      	bmi.n	8008bc8 <__lo0bits+0x50>
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	f100 0001 	add.w	r0, r0, #1
 8008bc6:	d005      	beq.n	8008bd4 <__lo0bits+0x5c>
 8008bc8:	600b      	str	r3, [r1, #0]
 8008bca:	4770      	bx	lr
 8008bcc:	4610      	mov	r0, r2
 8008bce:	e7e8      	b.n	8008ba2 <__lo0bits+0x2a>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	4770      	bx	lr
 8008bd4:	2020      	movs	r0, #32
 8008bd6:	4770      	bx	lr

08008bd8 <__i2b>:
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	460c      	mov	r4, r1
 8008bdc:	2101      	movs	r1, #1
 8008bde:	f7ff feff 	bl	80089e0 <_Balloc>
 8008be2:	4602      	mov	r2, r0
 8008be4:	b928      	cbnz	r0, 8008bf2 <__i2b+0x1a>
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <__i2b+0x24>)
 8008be8:	4805      	ldr	r0, [pc, #20]	; (8008c00 <__i2b+0x28>)
 8008bea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bee:	f000 fdaf 	bl	8009750 <__assert_func>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	6144      	str	r4, [r0, #20]
 8008bf6:	6103      	str	r3, [r0, #16]
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	bf00      	nop
 8008bfc:	08009cd7 	.word	0x08009cd7
 8008c00:	08009d48 	.word	0x08009d48

08008c04 <__multiply>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	4614      	mov	r4, r2
 8008c0a:	690a      	ldr	r2, [r1, #16]
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	bfb8      	it	lt
 8008c12:	460b      	movlt	r3, r1
 8008c14:	460d      	mov	r5, r1
 8008c16:	bfbc      	itt	lt
 8008c18:	4625      	movlt	r5, r4
 8008c1a:	461c      	movlt	r4, r3
 8008c1c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008c20:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c24:	68ab      	ldr	r3, [r5, #8]
 8008c26:	6869      	ldr	r1, [r5, #4]
 8008c28:	eb0a 0709 	add.w	r7, sl, r9
 8008c2c:	42bb      	cmp	r3, r7
 8008c2e:	b085      	sub	sp, #20
 8008c30:	bfb8      	it	lt
 8008c32:	3101      	addlt	r1, #1
 8008c34:	f7ff fed4 	bl	80089e0 <_Balloc>
 8008c38:	b930      	cbnz	r0, 8008c48 <__multiply+0x44>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	4b42      	ldr	r3, [pc, #264]	; (8008d48 <__multiply+0x144>)
 8008c3e:	4843      	ldr	r0, [pc, #268]	; (8008d4c <__multiply+0x148>)
 8008c40:	f240 115d 	movw	r1, #349	; 0x15d
 8008c44:	f000 fd84 	bl	8009750 <__assert_func>
 8008c48:	f100 0614 	add.w	r6, r0, #20
 8008c4c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c50:	4633      	mov	r3, r6
 8008c52:	2200      	movs	r2, #0
 8008c54:	4543      	cmp	r3, r8
 8008c56:	d31e      	bcc.n	8008c96 <__multiply+0x92>
 8008c58:	f105 0c14 	add.w	ip, r5, #20
 8008c5c:	f104 0314 	add.w	r3, r4, #20
 8008c60:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c64:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c68:	9202      	str	r2, [sp, #8]
 8008c6a:	ebac 0205 	sub.w	r2, ip, r5
 8008c6e:	3a15      	subs	r2, #21
 8008c70:	f022 0203 	bic.w	r2, r2, #3
 8008c74:	3204      	adds	r2, #4
 8008c76:	f105 0115 	add.w	r1, r5, #21
 8008c7a:	458c      	cmp	ip, r1
 8008c7c:	bf38      	it	cc
 8008c7e:	2204      	movcc	r2, #4
 8008c80:	9201      	str	r2, [sp, #4]
 8008c82:	9a02      	ldr	r2, [sp, #8]
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d808      	bhi.n	8008c9c <__multiply+0x98>
 8008c8a:	2f00      	cmp	r7, #0
 8008c8c:	dc55      	bgt.n	8008d3a <__multiply+0x136>
 8008c8e:	6107      	str	r7, [r0, #16]
 8008c90:	b005      	add	sp, #20
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	f843 2b04 	str.w	r2, [r3], #4
 8008c9a:	e7db      	b.n	8008c54 <__multiply+0x50>
 8008c9c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ca0:	f1ba 0f00 	cmp.w	sl, #0
 8008ca4:	d020      	beq.n	8008ce8 <__multiply+0xe4>
 8008ca6:	f105 0e14 	add.w	lr, r5, #20
 8008caa:	46b1      	mov	r9, r6
 8008cac:	2200      	movs	r2, #0
 8008cae:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008cb2:	f8d9 b000 	ldr.w	fp, [r9]
 8008cb6:	b2a1      	uxth	r1, r4
 8008cb8:	fa1f fb8b 	uxth.w	fp, fp
 8008cbc:	fb0a b101 	mla	r1, sl, r1, fp
 8008cc0:	4411      	add	r1, r2
 8008cc2:	f8d9 2000 	ldr.w	r2, [r9]
 8008cc6:	0c24      	lsrs	r4, r4, #16
 8008cc8:	0c12      	lsrs	r2, r2, #16
 8008cca:	fb0a 2404 	mla	r4, sl, r4, r2
 8008cce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008cd2:	b289      	uxth	r1, r1
 8008cd4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cd8:	45f4      	cmp	ip, lr
 8008cda:	f849 1b04 	str.w	r1, [r9], #4
 8008cde:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ce2:	d8e4      	bhi.n	8008cae <__multiply+0xaa>
 8008ce4:	9901      	ldr	r1, [sp, #4]
 8008ce6:	5072      	str	r2, [r6, r1]
 8008ce8:	9a03      	ldr	r2, [sp, #12]
 8008cea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	f1b9 0f00 	cmp.w	r9, #0
 8008cf4:	d01f      	beq.n	8008d36 <__multiply+0x132>
 8008cf6:	6834      	ldr	r4, [r6, #0]
 8008cf8:	f105 0114 	add.w	r1, r5, #20
 8008cfc:	46b6      	mov	lr, r6
 8008cfe:	f04f 0a00 	mov.w	sl, #0
 8008d02:	880a      	ldrh	r2, [r1, #0]
 8008d04:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008d08:	fb09 b202 	mla	r2, r9, r2, fp
 8008d0c:	4492      	add	sl, r2
 8008d0e:	b2a4      	uxth	r4, r4
 8008d10:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008d14:	f84e 4b04 	str.w	r4, [lr], #4
 8008d18:	f851 4b04 	ldr.w	r4, [r1], #4
 8008d1c:	f8be 2000 	ldrh.w	r2, [lr]
 8008d20:	0c24      	lsrs	r4, r4, #16
 8008d22:	fb09 2404 	mla	r4, r9, r4, r2
 8008d26:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008d2a:	458c      	cmp	ip, r1
 8008d2c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d30:	d8e7      	bhi.n	8008d02 <__multiply+0xfe>
 8008d32:	9a01      	ldr	r2, [sp, #4]
 8008d34:	50b4      	str	r4, [r6, r2]
 8008d36:	3604      	adds	r6, #4
 8008d38:	e7a3      	b.n	8008c82 <__multiply+0x7e>
 8008d3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1a5      	bne.n	8008c8e <__multiply+0x8a>
 8008d42:	3f01      	subs	r7, #1
 8008d44:	e7a1      	b.n	8008c8a <__multiply+0x86>
 8008d46:	bf00      	nop
 8008d48:	08009cd7 	.word	0x08009cd7
 8008d4c:	08009d48 	.word	0x08009d48

08008d50 <__pow5mult>:
 8008d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	4615      	mov	r5, r2
 8008d56:	f012 0203 	ands.w	r2, r2, #3
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	d007      	beq.n	8008d70 <__pow5mult+0x20>
 8008d60:	4c25      	ldr	r4, [pc, #148]	; (8008df8 <__pow5mult+0xa8>)
 8008d62:	3a01      	subs	r2, #1
 8008d64:	2300      	movs	r3, #0
 8008d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d6a:	f7ff fe9b 	bl	8008aa4 <__multadd>
 8008d6e:	4607      	mov	r7, r0
 8008d70:	10ad      	asrs	r5, r5, #2
 8008d72:	d03d      	beq.n	8008df0 <__pow5mult+0xa0>
 8008d74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d76:	b97c      	cbnz	r4, 8008d98 <__pow5mult+0x48>
 8008d78:	2010      	movs	r0, #16
 8008d7a:	f7ff fe1b 	bl	80089b4 <malloc>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	6270      	str	r0, [r6, #36]	; 0x24
 8008d82:	b928      	cbnz	r0, 8008d90 <__pow5mult+0x40>
 8008d84:	4b1d      	ldr	r3, [pc, #116]	; (8008dfc <__pow5mult+0xac>)
 8008d86:	481e      	ldr	r0, [pc, #120]	; (8008e00 <__pow5mult+0xb0>)
 8008d88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d8c:	f000 fce0 	bl	8009750 <__assert_func>
 8008d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d94:	6004      	str	r4, [r0, #0]
 8008d96:	60c4      	str	r4, [r0, #12]
 8008d98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008da0:	b94c      	cbnz	r4, 8008db6 <__pow5mult+0x66>
 8008da2:	f240 2171 	movw	r1, #625	; 0x271
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff ff16 	bl	8008bd8 <__i2b>
 8008dac:	2300      	movs	r3, #0
 8008dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8008db2:	4604      	mov	r4, r0
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	f04f 0900 	mov.w	r9, #0
 8008dba:	07eb      	lsls	r3, r5, #31
 8008dbc:	d50a      	bpl.n	8008dd4 <__pow5mult+0x84>
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ff1e 	bl	8008c04 <__multiply>
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4680      	mov	r8, r0
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f7ff fe47 	bl	8008a60 <_Bfree>
 8008dd2:	4647      	mov	r7, r8
 8008dd4:	106d      	asrs	r5, r5, #1
 8008dd6:	d00b      	beq.n	8008df0 <__pow5mult+0xa0>
 8008dd8:	6820      	ldr	r0, [r4, #0]
 8008dda:	b938      	cbnz	r0, 8008dec <__pow5mult+0x9c>
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4621      	mov	r1, r4
 8008de0:	4630      	mov	r0, r6
 8008de2:	f7ff ff0f 	bl	8008c04 <__multiply>
 8008de6:	6020      	str	r0, [r4, #0]
 8008de8:	f8c0 9000 	str.w	r9, [r0]
 8008dec:	4604      	mov	r4, r0
 8008dee:	e7e4      	b.n	8008dba <__pow5mult+0x6a>
 8008df0:	4638      	mov	r0, r7
 8008df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008df6:	bf00      	nop
 8008df8:	08009e98 	.word	0x08009e98
 8008dfc:	08009c61 	.word	0x08009c61
 8008e00:	08009d48 	.word	0x08009d48

08008e04 <__lshift>:
 8008e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e08:	460c      	mov	r4, r1
 8008e0a:	6849      	ldr	r1, [r1, #4]
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e12:	68a3      	ldr	r3, [r4, #8]
 8008e14:	4607      	mov	r7, r0
 8008e16:	4691      	mov	r9, r2
 8008e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e1c:	f108 0601 	add.w	r6, r8, #1
 8008e20:	42b3      	cmp	r3, r6
 8008e22:	db0b      	blt.n	8008e3c <__lshift+0x38>
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff fddb 	bl	80089e0 <_Balloc>
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	b948      	cbnz	r0, 8008e42 <__lshift+0x3e>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	4b28      	ldr	r3, [pc, #160]	; (8008ed4 <__lshift+0xd0>)
 8008e32:	4829      	ldr	r0, [pc, #164]	; (8008ed8 <__lshift+0xd4>)
 8008e34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e38:	f000 fc8a 	bl	8009750 <__assert_func>
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	e7ee      	b.n	8008e20 <__lshift+0x1c>
 8008e42:	2300      	movs	r3, #0
 8008e44:	f100 0114 	add.w	r1, r0, #20
 8008e48:	f100 0210 	add.w	r2, r0, #16
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	4553      	cmp	r3, sl
 8008e50:	db33      	blt.n	8008eba <__lshift+0xb6>
 8008e52:	6920      	ldr	r0, [r4, #16]
 8008e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e58:	f104 0314 	add.w	r3, r4, #20
 8008e5c:	f019 091f 	ands.w	r9, r9, #31
 8008e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e68:	d02b      	beq.n	8008ec2 <__lshift+0xbe>
 8008e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e6e:	468a      	mov	sl, r1
 8008e70:	2200      	movs	r2, #0
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	fa00 f009 	lsl.w	r0, r0, r9
 8008e78:	4302      	orrs	r2, r0
 8008e7a:	f84a 2b04 	str.w	r2, [sl], #4
 8008e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e82:	459c      	cmp	ip, r3
 8008e84:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e88:	d8f3      	bhi.n	8008e72 <__lshift+0x6e>
 8008e8a:	ebac 0304 	sub.w	r3, ip, r4
 8008e8e:	3b15      	subs	r3, #21
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	3304      	adds	r3, #4
 8008e96:	f104 0015 	add.w	r0, r4, #21
 8008e9a:	4584      	cmp	ip, r0
 8008e9c:	bf38      	it	cc
 8008e9e:	2304      	movcc	r3, #4
 8008ea0:	50ca      	str	r2, [r1, r3]
 8008ea2:	b10a      	cbz	r2, 8008ea8 <__lshift+0xa4>
 8008ea4:	f108 0602 	add.w	r6, r8, #2
 8008ea8:	3e01      	subs	r6, #1
 8008eaa:	4638      	mov	r0, r7
 8008eac:	612e      	str	r6, [r5, #16]
 8008eae:	4621      	mov	r1, r4
 8008eb0:	f7ff fdd6 	bl	8008a60 <_Bfree>
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	e7c5      	b.n	8008e4e <__lshift+0x4a>
 8008ec2:	3904      	subs	r1, #4
 8008ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ecc:	459c      	cmp	ip, r3
 8008ece:	d8f9      	bhi.n	8008ec4 <__lshift+0xc0>
 8008ed0:	e7ea      	b.n	8008ea8 <__lshift+0xa4>
 8008ed2:	bf00      	nop
 8008ed4:	08009cd7 	.word	0x08009cd7
 8008ed8:	08009d48 	.word	0x08009d48

08008edc <__mcmp>:
 8008edc:	b530      	push	{r4, r5, lr}
 8008ede:	6902      	ldr	r2, [r0, #16]
 8008ee0:	690c      	ldr	r4, [r1, #16]
 8008ee2:	1b12      	subs	r2, r2, r4
 8008ee4:	d10e      	bne.n	8008f04 <__mcmp+0x28>
 8008ee6:	f100 0314 	add.w	r3, r0, #20
 8008eea:	3114      	adds	r1, #20
 8008eec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ef0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ef4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ef8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008efc:	42a5      	cmp	r5, r4
 8008efe:	d003      	beq.n	8008f08 <__mcmp+0x2c>
 8008f00:	d305      	bcc.n	8008f0e <__mcmp+0x32>
 8008f02:	2201      	movs	r2, #1
 8008f04:	4610      	mov	r0, r2
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	4283      	cmp	r3, r0
 8008f0a:	d3f3      	bcc.n	8008ef4 <__mcmp+0x18>
 8008f0c:	e7fa      	b.n	8008f04 <__mcmp+0x28>
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f12:	e7f7      	b.n	8008f04 <__mcmp+0x28>

08008f14 <__mdiff>:
 8008f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	460c      	mov	r4, r1
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4620      	mov	r0, r4
 8008f20:	4617      	mov	r7, r2
 8008f22:	f7ff ffdb 	bl	8008edc <__mcmp>
 8008f26:	1e05      	subs	r5, r0, #0
 8008f28:	d110      	bne.n	8008f4c <__mdiff+0x38>
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff fd57 	bl	80089e0 <_Balloc>
 8008f32:	b930      	cbnz	r0, 8008f42 <__mdiff+0x2e>
 8008f34:	4b39      	ldr	r3, [pc, #228]	; (800901c <__mdiff+0x108>)
 8008f36:	4602      	mov	r2, r0
 8008f38:	f240 2132 	movw	r1, #562	; 0x232
 8008f3c:	4838      	ldr	r0, [pc, #224]	; (8009020 <__mdiff+0x10c>)
 8008f3e:	f000 fc07 	bl	8009750 <__assert_func>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4c:	bfa4      	itt	ge
 8008f4e:	463b      	movge	r3, r7
 8008f50:	4627      	movge	r7, r4
 8008f52:	4630      	mov	r0, r6
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	bfa6      	itte	ge
 8008f58:	461c      	movge	r4, r3
 8008f5a:	2500      	movge	r5, #0
 8008f5c:	2501      	movlt	r5, #1
 8008f5e:	f7ff fd3f 	bl	80089e0 <_Balloc>
 8008f62:	b920      	cbnz	r0, 8008f6e <__mdiff+0x5a>
 8008f64:	4b2d      	ldr	r3, [pc, #180]	; (800901c <__mdiff+0x108>)
 8008f66:	4602      	mov	r2, r0
 8008f68:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f6c:	e7e6      	b.n	8008f3c <__mdiff+0x28>
 8008f6e:	693e      	ldr	r6, [r7, #16]
 8008f70:	60c5      	str	r5, [r0, #12]
 8008f72:	6925      	ldr	r5, [r4, #16]
 8008f74:	f107 0114 	add.w	r1, r7, #20
 8008f78:	f104 0914 	add.w	r9, r4, #20
 8008f7c:	f100 0e14 	add.w	lr, r0, #20
 8008f80:	f107 0210 	add.w	r2, r7, #16
 8008f84:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008f88:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008f8c:	46f2      	mov	sl, lr
 8008f8e:	2700      	movs	r7, #0
 8008f90:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f98:	fa1f f883 	uxth.w	r8, r3
 8008f9c:	fa17 f78b 	uxtah	r7, r7, fp
 8008fa0:	0c1b      	lsrs	r3, r3, #16
 8008fa2:	eba7 0808 	sub.w	r8, r7, r8
 8008fa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008faa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008fae:	fa1f f888 	uxth.w	r8, r8
 8008fb2:	141f      	asrs	r7, r3, #16
 8008fb4:	454d      	cmp	r5, r9
 8008fb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008fba:	f84a 3b04 	str.w	r3, [sl], #4
 8008fbe:	d8e7      	bhi.n	8008f90 <__mdiff+0x7c>
 8008fc0:	1b2b      	subs	r3, r5, r4
 8008fc2:	3b15      	subs	r3, #21
 8008fc4:	f023 0303 	bic.w	r3, r3, #3
 8008fc8:	3304      	adds	r3, #4
 8008fca:	3415      	adds	r4, #21
 8008fcc:	42a5      	cmp	r5, r4
 8008fce:	bf38      	it	cc
 8008fd0:	2304      	movcc	r3, #4
 8008fd2:	4419      	add	r1, r3
 8008fd4:	4473      	add	r3, lr
 8008fd6:	469e      	mov	lr, r3
 8008fd8:	460d      	mov	r5, r1
 8008fda:	4565      	cmp	r5, ip
 8008fdc:	d30e      	bcc.n	8008ffc <__mdiff+0xe8>
 8008fde:	f10c 0203 	add.w	r2, ip, #3
 8008fe2:	1a52      	subs	r2, r2, r1
 8008fe4:	f022 0203 	bic.w	r2, r2, #3
 8008fe8:	3903      	subs	r1, #3
 8008fea:	458c      	cmp	ip, r1
 8008fec:	bf38      	it	cc
 8008fee:	2200      	movcc	r2, #0
 8008ff0:	441a      	add	r2, r3
 8008ff2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ff6:	b17b      	cbz	r3, 8009018 <__mdiff+0x104>
 8008ff8:	6106      	str	r6, [r0, #16]
 8008ffa:	e7a5      	b.n	8008f48 <__mdiff+0x34>
 8008ffc:	f855 8b04 	ldr.w	r8, [r5], #4
 8009000:	fa17 f488 	uxtah	r4, r7, r8
 8009004:	1422      	asrs	r2, r4, #16
 8009006:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800900a:	b2a4      	uxth	r4, r4
 800900c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009010:	f84e 4b04 	str.w	r4, [lr], #4
 8009014:	1417      	asrs	r7, r2, #16
 8009016:	e7e0      	b.n	8008fda <__mdiff+0xc6>
 8009018:	3e01      	subs	r6, #1
 800901a:	e7ea      	b.n	8008ff2 <__mdiff+0xde>
 800901c:	08009cd7 	.word	0x08009cd7
 8009020:	08009d48 	.word	0x08009d48

08009024 <__d2b>:
 8009024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009028:	4689      	mov	r9, r1
 800902a:	2101      	movs	r1, #1
 800902c:	ec57 6b10 	vmov	r6, r7, d0
 8009030:	4690      	mov	r8, r2
 8009032:	f7ff fcd5 	bl	80089e0 <_Balloc>
 8009036:	4604      	mov	r4, r0
 8009038:	b930      	cbnz	r0, 8009048 <__d2b+0x24>
 800903a:	4602      	mov	r2, r0
 800903c:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <__d2b+0xb0>)
 800903e:	4826      	ldr	r0, [pc, #152]	; (80090d8 <__d2b+0xb4>)
 8009040:	f240 310a 	movw	r1, #778	; 0x30a
 8009044:	f000 fb84 	bl	8009750 <__assert_func>
 8009048:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800904c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009050:	bb35      	cbnz	r5, 80090a0 <__d2b+0x7c>
 8009052:	2e00      	cmp	r6, #0
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	d028      	beq.n	80090aa <__d2b+0x86>
 8009058:	4668      	mov	r0, sp
 800905a:	9600      	str	r6, [sp, #0]
 800905c:	f7ff fd8c 	bl	8008b78 <__lo0bits>
 8009060:	9900      	ldr	r1, [sp, #0]
 8009062:	b300      	cbz	r0, 80090a6 <__d2b+0x82>
 8009064:	9a01      	ldr	r2, [sp, #4]
 8009066:	f1c0 0320 	rsb	r3, r0, #32
 800906a:	fa02 f303 	lsl.w	r3, r2, r3
 800906e:	430b      	orrs	r3, r1
 8009070:	40c2      	lsrs	r2, r0
 8009072:	6163      	str	r3, [r4, #20]
 8009074:	9201      	str	r2, [sp, #4]
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	61a3      	str	r3, [r4, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	bf14      	ite	ne
 800907e:	2202      	movne	r2, #2
 8009080:	2201      	moveq	r2, #1
 8009082:	6122      	str	r2, [r4, #16]
 8009084:	b1d5      	cbz	r5, 80090bc <__d2b+0x98>
 8009086:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800908a:	4405      	add	r5, r0
 800908c:	f8c9 5000 	str.w	r5, [r9]
 8009090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009094:	f8c8 0000 	str.w	r0, [r8]
 8009098:	4620      	mov	r0, r4
 800909a:	b003      	add	sp, #12
 800909c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090a4:	e7d5      	b.n	8009052 <__d2b+0x2e>
 80090a6:	6161      	str	r1, [r4, #20]
 80090a8:	e7e5      	b.n	8009076 <__d2b+0x52>
 80090aa:	a801      	add	r0, sp, #4
 80090ac:	f7ff fd64 	bl	8008b78 <__lo0bits>
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	6163      	str	r3, [r4, #20]
 80090b4:	2201      	movs	r2, #1
 80090b6:	6122      	str	r2, [r4, #16]
 80090b8:	3020      	adds	r0, #32
 80090ba:	e7e3      	b.n	8009084 <__d2b+0x60>
 80090bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090c4:	f8c9 0000 	str.w	r0, [r9]
 80090c8:	6918      	ldr	r0, [r3, #16]
 80090ca:	f7ff fd35 	bl	8008b38 <__hi0bits>
 80090ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090d2:	e7df      	b.n	8009094 <__d2b+0x70>
 80090d4:	08009cd7 	.word	0x08009cd7
 80090d8:	08009d48 	.word	0x08009d48

080090dc <_calloc_r>:
 80090dc:	b513      	push	{r0, r1, r4, lr}
 80090de:	434a      	muls	r2, r1
 80090e0:	4611      	mov	r1, r2
 80090e2:	9201      	str	r2, [sp, #4]
 80090e4:	f000 f85a 	bl	800919c <_malloc_r>
 80090e8:	4604      	mov	r4, r0
 80090ea:	b118      	cbz	r0, 80090f4 <_calloc_r+0x18>
 80090ec:	9a01      	ldr	r2, [sp, #4]
 80090ee:	2100      	movs	r1, #0
 80090f0:	f7fe f85e 	bl	80071b0 <memset>
 80090f4:	4620      	mov	r0, r4
 80090f6:	b002      	add	sp, #8
 80090f8:	bd10      	pop	{r4, pc}
	...

080090fc <_free_r>:
 80090fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fe:	2900      	cmp	r1, #0
 8009100:	d048      	beq.n	8009194 <_free_r+0x98>
 8009102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009106:	9001      	str	r0, [sp, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f1a1 0404 	sub.w	r4, r1, #4
 800910e:	bfb8      	it	lt
 8009110:	18e4      	addlt	r4, r4, r3
 8009112:	f000 fca7 	bl	8009a64 <__malloc_lock>
 8009116:	4a20      	ldr	r2, [pc, #128]	; (8009198 <_free_r+0x9c>)
 8009118:	9801      	ldr	r0, [sp, #4]
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	4615      	mov	r5, r2
 800911e:	b933      	cbnz	r3, 800912e <_free_r+0x32>
 8009120:	6063      	str	r3, [r4, #4]
 8009122:	6014      	str	r4, [r2, #0]
 8009124:	b003      	add	sp, #12
 8009126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800912a:	f000 bca1 	b.w	8009a70 <__malloc_unlock>
 800912e:	42a3      	cmp	r3, r4
 8009130:	d90b      	bls.n	800914a <_free_r+0x4e>
 8009132:	6821      	ldr	r1, [r4, #0]
 8009134:	1862      	adds	r2, r4, r1
 8009136:	4293      	cmp	r3, r2
 8009138:	bf04      	itt	eq
 800913a:	681a      	ldreq	r2, [r3, #0]
 800913c:	685b      	ldreq	r3, [r3, #4]
 800913e:	6063      	str	r3, [r4, #4]
 8009140:	bf04      	itt	eq
 8009142:	1852      	addeq	r2, r2, r1
 8009144:	6022      	streq	r2, [r4, #0]
 8009146:	602c      	str	r4, [r5, #0]
 8009148:	e7ec      	b.n	8009124 <_free_r+0x28>
 800914a:	461a      	mov	r2, r3
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	b10b      	cbz	r3, 8009154 <_free_r+0x58>
 8009150:	42a3      	cmp	r3, r4
 8009152:	d9fa      	bls.n	800914a <_free_r+0x4e>
 8009154:	6811      	ldr	r1, [r2, #0]
 8009156:	1855      	adds	r5, r2, r1
 8009158:	42a5      	cmp	r5, r4
 800915a:	d10b      	bne.n	8009174 <_free_r+0x78>
 800915c:	6824      	ldr	r4, [r4, #0]
 800915e:	4421      	add	r1, r4
 8009160:	1854      	adds	r4, r2, r1
 8009162:	42a3      	cmp	r3, r4
 8009164:	6011      	str	r1, [r2, #0]
 8009166:	d1dd      	bne.n	8009124 <_free_r+0x28>
 8009168:	681c      	ldr	r4, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	6053      	str	r3, [r2, #4]
 800916e:	4421      	add	r1, r4
 8009170:	6011      	str	r1, [r2, #0]
 8009172:	e7d7      	b.n	8009124 <_free_r+0x28>
 8009174:	d902      	bls.n	800917c <_free_r+0x80>
 8009176:	230c      	movs	r3, #12
 8009178:	6003      	str	r3, [r0, #0]
 800917a:	e7d3      	b.n	8009124 <_free_r+0x28>
 800917c:	6825      	ldr	r5, [r4, #0]
 800917e:	1961      	adds	r1, r4, r5
 8009180:	428b      	cmp	r3, r1
 8009182:	bf04      	itt	eq
 8009184:	6819      	ldreq	r1, [r3, #0]
 8009186:	685b      	ldreq	r3, [r3, #4]
 8009188:	6063      	str	r3, [r4, #4]
 800918a:	bf04      	itt	eq
 800918c:	1949      	addeq	r1, r1, r5
 800918e:	6021      	streq	r1, [r4, #0]
 8009190:	6054      	str	r4, [r2, #4]
 8009192:	e7c7      	b.n	8009124 <_free_r+0x28>
 8009194:	b003      	add	sp, #12
 8009196:	bd30      	pop	{r4, r5, pc}
 8009198:	20000470 	.word	0x20000470

0800919c <_malloc_r>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	1ccd      	adds	r5, r1, #3
 80091a0:	f025 0503 	bic.w	r5, r5, #3
 80091a4:	3508      	adds	r5, #8
 80091a6:	2d0c      	cmp	r5, #12
 80091a8:	bf38      	it	cc
 80091aa:	250c      	movcc	r5, #12
 80091ac:	2d00      	cmp	r5, #0
 80091ae:	4606      	mov	r6, r0
 80091b0:	db01      	blt.n	80091b6 <_malloc_r+0x1a>
 80091b2:	42a9      	cmp	r1, r5
 80091b4:	d903      	bls.n	80091be <_malloc_r+0x22>
 80091b6:	230c      	movs	r3, #12
 80091b8:	6033      	str	r3, [r6, #0]
 80091ba:	2000      	movs	r0, #0
 80091bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091be:	f000 fc51 	bl	8009a64 <__malloc_lock>
 80091c2:	4921      	ldr	r1, [pc, #132]	; (8009248 <_malloc_r+0xac>)
 80091c4:	680a      	ldr	r2, [r1, #0]
 80091c6:	4614      	mov	r4, r2
 80091c8:	b99c      	cbnz	r4, 80091f2 <_malloc_r+0x56>
 80091ca:	4f20      	ldr	r7, [pc, #128]	; (800924c <_malloc_r+0xb0>)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	b923      	cbnz	r3, 80091da <_malloc_r+0x3e>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4630      	mov	r0, r6
 80091d4:	f000 f996 	bl	8009504 <_sbrk_r>
 80091d8:	6038      	str	r0, [r7, #0]
 80091da:	4629      	mov	r1, r5
 80091dc:	4630      	mov	r0, r6
 80091de:	f000 f991 	bl	8009504 <_sbrk_r>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d123      	bne.n	800922e <_malloc_r+0x92>
 80091e6:	230c      	movs	r3, #12
 80091e8:	6033      	str	r3, [r6, #0]
 80091ea:	4630      	mov	r0, r6
 80091ec:	f000 fc40 	bl	8009a70 <__malloc_unlock>
 80091f0:	e7e3      	b.n	80091ba <_malloc_r+0x1e>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	1b5b      	subs	r3, r3, r5
 80091f6:	d417      	bmi.n	8009228 <_malloc_r+0x8c>
 80091f8:	2b0b      	cmp	r3, #11
 80091fa:	d903      	bls.n	8009204 <_malloc_r+0x68>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	441c      	add	r4, r3
 8009200:	6025      	str	r5, [r4, #0]
 8009202:	e004      	b.n	800920e <_malloc_r+0x72>
 8009204:	6863      	ldr	r3, [r4, #4]
 8009206:	42a2      	cmp	r2, r4
 8009208:	bf0c      	ite	eq
 800920a:	600b      	streq	r3, [r1, #0]
 800920c:	6053      	strne	r3, [r2, #4]
 800920e:	4630      	mov	r0, r6
 8009210:	f000 fc2e 	bl	8009a70 <__malloc_unlock>
 8009214:	f104 000b 	add.w	r0, r4, #11
 8009218:	1d23      	adds	r3, r4, #4
 800921a:	f020 0007 	bic.w	r0, r0, #7
 800921e:	1ac2      	subs	r2, r0, r3
 8009220:	d0cc      	beq.n	80091bc <_malloc_r+0x20>
 8009222:	1a1b      	subs	r3, r3, r0
 8009224:	50a3      	str	r3, [r4, r2]
 8009226:	e7c9      	b.n	80091bc <_malloc_r+0x20>
 8009228:	4622      	mov	r2, r4
 800922a:	6864      	ldr	r4, [r4, #4]
 800922c:	e7cc      	b.n	80091c8 <_malloc_r+0x2c>
 800922e:	1cc4      	adds	r4, r0, #3
 8009230:	f024 0403 	bic.w	r4, r4, #3
 8009234:	42a0      	cmp	r0, r4
 8009236:	d0e3      	beq.n	8009200 <_malloc_r+0x64>
 8009238:	1a21      	subs	r1, r4, r0
 800923a:	4630      	mov	r0, r6
 800923c:	f000 f962 	bl	8009504 <_sbrk_r>
 8009240:	3001      	adds	r0, #1
 8009242:	d1dd      	bne.n	8009200 <_malloc_r+0x64>
 8009244:	e7cf      	b.n	80091e6 <_malloc_r+0x4a>
 8009246:	bf00      	nop
 8009248:	20000470 	.word	0x20000470
 800924c:	20000474 	.word	0x20000474

08009250 <__sfputc_r>:
 8009250:	6893      	ldr	r3, [r2, #8]
 8009252:	3b01      	subs	r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	b410      	push	{r4}
 8009258:	6093      	str	r3, [r2, #8]
 800925a:	da08      	bge.n	800926e <__sfputc_r+0x1e>
 800925c:	6994      	ldr	r4, [r2, #24]
 800925e:	42a3      	cmp	r3, r4
 8009260:	db01      	blt.n	8009266 <__sfputc_r+0x16>
 8009262:	290a      	cmp	r1, #10
 8009264:	d103      	bne.n	800926e <__sfputc_r+0x1e>
 8009266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926a:	f000 b99f 	b.w	80095ac <__swbuf_r>
 800926e:	6813      	ldr	r3, [r2, #0]
 8009270:	1c58      	adds	r0, r3, #1
 8009272:	6010      	str	r0, [r2, #0]
 8009274:	7019      	strb	r1, [r3, #0]
 8009276:	4608      	mov	r0, r1
 8009278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927c:	4770      	bx	lr

0800927e <__sfputs_r>:
 800927e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009280:	4606      	mov	r6, r0
 8009282:	460f      	mov	r7, r1
 8009284:	4614      	mov	r4, r2
 8009286:	18d5      	adds	r5, r2, r3
 8009288:	42ac      	cmp	r4, r5
 800928a:	d101      	bne.n	8009290 <__sfputs_r+0x12>
 800928c:	2000      	movs	r0, #0
 800928e:	e007      	b.n	80092a0 <__sfputs_r+0x22>
 8009290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009294:	463a      	mov	r2, r7
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff ffda 	bl	8009250 <__sfputc_r>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d1f3      	bne.n	8009288 <__sfputs_r+0xa>
 80092a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092a4 <_vfiprintf_r>:
 80092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	460d      	mov	r5, r1
 80092aa:	b09d      	sub	sp, #116	; 0x74
 80092ac:	4614      	mov	r4, r2
 80092ae:	4698      	mov	r8, r3
 80092b0:	4606      	mov	r6, r0
 80092b2:	b118      	cbz	r0, 80092bc <_vfiprintf_r+0x18>
 80092b4:	6983      	ldr	r3, [r0, #24]
 80092b6:	b90b      	cbnz	r3, 80092bc <_vfiprintf_r+0x18>
 80092b8:	f7ff fad6 	bl	8008868 <__sinit>
 80092bc:	4b89      	ldr	r3, [pc, #548]	; (80094e4 <_vfiprintf_r+0x240>)
 80092be:	429d      	cmp	r5, r3
 80092c0:	d11b      	bne.n	80092fa <_vfiprintf_r+0x56>
 80092c2:	6875      	ldr	r5, [r6, #4]
 80092c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c6:	07d9      	lsls	r1, r3, #31
 80092c8:	d405      	bmi.n	80092d6 <_vfiprintf_r+0x32>
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	059a      	lsls	r2, r3, #22
 80092ce:	d402      	bmi.n	80092d6 <_vfiprintf_r+0x32>
 80092d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d2:	f7ff fb6c 	bl	80089ae <__retarget_lock_acquire_recursive>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	071b      	lsls	r3, r3, #28
 80092da:	d501      	bpl.n	80092e0 <_vfiprintf_r+0x3c>
 80092dc:	692b      	ldr	r3, [r5, #16]
 80092de:	b9eb      	cbnz	r3, 800931c <_vfiprintf_r+0x78>
 80092e0:	4629      	mov	r1, r5
 80092e2:	4630      	mov	r0, r6
 80092e4:	f000 f9c6 	bl	8009674 <__swsetup_r>
 80092e8:	b1c0      	cbz	r0, 800931c <_vfiprintf_r+0x78>
 80092ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ec:	07dc      	lsls	r4, r3, #31
 80092ee:	d50e      	bpl.n	800930e <_vfiprintf_r+0x6a>
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	b01d      	add	sp, #116	; 0x74
 80092f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fa:	4b7b      	ldr	r3, [pc, #492]	; (80094e8 <_vfiprintf_r+0x244>)
 80092fc:	429d      	cmp	r5, r3
 80092fe:	d101      	bne.n	8009304 <_vfiprintf_r+0x60>
 8009300:	68b5      	ldr	r5, [r6, #8]
 8009302:	e7df      	b.n	80092c4 <_vfiprintf_r+0x20>
 8009304:	4b79      	ldr	r3, [pc, #484]	; (80094ec <_vfiprintf_r+0x248>)
 8009306:	429d      	cmp	r5, r3
 8009308:	bf08      	it	eq
 800930a:	68f5      	ldreq	r5, [r6, #12]
 800930c:	e7da      	b.n	80092c4 <_vfiprintf_r+0x20>
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	0598      	lsls	r0, r3, #22
 8009312:	d4ed      	bmi.n	80092f0 <_vfiprintf_r+0x4c>
 8009314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009316:	f7ff fb4b 	bl	80089b0 <__retarget_lock_release_recursive>
 800931a:	e7e9      	b.n	80092f0 <_vfiprintf_r+0x4c>
 800931c:	2300      	movs	r3, #0
 800931e:	9309      	str	r3, [sp, #36]	; 0x24
 8009320:	2320      	movs	r3, #32
 8009322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009326:	f8cd 800c 	str.w	r8, [sp, #12]
 800932a:	2330      	movs	r3, #48	; 0x30
 800932c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094f0 <_vfiprintf_r+0x24c>
 8009330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009334:	f04f 0901 	mov.w	r9, #1
 8009338:	4623      	mov	r3, r4
 800933a:	469a      	mov	sl, r3
 800933c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009340:	b10a      	cbz	r2, 8009346 <_vfiprintf_r+0xa2>
 8009342:	2a25      	cmp	r2, #37	; 0x25
 8009344:	d1f9      	bne.n	800933a <_vfiprintf_r+0x96>
 8009346:	ebba 0b04 	subs.w	fp, sl, r4
 800934a:	d00b      	beq.n	8009364 <_vfiprintf_r+0xc0>
 800934c:	465b      	mov	r3, fp
 800934e:	4622      	mov	r2, r4
 8009350:	4629      	mov	r1, r5
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ff93 	bl	800927e <__sfputs_r>
 8009358:	3001      	adds	r0, #1
 800935a:	f000 80aa 	beq.w	80094b2 <_vfiprintf_r+0x20e>
 800935e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009360:	445a      	add	r2, fp
 8009362:	9209      	str	r2, [sp, #36]	; 0x24
 8009364:	f89a 3000 	ldrb.w	r3, [sl]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80a2 	beq.w	80094b2 <_vfiprintf_r+0x20e>
 800936e:	2300      	movs	r3, #0
 8009370:	f04f 32ff 	mov.w	r2, #4294967295
 8009374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009378:	f10a 0a01 	add.w	sl, sl, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009384:	931a      	str	r3, [sp, #104]	; 0x68
 8009386:	4654      	mov	r4, sl
 8009388:	2205      	movs	r2, #5
 800938a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938e:	4858      	ldr	r0, [pc, #352]	; (80094f0 <_vfiprintf_r+0x24c>)
 8009390:	f7f6 ff26 	bl	80001e0 <memchr>
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	b9d8      	cbnz	r0, 80093d0 <_vfiprintf_r+0x12c>
 8009398:	06d1      	lsls	r1, r2, #27
 800939a:	bf44      	itt	mi
 800939c:	2320      	movmi	r3, #32
 800939e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a2:	0713      	lsls	r3, r2, #28
 80093a4:	bf44      	itt	mi
 80093a6:	232b      	movmi	r3, #43	; 0x2b
 80093a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ac:	f89a 3000 	ldrb.w	r3, [sl]
 80093b0:	2b2a      	cmp	r3, #42	; 0x2a
 80093b2:	d015      	beq.n	80093e0 <_vfiprintf_r+0x13c>
 80093b4:	9a07      	ldr	r2, [sp, #28]
 80093b6:	4654      	mov	r4, sl
 80093b8:	2000      	movs	r0, #0
 80093ba:	f04f 0c0a 	mov.w	ip, #10
 80093be:	4621      	mov	r1, r4
 80093c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c4:	3b30      	subs	r3, #48	; 0x30
 80093c6:	2b09      	cmp	r3, #9
 80093c8:	d94e      	bls.n	8009468 <_vfiprintf_r+0x1c4>
 80093ca:	b1b0      	cbz	r0, 80093fa <_vfiprintf_r+0x156>
 80093cc:	9207      	str	r2, [sp, #28]
 80093ce:	e014      	b.n	80093fa <_vfiprintf_r+0x156>
 80093d0:	eba0 0308 	sub.w	r3, r0, r8
 80093d4:	fa09 f303 	lsl.w	r3, r9, r3
 80093d8:	4313      	orrs	r3, r2
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	46a2      	mov	sl, r4
 80093de:	e7d2      	b.n	8009386 <_vfiprintf_r+0xe2>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	1d19      	adds	r1, r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	9103      	str	r1, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfbb      	ittet	lt
 80093ec:	425b      	neglt	r3, r3
 80093ee:	f042 0202 	orrlt.w	r2, r2, #2
 80093f2:	9307      	strge	r3, [sp, #28]
 80093f4:	9307      	strlt	r3, [sp, #28]
 80093f6:	bfb8      	it	lt
 80093f8:	9204      	strlt	r2, [sp, #16]
 80093fa:	7823      	ldrb	r3, [r4, #0]
 80093fc:	2b2e      	cmp	r3, #46	; 0x2e
 80093fe:	d10c      	bne.n	800941a <_vfiprintf_r+0x176>
 8009400:	7863      	ldrb	r3, [r4, #1]
 8009402:	2b2a      	cmp	r3, #42	; 0x2a
 8009404:	d135      	bne.n	8009472 <_vfiprintf_r+0x1ce>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	1d1a      	adds	r2, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	9203      	str	r2, [sp, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfb8      	it	lt
 8009412:	f04f 33ff 	movlt.w	r3, #4294967295
 8009416:	3402      	adds	r4, #2
 8009418:	9305      	str	r3, [sp, #20]
 800941a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009500 <_vfiprintf_r+0x25c>
 800941e:	7821      	ldrb	r1, [r4, #0]
 8009420:	2203      	movs	r2, #3
 8009422:	4650      	mov	r0, sl
 8009424:	f7f6 fedc 	bl	80001e0 <memchr>
 8009428:	b140      	cbz	r0, 800943c <_vfiprintf_r+0x198>
 800942a:	2340      	movs	r3, #64	; 0x40
 800942c:	eba0 000a 	sub.w	r0, r0, sl
 8009430:	fa03 f000 	lsl.w	r0, r3, r0
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	4303      	orrs	r3, r0
 8009438:	3401      	adds	r4, #1
 800943a:	9304      	str	r3, [sp, #16]
 800943c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009440:	482c      	ldr	r0, [pc, #176]	; (80094f4 <_vfiprintf_r+0x250>)
 8009442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009446:	2206      	movs	r2, #6
 8009448:	f7f6 feca 	bl	80001e0 <memchr>
 800944c:	2800      	cmp	r0, #0
 800944e:	d03f      	beq.n	80094d0 <_vfiprintf_r+0x22c>
 8009450:	4b29      	ldr	r3, [pc, #164]	; (80094f8 <_vfiprintf_r+0x254>)
 8009452:	bb1b      	cbnz	r3, 800949c <_vfiprintf_r+0x1f8>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	3307      	adds	r3, #7
 8009458:	f023 0307 	bic.w	r3, r3, #7
 800945c:	3308      	adds	r3, #8
 800945e:	9303      	str	r3, [sp, #12]
 8009460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009462:	443b      	add	r3, r7
 8009464:	9309      	str	r3, [sp, #36]	; 0x24
 8009466:	e767      	b.n	8009338 <_vfiprintf_r+0x94>
 8009468:	fb0c 3202 	mla	r2, ip, r2, r3
 800946c:	460c      	mov	r4, r1
 800946e:	2001      	movs	r0, #1
 8009470:	e7a5      	b.n	80093be <_vfiprintf_r+0x11a>
 8009472:	2300      	movs	r3, #0
 8009474:	3401      	adds	r4, #1
 8009476:	9305      	str	r3, [sp, #20]
 8009478:	4619      	mov	r1, r3
 800947a:	f04f 0c0a 	mov.w	ip, #10
 800947e:	4620      	mov	r0, r4
 8009480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009484:	3a30      	subs	r2, #48	; 0x30
 8009486:	2a09      	cmp	r2, #9
 8009488:	d903      	bls.n	8009492 <_vfiprintf_r+0x1ee>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0c5      	beq.n	800941a <_vfiprintf_r+0x176>
 800948e:	9105      	str	r1, [sp, #20]
 8009490:	e7c3      	b.n	800941a <_vfiprintf_r+0x176>
 8009492:	fb0c 2101 	mla	r1, ip, r1, r2
 8009496:	4604      	mov	r4, r0
 8009498:	2301      	movs	r3, #1
 800949a:	e7f0      	b.n	800947e <_vfiprintf_r+0x1da>
 800949c:	ab03      	add	r3, sp, #12
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	462a      	mov	r2, r5
 80094a2:	4b16      	ldr	r3, [pc, #88]	; (80094fc <_vfiprintf_r+0x258>)
 80094a4:	a904      	add	r1, sp, #16
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7fd ff2a 	bl	8007300 <_printf_float>
 80094ac:	4607      	mov	r7, r0
 80094ae:	1c78      	adds	r0, r7, #1
 80094b0:	d1d6      	bne.n	8009460 <_vfiprintf_r+0x1bc>
 80094b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b4:	07d9      	lsls	r1, r3, #31
 80094b6:	d405      	bmi.n	80094c4 <_vfiprintf_r+0x220>
 80094b8:	89ab      	ldrh	r3, [r5, #12]
 80094ba:	059a      	lsls	r2, r3, #22
 80094bc:	d402      	bmi.n	80094c4 <_vfiprintf_r+0x220>
 80094be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094c0:	f7ff fa76 	bl	80089b0 <__retarget_lock_release_recursive>
 80094c4:	89ab      	ldrh	r3, [r5, #12]
 80094c6:	065b      	lsls	r3, r3, #25
 80094c8:	f53f af12 	bmi.w	80092f0 <_vfiprintf_r+0x4c>
 80094cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ce:	e711      	b.n	80092f4 <_vfiprintf_r+0x50>
 80094d0:	ab03      	add	r3, sp, #12
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	462a      	mov	r2, r5
 80094d6:	4b09      	ldr	r3, [pc, #36]	; (80094fc <_vfiprintf_r+0x258>)
 80094d8:	a904      	add	r1, sp, #16
 80094da:	4630      	mov	r0, r6
 80094dc:	f7fe f9b4 	bl	8007848 <_printf_i>
 80094e0:	e7e4      	b.n	80094ac <_vfiprintf_r+0x208>
 80094e2:	bf00      	nop
 80094e4:	08009d08 	.word	0x08009d08
 80094e8:	08009d28 	.word	0x08009d28
 80094ec:	08009ce8 	.word	0x08009ce8
 80094f0:	08009ea4 	.word	0x08009ea4
 80094f4:	08009eae 	.word	0x08009eae
 80094f8:	08007301 	.word	0x08007301
 80094fc:	0800927f 	.word	0x0800927f
 8009500:	08009eaa 	.word	0x08009eaa

08009504 <_sbrk_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d06      	ldr	r5, [pc, #24]	; (8009520 <_sbrk_r+0x1c>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f9 ff80 	bl	8003414 <_sbrk>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_sbrk_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_sbrk_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	20000624 	.word	0x20000624

08009524 <__sread>:
 8009524:	b510      	push	{r4, lr}
 8009526:	460c      	mov	r4, r1
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	f000 faa6 	bl	8009a7c <_read_r>
 8009530:	2800      	cmp	r0, #0
 8009532:	bfab      	itete	ge
 8009534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009536:	89a3      	ldrhlt	r3, [r4, #12]
 8009538:	181b      	addge	r3, r3, r0
 800953a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800953e:	bfac      	ite	ge
 8009540:	6563      	strge	r3, [r4, #84]	; 0x54
 8009542:	81a3      	strhlt	r3, [r4, #12]
 8009544:	bd10      	pop	{r4, pc}

08009546 <__swrite>:
 8009546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	461f      	mov	r7, r3
 800954c:	898b      	ldrh	r3, [r1, #12]
 800954e:	05db      	lsls	r3, r3, #23
 8009550:	4605      	mov	r5, r0
 8009552:	460c      	mov	r4, r1
 8009554:	4616      	mov	r6, r2
 8009556:	d505      	bpl.n	8009564 <__swrite+0x1e>
 8009558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955c:	2302      	movs	r3, #2
 800955e:	2200      	movs	r2, #0
 8009560:	f000 f9f8 	bl	8009954 <_lseek_r>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800956a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	4632      	mov	r2, r6
 8009572:	463b      	mov	r3, r7
 8009574:	4628      	mov	r0, r5
 8009576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	f000 b869 	b.w	8009650 <_write_r>

0800957e <__sseek>:
 800957e:	b510      	push	{r4, lr}
 8009580:	460c      	mov	r4, r1
 8009582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009586:	f000 f9e5 	bl	8009954 <_lseek_r>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	bf15      	itete	ne
 8009590:	6560      	strne	r0, [r4, #84]	; 0x54
 8009592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800959a:	81a3      	strheq	r3, [r4, #12]
 800959c:	bf18      	it	ne
 800959e:	81a3      	strhne	r3, [r4, #12]
 80095a0:	bd10      	pop	{r4, pc}

080095a2 <__sclose>:
 80095a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a6:	f000 b8f1 	b.w	800978c <_close_r>
	...

080095ac <__swbuf_r>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	460e      	mov	r6, r1
 80095b0:	4614      	mov	r4, r2
 80095b2:	4605      	mov	r5, r0
 80095b4:	b118      	cbz	r0, 80095be <__swbuf_r+0x12>
 80095b6:	6983      	ldr	r3, [r0, #24]
 80095b8:	b90b      	cbnz	r3, 80095be <__swbuf_r+0x12>
 80095ba:	f7ff f955 	bl	8008868 <__sinit>
 80095be:	4b21      	ldr	r3, [pc, #132]	; (8009644 <__swbuf_r+0x98>)
 80095c0:	429c      	cmp	r4, r3
 80095c2:	d12b      	bne.n	800961c <__swbuf_r+0x70>
 80095c4:	686c      	ldr	r4, [r5, #4]
 80095c6:	69a3      	ldr	r3, [r4, #24]
 80095c8:	60a3      	str	r3, [r4, #8]
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	071a      	lsls	r2, r3, #28
 80095ce:	d52f      	bpl.n	8009630 <__swbuf_r+0x84>
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	b36b      	cbz	r3, 8009630 <__swbuf_r+0x84>
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	6820      	ldr	r0, [r4, #0]
 80095d8:	1ac0      	subs	r0, r0, r3
 80095da:	6963      	ldr	r3, [r4, #20]
 80095dc:	b2f6      	uxtb	r6, r6
 80095de:	4283      	cmp	r3, r0
 80095e0:	4637      	mov	r7, r6
 80095e2:	dc04      	bgt.n	80095ee <__swbuf_r+0x42>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 f966 	bl	80098b8 <_fflush_r>
 80095ec:	bb30      	cbnz	r0, 800963c <__swbuf_r+0x90>
 80095ee:	68a3      	ldr	r3, [r4, #8]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	60a3      	str	r3, [r4, #8]
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	6022      	str	r2, [r4, #0]
 80095fa:	701e      	strb	r6, [r3, #0]
 80095fc:	6963      	ldr	r3, [r4, #20]
 80095fe:	3001      	adds	r0, #1
 8009600:	4283      	cmp	r3, r0
 8009602:	d004      	beq.n	800960e <__swbuf_r+0x62>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	07db      	lsls	r3, r3, #31
 8009608:	d506      	bpl.n	8009618 <__swbuf_r+0x6c>
 800960a:	2e0a      	cmp	r6, #10
 800960c:	d104      	bne.n	8009618 <__swbuf_r+0x6c>
 800960e:	4621      	mov	r1, r4
 8009610:	4628      	mov	r0, r5
 8009612:	f000 f951 	bl	80098b8 <_fflush_r>
 8009616:	b988      	cbnz	r0, 800963c <__swbuf_r+0x90>
 8009618:	4638      	mov	r0, r7
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961c:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <__swbuf_r+0x9c>)
 800961e:	429c      	cmp	r4, r3
 8009620:	d101      	bne.n	8009626 <__swbuf_r+0x7a>
 8009622:	68ac      	ldr	r4, [r5, #8]
 8009624:	e7cf      	b.n	80095c6 <__swbuf_r+0x1a>
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <__swbuf_r+0xa0>)
 8009628:	429c      	cmp	r4, r3
 800962a:	bf08      	it	eq
 800962c:	68ec      	ldreq	r4, [r5, #12]
 800962e:	e7ca      	b.n	80095c6 <__swbuf_r+0x1a>
 8009630:	4621      	mov	r1, r4
 8009632:	4628      	mov	r0, r5
 8009634:	f000 f81e 	bl	8009674 <__swsetup_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	d0cb      	beq.n	80095d4 <__swbuf_r+0x28>
 800963c:	f04f 37ff 	mov.w	r7, #4294967295
 8009640:	e7ea      	b.n	8009618 <__swbuf_r+0x6c>
 8009642:	bf00      	nop
 8009644:	08009d08 	.word	0x08009d08
 8009648:	08009d28 	.word	0x08009d28
 800964c:	08009ce8 	.word	0x08009ce8

08009650 <_write_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d07      	ldr	r5, [pc, #28]	; (8009670 <_write_r+0x20>)
 8009654:	4604      	mov	r4, r0
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	2200      	movs	r2, #0
 800965c:	602a      	str	r2, [r5, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	f7f9 fe88 	bl	8003374 <_write>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_write_r+0x1e>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	b103      	cbz	r3, 800966e <_write_r+0x1e>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	20000624 	.word	0x20000624

08009674 <__swsetup_r>:
 8009674:	4b32      	ldr	r3, [pc, #200]	; (8009740 <__swsetup_r+0xcc>)
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	681d      	ldr	r5, [r3, #0]
 800967a:	4606      	mov	r6, r0
 800967c:	460c      	mov	r4, r1
 800967e:	b125      	cbz	r5, 800968a <__swsetup_r+0x16>
 8009680:	69ab      	ldr	r3, [r5, #24]
 8009682:	b913      	cbnz	r3, 800968a <__swsetup_r+0x16>
 8009684:	4628      	mov	r0, r5
 8009686:	f7ff f8ef 	bl	8008868 <__sinit>
 800968a:	4b2e      	ldr	r3, [pc, #184]	; (8009744 <__swsetup_r+0xd0>)
 800968c:	429c      	cmp	r4, r3
 800968e:	d10f      	bne.n	80096b0 <__swsetup_r+0x3c>
 8009690:	686c      	ldr	r4, [r5, #4]
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009698:	0719      	lsls	r1, r3, #28
 800969a:	d42c      	bmi.n	80096f6 <__swsetup_r+0x82>
 800969c:	06dd      	lsls	r5, r3, #27
 800969e:	d411      	bmi.n	80096c4 <__swsetup_r+0x50>
 80096a0:	2309      	movs	r3, #9
 80096a2:	6033      	str	r3, [r6, #0]
 80096a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	f04f 30ff 	mov.w	r0, #4294967295
 80096ae:	e03e      	b.n	800972e <__swsetup_r+0xba>
 80096b0:	4b25      	ldr	r3, [pc, #148]	; (8009748 <__swsetup_r+0xd4>)
 80096b2:	429c      	cmp	r4, r3
 80096b4:	d101      	bne.n	80096ba <__swsetup_r+0x46>
 80096b6:	68ac      	ldr	r4, [r5, #8]
 80096b8:	e7eb      	b.n	8009692 <__swsetup_r+0x1e>
 80096ba:	4b24      	ldr	r3, [pc, #144]	; (800974c <__swsetup_r+0xd8>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	bf08      	it	eq
 80096c0:	68ec      	ldreq	r4, [r5, #12]
 80096c2:	e7e6      	b.n	8009692 <__swsetup_r+0x1e>
 80096c4:	0758      	lsls	r0, r3, #29
 80096c6:	d512      	bpl.n	80096ee <__swsetup_r+0x7a>
 80096c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ca:	b141      	cbz	r1, 80096de <__swsetup_r+0x6a>
 80096cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d002      	beq.n	80096da <__swsetup_r+0x66>
 80096d4:	4630      	mov	r0, r6
 80096d6:	f7ff fd11 	bl	80090fc <_free_r>
 80096da:	2300      	movs	r3, #0
 80096dc:	6363      	str	r3, [r4, #52]	; 0x34
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096e4:	81a3      	strh	r3, [r4, #12]
 80096e6:	2300      	movs	r3, #0
 80096e8:	6063      	str	r3, [r4, #4]
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f043 0308 	orr.w	r3, r3, #8
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	b94b      	cbnz	r3, 800970e <__swsetup_r+0x9a>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009704:	d003      	beq.n	800970e <__swsetup_r+0x9a>
 8009706:	4621      	mov	r1, r4
 8009708:	4630      	mov	r0, r6
 800970a:	f000 f959 	bl	80099c0 <__smakebuf_r>
 800970e:	89a0      	ldrh	r0, [r4, #12]
 8009710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009714:	f010 0301 	ands.w	r3, r0, #1
 8009718:	d00a      	beq.n	8009730 <__swsetup_r+0xbc>
 800971a:	2300      	movs	r3, #0
 800971c:	60a3      	str	r3, [r4, #8]
 800971e:	6963      	ldr	r3, [r4, #20]
 8009720:	425b      	negs	r3, r3
 8009722:	61a3      	str	r3, [r4, #24]
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	b943      	cbnz	r3, 800973a <__swsetup_r+0xc6>
 8009728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800972c:	d1ba      	bne.n	80096a4 <__swsetup_r+0x30>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	0781      	lsls	r1, r0, #30
 8009732:	bf58      	it	pl
 8009734:	6963      	ldrpl	r3, [r4, #20]
 8009736:	60a3      	str	r3, [r4, #8]
 8009738:	e7f4      	b.n	8009724 <__swsetup_r+0xb0>
 800973a:	2000      	movs	r0, #0
 800973c:	e7f7      	b.n	800972e <__swsetup_r+0xba>
 800973e:	bf00      	nop
 8009740:	200001c4 	.word	0x200001c4
 8009744:	08009d08 	.word	0x08009d08
 8009748:	08009d28 	.word	0x08009d28
 800974c:	08009ce8 	.word	0x08009ce8

08009750 <__assert_func>:
 8009750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009752:	4614      	mov	r4, r2
 8009754:	461a      	mov	r2, r3
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <__assert_func+0x2c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4605      	mov	r5, r0
 800975c:	68d8      	ldr	r0, [r3, #12]
 800975e:	b14c      	cbz	r4, 8009774 <__assert_func+0x24>
 8009760:	4b07      	ldr	r3, [pc, #28]	; (8009780 <__assert_func+0x30>)
 8009762:	9100      	str	r1, [sp, #0]
 8009764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009768:	4906      	ldr	r1, [pc, #24]	; (8009784 <__assert_func+0x34>)
 800976a:	462b      	mov	r3, r5
 800976c:	f000 f8e0 	bl	8009930 <fiprintf>
 8009770:	f000 f9a3 	bl	8009aba <abort>
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <__assert_func+0x38>)
 8009776:	461c      	mov	r4, r3
 8009778:	e7f3      	b.n	8009762 <__assert_func+0x12>
 800977a:	bf00      	nop
 800977c:	200001c4 	.word	0x200001c4
 8009780:	08009eb5 	.word	0x08009eb5
 8009784:	08009ec2 	.word	0x08009ec2
 8009788:	08009ef0 	.word	0x08009ef0

0800978c <_close_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d06      	ldr	r5, [pc, #24]	; (80097a8 <_close_r+0x1c>)
 8009790:	2300      	movs	r3, #0
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	f7f9 fe08 	bl	80033ac <_close>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_close_r+0x1a>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_close_r+0x1a>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	20000624 	.word	0x20000624

080097ac <__sflush_r>:
 80097ac:	898a      	ldrh	r2, [r1, #12]
 80097ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b2:	4605      	mov	r5, r0
 80097b4:	0710      	lsls	r0, r2, #28
 80097b6:	460c      	mov	r4, r1
 80097b8:	d458      	bmi.n	800986c <__sflush_r+0xc0>
 80097ba:	684b      	ldr	r3, [r1, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dc05      	bgt.n	80097cc <__sflush_r+0x20>
 80097c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dc02      	bgt.n	80097cc <__sflush_r+0x20>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	d0f9      	beq.n	80097c6 <__sflush_r+0x1a>
 80097d2:	2300      	movs	r3, #0
 80097d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097d8:	682f      	ldr	r7, [r5, #0]
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	d032      	beq.n	8009844 <__sflush_r+0x98>
 80097de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	075a      	lsls	r2, r3, #29
 80097e4:	d505      	bpl.n	80097f2 <__sflush_r+0x46>
 80097e6:	6863      	ldr	r3, [r4, #4]
 80097e8:	1ac0      	subs	r0, r0, r3
 80097ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ec:	b10b      	cbz	r3, 80097f2 <__sflush_r+0x46>
 80097ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097f0:	1ac0      	subs	r0, r0, r3
 80097f2:	2300      	movs	r3, #0
 80097f4:	4602      	mov	r2, r0
 80097f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097f8:	6a21      	ldr	r1, [r4, #32]
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b0      	blx	r6
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	d106      	bne.n	8009812 <__sflush_r+0x66>
 8009804:	6829      	ldr	r1, [r5, #0]
 8009806:	291d      	cmp	r1, #29
 8009808:	d82c      	bhi.n	8009864 <__sflush_r+0xb8>
 800980a:	4a2a      	ldr	r2, [pc, #168]	; (80098b4 <__sflush_r+0x108>)
 800980c:	40ca      	lsrs	r2, r1
 800980e:	07d6      	lsls	r6, r2, #31
 8009810:	d528      	bpl.n	8009864 <__sflush_r+0xb8>
 8009812:	2200      	movs	r2, #0
 8009814:	6062      	str	r2, [r4, #4]
 8009816:	04d9      	lsls	r1, r3, #19
 8009818:	6922      	ldr	r2, [r4, #16]
 800981a:	6022      	str	r2, [r4, #0]
 800981c:	d504      	bpl.n	8009828 <__sflush_r+0x7c>
 800981e:	1c42      	adds	r2, r0, #1
 8009820:	d101      	bne.n	8009826 <__sflush_r+0x7a>
 8009822:	682b      	ldr	r3, [r5, #0]
 8009824:	b903      	cbnz	r3, 8009828 <__sflush_r+0x7c>
 8009826:	6560      	str	r0, [r4, #84]	; 0x54
 8009828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800982a:	602f      	str	r7, [r5, #0]
 800982c:	2900      	cmp	r1, #0
 800982e:	d0ca      	beq.n	80097c6 <__sflush_r+0x1a>
 8009830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009834:	4299      	cmp	r1, r3
 8009836:	d002      	beq.n	800983e <__sflush_r+0x92>
 8009838:	4628      	mov	r0, r5
 800983a:	f7ff fc5f 	bl	80090fc <_free_r>
 800983e:	2000      	movs	r0, #0
 8009840:	6360      	str	r0, [r4, #52]	; 0x34
 8009842:	e7c1      	b.n	80097c8 <__sflush_r+0x1c>
 8009844:	6a21      	ldr	r1, [r4, #32]
 8009846:	2301      	movs	r3, #1
 8009848:	4628      	mov	r0, r5
 800984a:	47b0      	blx	r6
 800984c:	1c41      	adds	r1, r0, #1
 800984e:	d1c7      	bne.n	80097e0 <__sflush_r+0x34>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0c4      	beq.n	80097e0 <__sflush_r+0x34>
 8009856:	2b1d      	cmp	r3, #29
 8009858:	d001      	beq.n	800985e <__sflush_r+0xb2>
 800985a:	2b16      	cmp	r3, #22
 800985c:	d101      	bne.n	8009862 <__sflush_r+0xb6>
 800985e:	602f      	str	r7, [r5, #0]
 8009860:	e7b1      	b.n	80097c6 <__sflush_r+0x1a>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	e7ad      	b.n	80097c8 <__sflush_r+0x1c>
 800986c:	690f      	ldr	r7, [r1, #16]
 800986e:	2f00      	cmp	r7, #0
 8009870:	d0a9      	beq.n	80097c6 <__sflush_r+0x1a>
 8009872:	0793      	lsls	r3, r2, #30
 8009874:	680e      	ldr	r6, [r1, #0]
 8009876:	bf08      	it	eq
 8009878:	694b      	ldreq	r3, [r1, #20]
 800987a:	600f      	str	r7, [r1, #0]
 800987c:	bf18      	it	ne
 800987e:	2300      	movne	r3, #0
 8009880:	eba6 0807 	sub.w	r8, r6, r7
 8009884:	608b      	str	r3, [r1, #8]
 8009886:	f1b8 0f00 	cmp.w	r8, #0
 800988a:	dd9c      	ble.n	80097c6 <__sflush_r+0x1a>
 800988c:	6a21      	ldr	r1, [r4, #32]
 800988e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009890:	4643      	mov	r3, r8
 8009892:	463a      	mov	r2, r7
 8009894:	4628      	mov	r0, r5
 8009896:	47b0      	blx	r6
 8009898:	2800      	cmp	r0, #0
 800989a:	dc06      	bgt.n	80098aa <__sflush_r+0xfe>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	e78e      	b.n	80097c8 <__sflush_r+0x1c>
 80098aa:	4407      	add	r7, r0
 80098ac:	eba8 0800 	sub.w	r8, r8, r0
 80098b0:	e7e9      	b.n	8009886 <__sflush_r+0xda>
 80098b2:	bf00      	nop
 80098b4:	20400001 	.word	0x20400001

080098b8 <_fflush_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	690b      	ldr	r3, [r1, #16]
 80098bc:	4605      	mov	r5, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	b913      	cbnz	r3, 80098c8 <_fflush_r+0x10>
 80098c2:	2500      	movs	r5, #0
 80098c4:	4628      	mov	r0, r5
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	b118      	cbz	r0, 80098d2 <_fflush_r+0x1a>
 80098ca:	6983      	ldr	r3, [r0, #24]
 80098cc:	b90b      	cbnz	r3, 80098d2 <_fflush_r+0x1a>
 80098ce:	f7fe ffcb 	bl	8008868 <__sinit>
 80098d2:	4b14      	ldr	r3, [pc, #80]	; (8009924 <_fflush_r+0x6c>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	d11b      	bne.n	8009910 <_fflush_r+0x58>
 80098d8:	686c      	ldr	r4, [r5, #4]
 80098da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0ef      	beq.n	80098c2 <_fflush_r+0xa>
 80098e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098e4:	07d0      	lsls	r0, r2, #31
 80098e6:	d404      	bmi.n	80098f2 <_fflush_r+0x3a>
 80098e8:	0599      	lsls	r1, r3, #22
 80098ea:	d402      	bmi.n	80098f2 <_fflush_r+0x3a>
 80098ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ee:	f7ff f85e 	bl	80089ae <__retarget_lock_acquire_recursive>
 80098f2:	4628      	mov	r0, r5
 80098f4:	4621      	mov	r1, r4
 80098f6:	f7ff ff59 	bl	80097ac <__sflush_r>
 80098fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098fc:	07da      	lsls	r2, r3, #31
 80098fe:	4605      	mov	r5, r0
 8009900:	d4e0      	bmi.n	80098c4 <_fflush_r+0xc>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	059b      	lsls	r3, r3, #22
 8009906:	d4dd      	bmi.n	80098c4 <_fflush_r+0xc>
 8009908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800990a:	f7ff f851 	bl	80089b0 <__retarget_lock_release_recursive>
 800990e:	e7d9      	b.n	80098c4 <_fflush_r+0xc>
 8009910:	4b05      	ldr	r3, [pc, #20]	; (8009928 <_fflush_r+0x70>)
 8009912:	429c      	cmp	r4, r3
 8009914:	d101      	bne.n	800991a <_fflush_r+0x62>
 8009916:	68ac      	ldr	r4, [r5, #8]
 8009918:	e7df      	b.n	80098da <_fflush_r+0x22>
 800991a:	4b04      	ldr	r3, [pc, #16]	; (800992c <_fflush_r+0x74>)
 800991c:	429c      	cmp	r4, r3
 800991e:	bf08      	it	eq
 8009920:	68ec      	ldreq	r4, [r5, #12]
 8009922:	e7da      	b.n	80098da <_fflush_r+0x22>
 8009924:	08009d08 	.word	0x08009d08
 8009928:	08009d28 	.word	0x08009d28
 800992c:	08009ce8 	.word	0x08009ce8

08009930 <fiprintf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	b503      	push	{r0, r1, lr}
 8009934:	4601      	mov	r1, r0
 8009936:	ab03      	add	r3, sp, #12
 8009938:	4805      	ldr	r0, [pc, #20]	; (8009950 <fiprintf+0x20>)
 800993a:	f853 2b04 	ldr.w	r2, [r3], #4
 800993e:	6800      	ldr	r0, [r0, #0]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	f7ff fcaf 	bl	80092a4 <_vfiprintf_r>
 8009946:	b002      	add	sp, #8
 8009948:	f85d eb04 	ldr.w	lr, [sp], #4
 800994c:	b003      	add	sp, #12
 800994e:	4770      	bx	lr
 8009950:	200001c4 	.word	0x200001c4

08009954 <_lseek_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d07      	ldr	r5, [pc, #28]	; (8009974 <_lseek_r+0x20>)
 8009958:	4604      	mov	r4, r0
 800995a:	4608      	mov	r0, r1
 800995c:	4611      	mov	r1, r2
 800995e:	2200      	movs	r2, #0
 8009960:	602a      	str	r2, [r5, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	f7f9 fd49 	bl	80033fa <_lseek>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d102      	bne.n	8009972 <_lseek_r+0x1e>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	b103      	cbz	r3, 8009972 <_lseek_r+0x1e>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	bd38      	pop	{r3, r4, r5, pc}
 8009974:	20000624 	.word	0x20000624

08009978 <__swhatbuf_r>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	460e      	mov	r6, r1
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	2900      	cmp	r1, #0
 8009982:	b096      	sub	sp, #88	; 0x58
 8009984:	4614      	mov	r4, r2
 8009986:	461d      	mov	r5, r3
 8009988:	da07      	bge.n	800999a <__swhatbuf_r+0x22>
 800998a:	2300      	movs	r3, #0
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	89b3      	ldrh	r3, [r6, #12]
 8009990:	061a      	lsls	r2, r3, #24
 8009992:	d410      	bmi.n	80099b6 <__swhatbuf_r+0x3e>
 8009994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009998:	e00e      	b.n	80099b8 <__swhatbuf_r+0x40>
 800999a:	466a      	mov	r2, sp
 800999c:	f000 f894 	bl	8009ac8 <_fstat_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	dbf2      	blt.n	800998a <__swhatbuf_r+0x12>
 80099a4:	9a01      	ldr	r2, [sp, #4]
 80099a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099ae:	425a      	negs	r2, r3
 80099b0:	415a      	adcs	r2, r3
 80099b2:	602a      	str	r2, [r5, #0]
 80099b4:	e7ee      	b.n	8009994 <__swhatbuf_r+0x1c>
 80099b6:	2340      	movs	r3, #64	; 0x40
 80099b8:	2000      	movs	r0, #0
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	b016      	add	sp, #88	; 0x58
 80099be:	bd70      	pop	{r4, r5, r6, pc}

080099c0 <__smakebuf_r>:
 80099c0:	898b      	ldrh	r3, [r1, #12]
 80099c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c4:	079d      	lsls	r5, r3, #30
 80099c6:	4606      	mov	r6, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	d507      	bpl.n	80099dc <__smakebuf_r+0x1c>
 80099cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	6123      	str	r3, [r4, #16]
 80099d4:	2301      	movs	r3, #1
 80099d6:	6163      	str	r3, [r4, #20]
 80099d8:	b002      	add	sp, #8
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	ab01      	add	r3, sp, #4
 80099de:	466a      	mov	r2, sp
 80099e0:	f7ff ffca 	bl	8009978 <__swhatbuf_r>
 80099e4:	9900      	ldr	r1, [sp, #0]
 80099e6:	4605      	mov	r5, r0
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7ff fbd7 	bl	800919c <_malloc_r>
 80099ee:	b948      	cbnz	r0, 8009a04 <__smakebuf_r+0x44>
 80099f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f4:	059a      	lsls	r2, r3, #22
 80099f6:	d4ef      	bmi.n	80099d8 <__smakebuf_r+0x18>
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	f043 0302 	orr.w	r3, r3, #2
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	e7e3      	b.n	80099cc <__smakebuf_r+0xc>
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <__smakebuf_r+0x7c>)
 8009a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	6020      	str	r0, [r4, #0]
 8009a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a10:	81a3      	strh	r3, [r4, #12]
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	6163      	str	r3, [r4, #20]
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	6120      	str	r0, [r4, #16]
 8009a1a:	b15b      	cbz	r3, 8009a34 <__smakebuf_r+0x74>
 8009a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a20:	4630      	mov	r0, r6
 8009a22:	f000 f863 	bl	8009aec <_isatty_r>
 8009a26:	b128      	cbz	r0, 8009a34 <__smakebuf_r+0x74>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	89a0      	ldrh	r0, [r4, #12]
 8009a36:	4305      	orrs	r5, r0
 8009a38:	81a5      	strh	r5, [r4, #12]
 8009a3a:	e7cd      	b.n	80099d8 <__smakebuf_r+0x18>
 8009a3c:	08008801 	.word	0x08008801

08009a40 <__ascii_mbtowc>:
 8009a40:	b082      	sub	sp, #8
 8009a42:	b901      	cbnz	r1, 8009a46 <__ascii_mbtowc+0x6>
 8009a44:	a901      	add	r1, sp, #4
 8009a46:	b142      	cbz	r2, 8009a5a <__ascii_mbtowc+0x1a>
 8009a48:	b14b      	cbz	r3, 8009a5e <__ascii_mbtowc+0x1e>
 8009a4a:	7813      	ldrb	r3, [r2, #0]
 8009a4c:	600b      	str	r3, [r1, #0]
 8009a4e:	7812      	ldrb	r2, [r2, #0]
 8009a50:	1e10      	subs	r0, r2, #0
 8009a52:	bf18      	it	ne
 8009a54:	2001      	movne	r0, #1
 8009a56:	b002      	add	sp, #8
 8009a58:	4770      	bx	lr
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	e7fb      	b.n	8009a56 <__ascii_mbtowc+0x16>
 8009a5e:	f06f 0001 	mvn.w	r0, #1
 8009a62:	e7f8      	b.n	8009a56 <__ascii_mbtowc+0x16>

08009a64 <__malloc_lock>:
 8009a64:	4801      	ldr	r0, [pc, #4]	; (8009a6c <__malloc_lock+0x8>)
 8009a66:	f7fe bfa2 	b.w	80089ae <__retarget_lock_acquire_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	2000061c 	.word	0x2000061c

08009a70 <__malloc_unlock>:
 8009a70:	4801      	ldr	r0, [pc, #4]	; (8009a78 <__malloc_unlock+0x8>)
 8009a72:	f7fe bf9d 	b.w	80089b0 <__retarget_lock_release_recursive>
 8009a76:	bf00      	nop
 8009a78:	2000061c 	.word	0x2000061c

08009a7c <_read_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_read_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f9 fc55 	bl	800333a <_read>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_read_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_read_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20000624 	.word	0x20000624

08009aa0 <__ascii_wctomb>:
 8009aa0:	b149      	cbz	r1, 8009ab6 <__ascii_wctomb+0x16>
 8009aa2:	2aff      	cmp	r2, #255	; 0xff
 8009aa4:	bf85      	ittet	hi
 8009aa6:	238a      	movhi	r3, #138	; 0x8a
 8009aa8:	6003      	strhi	r3, [r0, #0]
 8009aaa:	700a      	strbls	r2, [r1, #0]
 8009aac:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ab0:	bf98      	it	ls
 8009ab2:	2001      	movls	r0, #1
 8009ab4:	4770      	bx	lr
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4770      	bx	lr

08009aba <abort>:
 8009aba:	b508      	push	{r3, lr}
 8009abc:	2006      	movs	r0, #6
 8009abe:	f000 f84d 	bl	8009b5c <raise>
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f7f9 fc2f 	bl	8003326 <_exit>

08009ac8 <_fstat_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d07      	ldr	r5, [pc, #28]	; (8009ae8 <_fstat_r+0x20>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f7f9 fc75 	bl	80033c4 <_fstat>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d102      	bne.n	8009ae4 <_fstat_r+0x1c>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	b103      	cbz	r3, 8009ae4 <_fstat_r+0x1c>
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20000624 	.word	0x20000624

08009aec <_isatty_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	; (8009b08 <_isatty_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f9 fc74 	bl	80033e4 <_isatty>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_isatty_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_isatty_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20000624 	.word	0x20000624

08009b0c <_raise_r>:
 8009b0c:	291f      	cmp	r1, #31
 8009b0e:	b538      	push	{r3, r4, r5, lr}
 8009b10:	4604      	mov	r4, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	d904      	bls.n	8009b20 <_raise_r+0x14>
 8009b16:	2316      	movs	r3, #22
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b22:	b112      	cbz	r2, 8009b2a <_raise_r+0x1e>
 8009b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b28:	b94b      	cbnz	r3, 8009b3e <_raise_r+0x32>
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 f830 	bl	8009b90 <_getpid_r>
 8009b30:	462a      	mov	r2, r5
 8009b32:	4601      	mov	r1, r0
 8009b34:	4620      	mov	r0, r4
 8009b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b3a:	f000 b817 	b.w	8009b6c <_kill_r>
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d00a      	beq.n	8009b58 <_raise_r+0x4c>
 8009b42:	1c59      	adds	r1, r3, #1
 8009b44:	d103      	bne.n	8009b4e <_raise_r+0x42>
 8009b46:	2316      	movs	r3, #22
 8009b48:	6003      	str	r3, [r0, #0]
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	e7e7      	b.n	8009b1e <_raise_r+0x12>
 8009b4e:	2400      	movs	r4, #0
 8009b50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b54:	4628      	mov	r0, r5
 8009b56:	4798      	blx	r3
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e7e0      	b.n	8009b1e <_raise_r+0x12>

08009b5c <raise>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	; (8009b68 <raise+0xc>)
 8009b5e:	4601      	mov	r1, r0
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	f7ff bfd3 	b.w	8009b0c <_raise_r>
 8009b66:	bf00      	nop
 8009b68:	200001c4 	.word	0x200001c4

08009b6c <_kill_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	; (8009b8c <_kill_r+0x20>)
 8009b70:	2300      	movs	r3, #0
 8009b72:	4604      	mov	r4, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	4611      	mov	r1, r2
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f7f9 fbc4 	bl	8003306 <_kill>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d102      	bne.n	8009b88 <_kill_r+0x1c>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b103      	cbz	r3, 8009b88 <_kill_r+0x1c>
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000624 	.word	0x20000624

08009b90 <_getpid_r>:
 8009b90:	f7f9 bbb1 	b.w	80032f6 <_getpid>

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
